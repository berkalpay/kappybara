<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 598bb93</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="17333"><g><title>n_embeddings (kappybara/rule.py:170) (21 samples, 0.12%)</title><rect x="0.1500%" y="180" width="0.1212%" height="15" fill="rgb(227,0,7)" fg:x="26" fg:w="21"/><text x="0.4000%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (86 samples, 0.50%)</title><rect x="0.0404%" y="84" width="0.4962%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="86"/><text x="0.2904%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (86 samples, 0.50%)</title><rect x="0.0404%" y="100" width="0.4962%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="86"/><text x="0.2904%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (84 samples, 0.48%)</title><rect x="0.0519%" y="116" width="0.4846%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="84"/><text x="0.3019%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (82 samples, 0.47%)</title><rect x="0.0635%" y="132" width="0.4731%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="82"/><text x="0.3135%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (80 samples, 0.46%)</title><rect x="0.0750%" y="148" width="0.4615%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="80"/><text x="0.3250%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (76 samples, 0.44%)</title><rect x="0.0981%" y="164" width="0.4385%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="76"/><text x="0.3481%" y="174.50"></text></g><g><title>select (kappybara/rule.py:252) (36 samples, 0.21%)</title><rect x="0.8250%" y="116" width="0.2077%" height="15" fill="rgb(228,23,34)" fg:x="143" fg:w="36"/><text x="1.0750%" y="126.50"></text></g><g><title>_produce_update (kappybara/rule.py:148) (18 samples, 0.10%)</title><rect x="0.9289%" y="132" width="0.1038%" height="15" fill="rgb(218,30,26)" fg:x="161" fg:w="18"/><text x="1.1789%" y="142.50"></text></g><g><title>act (kappybara/system.py:63) (75 samples, 0.43%)</title><rect x="0.6404%" y="100" width="0.4327%" height="15" fill="rgb(220,122,19)" fg:x="111" fg:w="75"/><text x="0.8904%" y="110.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (18 samples, 0.10%)</title><rect x="1.2404%" y="148" width="0.1038%" height="15" fill="rgb(250,228,42)" fg:x="215" fg:w="18"/><text x="1.4904%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (46 samples, 0.27%)</title><rect x="1.6096%" y="180" width="0.2654%" height="15" fill="rgb(240,193,28)" fg:x="279" fg:w="46"/><text x="1.8596%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (30 samples, 0.17%)</title><rect x="1.7020%" y="196" width="0.1731%" height="15" fill="rgb(216,20,37)" fg:x="295" fg:w="30"/><text x="1.9520%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (145 samples, 0.84%)</title><rect x="1.1019%" y="132" width="0.8366%" height="15" fill="rgb(206,188,39)" fg:x="191" fg:w="145"/><text x="1.3519%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (86 samples, 0.50%)</title><rect x="1.4423%" y="148" width="0.4962%" height="15" fill="rgb(217,207,13)" fg:x="250" fg:w="86"/><text x="1.6923%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (79 samples, 0.46%)</title><rect x="1.4827%" y="164" width="0.4558%" height="15" fill="rgb(231,73,38)" fg:x="257" fg:w="79"/><text x="1.7327%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (37 samples, 0.21%)</title><rect x="1.9385%" y="132" width="0.2135%" height="15" fill="rgb(225,20,46)" fg:x="336" fg:w="37"/><text x="2.1885%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (23 samples, 0.13%)</title><rect x="2.0193%" y="148" width="0.1327%" height="15" fill="rgb(210,31,41)" fg:x="350" fg:w="23"/><text x="2.2693%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (35 samples, 0.20%)</title><rect x="3.2770%" y="148" width="0.2019%" height="15" fill="rgb(221,200,47)" fg:x="568" fg:w="35"/><text x="3.5270%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (40 samples, 0.23%)</title><rect x="5.4001%" y="164" width="0.2308%" height="15" fill="rgb(226,26,5)" fg:x="936" fg:w="40"/><text x="5.6501%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (656 samples, 3.78%)</title><rect x="2.1808%" y="132" width="3.7847%" height="15" fill="rgb(249,33,26)" fg:x="378" fg:w="656"/><text x="2.4308%" y="142.50">_rem..</text></g><g><title>__eq__ (kappybara/utils.py:33) (431 samples, 2.49%)</title><rect x="3.4789%" y="148" width="2.4866%" height="15" fill="rgb(235,183,28)" fg:x="603" fg:w="431"/><text x="3.7289%" y="158.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (58 samples, 0.33%)</title><rect x="5.6309%" y="164" width="0.3346%" height="15" fill="rgb(221,5,38)" fg:x="976" fg:w="58"/><text x="5.8809%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (863 samples, 4.98%)</title><rect x="1.0789%" y="116" width="4.9789%" height="15" fill="rgb(247,18,42)" fg:x="187" fg:w="863"/><text x="1.3289%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:256) (97 samples, 0.56%)</title><rect x="6.6867%" y="148" width="0.5596%" height="15" fill="rgb(241,131,45)" fg:x="1159" fg:w="97"/><text x="6.9367%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (38 samples, 0.22%)</title><rect x="11.6541%" y="164" width="0.2192%" height="15" fill="rgb(249,31,29)" fg:x="2020" fg:w="38"/><text x="11.9041%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (853 samples, 4.92%)</title><rect x="7.2463%" y="148" width="4.9212%" height="15" fill="rgb(225,111,53)" fg:x="1256" fg:w="853"/><text x="7.4963%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (51 samples, 0.29%)</title><rect x="11.8733%" y="164" width="0.2942%" height="15" fill="rgb(238,160,17)" fg:x="2058" fg:w="51"/><text x="12.1233%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (38 samples, 0.22%)</title><rect x="15.1907%" y="164" width="0.2192%" height="15" fill="rgb(214,148,48)" fg:x="2633" fg:w="38"/><text x="15.4407%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (605 samples, 3.49%)</title><rect x="12.1675%" y="148" width="3.4905%" height="15" fill="rgb(232,36,49)" fg:x="2109" fg:w="605"/><text x="12.4175%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.25%)</title><rect x="15.4099%" y="164" width="0.2481%" height="15" fill="rgb(209,103,24)" fg:x="2671" fg:w="43"/><text x="15.6599%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (186 samples, 1.07%)</title><rect x="15.6811%" y="148" width="1.0731%" height="15" fill="rgb(229,88,8)" fg:x="2718" fg:w="186"/><text x="15.9311%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (121 samples, 0.70%)</title><rect x="16.7542%" y="148" width="0.6981%" height="15" fill="rgb(213,181,19)" fg:x="2904" fg:w="121"/><text x="17.0042%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (40 samples, 0.23%)</title><rect x="19.8869%" y="164" width="0.2308%" height="15" fill="rgb(254,191,54)" fg:x="3447" fg:w="40"/><text x="20.1369%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (505 samples, 2.91%)</title><rect x="17.4523%" y="148" width="2.9135%" height="15" fill="rgb(241,83,37)" fg:x="3025" fg:w="505"/><text x="17.7023%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.25%)</title><rect x="20.1177%" y="164" width="0.2481%" height="15" fill="rgb(233,36,39)" fg:x="3487" fg:w="43"/><text x="20.3677%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (495 samples, 2.86%)</title><rect x="20.3658%" y="148" width="2.8558%" height="15" fill="rgb(226,3,54)" fg:x="3530" fg:w="495"/><text x="20.6158%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (42 samples, 0.24%)</title><rect x="25.5178%" y="164" width="0.2423%" height="15" fill="rgb(245,192,40)" fg:x="4423" fg:w="42"/><text x="25.7678%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (163 samples, 0.94%)</title><rect x="25.7601%" y="164" width="0.9404%" height="15" fill="rgb(238,167,29)" fg:x="4465" fg:w="163"/><text x="26.0101%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (238 samples, 1.37%)</title><rect x="28.9679%" y="180" width="1.3731%" height="15" fill="rgb(232,182,51)" fg:x="5021" fg:w="238"/><text x="29.2179%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (176 samples, 1.02%)</title><rect x="32.3199%" y="196" width="1.0154%" height="15" fill="rgb(231,60,39)" fg:x="5602" fg:w="176"/><text x="32.5699%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,826 samples, 10.53%)</title><rect x="26.7351%" y="164" width="10.5348%" height="15" fill="rgb(208,69,12)" fg:x="4634" fg:w="1826"/><text x="26.9851%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (1,201 samples, 6.93%)</title><rect x="30.3410%" y="180" width="6.9290%" height="15" fill="rgb(235,93,37)" fg:x="5259" fg:w="1201"/><text x="30.5910%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (682 samples, 3.93%)</title><rect x="33.3353%" y="196" width="3.9347%" height="15" fill="rgb(213,116,39)" fg:x="5778" fg:w="682"/><text x="33.5853%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (221 samples, 1.28%)</title><rect x="37.2699%" y="164" width="1.2750%" height="15" fill="rgb(222,207,29)" fg:x="6460" fg:w="221"/><text x="37.5199%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (147 samples, 0.85%)</title><rect x="39.5892%" y="180" width="0.8481%" height="15" fill="rgb(206,96,30)" fg:x="6862" fg:w="147"/><text x="39.8392%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (350 samples, 2.02%)</title><rect x="38.5854%" y="164" width="2.0193%" height="15" fill="rgb(218,138,4)" fg:x="6688" fg:w="350"/><text x="38.8354%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (29 samples, 0.17%)</title><rect x="40.4373%" y="180" width="0.1673%" height="15" fill="rgb(250,191,14)" fg:x="7009" fg:w="29"/><text x="40.6873%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (362 samples, 2.09%)</title><rect x="50.0663%" y="180" width="2.0885%" height="15" fill="rgb(239,60,40)" fg:x="8678" fg:w="362"/><text x="50.3163%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (25 samples, 0.14%)</title><rect x="52.1548%" y="180" width="0.1442%" height="15" fill="rgb(206,27,48)" fg:x="9040" fg:w="25"/><text x="52.4048%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (20 samples, 0.12%)</title><rect x="52.9279%" y="196" width="0.1154%" height="15" fill="rgb(225,35,8)" fg:x="9174" fg:w="20"/><text x="53.1779%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (337 samples, 1.94%)</title><rect x="52.2991%" y="180" width="1.9443%" height="15" fill="rgb(250,213,24)" fg:x="9065" fg:w="337"/><text x="52.5491%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (208 samples, 1.20%)</title><rect x="53.0433%" y="196" width="1.2000%" height="15" fill="rgb(247,123,22)" fg:x="9194" fg:w="208"/><text x="53.2933%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (47 samples, 0.27%)</title><rect x="55.4953%" y="196" width="0.2712%" height="15" fill="rgb(231,138,38)" fg:x="9619" fg:w="47"/><text x="55.7453%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (33 samples, 0.19%)</title><rect x="57.9300%" y="212" width="0.1904%" height="15" fill="rgb(231,145,46)" fg:x="10041" fg:w="33"/><text x="58.1800%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (844 samples, 4.87%)</title><rect x="55.7665%" y="196" width="4.8693%" height="15" fill="rgb(251,118,11)" fg:x="9666" fg:w="844"/><text x="56.0165%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (436 samples, 2.52%)</title><rect x="58.1203%" y="212" width="2.5154%" height="15" fill="rgb(217,147,25)" fg:x="10074" fg:w="436"/><text x="58.3703%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (64 samples, 0.37%)</title><rect x="60.2665%" y="228" width="0.3692%" height="15" fill="rgb(247,81,37)" fg:x="10446" fg:w="64"/><text x="60.5165%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (440 samples, 2.54%)</title><rect x="60.6358%" y="196" width="2.5385%" height="15" fill="rgb(209,12,38)" fg:x="10510" fg:w="440"/><text x="60.8858%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (206 samples, 1.19%)</title><rect x="63.1743%" y="196" width="1.1885%" height="15" fill="rgb(227,1,9)" fg:x="10950" fg:w="206"/><text x="63.4243%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (21 samples, 0.12%)</title><rect x="64.3628%" y="196" width="0.1212%" height="15" fill="rgb(248,47,43)" fg:x="11156" fg:w="21"/><text x="64.6128%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,827 samples, 10.54%)</title><rect x="54.2434%" y="180" width="10.5406%" height="15" fill="rgb(221,10,30)" fg:x="9402" fg:w="1827"/><text x="54.4934%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (52 samples, 0.30%)</title><rect x="64.4839%" y="196" width="0.3000%" height="15" fill="rgb(210,229,1)" fg:x="11177" fg:w="52"/><text x="64.7339%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (30 samples, 0.17%)</title><rect x="64.8243%" y="180" width="0.1731%" height="15" fill="rgb(222,148,37)" fg:x="11236" fg:w="30"/><text x="65.0743%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (25 samples, 0.14%)</title><rect x="65.7993%" y="196" width="0.1442%" height="15" fill="rgb(234,67,33)" fg:x="11405" fg:w="25"/><text x="66.0493%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (418 samples, 2.41%)</title><rect x="64.9974%" y="180" width="2.4116%" height="15" fill="rgb(247,98,35)" fg:x="11266" fg:w="418"/><text x="65.2474%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (254 samples, 1.47%)</title><rect x="65.9436%" y="196" width="1.4654%" height="15" fill="rgb(247,138,52)" fg:x="11430" fg:w="254"/><text x="66.1936%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.16%)</title><rect x="67.2532%" y="212" width="0.1558%" height="15" fill="rgb(213,79,30)" fg:x="11657" fg:w="27"/><text x="67.5032%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (578 samples, 3.33%)</title><rect x="67.4090%" y="180" width="3.3347%" height="15" fill="rgb(246,177,23)" fg:x="11684" fg:w="578"/><text x="67.6590%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (360 samples, 2.08%)</title><rect x="68.6667%" y="196" width="2.0770%" height="15" fill="rgb(230,62,27)" fg:x="11902" fg:w="360"/><text x="68.9167%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (53 samples, 0.31%)</title><rect x="70.4379%" y="212" width="0.3058%" height="15" fill="rgb(216,154,8)" fg:x="12209" fg:w="53"/><text x="70.6879%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (145 samples, 0.84%)</title><rect x="70.7437%" y="180" width="0.8366%" height="15" fill="rgb(244,35,45)" fg:x="12262" fg:w="145"/><text x="70.9937%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (236 samples, 1.36%)</title><rect x="71.5975%" y="180" width="1.3616%" height="15" fill="rgb(251,115,12)" fg:x="12410" fg:w="236"/><text x="71.8475%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (154 samples, 0.89%)</title><rect x="72.9591%" y="180" width="0.8885%" height="15" fill="rgb(240,54,50)" fg:x="12646" fg:w="154"/><text x="73.2091%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (50 samples, 0.29%)</title><rect x="73.8476%" y="180" width="0.2885%" height="15" fill="rgb(233,84,52)" fg:x="12800" fg:w="50"/><text x="74.0976%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (6,328 samples, 36.51%)</title><rect x="40.6046%" y="164" width="36.5084%" height="15" fill="rgb(207,117,47)" fg:x="7038" fg:w="6328"/><text x="40.8546%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (516 samples, 2.98%)</title><rect x="74.1360%" y="180" width="2.9770%" height="15" fill="rgb(249,43,39)" fg:x="12850" fg:w="516"/><text x="74.3860%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (9,434 samples, 54.43%)</title><rect x="23.2216%" y="148" width="54.4280%" height="15" fill="rgb(209,38,44)" fg:x="4025" fg:w="9434"/><text x="23.4716%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (93 samples, 0.54%)</title><rect x="77.1130%" y="164" width="0.5365%" height="15" fill="rgb(236,212,23)" fg:x="13366" fg:w="93"/><text x="77.3630%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (92 samples, 0.53%)</title><rect x="79.3169%" y="164" width="0.5308%" height="15" fill="rgb(242,79,21)" fg:x="13748" fg:w="92"/><text x="79.5669%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (103 samples, 0.59%)</title><rect x="81.4516%" y="180" width="0.5942%" height="15" fill="rgb(211,96,35)" fg:x="14118" fg:w="103"/><text x="81.7016%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (1,256 samples, 7.25%)</title><rect x="77.7592%" y="148" width="7.2463%" height="15" fill="rgb(253,215,40)" fg:x="13478" fg:w="1256"/><text x="78.0092%" y="158.50">embeddings..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (894 samples, 5.16%)</title><rect x="79.8477%" y="164" width="5.1578%" height="15" fill="rgb(211,81,21)" fg:x="13840" fg:w="894"/><text x="80.0977%" y="174.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:111) (513 samples, 2.96%)</title><rect x="82.0458%" y="180" width="2.9597%" height="15" fill="rgb(208,190,38)" fg:x="14221" fg:w="513"/><text x="82.2958%" y="190.50">sit..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (70 samples, 0.40%)</title><rect x="85.6978%" y="164" width="0.4039%" height="15" fill="rgb(235,213,38)" fg:x="14854" fg:w="70"/><text x="85.9478%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (197 samples, 1.14%)</title><rect x="85.0055%" y="148" width="1.1366%" height="15" fill="rgb(237,122,38)" fg:x="14734" fg:w="197"/><text x="85.2555%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (27 samples, 0.16%)</title><rect x="86.4651%" y="164" width="0.1558%" height="15" fill="rgb(244,218,35)" fg:x="14987" fg:w="27"/><text x="86.7151%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (198 samples, 1.14%)</title><rect x="86.1420%" y="148" width="1.1423%" height="15" fill="rgb(240,68,47)" fg:x="14931" fg:w="198"/><text x="86.3920%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (115 samples, 0.66%)</title><rect x="86.6209%" y="164" width="0.6635%" height="15" fill="rgb(210,16,53)" fg:x="15014" fg:w="115"/><text x="86.8709%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.12%)</title><rect x="88.3229%" y="164" width="0.1154%" height="15" fill="rgb(235,124,12)" fg:x="15309" fg:w="20"/><text x="88.5729%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (242 samples, 1.40%)</title><rect x="87.2844%" y="148" width="1.3962%" height="15" fill="rgb(224,169,11)" fg:x="15129" fg:w="242"/><text x="87.5344%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.24%)</title><rect x="88.4382%" y="164" width="0.2423%" height="15" fill="rgb(250,166,2)" fg:x="15329" fg:w="42"/><text x="88.6882%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (79 samples, 0.46%)</title><rect x="88.6806%" y="148" width="0.4558%" height="15" fill="rgb(242,216,29)" fg:x="15371" fg:w="79"/><text x="88.9306%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (117 samples, 0.68%)</title><rect x="89.1363%" y="148" width="0.6750%" height="15" fill="rgb(230,116,27)" fg:x="15450" fg:w="117"/><text x="89.3863%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (167 samples, 0.96%)</title><rect x="91.4556%" y="164" width="0.9635%" height="15" fill="rgb(228,99,48)" fg:x="15852" fg:w="167"/><text x="91.7056%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (462 samples, 2.67%)</title><rect x="89.8113%" y="148" width="2.6654%" height="15" fill="rgb(253,11,6)" fg:x="15567" fg:w="462"/><text x="90.0613%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (79 samples, 0.46%)</title><rect x="92.4768%" y="148" width="0.4558%" height="15" fill="rgb(247,143,39)" fg:x="16029" fg:w="79"/><text x="92.7268%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:111) (22 samples, 0.13%)</title><rect x="92.8056%" y="164" width="0.1269%" height="15" fill="rgb(236,97,10)" fg:x="16086" fg:w="22"/><text x="93.0556%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (94 samples, 0.54%)</title><rect x="92.9902%" y="148" width="0.5423%" height="15" fill="rgb(233,208,19)" fg:x="16118" fg:w="94"/><text x="93.2402%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (23 samples, 0.13%)</title><rect x="93.5326%" y="148" width="0.1327%" height="15" fill="rgb(216,164,2)" fg:x="16212" fg:w="23"/><text x="93.7826%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (15,174 samples, 87.54%)</title><rect x="6.1963%" y="132" width="87.5440%" height="15" fill="rgb(220,129,5)" fg:x="1074" fg:w="15174"/><text x="6.4463%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (84 samples, 0.48%)</title><rect x="93.7403%" y="132" width="0.4846%" height="15" fill="rgb(242,17,10)" fg:x="16248" fg:w="84"/><text x="93.9903%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (23 samples, 0.13%)</title><rect x="94.3172%" y="132" width="0.1327%" height="15" fill="rgb(242,107,0)" fg:x="16348" fg:w="23"/><text x="94.5672%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.13%)</title><rect x="97.5134%" y="148" width="0.1269%" height="15" fill="rgb(251,28,31)" fg:x="16902" fg:w="22"/><text x="97.7634%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (606 samples, 3.50%)</title><rect x="94.4499%" y="132" width="3.4962%" height="15" fill="rgb(233,223,10)" fg:x="16371" fg:w="606"/><text x="94.6999%" y="142.50">_up..</text></g><g><title>__hash__ (kappybara/utils.py:30) (53 samples, 0.31%)</title><rect x="97.6403%" y="148" width="0.3058%" height="15" fill="rgb(215,21,27)" fg:x="16924" fg:w="53"/><text x="97.8903%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (17,017 samples, 98.18%)</title><rect x="1.0731%" y="100" width="98.1769%" height="15" fill="rgb(232,23,21)" fg:x="186" fg:w="17017"/><text x="1.3231%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (16,142 samples, 93.13%)</title><rect x="6.1213%" y="116" width="93.1287%" height="15" fill="rgb(244,5,23)" fg:x="1061" fg:w="16142"/><text x="6.3713%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (226 samples, 1.30%)</title><rect x="97.9461%" y="132" width="1.3039%" height="15" fill="rgb(226,81,46)" fg:x="16977" fg:w="226"/><text x="98.1961%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.13%)</title><rect x="99.1231%" y="148" width="0.1269%" height="15" fill="rgb(247,70,30)" fg:x="17181" fg:w="22"/><text x="99.3731%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (17,197 samples, 99.22%)</title><rect x="0.0404%" y="68" width="99.2154%" height="15" fill="rgb(212,68,19)" fg:x="7" fg:w="17197"/><text x="0.2904%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (17,111 samples, 98.72%)</title><rect x="0.5365%" y="84" width="98.7192%" height="15" fill="rgb(240,187,13)" fg:x="93" fg:w="17111"/><text x="0.7865%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:96) (32 samples, 0.18%)</title><rect x="99.3596%" y="68" width="0.1846%" height="15" fill="rgb(223,113,26)" fg:x="17222" fg:w="32"/><text x="99.6096%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (34 samples, 0.20%)</title><rect x="99.5442%" y="68" width="0.1962%" height="15" fill="rgb(206,192,2)" fg:x="17254" fg:w="34"/><text x="99.7942%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (24 samples, 0.14%)</title><rect x="99.7404%" y="68" width="0.1385%" height="15" fill="rgb(241,108,4)" fg:x="17288" fg:w="24"/><text x="99.9904%" y="78.50"></text></g><g><title>all (17,333 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="17333"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (21 samples, 0.12%)</title><rect x="99.8788%" y="68" width="0.1212%" height="15" fill="rgb(224,114,35)" fg:x="17312" fg:w="21"/><text x="100.1288%" y="78.50"></text></g></svg></svg>