<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 598bb93</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="4688"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (9 samples, 0.19%)</title><rect x="0.0000%" y="68" width="0.1920%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="9"/><text x="0.2500%" y="78.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (46 samples, 0.98%)</title><rect x="0.3200%" y="132" width="0.9812%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="46"/><text x="0.5700%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (20 samples, 0.43%)</title><rect x="1.7278%" y="148" width="0.4266%" height="15" fill="rgb(221,193,54)" fg:x="81" fg:w="20"/><text x="1.9778%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.19%)</title><rect x="5.9940%" y="164" width="0.1920%" height="15" fill="rgb(248,212,6)" fg:x="281" fg:w="9"/><text x="6.2440%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (208 samples, 4.44%)</title><rect x="2.1544%" y="148" width="4.4369%" height="15" fill="rgb(208,68,35)" fg:x="101" fg:w="208"/><text x="2.4044%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.41%)</title><rect x="6.1860%" y="164" width="0.4053%" height="15" fill="rgb(232,128,0)" fg:x="290" fg:w="19"/><text x="6.4360%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.30%)</title><rect x="10.3029%" y="164" width="0.2986%" height="15" fill="rgb(207,160,47)" fg:x="483" fg:w="14"/><text x="10.5529%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (199 samples, 4.24%)</title><rect x="6.5913%" y="148" width="4.2449%" height="15" fill="rgb(228,23,34)" fg:x="309" fg:w="199"/><text x="6.8413%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.23%)</title><rect x="10.6015%" y="164" width="0.2346%" height="15" fill="rgb(218,30,26)" fg:x="497" fg:w="11"/><text x="10.8515%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (44 samples, 0.94%)</title><rect x="10.8575%" y="148" width="0.9386%" height="15" fill="rgb(220,122,19)" fg:x="509" fg:w="44"/><text x="11.1075%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (39 samples, 0.83%)</title><rect x="11.7961%" y="148" width="0.8319%" height="15" fill="rgb(250,228,42)" fg:x="553" fg:w="39"/><text x="12.0461%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.26%)</title><rect x="14.5051%" y="164" width="0.2560%" height="15" fill="rgb(240,193,28)" fg:x="680" fg:w="12"/><text x="14.7551%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (111 samples, 2.37%)</title><rect x="12.6280%" y="148" width="2.3677%" height="15" fill="rgb(216,20,37)" fg:x="592" fg:w="111"/><text x="12.8780%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.23%)</title><rect x="14.7611%" y="164" width="0.2346%" height="15" fill="rgb(206,188,39)" fg:x="692" fg:w="11"/><text x="15.0111%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (125 samples, 2.67%)</title><rect x="14.9957%" y="148" width="2.6664%" height="15" fill="rgb(217,207,13)" fg:x="703" fg:w="125"/><text x="15.2457%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (9 samples, 0.19%)</title><rect x="19.7099%" y="164" width="0.1920%" height="15" fill="rgb(231,73,38)" fg:x="924" fg:w="9"/><text x="19.9599%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (54 samples, 1.15%)</title><rect x="19.9019%" y="164" width="1.1519%" height="15" fill="rgb(225,20,46)" fg:x="933" fg:w="54"/><text x="20.1519%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (42 samples, 0.90%)</title><rect x="22.9309%" y="180" width="0.8959%" height="15" fill="rgb(210,31,41)" fg:x="1075" fg:w="42"/><text x="23.1809%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (29 samples, 0.62%)</title><rect x="25.4906%" y="196" width="0.6186%" height="15" fill="rgb(221,200,47)" fg:x="1195" fg:w="29"/><text x="25.7406%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (434 samples, 9.26%)</title><rect x="21.0751%" y="164" width="9.2577%" height="15" fill="rgb(226,26,5)" fg:x="988" fg:w="434"/><text x="21.3251%" y="174.50">embeds_in (ka..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (305 samples, 6.51%)</title><rect x="23.8268%" y="180" width="6.5060%" height="15" fill="rgb(249,33,26)" fg:x="1117" fg:w="305"/><text x="24.0768%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (198 samples, 4.22%)</title><rect x="26.1092%" y="196" width="4.2235%" height="15" fill="rgb(235,183,28)" fg:x="1224" fg:w="198"/><text x="26.3592%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (70 samples, 1.49%)</title><rect x="30.3328%" y="164" width="1.4932%" height="15" fill="rgb(221,5,38)" fg:x="1422" fg:w="70"/><text x="30.5828%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (43 samples, 0.92%)</title><rect x="32.9991%" y="180" width="0.9172%" height="15" fill="rgb(247,18,42)" fg:x="1547" fg:w="43"/><text x="33.2491%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (128 samples, 2.73%)</title><rect x="31.8686%" y="164" width="2.7304%" height="15" fill="rgb(241,131,45)" fg:x="1494" fg:w="128"/><text x="32.1186%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (32 samples, 0.68%)</title><rect x="33.9164%" y="180" width="0.6826%" height="15" fill="rgb(249,31,29)" fg:x="1590" fg:w="32"/><text x="34.1664%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (91 samples, 1.94%)</title><rect x="42.9394%" y="180" width="1.9411%" height="15" fill="rgb(225,111,53)" fg:x="2013" fg:w="91"/><text x="43.1894%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (83 samples, 1.77%)</title><rect x="44.9659%" y="180" width="1.7705%" height="15" fill="rgb(238,160,17)" fg:x="2108" fg:w="83"/><text x="45.2159%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (53 samples, 1.13%)</title><rect x="45.6058%" y="196" width="1.1305%" height="15" fill="rgb(214,148,48)" fg:x="2138" fg:w="53"/><text x="45.8558%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (22 samples, 0.47%)</title><rect x="48.2082%" y="196" width="0.4693%" height="15" fill="rgb(232,36,49)" fg:x="2260" fg:w="22"/><text x="48.4582%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.26%)</title><rect x="51.1945%" y="212" width="0.2560%" height="15" fill="rgb(209,103,24)" fg:x="2400" fg:w="12"/><text x="51.4445%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (242 samples, 5.16%)</title><rect x="48.6775%" y="196" width="5.1621%" height="15" fill="rgb(229,88,8)" fg:x="2282" fg:w="242"/><text x="48.9275%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (112 samples, 2.39%)</title><rect x="51.4505%" y="212" width="2.3891%" height="15" fill="rgb(213,181,19)" fg:x="2412" fg:w="112"/><text x="51.7005%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.36%)</title><rect x="53.4770%" y="228" width="0.3626%" height="15" fill="rgb(254,191,54)" fg:x="2507" fg:w="17"/><text x="53.7270%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (107 samples, 2.28%)</title><rect x="53.8396%" y="196" width="2.2824%" height="15" fill="rgb(241,83,37)" fg:x="2524" fg:w="107"/><text x="54.0896%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (52 samples, 1.11%)</title><rect x="56.1220%" y="196" width="1.1092%" height="15" fill="rgb(233,36,39)" fg:x="2631" fg:w="52"/><text x="56.3720%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (5 samples, 0.11%)</title><rect x="57.2312%" y="196" width="0.1067%" height="15" fill="rgb(226,3,54)" fg:x="2683" fg:w="5"/><text x="57.4812%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (525 samples, 11.20%)</title><rect x="46.7363%" y="180" width="11.1988%" height="15" fill="rgb(245,192,40)" fg:x="2191" fg:w="525"/><text x="46.9863%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (28 samples, 0.60%)</title><rect x="57.3379%" y="196" width="0.5973%" height="15" fill="rgb(238,167,29)" fg:x="2688" fg:w="28"/><text x="57.5879%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.11%)</title><rect x="59.3857%" y="212" width="0.1067%" height="15" fill="rgb(232,182,51)" fg:x="2784" fg:w="5"/><text x="59.6357%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (78 samples, 1.66%)</title><rect x="57.9991%" y="180" width="1.6638%" height="15" fill="rgb(231,60,39)" fg:x="2719" fg:w="78"/><text x="58.2491%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (46 samples, 0.98%)</title><rect x="58.6817%" y="196" width="0.9812%" height="15" fill="rgb(208,69,12)" fg:x="2751" fg:w="46"/><text x="58.9317%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.17%)</title><rect x="59.4923%" y="212" width="0.1706%" height="15" fill="rgb(235,93,37)" fg:x="2789" fg:w="8"/><text x="59.7423%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (76 samples, 1.62%)</title><rect x="59.6630%" y="180" width="1.6212%" height="15" fill="rgb(213,116,39)" fg:x="2797" fg:w="76"/><text x="59.9130%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (41 samples, 0.87%)</title><rect x="60.4096%" y="196" width="0.8746%" height="15" fill="rgb(222,207,29)" fg:x="2832" fg:w="41"/><text x="60.6596%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.15%)</title><rect x="61.1348%" y="212" width="0.1493%" height="15" fill="rgb(206,96,30)" fg:x="2866" fg:w="7"/><text x="61.3848%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (24 samples, 0.51%)</title><rect x="61.2841%" y="180" width="0.5119%" height="15" fill="rgb(218,138,4)" fg:x="2873" fg:w="24"/><text x="61.5341%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (41 samples, 0.87%)</title><rect x="61.7961%" y="180" width="0.8746%" height="15" fill="rgb(250,191,14)" fg:x="2897" fg:w="41"/><text x="62.0461%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (20 samples, 0.43%)</title><rect x="62.6706%" y="180" width="0.4266%" height="15" fill="rgb(239,60,40)" fg:x="2938" fg:w="20"/><text x="62.9206%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (6 samples, 0.13%)</title><rect x="63.0973%" y="180" width="0.1280%" height="15" fill="rgb(206,27,48)" fg:x="2958" fg:w="6"/><text x="63.3473%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,467 samples, 31.29%)</title><rect x="34.5990%" y="164" width="31.2927%" height="15" fill="rgb(225,35,8)" fg:x="1622" fg:w="1467"/><text x="34.8490%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (125 samples, 2.67%)</title><rect x="63.2253%" y="180" width="2.6664%" height="15" fill="rgb(250,213,24)" fg:x="2964" fg:w="125"/><text x="63.4753%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,293 samples, 48.91%)</title><rect x="17.6621%" y="148" width="48.9121%" height="15" fill="rgb(247,123,22)" fg:x="828" fg:w="2293"/><text x="17.9121%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (32 samples, 0.68%)</title><rect x="65.8916%" y="164" width="0.6826%" height="15" fill="rgb(231,138,38)" fg:x="3089" fg:w="32"/><text x="66.1416%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (33 samples, 0.70%)</title><rect x="68.8140%" y="164" width="0.7039%" height="15" fill="rgb(231,145,46)" fg:x="3226" fg:w="33"/><text x="69.0640%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (30 samples, 0.64%)</title><rect x="70.8191%" y="180" width="0.6399%" height="15" fill="rgb(251,118,11)" fg:x="3320" fg:w="30"/><text x="71.0691%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (364 samples, 7.76%)</title><rect x="66.6169%" y="148" width="7.7645%" height="15" fill="rgb(217,147,25)" fg:x="3123" fg:w="364"/><text x="66.8669%" y="158.50">embeddings ..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (228 samples, 4.86%)</title><rect x="69.5179%" y="164" width="4.8635%" height="15" fill="rgb(247,81,37)" fg:x="3259" fg:w="228"/><text x="69.7679%" y="174.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:111) (137 samples, 2.92%)</title><rect x="71.4590%" y="180" width="2.9224%" height="15" fill="rgb(209,12,38)" fg:x="3350" fg:w="137"/><text x="71.7090%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (22 samples, 0.47%)</title><rect x="74.9573%" y="164" width="0.4693%" height="15" fill="rgb(227,1,9)" fg:x="3514" fg:w="22"/><text x="75.2073%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (51 samples, 1.09%)</title><rect x="74.3814%" y="148" width="1.0879%" height="15" fill="rgb(248,47,43)" fg:x="3487" fg:w="51"/><text x="74.6314%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (6 samples, 0.13%)</title><rect x="75.7679%" y="164" width="0.1280%" height="15" fill="rgb(221,10,30)" fg:x="3552" fg:w="6"/><text x="76.0179%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (56 samples, 1.19%)</title><rect x="75.4693%" y="148" width="1.1945%" height="15" fill="rgb(210,229,1)" fg:x="3538" fg:w="56"/><text x="75.7193%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (36 samples, 0.77%)</title><rect x="75.8959%" y="164" width="0.7679%" height="15" fill="rgb(222,148,37)" fg:x="3558" fg:w="36"/><text x="76.1459%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (39 samples, 0.83%)</title><rect x="76.6638%" y="148" width="0.8319%" height="15" fill="rgb(234,67,33)" fg:x="3594" fg:w="39"/><text x="76.9138%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="77.3891%" y="164" width="0.1067%" height="15" fill="rgb(247,98,35)" fg:x="3628" fg:w="5"/><text x="77.6391%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (21 samples, 0.45%)</title><rect x="77.4957%" y="148" width="0.4480%" height="15" fill="rgb(247,138,52)" fg:x="3633" fg:w="21"/><text x="77.7457%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (27 samples, 0.58%)</title><rect x="77.9437%" y="148" width="0.5759%" height="15" fill="rgb(213,79,30)" fg:x="3654" fg:w="27"/><text x="78.1937%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (39 samples, 0.83%)</title><rect x="79.7355%" y="164" width="0.8319%" height="15" fill="rgb(246,177,23)" fg:x="3738" fg:w="39"/><text x="79.9855%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.13%)</title><rect x="80.4394%" y="180" width="0.1280%" height="15" fill="rgb(230,62,27)" fg:x="3771" fg:w="6"/><text x="80.6894%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (98 samples, 2.09%)</title><rect x="78.5196%" y="148" width="2.0904%" height="15" fill="rgb(216,154,8)" fg:x="3681" fg:w="98"/><text x="78.7696%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (17 samples, 0.36%)</title><rect x="80.6954%" y="148" width="0.3626%" height="15" fill="rgb(244,35,45)" fg:x="3783" fg:w="17"/><text x="80.9454%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (45 samples, 0.96%)</title><rect x="81.0580%" y="148" width="0.9599%" height="15" fill="rgb(251,115,12)" fg:x="3800" fg:w="45"/><text x="81.3080%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,791 samples, 80.87%)</title><rect x="1.3012%" y="132" width="80.8660%" height="15" fill="rgb(240,54,50)" fg:x="61" fg:w="3791"/><text x="1.5512%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (7 samples, 0.15%)</title><rect x="82.0179%" y="148" width="0.1493%" height="15" fill="rgb(233,84,52)" fg:x="3845" fg:w="7"/><text x="82.2679%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (21 samples, 0.45%)</title><rect x="82.1672%" y="132" width="0.4480%" height="15" fill="rgb(207,117,47)" fg:x="3852" fg:w="21"/><text x="82.4172%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (8 samples, 0.17%)</title><rect x="82.6152%" y="132" width="0.1706%" height="15" fill="rgb(249,43,39)" fg:x="3873" fg:w="8"/><text x="82.8652%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (8 samples, 0.17%)</title><rect x="82.7858%" y="132" width="0.1706%" height="15" fill="rgb(209,38,44)" fg:x="3881" fg:w="8"/><text x="83.0358%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (159 samples, 3.39%)</title><rect x="91.2329%" y="148" width="3.3916%" height="15" fill="rgb(236,212,23)" fg:x="4277" fg:w="159"/><text x="91.4829%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.23%)</title><rect x="94.6246%" y="148" width="0.2346%" height="15" fill="rgb(242,79,21)" fg:x="4436" fg:w="11"/><text x="94.8746%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (582 samples, 12.41%)</title><rect x="82.9565%" y="132" width="12.4147%" height="15" fill="rgb(211,96,35)" fg:x="3889" fg:w="582"/><text x="83.2065%" y="142.50">_update_embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.51%)</title><rect x="94.8592%" y="148" width="0.5119%" height="15" fill="rgb(253,215,40)" fg:x="4447" fg:w="24"/><text x="95.1092%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.47%)</title><rect x="99.1041%" y="148" width="0.4693%" height="15" fill="rgb(211,81,21)" fg:x="4646" fg:w="22"/><text x="99.3541%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (4,661 samples, 99.42%)</title><rect x="0.2560%" y="100" width="99.4241%" height="15" fill="rgb(208,190,38)" fg:x="12" fg:w="4661"/><text x="0.5060%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,658 samples, 99.36%)</title><rect x="0.3200%" y="116" width="99.3601%" height="15" fill="rgb(235,213,38)" fg:x="15" fg:w="4658"/><text x="0.5700%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (202 samples, 4.31%)</title><rect x="95.3712%" y="132" width="4.3089%" height="15" fill="rgb(237,122,38)" fg:x="4471" fg:w="202"/><text x="95.6212%" y="142.50">_upda..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="99.5734%" y="148" width="0.1067%" height="15" fill="rgb(244,218,35)" fg:x="4668" fg:w="5"/><text x="99.8234%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,665 samples, 99.51%)</title><rect x="0.1920%" y="68" width="99.5094%" height="15" fill="rgb(240,68,47)" fg:x="9" fg:w="4665"/><text x="0.4420%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,664 samples, 99.49%)</title><rect x="0.2133%" y="84" width="99.4881%" height="15" fill="rgb(210,16,53)" fg:x="10" fg:w="4664"/><text x="0.4633%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:97) (6 samples, 0.13%)</title><rect x="99.7440%" y="68" width="0.1280%" height="15" fill="rgb(235,124,12)" fg:x="4676" fg:w="6"/><text x="99.9940%" y="78.50"></text></g><g><title>all (4,688 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="4688"/><text x="0.2500%" y="62.50"></text></g></svg></svg>