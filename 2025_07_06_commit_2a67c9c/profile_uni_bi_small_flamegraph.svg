<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 2a67c9c</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9541"><g><title>update (kappybara/system.py:69) (54 samples, 0.57%)</title><rect x="0.0838%" y="84" width="0.5660%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="54"/><text x="0.3338%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (53 samples, 0.56%)</title><rect x="0.0943%" y="100" width="0.5555%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="53"/><text x="0.3443%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (51 samples, 0.53%)</title><rect x="0.1153%" y="116" width="0.5345%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="51"/><text x="0.3653%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (46 samples, 0.48%)</title><rect x="0.1677%" y="132" width="0.4821%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="46"/><text x="0.4177%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (46 samples, 0.48%)</title><rect x="0.1677%" y="148" width="0.4821%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="46"/><text x="0.4177%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (44 samples, 0.46%)</title><rect x="0.1887%" y="164" width="0.4612%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="44"/><text x="0.4387%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (21 samples, 0.22%)</title><rect x="0.8385%" y="116" width="0.2201%" height="15" fill="rgb(207,160,47)" fg:x="80" fg:w="21"/><text x="1.0885%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (50 samples, 0.52%)</title><rect x="0.7651%" y="100" width="0.5241%" height="15" fill="rgb(228,23,34)" fg:x="73" fg:w="50"/><text x="1.0151%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (16 samples, 0.17%)</title><rect x="1.1215%" y="116" width="0.1677%" height="15" fill="rgb(218,30,26)" fg:x="107" fg:w="16"/><text x="1.3715%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (20 samples, 0.21%)</title><rect x="1.4045%" y="148" width="0.2096%" height="15" fill="rgb(220,122,19)" fg:x="134" fg:w="20"/><text x="1.6545%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (78 samples, 0.82%)</title><rect x="1.7189%" y="148" width="0.8175%" height="15" fill="rgb(250,228,42)" fg:x="164" fg:w="78"/><text x="1.9689%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="2.4211%" y="164" width="0.1153%" height="15" fill="rgb(240,193,28)" fg:x="231" fg:w="11"/><text x="2.6711%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (20 samples, 0.21%)</title><rect x="2.5364%" y="148" width="0.2096%" height="15" fill="rgb(216,20,37)" fg:x="242" fg:w="20"/><text x="2.7864%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (79 samples, 0.83%)</title><rect x="3.8990%" y="180" width="0.8280%" height="15" fill="rgb(206,188,39)" fg:x="372" fg:w="79"/><text x="4.1490%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (47 samples, 0.49%)</title><rect x="4.2344%" y="196" width="0.4926%" height="15" fill="rgb(217,207,13)" fg:x="404" fg:w="47"/><text x="4.4844%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (345 samples, 3.62%)</title><rect x="1.3730%" y="132" width="3.6160%" height="15" fill="rgb(231,73,38)" fg:x="131" fg:w="345"/><text x="1.6230%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (209 samples, 2.19%)</title><rect x="2.7984%" y="148" width="2.1905%" height="15" fill="rgb(225,20,46)" fg:x="267" fg:w="209"/><text x="3.0484%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (178 samples, 1.87%)</title><rect x="3.1234%" y="164" width="1.8656%" height="15" fill="rgb(210,31,41)" fg:x="298" fg:w="178"/><text x="3.3734%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (21 samples, 0.22%)</title><rect x="4.7689%" y="180" width="0.2201%" height="15" fill="rgb(221,200,47)" fg:x="455" fg:w="21"/><text x="5.0189%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (20 samples, 0.21%)</title><rect x="4.9890%" y="132" width="0.2096%" height="15" fill="rgb(226,26,5)" fg:x="476" fg:w="20"/><text x="5.2390%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (13 samples, 0.14%)</title><rect x="5.0624%" y="148" width="0.1363%" height="15" fill="rgb(249,33,26)" fg:x="483" fg:w="13"/><text x="5.3124%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (372 samples, 3.90%)</title><rect x="1.3101%" y="116" width="3.8990%" height="15" fill="rgb(235,183,28)" fg:x="125" fg:w="372"/><text x="1.5601%" y="126.50">appl..</text></g><g><title>embeddings (kappybara/pattern.py:256) (55 samples, 0.58%)</title><rect x="5.7122%" y="148" width="0.5765%" height="15" fill="rgb(221,5,38)" fg:x="545" fg:w="55"/><text x="5.9622%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (46 samples, 0.48%)</title><rect x="9.6845%" y="164" width="0.4821%" height="15" fill="rgb(247,18,42)" fg:x="924" fg:w="46"/><text x="9.9345%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (390 samples, 4.09%)</title><rect x="6.2886%" y="148" width="4.0876%" height="15" fill="rgb(241,131,45)" fg:x="600" fg:w="390"/><text x="6.5386%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.21%)</title><rect x="10.1666%" y="164" width="0.2096%" height="15" fill="rgb(249,31,29)" fg:x="970" fg:w="20"/><text x="10.4166%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (28 samples, 0.29%)</title><rect x="13.3215%" y="164" width="0.2935%" height="15" fill="rgb(225,111,53)" fg:x="1271" fg:w="28"/><text x="13.5715%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (322 samples, 3.37%)</title><rect x="10.3763%" y="148" width="3.3749%" height="15" fill="rgb(238,160,17)" fg:x="990" fg:w="322"/><text x="10.6263%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.14%)</title><rect x="13.6149%" y="164" width="0.1363%" height="15" fill="rgb(214,148,48)" fg:x="1299" fg:w="13"/><text x="13.8649%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (71 samples, 0.74%)</title><rect x="13.8036%" y="148" width="0.7442%" height="15" fill="rgb(232,36,49)" fg:x="1317" fg:w="71"/><text x="14.0536%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (59 samples, 0.62%)</title><rect x="14.5477%" y="148" width="0.6184%" height="15" fill="rgb(209,103,24)" fg:x="1388" fg:w="59"/><text x="14.7977%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (62 samples, 0.65%)</title><rect x="17.5768%" y="164" width="0.6498%" height="15" fill="rgb(229,88,8)" fg:x="1677" fg:w="62"/><text x="17.8268%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (306 samples, 3.21%)</title><rect x="15.1661%" y="148" width="3.2072%" height="15" fill="rgb(213,181,19)" fg:x="1447" fg:w="306"/><text x="15.4161%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.15%)</title><rect x="18.2266%" y="164" width="0.1467%" height="15" fill="rgb(254,191,54)" fg:x="1739" fg:w="14"/><text x="18.4766%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (227 samples, 2.38%)</title><rect x="18.3733%" y="148" width="2.3792%" height="15" fill="rgb(241,83,37)" fg:x="1753" fg:w="227"/><text x="18.6233%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (53 samples, 0.56%)</title><rect x="23.3204%" y="164" width="0.5555%" height="15" fill="rgb(233,36,39)" fg:x="2225" fg:w="53"/><text x="23.5704%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (79 samples, 0.83%)</title><rect x="23.8759%" y="164" width="0.8280%" height="15" fill="rgb(226,3,54)" fg:x="2278" fg:w="79"/><text x="24.1259%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (129 samples, 1.35%)</title><rect x="27.0622%" y="180" width="1.3521%" height="15" fill="rgb(245,192,40)" fg:x="2582" fg:w="129"/><text x="27.3122%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (101 samples, 1.06%)</title><rect x="30.5943%" y="196" width="1.0586%" height="15" fill="rgb(238,167,29)" fg:x="2919" fg:w="101"/><text x="30.8443%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (983 samples, 10.30%)</title><rect x="24.7982%" y="164" width="10.3029%" height="15" fill="rgb(232,182,51)" fg:x="2366" fg:w="983"/><text x="25.0482%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (638 samples, 6.69%)</title><rect x="28.4142%" y="180" width="6.6869%" height="15" fill="rgb(231,60,39)" fg:x="2711" fg:w="638"/><text x="28.6642%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (329 samples, 3.45%)</title><rect x="31.6529%" y="196" width="3.4483%" height="15" fill="rgb(208,69,12)" fg:x="3020" fg:w="329"/><text x="31.9029%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (119 samples, 1.25%)</title><rect x="35.1011%" y="164" width="1.2472%" height="15" fill="rgb(235,93,37)" fg:x="3349" fg:w="119"/><text x="35.3511%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (84 samples, 0.88%)</title><rect x="37.7843%" y="180" width="0.8804%" height="15" fill="rgb(213,116,39)" fg:x="3605" fg:w="84"/><text x="38.0343%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (239 samples, 2.50%)</title><rect x="36.3798%" y="164" width="2.5050%" height="15" fill="rgb(222,207,29)" fg:x="3471" fg:w="239"/><text x="36.6298%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (21 samples, 0.22%)</title><rect x="38.6647%" y="180" width="0.2201%" height="15" fill="rgb(206,96,30)" fg:x="3689" fg:w="21"/><text x="38.9147%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (205 samples, 2.15%)</title><rect x="49.2716%" y="180" width="2.1486%" height="15" fill="rgb(218,138,4)" fg:x="4701" fg:w="205"/><text x="49.5216%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (17 samples, 0.18%)</title><rect x="51.4202%" y="180" width="0.1782%" height="15" fill="rgb(250,191,14)" fg:x="4906" fg:w="17"/><text x="51.6702%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (34 samples, 0.36%)</title><rect x="52.1434%" y="196" width="0.3564%" height="15" fill="rgb(239,60,40)" fg:x="4975" fg:w="34"/><text x="52.3934%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (147 samples, 1.54%)</title><rect x="51.5984%" y="180" width="1.5407%" height="15" fill="rgb(206,27,48)" fg:x="4923" fg:w="147"/><text x="51.8484%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (61 samples, 0.64%)</title><rect x="52.4997%" y="196" width="0.6393%" height="15" fill="rgb(225,35,8)" fg:x="5009" fg:w="61"/><text x="52.7497%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (77 samples, 0.81%)</title><rect x="54.2396%" y="196" width="0.8070%" height="15" fill="rgb(250,213,24)" fg:x="5175" fg:w="77"/><text x="54.4896%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.17%)</title><rect x="57.0380%" y="212" width="0.1677%" height="15" fill="rgb(247,123,22)" fg:x="5442" fg:w="16"/><text x="57.2880%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (433 samples, 4.54%)</title><rect x="55.0466%" y="196" width="4.5383%" height="15" fill="rgb(231,138,38)" fg:x="5252" fg:w="433"/><text x="55.2966%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (227 samples, 2.38%)</title><rect x="57.2057%" y="212" width="2.3792%" height="15" fill="rgb(231,145,46)" fg:x="5458" fg:w="227"/><text x="57.4557%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.26%)</title><rect x="59.3229%" y="228" width="0.2620%" height="15" fill="rgb(251,118,11)" fg:x="5660" fg:w="25"/><text x="59.5729%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (222 samples, 2.33%)</title><rect x="59.5849%" y="196" width="2.3268%" height="15" fill="rgb(217,147,25)" fg:x="5685" fg:w="222"/><text x="59.8349%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (109 samples, 1.14%)</title><rect x="61.9117%" y="196" width="1.1424%" height="15" fill="rgb(247,81,37)" fg:x="5907" fg:w="109"/><text x="62.1617%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (23 samples, 0.24%)</title><rect x="63.0542%" y="196" width="0.2411%" height="15" fill="rgb(209,12,38)" fg:x="6016" fg:w="23"/><text x="63.3042%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,006 samples, 10.54%)</title><rect x="53.1391%" y="180" width="10.5440%" height="15" fill="rgb(227,1,9)" fg:x="5070" fg:w="1006"/><text x="53.3891%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (37 samples, 0.39%)</title><rect x="63.2953%" y="196" width="0.3878%" height="15" fill="rgb(248,47,43)" fg:x="6039" fg:w="37"/><text x="63.5453%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (26 samples, 0.27%)</title><rect x="63.7459%" y="180" width="0.2725%" height="15" fill="rgb(221,10,30)" fg:x="6082" fg:w="26"/><text x="63.9959%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.17%)</title><rect x="65.2133%" y="196" width="0.1677%" height="15" fill="rgb(210,229,1)" fg:x="6222" fg:w="16"/><text x="65.4633%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="67.0265%" y="212" width="0.1363%" height="15" fill="rgb(222,148,37)" fg:x="6395" fg:w="13"/><text x="67.2765%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (329 samples, 3.45%)</title><rect x="64.0184%" y="180" width="3.4483%" height="15" fill="rgb(234,67,33)" fg:x="6108" fg:w="329"/><text x="64.2684%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (199 samples, 2.09%)</title><rect x="65.3810%" y="196" width="2.0857%" height="15" fill="rgb(247,98,35)" fg:x="6238" fg:w="199"/><text x="65.6310%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.30%)</title><rect x="67.1628%" y="212" width="0.3040%" height="15" fill="rgb(247,138,52)" fg:x="6408" fg:w="29"/><text x="67.4128%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (365 samples, 3.83%)</title><rect x="67.4667%" y="180" width="3.8256%" height="15" fill="rgb(213,79,30)" fg:x="6437" fg:w="365"/><text x="67.7167%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (241 samples, 2.53%)</title><rect x="68.7664%" y="196" width="2.5259%" height="15" fill="rgb(246,177,23)" fg:x="6561" fg:w="241"/><text x="69.0164%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (53 samples, 0.56%)</title><rect x="70.7368%" y="212" width="0.5555%" height="15" fill="rgb(230,62,27)" fg:x="6749" fg:w="53"/><text x="70.9868%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (115 samples, 1.21%)</title><rect x="71.2923%" y="180" width="1.2053%" height="15" fill="rgb(216,154,8)" fg:x="6802" fg:w="115"/><text x="71.5423%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (155 samples, 1.62%)</title><rect x="72.5605%" y="180" width="1.6246%" height="15" fill="rgb(244,35,45)" fg:x="6923" fg:w="155"/><text x="72.8105%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (94 samples, 0.99%)</title><rect x="74.1851%" y="180" width="0.9852%" height="15" fill="rgb(251,115,12)" fg:x="7078" fg:w="94"/><text x="74.4351%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (25 samples, 0.26%)</title><rect x="75.1703%" y="180" width="0.2620%" height="15" fill="rgb(240,54,50)" fg:x="7172" fg:w="25"/><text x="75.4203%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,822 samples, 40.06%)</title><rect x="38.8848%" y="164" width="40.0587%" height="15" fill="rgb(233,84,52)" fg:x="3710" fg:w="3822"/><text x="39.1348%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (335 samples, 3.51%)</title><rect x="75.4323%" y="180" width="3.5112%" height="15" fill="rgb(207,117,47)" fg:x="7197" fg:w="335"/><text x="75.6823%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,595 samples, 58.64%)</title><rect x="20.7525%" y="148" width="58.6417%" height="15" fill="rgb(249,43,39)" fg:x="1980" fg:w="5595"/><text x="21.0025%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (43 samples, 0.45%)</title><rect x="78.9435%" y="164" width="0.4507%" height="15" fill="rgb(209,38,44)" fg:x="7532" fg:w="43"/><text x="79.1935%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (12 samples, 0.13%)</title><rect x="79.3942%" y="148" width="0.1258%" height="15" fill="rgb(236,212,23)" fg:x="7575" fg:w="12"/><text x="79.6442%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (56 samples, 0.59%)</title><rect x="81.0921%" y="164" width="0.5869%" height="15" fill="rgb(242,79,21)" fg:x="7737" fg:w="56"/><text x="81.3421%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (72 samples, 0.75%)</title><rect x="82.9158%" y="180" width="0.7546%" height="15" fill="rgb(211,96,35)" fg:x="7911" fg:w="72"/><text x="83.1658%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (597 samples, 6.26%)</title><rect x="79.5514%" y="148" width="6.2572%" height="15" fill="rgb(253,215,40)" fg:x="7590" fg:w="597"/><text x="79.8014%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (394 samples, 4.13%)</title><rect x="81.6791%" y="164" width="4.1295%" height="15" fill="rgb(211,81,21)" fg:x="7793" fg:w="394"/><text x="81.9291%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (204 samples, 2.14%)</title><rect x="83.6705%" y="180" width="2.1381%" height="15" fill="rgb(208,190,38)" fg:x="7983" fg:w="204"/><text x="83.9205%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (30 samples, 0.31%)</title><rect x="86.3851%" y="164" width="0.3144%" height="15" fill="rgb(235,213,38)" fg:x="8242" fg:w="30"/><text x="86.6351%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (103 samples, 1.08%)</title><rect x="85.8086%" y="148" width="1.0796%" height="15" fill="rgb(237,122,38)" fg:x="8187" fg:w="103"/><text x="86.0586%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (18 samples, 0.19%)</title><rect x="86.6995%" y="164" width="0.1887%" height="15" fill="rgb(244,218,35)" fg:x="8272" fg:w="18"/><text x="86.9495%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="87.2131%" y="164" width="0.1782%" height="15" fill="rgb(240,68,47)" fg:x="8321" fg:w="17"/><text x="87.4631%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (99 samples, 1.04%)</title><rect x="86.8882%" y="148" width="1.0376%" height="15" fill="rgb(210,16,53)" fg:x="8290" fg:w="99"/><text x="87.1382%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (51 samples, 0.53%)</title><rect x="87.3913%" y="164" width="0.5345%" height="15" fill="rgb(235,124,12)" fg:x="8338" fg:w="51"/><text x="87.6413%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (34 samples, 0.36%)</title><rect x="88.8586%" y="164" width="0.3564%" height="15" fill="rgb(224,169,11)" fg:x="8478" fg:w="34"/><text x="89.1086%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (135 samples, 1.41%)</title><rect x="87.9258%" y="148" width="1.4149%" height="15" fill="rgb(250,166,2)" fg:x="8389" fg:w="135"/><text x="88.1758%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="89.2150%" y="164" width="0.1258%" height="15" fill="rgb(242,216,29)" fg:x="8512" fg:w="12"/><text x="89.4650%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (62 samples, 0.65%)</title><rect x="89.3407%" y="148" width="0.6498%" height="15" fill="rgb(230,116,27)" fg:x="8524" fg:w="62"/><text x="89.5907%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (72 samples, 0.75%)</title><rect x="89.9906%" y="148" width="0.7546%" height="15" fill="rgb(228,99,48)" fg:x="8586" fg:w="72"/><text x="90.2406%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (138 samples, 1.45%)</title><rect x="92.8938%" y="164" width="1.4464%" height="15" fill="rgb(253,11,6)" fg:x="8863" fg:w="138"/><text x="93.1438%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.22%)</title><rect x="94.1201%" y="180" width="0.2201%" height="15" fill="rgb(247,143,39)" fg:x="8980" fg:w="21"/><text x="94.3701%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.20%)</title><rect x="94.3402%" y="164" width="0.1991%" height="15" fill="rgb(236,97,10)" fg:x="9001" fg:w="19"/><text x="94.5902%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (366 samples, 3.84%)</title><rect x="90.7452%" y="148" width="3.8361%" height="15" fill="rgb(233,208,19)" fg:x="8658" fg:w="366"/><text x="90.9952%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (37 samples, 0.39%)</title><rect x="94.5813%" y="148" width="0.3878%" height="15" fill="rgb(216,164,2)" fg:x="9024" fg:w="37"/><text x="94.8313%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (14 samples, 0.15%)</title><rect x="94.9691%" y="148" width="0.1467%" height="15" fill="rgb(220,129,5)" fg:x="9061" fg:w="14"/><text x="95.2191%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,569 samples, 89.81%)</title><rect x="5.3349%" y="132" width="89.8124%" height="15" fill="rgb(242,17,10)" fg:x="509" fg:w="8569"/><text x="5.5849%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (34 samples, 0.36%)</title><rect x="95.1473%" y="132" width="0.3564%" height="15" fill="rgb(242,107,0)" fg:x="9078" fg:w="34"/><text x="95.3973%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (11 samples, 0.12%)</title><rect x="95.5036%" y="132" width="0.1153%" height="15" fill="rgb(251,28,31)" fg:x="9112" fg:w="11"/><text x="95.7536%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (10 samples, 0.10%)</title><rect x="95.6189%" y="132" width="0.1048%" height="15" fill="rgb(233,223,10)" fg:x="9123" fg:w="10"/><text x="95.8689%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (40 samples, 0.42%)</title><rect x="98.0505%" y="148" width="0.4192%" height="15" fill="rgb(215,21,27)" fg:x="9355" fg:w="40"/><text x="98.3005%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (272 samples, 2.85%)</title><rect x="95.7237%" y="132" width="2.8509%" height="15" fill="rgb(232,23,21)" fg:x="9133" fg:w="272"/><text x="95.9737%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.10%)</title><rect x="98.4698%" y="148" width="0.1048%" height="15" fill="rgb(244,5,23)" fg:x="9395" fg:w="10"/><text x="98.7198%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.18%)</title><rect x="99.2244%" y="148" width="0.1782%" height="15" fill="rgb(226,81,46)" fg:x="9467" fg:w="17"/><text x="99.4744%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,479 samples, 99.35%)</title><rect x="0.0838%" y="68" width="99.3502%" height="15" fill="rgb(247,70,30)" fg:x="8" fg:w="9479"/><text x="0.3338%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,425 samples, 98.78%)</title><rect x="0.6498%" y="84" width="98.7842%" height="15" fill="rgb(212,68,19)" fg:x="62" fg:w="9425"/><text x="0.8998%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (9,364 samples, 98.14%)</title><rect x="1.2892%" y="100" width="98.1448%" height="15" fill="rgb(240,187,13)" fg:x="123" fg:w="9364"/><text x="1.5392%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,986 samples, 94.18%)</title><rect x="5.2510%" y="116" width="94.1830%" height="15" fill="rgb(223,113,26)" fg:x="501" fg:w="8986"/><text x="5.5010%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (82 samples, 0.86%)</title><rect x="98.5746%" y="132" width="0.8594%" height="15" fill="rgb(206,192,2)" fg:x="9405" fg:w="82"/><text x="98.8246%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (14 samples, 0.15%)</title><rect x="99.4340%" y="68" width="0.1467%" height="15" fill="rgb(241,108,4)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.15%)</title><rect x="99.4340%" y="84" width="0.1467%" height="15" fill="rgb(247,173,49)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.15%)</title><rect x="99.4340%" y="100" width="0.1467%" height="15" fill="rgb(224,114,35)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.15%)</title><rect x="99.4340%" y="116" width="0.1467%" height="15" fill="rgb(245,159,27)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.15%)</title><rect x="99.4340%" y="132" width="0.1467%" height="15" fill="rgb(245,172,44)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.15%)</title><rect x="99.4340%" y="148" width="0.1467%" height="15" fill="rgb(236,23,11)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.15%)</title><rect x="99.4340%" y="164" width="0.1467%" height="15" fill="rgb(205,117,38)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.15%)</title><rect x="99.4340%" y="180" width="0.1467%" height="15" fill="rgb(237,72,25)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.15%)</title><rect x="99.4340%" y="196" width="0.1467%" height="15" fill="rgb(244,70,9)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.15%)</title><rect x="99.4340%" y="212" width="0.1467%" height="15" fill="rgb(217,125,39)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.15%)</title><rect x="99.4340%" y="228" width="0.1467%" height="15" fill="rgb(235,36,10)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.15%)</title><rect x="99.4340%" y="244" width="0.1467%" height="15" fill="rgb(251,123,47)" fg:x="9487" fg:w="14"/><text x="99.6840%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (16 samples, 0.17%)</title><rect x="99.6332%" y="68" width="0.1677%" height="15" fill="rgb(221,13,13)" fg:x="9506" fg:w="16"/><text x="99.8832%" y="78.50"></text></g><g><title>all (9,541 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="9541"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (10 samples, 0.10%)</title><rect x="99.8952%" y="68" width="0.1048%" height="15" fill="rgb(211,50,8)" fg:x="9531" fg:w="10"/><text x="100.1452%" y="78.50"></text></g></svg></svg>