<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_disperse_flamegraph.svg -- python profile_uni_bi_disperse.py # commit 2a67c9c</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="14399"><g><title>n_embeddings (kappybara/rule.py:169) (33 samples, 0.23%)</title><rect x="0.1597%" y="180" width="0.2292%" height="15" fill="rgb(227,0,7)" fg:x="23" fg:w="33"/><text x="0.4097%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:170) (67 samples, 0.47%)</title><rect x="2.7085%" y="196" width="0.4653%" height="15" fill="rgb(217,0,24)" fg:x="390" fg:w="67"/><text x="2.9585%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:80) (23 samples, 0.16%)</title><rect x="3.8128%" y="212" width="0.1597%" height="15" fill="rgb(221,193,54)" fg:x="549" fg:w="23"/><text x="4.0628%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.16%)</title><rect x="5.5976%" y="228" width="0.1597%" height="15" fill="rgb(248,212,6)" fg:x="806" fg:w="23"/><text x="5.8476%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (412 samples, 2.86%)</title><rect x="3.1738%" y="196" width="2.8613%" height="15" fill="rgb(208,68,35)" fg:x="457" fg:w="412"/><text x="3.4238%" y="206.50">&lt;g..</text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (297 samples, 2.06%)</title><rect x="3.9725%" y="212" width="2.0626%" height="15" fill="rgb(232,128,0)" fg:x="572" fg:w="297"/><text x="4.2225%" y="222.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.28%)</title><rect x="5.7573%" y="228" width="0.2778%" height="15" fill="rgb(207,160,47)" fg:x="829" fg:w="40"/><text x="6.0073%" y="238.50"></text></g><g><title>n_embeddings (kappybara/rule.py:170) (820 samples, 5.69%)</title><rect x="0.3889%" y="180" width="5.6948%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="820"/><text x="0.6389%" y="190.50">n_embed..</text></g><g><title>n_embeddings (kappybara/rule.py:172) (65 samples, 0.45%)</title><rect x="6.0838%" y="180" width="0.4514%" height="15" fill="rgb(218,30,26)" fg:x="876" fg:w="65"/><text x="6.3338%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:174) (112 samples, 0.78%)</title><rect x="6.5352%" y="180" width="0.7778%" height="15" fill="rgb(220,122,19)" fg:x="941" fg:w="112"/><text x="6.7852%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:175) (26 samples, 0.18%)</title><rect x="7.3130%" y="180" width="0.1806%" height="15" fill="rgb(250,228,42)" fg:x="1053" fg:w="26"/><text x="7.5630%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:217) (21 samples, 0.15%)</title><rect x="7.4936%" y="180" width="0.1458%" height="15" fill="rgb(240,193,28)" fg:x="1079" fg:w="21"/><text x="7.7436%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:219) (32 samples, 0.22%)</title><rect x="7.6394%" y="180" width="0.2222%" height="15" fill="rgb(216,20,37)" fg:x="1100" fg:w="32"/><text x="7.8894%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.11%)</title><rect x="10.0285%" y="212" width="0.1111%" height="15" fill="rgb(206,188,39)" fg:x="1444" fg:w="16"/><text x="10.2785%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (342 samples, 2.38%)</title><rect x="7.9450%" y="180" width="2.3752%" height="15" fill="rgb(217,207,13)" fg:x="1144" fg:w="342"/><text x="8.1950%" y="190.50">n_..</text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (244 samples, 1.69%)</title><rect x="8.6256%" y="196" width="1.6946%" height="15" fill="rgb(231,73,38)" fg:x="1242" fg:w="244"/><text x="8.8756%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.18%)</title><rect x="10.1396%" y="212" width="0.1806%" height="15" fill="rgb(225,20,46)" fg:x="1460" fg:w="26"/><text x="10.3896%" y="222.50"></text></g><g><title>embeddings (kappybara/mixture.py:76) (79 samples, 0.55%)</title><rect x="11.3411%" y="196" width="0.5486%" height="15" fill="rgb(210,31,41)" fg:x="1633" fg:w="79"/><text x="11.5911%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (306 samples, 2.13%)</title><rect x="10.3202%" y="180" width="2.1251%" height="15" fill="rgb(221,200,47)" fg:x="1486" fg:w="306"/><text x="10.5702%" y="190.50">n..</text></g><g><title>embeddings (kappybara/mixture.py:78) (80 samples, 0.56%)</title><rect x="11.8897%" y="196" width="0.5556%" height="15" fill="rgb(226,26,5)" fg:x="1712" fg:w="80"/><text x="12.1397%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (264 samples, 1.83%)</title><rect x="12.4453%" y="180" width="1.8335%" height="15" fill="rgb(249,33,26)" fg:x="1792" fg:w="264"/><text x="12.6953%" y="190.50">n..</text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (166 samples, 1.15%)</title><rect x="13.1259%" y="196" width="1.1529%" height="15" fill="rgb(235,183,28)" fg:x="1890" fg:w="166"/><text x="13.3759%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:227) (17 samples, 0.12%)</title><rect x="14.2788%" y="180" width="0.1181%" height="15" fill="rgb(221,5,38)" fg:x="2056" fg:w="17"/><text x="14.5288%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.13%)</title><rect x="15.0427%" y="196" width="0.1250%" height="15" fill="rgb(247,18,42)" fg:x="2166" fg:w="18"/><text x="15.2927%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:228) (120 samples, 0.83%)</title><rect x="14.3968%" y="180" width="0.8334%" height="15" fill="rgb(241,131,45)" fg:x="2073" fg:w="120"/><text x="14.6468%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:229) (30 samples, 0.21%)</title><rect x="15.2302%" y="180" width="0.2083%" height="15" fill="rgb(249,31,29)" fg:x="2193" fg:w="30"/><text x="15.4802%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (2,216 samples, 15.39%)</title><rect x="0.0764%" y="84" width="15.3900%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="2216"/><text x="0.3264%" y="94.50">update (kappybara/system..</text></g><g><title>wait (kappybara/system.py:58) (2,216 samples, 15.39%)</title><rect x="0.0764%" y="100" width="15.3900%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="2216"/><text x="0.3264%" y="110.50">wait (kappybara/system.p..</text></g><g><title>reactivity (kappybara/system.py:55) (2,213 samples, 15.37%)</title><rect x="0.0972%" y="116" width="15.3691%" height="15" fill="rgb(214,148,48)" fg:x="14" fg:w="2213"/><text x="0.3472%" y="126.50">reactivity (kappybara/sy..</text></g><g><title>__get__ (functools.py:998) (2,211 samples, 15.36%)</title><rect x="0.1111%" y="132" width="15.3552%" height="15" fill="rgb(232,36,49)" fg:x="16" fg:w="2211"/><text x="0.3611%" y="142.50">__get__ (functools.py:99..</text></g><g><title>rule_reactivities (kappybara/system.py:51) (2,211 samples, 15.36%)</title><rect x="0.1111%" y="148" width="15.3552%" height="15" fill="rgb(209,103,24)" fg:x="16" fg:w="2211"/><text x="0.3611%" y="158.50">rule_reactivities (kappy..</text></g><g><title>reactivity (kappybara/rule.py:18) (2,210 samples, 15.35%)</title><rect x="0.1181%" y="164" width="15.3483%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="2210"/><text x="0.3681%" y="174.50">reactivity (kappybara/ru..</text></g><g><title>act (kappybara/system.py:63) (45 samples, 0.31%)</title><rect x="15.4941%" y="100" width="0.3125%" height="15" fill="rgb(213,181,19)" fg:x="2231" fg:w="45"/><text x="15.7441%" y="110.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (224 samples, 1.56%)</title><rect x="15.8483%" y="132" width="1.5557%" height="15" fill="rgb(254,191,54)" fg:x="2282" fg:w="224"/><text x="16.0983%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (41 samples, 0.28%)</title><rect x="17.6957%" y="148" width="0.2847%" height="15" fill="rgb(241,83,37)" fg:x="2548" fg:w="41"/><text x="17.9457%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.16%)</title><rect x="21.8487%" y="164" width="0.1597%" height="15" fill="rgb(233,36,39)" fg:x="3146" fg:w="23"/><text x="22.0987%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (631 samples, 4.38%)</title><rect x="17.9804%" y="148" width="4.3822%" height="15" fill="rgb(226,3,54)" fg:x="2589" fg:w="631"/><text x="18.2304%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (51 samples, 0.35%)</title><rect x="22.0085%" y="164" width="0.3542%" height="15" fill="rgb(245,192,40)" fg:x="3169" fg:w="51"/><text x="22.2585%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.14%)</title><rect x="25.8907%" y="164" width="0.1389%" height="15" fill="rgb(238,167,29)" fg:x="3728" fg:w="20"/><text x="26.1407%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (570 samples, 3.96%)</title><rect x="22.3627%" y="148" width="3.9586%" height="15" fill="rgb(232,182,51)" fg:x="3220" fg:w="570"/><text x="22.6127%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.29%)</title><rect x="26.0296%" y="164" width="0.2917%" height="15" fill="rgb(231,60,39)" fg:x="3748" fg:w="42"/><text x="26.2796%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (117 samples, 0.81%)</title><rect x="26.3282%" y="148" width="0.8126%" height="15" fill="rgb(208,69,12)" fg:x="3791" fg:w="117"/><text x="26.5782%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (87 samples, 0.60%)</title><rect x="27.1408%" y="148" width="0.6042%" height="15" fill="rgb(235,93,37)" fg:x="3908" fg:w="87"/><text x="27.3908%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (37 samples, 0.26%)</title><rect x="29.8007%" y="164" width="0.2570%" height="15" fill="rgb(213,116,39)" fg:x="4291" fg:w="37"/><text x="30.0507%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (366 samples, 2.54%)</title><rect x="27.7450%" y="148" width="2.5418%" height="15" fill="rgb(222,207,29)" fg:x="3995" fg:w="366"/><text x="27.9950%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.23%)</title><rect x="30.0576%" y="164" width="0.2292%" height="15" fill="rgb(206,96,30)" fg:x="4328" fg:w="33"/><text x="30.3076%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (318 samples, 2.21%)</title><rect x="30.2868%" y="148" width="2.2085%" height="15" fill="rgb(218,138,4)" fg:x="4361" fg:w="318"/><text x="30.5368%" y="158.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (21 samples, 0.15%)</title><rect x="34.5232%" y="164" width="0.1458%" height="15" fill="rgb(250,191,14)" fg:x="4971" fg:w="21"/><text x="34.7732%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (106 samples, 0.74%)</title><rect x="34.6691%" y="164" width="0.7362%" height="15" fill="rgb(239,60,40)" fg:x="4992" fg:w="106"/><text x="34.9191%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (155 samples, 1.08%)</title><rect x="37.3984%" y="180" width="1.0765%" height="15" fill="rgb(206,27,48)" fg:x="5385" fg:w="155"/><text x="37.6484%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (114 samples, 0.79%)</title><rect x="40.1208%" y="196" width="0.7917%" height="15" fill="rgb(225,35,8)" fg:x="5777" fg:w="114"/><text x="40.3708%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,328 samples, 9.22%)</title><rect x="35.4330%" y="164" width="9.2229%" height="15" fill="rgb(250,213,24)" fg:x="5102" fg:w="1328"/><text x="35.6830%" y="174.50">embeds_in (ka..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (890 samples, 6.18%)</title><rect x="38.4749%" y="180" width="6.1810%" height="15" fill="rgb(247,123,22)" fg:x="5540" fg:w="890"/><text x="38.7249%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (539 samples, 3.74%)</title><rect x="40.9126%" y="196" width="3.7433%" height="15" fill="rgb(231,138,38)" fg:x="5891" fg:w="539"/><text x="41.1626%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (165 samples, 1.15%)</title><rect x="44.6559%" y="164" width="1.1459%" height="15" fill="rgb(231,145,46)" fg:x="6430" fg:w="165"/><text x="44.9059%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (141 samples, 0.98%)</title><rect x="46.8088%" y="180" width="0.9792%" height="15" fill="rgb(251,118,11)" fg:x="6740" fg:w="141"/><text x="47.0588%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (506 samples, 3.51%)</title><rect x="45.8504%" y="164" width="3.5141%" height="15" fill="rgb(217,147,25)" fg:x="6602" fg:w="506"/><text x="46.1004%" y="174.50">emb..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (227 samples, 1.58%)</title><rect x="47.7880%" y="180" width="1.5765%" height="15" fill="rgb(247,81,37)" fg:x="6881" fg:w="227"/><text x="48.0380%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (239 samples, 1.66%)</title><rect x="56.3789%" y="180" width="1.6598%" height="15" fill="rgb(209,12,38)" fg:x="8118" fg:w="239"/><text x="56.6289%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:66) (19 samples, 0.13%)</title><rect x="58.0388%" y="180" width="0.1320%" height="15" fill="rgb(227,1,9)" fg:x="8357" fg:w="19"/><text x="58.2888%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (25 samples, 0.17%)</title><rect x="58.6221%" y="196" width="0.1736%" height="15" fill="rgb(248,47,43)" fg:x="8441" fg:w="25"/><text x="58.8721%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (200 samples, 1.39%)</title><rect x="58.1707%" y="180" width="1.3890%" height="15" fill="rgb(221,10,30)" fg:x="8376" fg:w="200"/><text x="58.4207%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (110 samples, 0.76%)</title><rect x="58.7957%" y="196" width="0.7639%" height="15" fill="rgb(210,229,1)" fg:x="8466" fg:w="110"/><text x="59.0457%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (30 samples, 0.21%)</title><rect x="60.4764%" y="196" width="0.2083%" height="15" fill="rgb(222,148,37)" fg:x="8708" fg:w="30"/><text x="60.7264%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:57) (460 samples, 3.19%)</title><rect x="60.6848%" y="196" width="3.1947%" height="15" fill="rgb(234,67,33)" fg:x="8738" fg:w="460"/><text x="60.9348%" y="206.50">bou..</text></g><g><title>__eq__ (kappybara/utils.py:33) (199 samples, 1.38%)</title><rect x="62.4974%" y="212" width="1.3820%" height="15" fill="rgb(247,98,35)" fg:x="8999" fg:w="199"/><text x="62.7474%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.22%)</title><rect x="63.6572%" y="228" width="0.2222%" height="15" fill="rgb(247,138,52)" fg:x="9166" fg:w="32"/><text x="63.9072%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (306 samples, 2.13%)</title><rect x="63.8794%" y="196" width="2.1251%" height="15" fill="rgb(213,79,30)" fg:x="9198" fg:w="306"/><text x="64.1294%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (170 samples, 1.18%)</title><rect x="66.0046%" y="196" width="1.1806%" height="15" fill="rgb(246,177,23)" fg:x="9504" fg:w="170"/><text x="66.2546%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,168 samples, 8.11%)</title><rect x="59.5597%" y="180" width="8.1117%" height="15" fill="rgb(230,62,27)" fg:x="8576" fg:w="1168"/><text x="59.8097%" y="190.50">embeds_in (..</text></g><g><title>coupled (kappybara/pattern.py:64) (57 samples, 0.40%)</title><rect x="67.2755%" y="196" width="0.3959%" height="15" fill="rgb(216,154,8)" fg:x="9687" fg:w="57"/><text x="67.5255%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (20 samples, 0.14%)</title><rect x="67.7269%" y="180" width="0.1389%" height="15" fill="rgb(244,35,45)" fg:x="9752" fg:w="20"/><text x="67.9769%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (84 samples, 0.58%)</title><rect x="67.8658%" y="180" width="0.5834%" height="15" fill="rgb(251,115,12)" fg:x="9772" fg:w="84"/><text x="68.1158%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (38 samples, 0.26%)</title><rect x="68.1853%" y="196" width="0.2639%" height="15" fill="rgb(240,54,50)" fg:x="9818" fg:w="38"/><text x="68.4353%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (157 samples, 1.09%)</title><rect x="68.4492%" y="180" width="1.0904%" height="15" fill="rgb(233,84,52)" fg:x="9856" fg:w="157"/><text x="68.6992%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (76 samples, 0.53%)</title><rect x="69.0117%" y="196" width="0.5278%" height="15" fill="rgb(207,117,47)" fg:x="9937" fg:w="76"/><text x="69.2617%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.17%)</title><rect x="69.3729%" y="212" width="0.1667%" height="15" fill="rgb(249,43,39)" fg:x="9989" fg:w="24"/><text x="69.6229%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (22 samples, 0.15%)</title><rect x="69.5396%" y="180" width="0.1528%" height="15" fill="rgb(209,38,44)" fg:x="10013" fg:w="22"/><text x="69.7896%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (46 samples, 0.32%)</title><rect x="69.6923%" y="180" width="0.3195%" height="15" fill="rgb(236,212,23)" fg:x="10035" fg:w="46"/><text x="69.9423%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (21 samples, 0.15%)</title><rect x="70.0118%" y="180" width="0.1458%" height="15" fill="rgb(242,79,21)" fg:x="10081" fg:w="21"/><text x="70.2618%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,316 samples, 23.03%)</title><rect x="49.3645%" y="164" width="23.0294%" height="15" fill="rgb(211,96,35)" fg:x="7108" fg:w="3316"/><text x="49.6145%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (318 samples, 2.21%)</title><rect x="70.1854%" y="180" width="2.2085%" height="15" fill="rgb(253,215,40)" fg:x="10106" fg:w="318"/><text x="70.4354%" y="190.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,803 samples, 40.30%)</title><rect x="32.4953%" y="148" width="40.3014%" height="15" fill="rgb(211,81,21)" fg:x="4679" fg:w="5803"/><text x="32.7453%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (58 samples, 0.40%)</title><rect x="72.3939%" y="164" width="0.4028%" height="15" fill="rgb(208,190,38)" fg:x="10424" fg:w="58"/><text x="72.6439%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (89 samples, 0.62%)</title><rect x="74.3177%" y="164" width="0.6181%" height="15" fill="rgb(235,213,38)" fg:x="10701" fg:w="89"/><text x="74.5677%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (98 samples, 0.68%)</title><rect x="75.9775%" y="180" width="0.6806%" height="15" fill="rgb(237,122,38)" fg:x="10940" fg:w="98"/><text x="76.2275%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (863 samples, 5.99%)</title><rect x="72.9009%" y="148" width="5.9935%" height="15" fill="rgb(244,218,35)" fg:x="10497" fg:w="863"/><text x="73.1509%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (570 samples, 3.96%)</title><rect x="74.9358%" y="164" width="3.9586%" height="15" fill="rgb(240,68,47)" fg:x="10790" fg:w="570"/><text x="75.1858%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (322 samples, 2.24%)</title><rect x="76.6581%" y="180" width="2.2363%" height="15" fill="rgb(210,16,53)" fg:x="11038" fg:w="322"/><text x="76.9081%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (43 samples, 0.30%)</title><rect x="79.6236%" y="164" width="0.2986%" height="15" fill="rgb(235,124,12)" fg:x="11465" fg:w="43"/><text x="79.8736%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (156 samples, 1.08%)</title><rect x="78.8944%" y="148" width="1.0834%" height="15" fill="rgb(224,169,11)" fg:x="11360" fg:w="156"/><text x="79.1444%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (23 samples, 0.16%)</title><rect x="80.2417%" y="164" width="0.1597%" height="15" fill="rgb(250,166,2)" fg:x="11554" fg:w="23"/><text x="80.4917%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (153 samples, 1.06%)</title><rect x="79.9778%" y="148" width="1.0626%" height="15" fill="rgb(242,216,29)" fg:x="11516" fg:w="153"/><text x="80.2278%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (92 samples, 0.64%)</title><rect x="80.4014%" y="164" width="0.6389%" height="15" fill="rgb(230,116,27)" fg:x="11577" fg:w="92"/><text x="80.6514%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (33 samples, 0.23%)</title><rect x="81.0404%" y="148" width="0.2292%" height="15" fill="rgb(228,99,48)" fg:x="11669" fg:w="33"/><text x="81.2904%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (16 samples, 0.11%)</title><rect x="81.2695%" y="148" width="0.1111%" height="15" fill="rgb(253,11,6)" fg:x="11702" fg:w="16"/><text x="81.5195%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (30 samples, 0.21%)</title><rect x="81.3807%" y="148" width="0.2083%" height="15" fill="rgb(247,143,39)" fg:x="11718" fg:w="30"/><text x="81.6307%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (37 samples, 0.26%)</title><rect x="81.5890%" y="148" width="0.2570%" height="15" fill="rgb(236,97,10)" fg:x="11748" fg:w="37"/><text x="81.8390%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (61 samples, 0.42%)</title><rect x="81.9710%" y="148" width="0.4236%" height="15" fill="rgb(233,208,19)" fg:x="11803" fg:w="61"/><text x="82.2210%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (100 samples, 0.69%)</title><rect x="82.3946%" y="148" width="0.6945%" height="15" fill="rgb(216,164,2)" fg:x="11864" fg:w="100"/><text x="82.6446%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (9,472 samples, 65.78%)</title><rect x="17.4040%" y="132" width="65.7823%" height="15" fill="rgb(220,129,5)" fg:x="2506" fg:w="9472"/><text x="17.6540%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (221 samples, 1.53%)</title><rect x="83.1863%" y="132" width="1.5348%" height="15" fill="rgb(242,17,10)" fg:x="11978" fg:w="221"/><text x="83.4363%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (38 samples, 0.26%)</title><rect x="84.7212%" y="132" width="0.2639%" height="15" fill="rgb(242,107,0)" fg:x="12199" fg:w="38"/><text x="84.9712%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (31 samples, 0.22%)</title><rect x="84.9851%" y="132" width="0.2153%" height="15" fill="rgb(251,28,31)" fg:x="12237" fg:w="31"/><text x="85.2351%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (87 samples, 0.60%)</title><rect x="92.3397%" y="148" width="0.6042%" height="15" fill="rgb(233,223,10)" fg:x="13296" fg:w="87"/><text x="92.5897%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (46 samples, 0.32%)</title><rect x="92.9440%" y="148" width="0.3195%" height="15" fill="rgb(215,21,27)" fg:x="13383" fg:w="46"/><text x="93.1940%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (1,237 samples, 8.59%)</title><rect x="85.2004%" y="132" width="8.5909%" height="15" fill="rgb(232,23,21)" fg:x="12268" fg:w="1237"/><text x="85.4504%" y="142.50">_update_embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (76 samples, 0.53%)</title><rect x="93.2634%" y="148" width="0.5278%" height="15" fill="rgb(244,5,23)" fg:x="13429" fg:w="76"/><text x="93.5134%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (99 samples, 0.69%)</title><rect x="98.5624%" y="148" width="0.6875%" height="15" fill="rgb(226,81,46)" fg:x="14192" fg:w="99"/><text x="98.8124%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_disperse.py:25) (14,328 samples, 99.51%)</title><rect x="0.0694%" y="68" width="99.5069%" height="15" fill="rgb(247,70,30)" fg:x="10" fg:w="14328"/><text x="0.3194%" y="78.50">&lt;module&gt; (profile_uni_bi_disperse.py:25)</text></g><g><title>update (kappybara/system.py:70) (12,111 samples, 84.11%)</title><rect x="15.4664%" y="84" width="84.1100%" height="15" fill="rgb(212,68,19)" fg:x="2227" fg:w="12111"/><text x="15.7164%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (12,062 samples, 83.77%)</title><rect x="15.8067%" y="100" width="83.7697%" height="15" fill="rgb(240,187,13)" fg:x="2276" fg:w="12062"/><text x="16.0567%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (12,056 samples, 83.73%)</title><rect x="15.8483%" y="116" width="83.7280%" height="15" fill="rgb(223,113,26)" fg:x="2282" fg:w="12056"/><text x="16.0983%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (833 samples, 5.79%)</title><rect x="93.7912%" y="132" width="5.7851%" height="15" fill="rgb(206,192,2)" fg:x="13505" fg:w="833"/><text x="94.0412%" y="142.50">_update..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.33%)</title><rect x="99.2499%" y="148" width="0.3264%" height="15" fill="rgb(241,108,4)" fg:x="14291" fg:w="47"/><text x="99.4999%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (21 samples, 0.15%)</title><rect x="99.7291%" y="68" width="0.1458%" height="15" fill="rgb(247,173,49)" fg:x="14360" fg:w="21"/><text x="99.9791%" y="78.50"></text></g><g><title>all (14,399 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="14399"/><text x="0.2500%" y="62.50"></text></g></svg></svg>