<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit edf1d90</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="9532"><g><title>update (kappybara/system.py:69) (14 samples, 0.15%)</title><rect x="0.0315%" y="84" width="0.1469%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="14"/><text x="0.2815%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (14 samples, 0.15%)</title><rect x="0.0315%" y="100" width="0.1469%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="14"/><text x="0.2815%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (13 samples, 0.14%)</title><rect x="0.0420%" y="116" width="0.1364%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="13"/><text x="0.2920%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (11 samples, 0.12%)</title><rect x="0.0629%" y="132" width="0.1154%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="11"/><text x="0.3129%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (11 samples, 0.12%)</title><rect x="0.0629%" y="148" width="0.1154%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="11"/><text x="0.3129%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (11 samples, 0.12%)</title><rect x="0.0629%" y="164" width="0.1154%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="11"/><text x="0.3129%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (32 samples, 0.34%)</title><rect x="0.2098%" y="100" width="0.3357%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="32"/><text x="0.4598%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (25 samples, 0.26%)</title><rect x="0.2833%" y="116" width="0.2623%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="25"/><text x="0.5333%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (25 samples, 0.26%)</title><rect x="0.6609%" y="148" width="0.2623%" height="15" fill="rgb(218,30,26)" fg:x="63" fg:w="25"/><text x="0.9109%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (78 samples, 0.82%)</title><rect x="1.0071%" y="148" width="0.8183%" height="15" fill="rgb(220,122,19)" fg:x="96" fg:w="78"/><text x="1.2571%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.17%)</title><rect x="1.6576%" y="164" width="0.1679%" height="15" fill="rgb(250,228,42)" fg:x="158" fg:w="16"/><text x="1.9076%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (14 samples, 0.15%)</title><rect x="1.8254%" y="148" width="0.1469%" height="15" fill="rgb(240,193,28)" fg:x="174" fg:w="14"/><text x="2.0754%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (11 samples, 0.12%)</title><rect x="2.9794%" y="180" width="0.1154%" height="15" fill="rgb(216,20,37)" fg:x="284" fg:w="11"/><text x="3.2294%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (80 samples, 0.84%)</title><rect x="3.0948%" y="180" width="0.8393%" height="15" fill="rgb(206,188,39)" fg:x="295" fg:w="80"/><text x="3.3448%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (44 samples, 0.46%)</title><rect x="3.4725%" y="196" width="0.4616%" height="15" fill="rgb(217,207,13)" fg:x="331" fg:w="44"/><text x="3.7225%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (342 samples, 3.59%)</title><rect x="0.6085%" y="132" width="3.5879%" height="15" fill="rgb(231,73,38)" fg:x="58" fg:w="342"/><text x="0.8585%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (208 samples, 2.18%)</title><rect x="2.0143%" y="148" width="2.1821%" height="15" fill="rgb(225,20,46)" fg:x="192" fg:w="208"/><text x="2.2643%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (181 samples, 1.90%)</title><rect x="2.2975%" y="164" width="1.8989%" height="15" fill="rgb(210,31,41)" fg:x="219" fg:w="181"/><text x="2.5475%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (20 samples, 0.21%)</title><rect x="3.9866%" y="180" width="0.2098%" height="15" fill="rgb(221,200,47)" fg:x="380" fg:w="20"/><text x="4.2366%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (380 samples, 3.99%)</title><rect x="0.5455%" y="116" width="3.9866%" height="15" fill="rgb(226,26,5)" fg:x="52" fg:w="380"/><text x="0.7955%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (32 samples, 0.34%)</title><rect x="4.1964%" y="132" width="0.3357%" height="15" fill="rgb(249,33,26)" fg:x="400" fg:w="32"/><text x="4.4464%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (24 samples, 0.25%)</title><rect x="4.2803%" y="148" width="0.2518%" height="15" fill="rgb(235,183,28)" fg:x="408" fg:w="24"/><text x="4.5303%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (51 samples, 0.54%)</title><rect x="4.9937%" y="148" width="0.5350%" height="15" fill="rgb(221,5,38)" fg:x="476" fg:w="51"/><text x="5.2437%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.22%)</title><rect x="9.7566%" y="164" width="0.2203%" height="15" fill="rgb(247,18,42)" fg:x="930" fg:w="21"/><text x="10.0066%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (460 samples, 4.83%)</title><rect x="5.5287%" y="148" width="4.8258%" height="15" fill="rgb(241,131,45)" fg:x="527" fg:w="460"/><text x="5.7787%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.38%)</title><rect x="9.9769%" y="164" width="0.3777%" height="15" fill="rgb(249,31,29)" fg:x="951" fg:w="36"/><text x="10.2269%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.23%)</title><rect x="13.4599%" y="164" width="0.2308%" height="15" fill="rgb(225,111,53)" fg:x="1283" fg:w="22"/><text x="13.7099%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (338 samples, 3.55%)</title><rect x="10.3546%" y="148" width="3.5460%" height="15" fill="rgb(238,160,17)" fg:x="987" fg:w="338"/><text x="10.6046%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.21%)</title><rect x="13.6907%" y="164" width="0.2098%" height="15" fill="rgb(214,148,48)" fg:x="1305" fg:w="20"/><text x="13.9407%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (88 samples, 0.92%)</title><rect x="13.9215%" y="148" width="0.9232%" height="15" fill="rgb(232,36,49)" fg:x="1327" fg:w="88"/><text x="14.1715%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (70 samples, 0.73%)</title><rect x="14.8447%" y="148" width="0.7344%" height="15" fill="rgb(209,103,24)" fg:x="1415" fg:w="70"/><text x="15.0947%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.20%)</title><rect x="17.8976%" y="164" width="0.1993%" height="15" fill="rgb(229,88,8)" fg:x="1706" fg:w="19"/><text x="18.1476%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (279 samples, 2.93%)</title><rect x="15.5791%" y="148" width="2.9270%" height="15" fill="rgb(213,181,19)" fg:x="1485" fg:w="279"/><text x="15.8291%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.41%)</title><rect x="18.0969%" y="164" width="0.4091%" height="15" fill="rgb(254,191,54)" fg:x="1725" fg:w="39"/><text x="18.3469%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (257 samples, 2.70%)</title><rect x="18.5061%" y="148" width="2.6962%" height="15" fill="rgb(241,83,37)" fg:x="1764" fg:w="257"/><text x="18.7561%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (14 samples, 0.15%)</title><rect x="23.5627%" y="164" width="0.1469%" height="15" fill="rgb(233,36,39)" fg:x="2246" fg:w="14"/><text x="23.8127%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (91 samples, 0.95%)</title><rect x="23.7096%" y="164" width="0.9547%" height="15" fill="rgb(226,3,54)" fg:x="2260" fg:w="91"/><text x="23.9596%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (143 samples, 1.50%)</title><rect x="26.7310%" y="180" width="1.5002%" height="15" fill="rgb(245,192,40)" fg:x="2548" fg:w="143"/><text x="26.9810%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (97 samples, 1.02%)</title><rect x="30.0776%" y="196" width="1.0176%" height="15" fill="rgb(238,167,29)" fg:x="2867" fg:w="97"/><text x="30.3276%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (974 samples, 10.22%)</title><rect x="24.7063%" y="164" width="10.2182%" height="15" fill="rgb(232,182,51)" fg:x="2355" fg:w="974"/><text x="24.9563%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (638 samples, 6.69%)</title><rect x="28.2312%" y="180" width="6.6932%" height="15" fill="rgb(231,60,39)" fg:x="2691" fg:w="638"/><text x="28.4812%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (365 samples, 3.83%)</title><rect x="31.0953%" y="196" width="3.8292%" height="15" fill="rgb(208,69,12)" fg:x="2964" fg:w="365"/><text x="31.3453%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (129 samples, 1.35%)</title><rect x="34.9245%" y="164" width="1.3533%" height="15" fill="rgb(235,93,37)" fg:x="3329" fg:w="129"/><text x="35.1745%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (84 samples, 0.88%)</title><rect x="37.3689%" y="180" width="0.8812%" height="15" fill="rgb(213,116,39)" fg:x="3562" fg:w="84"/><text x="37.6189%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (213 samples, 2.23%)</title><rect x="36.3093%" y="164" width="2.2346%" height="15" fill="rgb(222,207,29)" fg:x="3461" fg:w="213"/><text x="36.5593%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (28 samples, 0.29%)</title><rect x="38.2501%" y="180" width="0.2937%" height="15" fill="rgb(206,96,30)" fg:x="3646" fg:w="28"/><text x="38.5001%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (199 samples, 2.09%)</title><rect x="49.5384%" y="180" width="2.0877%" height="15" fill="rgb(218,138,4)" fg:x="4722" fg:w="199"/><text x="49.7884%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (18 samples, 0.19%)</title><rect x="51.6261%" y="180" width="0.1888%" height="15" fill="rgb(250,191,14)" fg:x="4921" fg:w="18"/><text x="51.8761%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (23 samples, 0.24%)</title><rect x="52.2451%" y="196" width="0.2413%" height="15" fill="rgb(239,60,40)" fg:x="4980" fg:w="23"/><text x="52.4951%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (192 samples, 2.01%)</title><rect x="51.8149%" y="180" width="2.0143%" height="15" fill="rgb(206,27,48)" fg:x="4939" fg:w="192"/><text x="52.0649%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (128 samples, 1.34%)</title><rect x="52.4864%" y="196" width="1.3428%" height="15" fill="rgb(225,35,8)" fg:x="5003" fg:w="128"/><text x="52.7364%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (27 samples, 0.28%)</title><rect x="54.7314%" y="196" width="0.2833%" height="15" fill="rgb(250,213,24)" fg:x="5217" fg:w="27"/><text x="54.9814%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (21 samples, 0.22%)</title><rect x="57.3647%" y="212" width="0.2203%" height="15" fill="rgb(247,123,22)" fg:x="5468" fg:w="21"/><text x="57.6147%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="59.5678%" y="228" width="0.1259%" height="15" fill="rgb(231,138,38)" fg:x="5678" fg:w="12"/><text x="59.8178%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (503 samples, 5.28%)</title><rect x="55.0147%" y="196" width="5.2770%" height="15" fill="rgb(231,145,46)" fg:x="5244" fg:w="503"/><text x="55.2647%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (258 samples, 2.71%)</title><rect x="57.5850%" y="212" width="2.7067%" height="15" fill="rgb(251,118,11)" fg:x="5489" fg:w="258"/><text x="57.8350%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (57 samples, 0.60%)</title><rect x="59.6937%" y="228" width="0.5980%" height="15" fill="rgb(217,147,25)" fg:x="5690" fg:w="57"/><text x="59.9437%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (243 samples, 2.55%)</title><rect x="60.2916%" y="196" width="2.5493%" height="15" fill="rgb(247,81,37)" fg:x="5747" fg:w="243"/><text x="60.5416%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (84 samples, 0.88%)</title><rect x="62.8410%" y="196" width="0.8812%" height="15" fill="rgb(209,12,38)" fg:x="5990" fg:w="84"/><text x="63.0910%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (12 samples, 0.13%)</title><rect x="63.7222%" y="196" width="0.1259%" height="15" fill="rgb(227,1,9)" fg:x="6074" fg:w="12"/><text x="63.9722%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (993 samples, 10.42%)</title><rect x="53.8292%" y="180" width="10.4175%" height="15" fill="rgb(248,47,43)" fg:x="5131" fg:w="993"/><text x="54.0792%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (38 samples, 0.40%)</title><rect x="63.8481%" y="196" width="0.3987%" height="15" fill="rgb(221,10,30)" fg:x="6086" fg:w="38"/><text x="64.0981%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (21 samples, 0.22%)</title><rect x="64.3097%" y="180" width="0.2203%" height="15" fill="rgb(210,229,1)" fg:x="6130" fg:w="21"/><text x="64.5597%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.18%)</title><rect x="65.6630%" y="196" width="0.1783%" height="15" fill="rgb(222,148,37)" fg:x="6259" fg:w="17"/><text x="65.9130%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (348 samples, 3.65%)</title><rect x="64.5300%" y="180" width="3.6509%" height="15" fill="rgb(234,67,33)" fg:x="6151" fg:w="348"/><text x="64.7800%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (223 samples, 2.34%)</title><rect x="65.8414%" y="196" width="2.3395%" height="15" fill="rgb(247,98,35)" fg:x="6276" fg:w="223"/><text x="66.0914%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.33%)</title><rect x="67.8556%" y="212" width="0.3252%" height="15" fill="rgb(247,138,52)" fg:x="6468" fg:w="31"/><text x="68.1056%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.12%)</title><rect x="69.1985%" y="196" width="0.1154%" height="15" fill="rgb(213,79,30)" fg:x="6596" fg:w="11"/><text x="69.4485%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (404 samples, 4.24%)</title><rect x="68.1809%" y="180" width="4.2384%" height="15" fill="rgb(246,177,23)" fg:x="6499" fg:w="404"/><text x="68.4309%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (296 samples, 3.11%)</title><rect x="69.3139%" y="196" width="3.1053%" height="15" fill="rgb(230,62,27)" fg:x="6607" fg:w="296"/><text x="69.5639%" y="206.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (54 samples, 0.57%)</title><rect x="71.8527%" y="212" width="0.5665%" height="15" fill="rgb(216,154,8)" fg:x="6849" fg:w="54"/><text x="72.1027%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (96 samples, 1.01%)</title><rect x="72.4192%" y="180" width="1.0071%" height="15" fill="rgb(244,35,45)" fg:x="6903" fg:w="96"/><text x="72.6692%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (183 samples, 1.92%)</title><rect x="73.4264%" y="180" width="1.9198%" height="15" fill="rgb(251,115,12)" fg:x="6999" fg:w="183"/><text x="73.6764%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (87 samples, 0.91%)</title><rect x="75.3462%" y="180" width="0.9127%" height="15" fill="rgb(240,54,50)" fg:x="7182" fg:w="87"/><text x="75.5962%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (23 samples, 0.24%)</title><rect x="76.2589%" y="180" width="0.2413%" height="15" fill="rgb(233,84,52)" fg:x="7269" fg:w="23"/><text x="76.5089%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,920 samples, 41.12%)</title><rect x="38.5439%" y="164" width="41.1246%" height="15" fill="rgb(207,117,47)" fg:x="3674" fg:w="3920"/><text x="38.7939%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (302 samples, 3.17%)</title><rect x="76.5002%" y="180" width="3.1683%" height="15" fill="rgb(249,43,39)" fg:x="7292" fg:w="302"/><text x="76.7502%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,624 samples, 59.00%)</title><rect x="21.2023%" y="148" width="59.0013%" height="15" fill="rgb(209,38,44)" fg:x="2021" fg:w="5624"/><text x="21.4523%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (51 samples, 0.54%)</title><rect x="79.6685%" y="164" width="0.5350%" height="15" fill="rgb(236,212,23)" fg:x="7594" fg:w="51"/><text x="79.9185%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (64 samples, 0.67%)</title><rect x="81.3366%" y="164" width="0.6714%" height="15" fill="rgb(242,79,21)" fg:x="7753" fg:w="64"/><text x="81.5866%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (49 samples, 0.51%)</title><rect x="83.0361%" y="180" width="0.5141%" height="15" fill="rgb(211,96,35)" fg:x="7915" fg:w="49"/><text x="83.2861%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (561 samples, 5.89%)</title><rect x="80.2560%" y="148" width="5.8854%" height="15" fill="rgb(253,215,40)" fg:x="7650" fg:w="561"/><text x="80.5060%" y="158.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (394 samples, 4.13%)</title><rect x="82.0080%" y="164" width="4.1334%" height="15" fill="rgb(211,81,21)" fg:x="7817" fg:w="394"/><text x="82.2580%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (247 samples, 2.59%)</title><rect x="83.5501%" y="180" width="2.5913%" height="15" fill="rgb(208,190,38)" fg:x="7964" fg:w="247"/><text x="83.8001%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (36 samples, 0.38%)</title><rect x="86.7079%" y="164" width="0.3777%" height="15" fill="rgb(235,213,38)" fg:x="8265" fg:w="36"/><text x="86.9579%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (96 samples, 1.01%)</title><rect x="86.1414%" y="148" width="1.0071%" height="15" fill="rgb(237,122,38)" fg:x="8211" fg:w="96"/><text x="86.3914%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (14 samples, 0.15%)</title><rect x="87.4528%" y="164" width="0.1469%" height="15" fill="rgb(244,218,35)" fg:x="8336" fg:w="14"/><text x="87.7028%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (81 samples, 0.85%)</title><rect x="87.1486%" y="148" width="0.8498%" height="15" fill="rgb(240,68,47)" fg:x="8307" fg:w="81"/><text x="87.3986%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (38 samples, 0.40%)</title><rect x="87.5997%" y="164" width="0.3987%" height="15" fill="rgb(210,16,53)" fg:x="8350" fg:w="38"/><text x="87.8497%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (165 samples, 1.73%)</title><rect x="87.9983%" y="148" width="1.7310%" height="15" fill="rgb(235,124,12)" fg:x="8388" fg:w="165"/><text x="88.2483%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.25%)</title><rect x="89.4775%" y="164" width="0.2518%" height="15" fill="rgb(224,169,11)" fg:x="8529" fg:w="24"/><text x="89.7275%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (53 samples, 0.56%)</title><rect x="89.7293%" y="148" width="0.5560%" height="15" fill="rgb(250,166,2)" fg:x="8553" fg:w="53"/><text x="89.9793%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (79 samples, 0.83%)</title><rect x="90.2854%" y="148" width="0.8288%" height="15" fill="rgb(242,216,29)" fg:x="8606" fg:w="79"/><text x="90.5354%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.14%)</title><rect x="90.9778%" y="164" width="0.1364%" height="15" fill="rgb(230,116,27)" fg:x="8672" fg:w="13"/><text x="91.2278%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.13%)</title><rect x="93.4431%" y="164" width="0.1259%" height="15" fill="rgb(228,99,48)" fg:x="8907" fg:w="12"/><text x="93.6931%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (124 samples, 1.30%)</title><rect x="93.5690%" y="164" width="1.3009%" height="15" fill="rgb(253,11,6)" fg:x="8919" fg:w="124"/><text x="93.8190%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.23%)</title><rect x="94.6391%" y="180" width="0.2308%" height="15" fill="rgb(247,143,39)" fg:x="9021" fg:w="22"/><text x="94.8891%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (371 samples, 3.89%)</title><rect x="91.1141%" y="148" width="3.8922%" height="15" fill="rgb(236,97,10)" fg:x="8685" fg:w="371"/><text x="91.3641%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (39 samples, 0.41%)</title><rect x="95.0063%" y="148" width="0.4091%" height="15" fill="rgb(233,208,19)" fg:x="9056" fg:w="39"/><text x="95.2563%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,673 samples, 90.99%)</title><rect x="4.5531%" y="132" width="90.9883%" height="15" fill="rgb(216,164,2)" fg:x="434" fg:w="8673"/><text x="4.8031%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (32 samples, 0.34%)</title><rect x="95.5413%" y="132" width="0.3357%" height="15" fill="rgb(220,129,5)" fg:x="9107" fg:w="32"/><text x="95.7913%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (10 samples, 0.10%)</title><rect x="95.9190%" y="132" width="0.1049%" height="15" fill="rgb(242,17,10)" fg:x="9143" fg:w="10"/><text x="96.1690%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="98.0697%" y="148" width="0.1154%" height="15" fill="rgb(242,107,0)" fg:x="9348" fg:w="11"/><text x="98.3197%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (253 samples, 2.65%)</title><rect x="96.0239%" y="132" width="2.6542%" height="15" fill="rgb(251,28,31)" fg:x="9153" fg:w="253"/><text x="96.2739%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.49%)</title><rect x="98.1851%" y="148" width="0.4931%" height="15" fill="rgb(233,223,10)" fg:x="9359" fg:w="47"/><text x="98.4351%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (9,049 samples, 94.93%)</title><rect x="4.5321%" y="116" width="94.9329%" height="15" fill="rgb(215,21,27)" fg:x="432" fg:w="9049"/><text x="4.7821%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (75 samples, 0.79%)</title><rect x="98.6781%" y="132" width="0.7868%" height="15" fill="rgb(232,23,21)" fg:x="9406" fg:w="75"/><text x="98.9281%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.16%)</title><rect x="99.3076%" y="148" width="0.1574%" height="15" fill="rgb(244,5,23)" fg:x="9466" fg:w="15"/><text x="99.5576%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,479 samples, 99.44%)</title><rect x="0.0315%" y="68" width="99.4440%" height="15" fill="rgb(226,81,46)" fg:x="3" fg:w="9479"/><text x="0.2815%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,465 samples, 99.30%)</title><rect x="0.1783%" y="84" width="99.2971%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="9465"/><text x="0.4283%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (9,430 samples, 98.93%)</title><rect x="0.5455%" y="100" width="98.9299%" height="15" fill="rgb(212,68,19)" fg:x="52" fg:w="9430"/><text x="0.7955%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (12 samples, 0.13%)</title><rect x="99.4859%" y="260" width="0.1259%" height="15" fill="rgb(240,187,13)" fg:x="9483" fg:w="12"/><text x="99.7359%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (12 samples, 0.13%)</title><rect x="99.4859%" y="276" width="0.1259%" height="15" fill="rgb(223,113,26)" fg:x="9483" fg:w="12"/><text x="99.7359%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (12 samples, 0.13%)</title><rect x="99.4859%" y="292" width="0.1259%" height="15" fill="rgb(206,192,2)" fg:x="9483" fg:w="12"/><text x="99.7359%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (16 samples, 0.17%)</title><rect x="99.4755%" y="68" width="0.1679%" height="15" fill="rgb(241,108,4)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (16 samples, 0.17%)</title><rect x="99.4755%" y="84" width="0.1679%" height="15" fill="rgb(247,173,49)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (16 samples, 0.17%)</title><rect x="99.4755%" y="100" width="0.1679%" height="15" fill="rgb(224,114,35)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (16 samples, 0.17%)</title><rect x="99.4755%" y="116" width="0.1679%" height="15" fill="rgb(245,159,27)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (16 samples, 0.17%)</title><rect x="99.4755%" y="132" width="0.1679%" height="15" fill="rgb(245,172,44)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (16 samples, 0.17%)</title><rect x="99.4755%" y="148" width="0.1679%" height="15" fill="rgb(236,23,11)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (16 samples, 0.17%)</title><rect x="99.4755%" y="164" width="0.1679%" height="15" fill="rgb(205,117,38)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (16 samples, 0.17%)</title><rect x="99.4755%" y="180" width="0.1679%" height="15" fill="rgb(237,72,25)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (16 samples, 0.17%)</title><rect x="99.4755%" y="196" width="0.1679%" height="15" fill="rgb(244,70,9)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (16 samples, 0.17%)</title><rect x="99.4755%" y="212" width="0.1679%" height="15" fill="rgb(217,125,39)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (16 samples, 0.17%)</title><rect x="99.4755%" y="228" width="0.1679%" height="15" fill="rgb(235,36,10)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (16 samples, 0.17%)</title><rect x="99.4755%" y="244" width="0.1679%" height="15" fill="rgb(251,123,47)" fg:x="9482" fg:w="16"/><text x="99.7255%" y="254.50"></text></g><g><title>sites (kappybara/pattern.py:109) (15 samples, 0.16%)</title><rect x="99.7902%" y="68" width="0.1574%" height="15" fill="rgb(221,13,13)" fg:x="9512" fg:w="15"/><text x="100.0402%" y="78.50"></text></g><g><title>all (9,532 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="9532"/><text x="0.2500%" y="62.50"></text></g></svg></svg>