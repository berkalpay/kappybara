<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit edf1d90</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="9487"><g><title>update (kappybara/system.py:69) (43 samples, 0.45%)</title><rect x="0.1159%" y="84" width="0.4533%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="43"/><text x="0.3659%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (43 samples, 0.45%)</title><rect x="0.1159%" y="100" width="0.4533%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="43"/><text x="0.3659%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (41 samples, 0.43%)</title><rect x="0.1370%" y="116" width="0.4322%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="41"/><text x="0.3870%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (39 samples, 0.41%)</title><rect x="0.1581%" y="132" width="0.4111%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="39"/><text x="0.4081%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (39 samples, 0.41%)</title><rect x="0.1581%" y="148" width="0.4111%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="39"/><text x="0.4081%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (38 samples, 0.40%)</title><rect x="0.1687%" y="164" width="0.4005%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="38"/><text x="0.4187%" y="174.50"></text></g><g><title>act (kappybara/system.py:62) (11 samples, 0.12%)</title><rect x="0.5692%" y="100" width="0.1159%" height="15" fill="rgb(207,160,47)" fg:x="54" fg:w="11"/><text x="0.8192%" y="110.50"></text></g><g><title>select (kappybara/rule.py:203) (18 samples, 0.19%)</title><rect x="0.7695%" y="116" width="0.1897%" height="15" fill="rgb(228,23,34)" fg:x="73" fg:w="18"/><text x="1.0195%" y="126.50"></text></g><g><title>_produce_update (kappybara/rule.py:148) (11 samples, 0.12%)</title><rect x="0.8433%" y="132" width="0.1159%" height="15" fill="rgb(218,30,26)" fg:x="80" fg:w="11"/><text x="1.0933%" y="142.50"></text></g><g><title>act (kappybara/system.py:63) (48 samples, 0.51%)</title><rect x="0.6851%" y="100" width="0.5060%" height="15" fill="rgb(220,122,19)" fg:x="65" fg:w="48"/><text x="0.9351%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (17 samples, 0.18%)</title><rect x="1.0119%" y="116" width="0.1792%" height="15" fill="rgb(250,228,42)" fg:x="96" fg:w="17"/><text x="1.2619%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (31 samples, 0.33%)</title><rect x="1.3492%" y="148" width="0.3268%" height="15" fill="rgb(240,193,28)" fg:x="128" fg:w="31"/><text x="1.5992%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (70 samples, 0.74%)</title><rect x="1.7392%" y="148" width="0.7379%" height="15" fill="rgb(216,20,37)" fg:x="165" fg:w="70"/><text x="1.9892%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.14%)</title><rect x="2.3400%" y="164" width="0.1370%" height="15" fill="rgb(206,188,39)" fg:x="222" fg:w="13"/><text x="2.5900%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (12 samples, 0.13%)</title><rect x="2.4771%" y="148" width="0.1265%" height="15" fill="rgb(217,207,13)" fg:x="235" fg:w="12"/><text x="2.7271%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (14 samples, 0.15%)</title><rect x="3.3836%" y="180" width="0.1476%" height="15" fill="rgb(231,73,38)" fg:x="321" fg:w="14"/><text x="3.6336%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (81 samples, 0.85%)</title><rect x="3.5311%" y="180" width="0.8538%" height="15" fill="rgb(225,20,46)" fg:x="335" fg:w="81"/><text x="3.7811%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (52 samples, 0.55%)</title><rect x="3.8368%" y="196" width="0.5481%" height="15" fill="rgb(210,31,41)" fg:x="364" fg:w="52"/><text x="4.0868%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (320 samples, 3.37%)</title><rect x="1.2649%" y="132" width="3.3730%" height="15" fill="rgb(221,200,47)" fg:x="120" fg:w="320"/><text x="1.5149%" y="142.50">_re..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (192 samples, 2.02%)</title><rect x="2.6141%" y="148" width="2.0238%" height="15" fill="rgb(226,26,5)" fg:x="248" fg:w="192"/><text x="2.8641%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (173 samples, 1.82%)</title><rect x="2.8144%" y="164" width="1.8235%" height="15" fill="rgb(249,33,26)" fg:x="267" fg:w="173"/><text x="3.0644%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (22 samples, 0.23%)</title><rect x="4.4060%" y="180" width="0.2319%" height="15" fill="rgb(235,183,28)" fg:x="418" fg:w="22"/><text x="4.6560%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (358 samples, 3.77%)</title><rect x="1.1911%" y="116" width="3.7736%" height="15" fill="rgb(221,5,38)" fg:x="113" fg:w="358"/><text x="1.4411%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (31 samples, 0.33%)</title><rect x="4.6379%" y="132" width="0.3268%" height="15" fill="rgb(247,18,42)" fg:x="440" fg:w="31"/><text x="4.8879%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (19 samples, 0.20%)</title><rect x="4.7644%" y="148" width="0.2003%" height="15" fill="rgb(241,131,45)" fg:x="452" fg:w="19"/><text x="5.0144%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (51 samples, 0.54%)</title><rect x="5.5023%" y="148" width="0.5376%" height="15" fill="rgb(249,31,29)" fg:x="522" fg:w="51"/><text x="5.7523%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="10.0769%" y="164" width="0.1265%" height="15" fill="rgb(225,111,53)" fg:x="956" fg:w="12"/><text x="10.3269%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (436 samples, 4.60%)</title><rect x="6.0398%" y="148" width="4.5958%" height="15" fill="rgb(238,160,17)" fg:x="573" fg:w="436"/><text x="6.2898%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.43%)</title><rect x="10.2034%" y="164" width="0.4322%" height="15" fill="rgb(214,148,48)" fg:x="968" fg:w="41"/><text x="10.4534%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="13.5765%" y="164" width="0.1159%" height="15" fill="rgb(232,36,49)" fg:x="1288" fg:w="11"/><text x="13.8265%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (310 samples, 3.27%)</title><rect x="10.6356%" y="148" width="3.2676%" height="15" fill="rgb(209,103,24)" fg:x="1009" fg:w="310"/><text x="10.8856%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.21%)</title><rect x="13.6924%" y="164" width="0.2108%" height="15" fill="rgb(229,88,8)" fg:x="1299" fg:w="20"/><text x="13.9424%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (94 samples, 0.99%)</title><rect x="13.9243%" y="148" width="0.9908%" height="15" fill="rgb(213,181,19)" fg:x="1321" fg:w="94"/><text x="14.1743%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (72 samples, 0.76%)</title><rect x="14.9151%" y="148" width="0.7589%" height="15" fill="rgb(254,191,54)" fg:x="1415" fg:w="72"/><text x="15.1651%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.19%)</title><rect x="17.8033%" y="164" width="0.1897%" height="15" fill="rgb(241,83,37)" fg:x="1689" fg:w="18"/><text x="18.0533%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (284 samples, 2.99%)</title><rect x="15.6741%" y="148" width="2.9936%" height="15" fill="rgb(233,36,39)" fg:x="1487" fg:w="284"/><text x="15.9241%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (64 samples, 0.67%)</title><rect x="17.9930%" y="164" width="0.6746%" height="15" fill="rgb(226,3,54)" fg:x="1707" fg:w="64"/><text x="18.2430%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (239 samples, 2.52%)</title><rect x="18.6677%" y="148" width="2.5192%" height="15" fill="rgb(245,192,40)" fg:x="1771" fg:w="239"/><text x="18.9177%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (13 samples, 0.14%)</title><rect x="22.9894%" y="164" width="0.1370%" height="15" fill="rgb(238,167,29)" fg:x="2181" fg:w="13"/><text x="23.2394%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (87 samples, 0.92%)</title><rect x="23.1264%" y="164" width="0.9170%" height="15" fill="rgb(232,182,51)" fg:x="2194" fg:w="87"/><text x="23.3764%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (143 samples, 1.51%)</title><rect x="25.9513%" y="180" width="1.5073%" height="15" fill="rgb(231,60,39)" fg:x="2462" fg:w="143"/><text x="26.2013%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (95 samples, 1.00%)</title><rect x="29.3981%" y="196" width="1.0014%" height="15" fill="rgb(208,69,12)" fg:x="2789" fg:w="95"/><text x="29.6481%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (982 samples, 10.35%)</title><rect x="24.0751%" y="164" width="10.3510%" height="15" fill="rgb(235,93,37)" fg:x="2284" fg:w="982"/><text x="24.3251%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (661 samples, 6.97%)</title><rect x="27.4586%" y="180" width="6.9674%" height="15" fill="rgb(213,116,39)" fg:x="2605" fg:w="661"/><text x="27.7086%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (382 samples, 4.03%)</title><rect x="30.3995%" y="196" width="4.0266%" height="15" fill="rgb(222,207,29)" fg:x="2884" fg:w="382"/><text x="30.6495%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (129 samples, 1.36%)</title><rect x="34.4261%" y="164" width="1.3598%" height="15" fill="rgb(206,96,30)" fg:x="3266" fg:w="129"/><text x="34.6761%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (99 samples, 1.04%)</title><rect x="36.9031%" y="180" width="1.0435%" height="15" fill="rgb(218,138,4)" fg:x="3501" fg:w="99"/><text x="37.1531%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (222 samples, 2.34%)</title><rect x="35.8491%" y="164" width="2.3400%" height="15" fill="rgb(250,191,14)" fg:x="3401" fg:w="222"/><text x="36.0991%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (23 samples, 0.24%)</title><rect x="37.9467%" y="180" width="0.2424%" height="15" fill="rgb(239,60,40)" fg:x="3600" fg:w="23"/><text x="38.1967%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (200 samples, 2.11%)</title><rect x="48.6034%" y="180" width="2.1081%" height="15" fill="rgb(206,27,48)" fg:x="4611" fg:w="200"/><text x="48.8534%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (12 samples, 0.13%)</title><rect x="50.7115%" y="180" width="0.1265%" height="15" fill="rgb(225,35,8)" fg:x="4811" fg:w="12"/><text x="50.9615%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (20 samples, 0.21%)</title><rect x="51.1964%" y="196" width="0.2108%" height="15" fill="rgb(250,213,24)" fg:x="4857" fg:w="20"/><text x="51.4464%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (176 samples, 1.86%)</title><rect x="50.8380%" y="180" width="1.8552%" height="15" fill="rgb(247,123,22)" fg:x="4823" fg:w="176"/><text x="51.0880%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (122 samples, 1.29%)</title><rect x="51.4072%" y="196" width="1.2860%" height="15" fill="rgb(231,138,38)" fg:x="4877" fg:w="122"/><text x="51.6572%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (19 samples, 0.20%)</title><rect x="53.7262%" y="196" width="0.2003%" height="15" fill="rgb(231,145,46)" fg:x="5097" fg:w="19"/><text x="53.9762%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (30 samples, 0.32%)</title><rect x="56.4457%" y="212" width="0.3162%" height="15" fill="rgb(251,118,11)" fg:x="5355" fg:w="30"/><text x="56.6957%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (533 samples, 5.62%)</title><rect x="53.9264%" y="196" width="5.6182%" height="15" fill="rgb(217,147,25)" fg:x="5116" fg:w="533"/><text x="54.1764%" y="206.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (264 samples, 2.78%)</title><rect x="56.7619%" y="212" width="2.7828%" height="15" fill="rgb(247,81,37)" fg:x="5385" fg:w="264"/><text x="57.0119%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.45%)</title><rect x="59.0914%" y="228" width="0.4533%" height="15" fill="rgb(209,12,38)" fg:x="5606" fg:w="43"/><text x="59.3414%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (243 samples, 2.56%)</title><rect x="59.5446%" y="196" width="2.5614%" height="15" fill="rgb(227,1,9)" fg:x="5649" fg:w="243"/><text x="59.7946%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (99 samples, 1.04%)</title><rect x="62.1060%" y="196" width="1.0435%" height="15" fill="rgb(248,47,43)" fg:x="5892" fg:w="99"/><text x="62.3560%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (11 samples, 0.12%)</title><rect x="63.1496%" y="196" width="0.1159%" height="15" fill="rgb(221,10,30)" fg:x="5991" fg:w="11"/><text x="63.3996%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,053 samples, 11.10%)</title><rect x="52.6932%" y="180" width="11.0994%" height="15" fill="rgb(210,229,1)" fg:x="4999" fg:w="1053"/><text x="52.9432%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (50 samples, 0.53%)</title><rect x="63.2655%" y="196" width="0.5270%" height="15" fill="rgb(222,148,37)" fg:x="6002" fg:w="50"/><text x="63.5155%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (26 samples, 0.27%)</title><rect x="63.8242%" y="180" width="0.2741%" height="15" fill="rgb(234,67,33)" fg:x="6055" fg:w="26"/><text x="64.0742%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.15%)</title><rect x="65.0047%" y="196" width="0.1476%" height="15" fill="rgb(247,98,35)" fg:x="6167" fg:w="14"/><text x="65.2547%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (300 samples, 3.16%)</title><rect x="64.0982%" y="180" width="3.1622%" height="15" fill="rgb(247,138,52)" fg:x="6081" fg:w="300"/><text x="64.3482%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (200 samples, 2.11%)</title><rect x="65.1523%" y="196" width="2.1081%" height="15" fill="rgb(213,79,30)" fg:x="6181" fg:w="200"/><text x="65.4023%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.32%)</title><rect x="66.9442%" y="212" width="0.3162%" height="15" fill="rgb(246,177,23)" fg:x="6351" fg:w="30"/><text x="67.1942%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (379 samples, 3.99%)</title><rect x="67.2605%" y="180" width="3.9949%" height="15" fill="rgb(230,62,27)" fg:x="6381" fg:w="379"/><text x="67.5105%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (277 samples, 2.92%)</title><rect x="68.3356%" y="196" width="2.9198%" height="15" fill="rgb(216,154,8)" fg:x="6483" fg:w="277"/><text x="68.5856%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (63 samples, 0.66%)</title><rect x="70.5913%" y="212" width="0.6641%" height="15" fill="rgb(244,35,45)" fg:x="6697" fg:w="63"/><text x="70.8413%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (90 samples, 0.95%)</title><rect x="71.2554%" y="180" width="0.9487%" height="15" fill="rgb(251,115,12)" fg:x="6760" fg:w="90"/><text x="71.5054%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (175 samples, 1.84%)</title><rect x="72.2252%" y="180" width="1.8446%" height="15" fill="rgb(240,54,50)" fg:x="6852" fg:w="175"/><text x="72.4752%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (81 samples, 0.85%)</title><rect x="74.0698%" y="180" width="0.8538%" height="15" fill="rgb(233,84,52)" fg:x="7027" fg:w="81"/><text x="74.3198%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (21 samples, 0.22%)</title><rect x="74.9236%" y="180" width="0.2214%" height="15" fill="rgb(207,117,47)" fg:x="7108" fg:w="21"/><text x="75.1736%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,790 samples, 39.95%)</title><rect x="38.1891%" y="164" width="39.9494%" height="15" fill="rgb(249,43,39)" fg:x="3623" fg:w="3790"/><text x="38.4391%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (284 samples, 2.99%)</title><rect x="75.1449%" y="180" width="2.9936%" height="15" fill="rgb(209,38,44)" fg:x="7129" fg:w="284"/><text x="75.3949%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,458 samples, 57.53%)</title><rect x="21.1869%" y="148" width="57.5314%" height="15" fill="rgb(236,212,23)" fg:x="2010" fg:w="5458"/><text x="21.4369%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (55 samples, 0.58%)</title><rect x="78.1385%" y="164" width="0.5797%" height="15" fill="rgb(242,79,21)" fg:x="7413" fg:w="55"/><text x="78.3885%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (17 samples, 0.18%)</title><rect x="78.7182%" y="148" width="0.1792%" height="15" fill="rgb(211,96,35)" fg:x="7468" fg:w="17"/><text x="78.9682%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (74 samples, 0.78%)</title><rect x="80.0780%" y="164" width="0.7800%" height="15" fill="rgb(253,215,40)" fg:x="7597" fg:w="74"/><text x="80.3280%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (44 samples, 0.46%)</title><rect x="82.0386%" y="180" width="0.4638%" height="15" fill="rgb(211,81,21)" fg:x="7783" fg:w="44"/><text x="82.2886%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (578 samples, 6.09%)</title><rect x="78.9396%" y="148" width="6.0925%" height="15" fill="rgb(208,190,38)" fg:x="7489" fg:w="578"/><text x="79.1896%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (396 samples, 4.17%)</title><rect x="80.8580%" y="164" width="4.1741%" height="15" fill="rgb(235,213,38)" fg:x="7671" fg:w="396"/><text x="81.1080%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (240 samples, 2.53%)</title><rect x="82.5024%" y="180" width="2.5298%" height="15" fill="rgb(237,122,38)" fg:x="7827" fg:w="240"/><text x="82.7524%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (45 samples, 0.47%)</title><rect x="85.6119%" y="164" width="0.4743%" height="15" fill="rgb(244,218,35)" fg:x="8122" fg:w="45"/><text x="85.8619%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (108 samples, 1.14%)</title><rect x="85.0321%" y="148" width="1.1384%" height="15" fill="rgb(240,68,47)" fg:x="8067" fg:w="108"/><text x="85.2821%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (24 samples, 0.25%)</title><rect x="86.5184%" y="164" width="0.2530%" height="15" fill="rgb(210,16,53)" fg:x="8208" fg:w="24"/><text x="86.7684%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (103 samples, 1.09%)</title><rect x="86.1705%" y="148" width="1.0857%" height="15" fill="rgb(235,124,12)" fg:x="8175" fg:w="103"/><text x="86.4205%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (46 samples, 0.48%)</title><rect x="86.7714%" y="164" width="0.4849%" height="15" fill="rgb(224,169,11)" fg:x="8232" fg:w="46"/><text x="87.0214%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="88.8795%" y="164" width="0.1054%" height="15" fill="rgb(250,166,2)" fg:x="8432" fg:w="10"/><text x="89.1295%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (191 samples, 2.01%)</title><rect x="87.2562%" y="148" width="2.0133%" height="15" fill="rgb(242,216,29)" fg:x="8278" fg:w="191"/><text x="87.5062%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.28%)</title><rect x="88.9849%" y="164" width="0.2846%" height="15" fill="rgb(230,116,27)" fg:x="8442" fg:w="27"/><text x="89.2349%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (62 samples, 0.65%)</title><rect x="89.2695%" y="148" width="0.6535%" height="15" fill="rgb(228,99,48)" fg:x="8469" fg:w="62"/><text x="89.5195%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="89.8071%" y="164" width="0.1159%" height="15" fill="rgb(253,11,6)" fg:x="8520" fg:w="11"/><text x="90.0571%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (77 samples, 0.81%)</title><rect x="89.9231%" y="148" width="0.8116%" height="15" fill="rgb(247,143,39)" fg:x="8531" fg:w="77"/><text x="90.1731%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (128 samples, 1.35%)</title><rect x="92.7269%" y="164" width="1.3492%" height="15" fill="rgb(236,97,10)" fg:x="8797" fg:w="128"/><text x="92.9769%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.22%)</title><rect x="93.8547%" y="180" width="0.2214%" height="15" fill="rgb(233,208,19)" fg:x="8904" fg:w="21"/><text x="94.1047%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (336 samples, 3.54%)</title><rect x="90.7347%" y="148" width="3.5417%" height="15" fill="rgb(216,164,2)" fg:x="8608" fg:w="336"/><text x="90.9847%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="94.1499%" y="164" width="0.1265%" height="15" fill="rgb(220,129,5)" fg:x="8932" fg:w="12"/><text x="94.3999%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (60 samples, 0.63%)</title><rect x="94.2869%" y="148" width="0.6324%" height="15" fill="rgb(242,17,10)" fg:x="8945" fg:w="60"/><text x="94.5369%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (11 samples, 0.12%)</title><rect x="94.9194%" y="148" width="0.1159%" height="15" fill="rgb(242,107,0)" fg:x="9005" fg:w="11"/><text x="95.1694%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,543 samples, 90.05%)</title><rect x="5.0596%" y="132" width="90.0495%" height="15" fill="rgb(251,28,31)" fg:x="480" fg:w="8543"/><text x="5.3096%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (42 samples, 0.44%)</title><rect x="95.1091%" y="132" width="0.4427%" height="15" fill="rgb(233,223,10)" fg:x="9023" fg:w="42"/><text x="95.3591%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (11 samples, 0.12%)</title><rect x="95.5518%" y="132" width="0.1159%" height="15" fill="rgb(215,21,27)" fg:x="9065" fg:w="11"/><text x="95.8018%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.22%)</title><rect x="97.9129%" y="148" width="0.2214%" height="15" fill="rgb(232,23,21)" fg:x="9289" fg:w="21"/><text x="98.1629%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (260 samples, 2.74%)</title><rect x="95.7626%" y="132" width="2.7406%" height="15" fill="rgb(244,5,23)" fg:x="9085" fg:w="260"/><text x="96.0126%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.37%)</title><rect x="98.1343%" y="148" width="0.3689%" height="15" fill="rgb(226,81,46)" fg:x="9310" fg:w="35"/><text x="98.3843%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="99.2516%" y="148" width="0.1054%" height="15" fill="rgb(247,70,30)" fg:x="9416" fg:w="10"/><text x="99.5016%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,329 samples, 98.33%)</title><rect x="1.1911%" y="100" width="98.3346%" height="15" fill="rgb(212,68,19)" fg:x="113" fg:w="9329"/><text x="1.4411%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,968 samples, 94.53%)</title><rect x="4.9963%" y="116" width="94.5294%" height="15" fill="rgb(240,187,13)" fg:x="474" fg:w="8968"/><text x="5.2463%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (97 samples, 1.02%)</title><rect x="98.5032%" y="132" width="1.0225%" height="15" fill="rgb(223,113,26)" fg:x="9345" fg:w="97"/><text x="98.7532%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.17%)</title><rect x="99.3570%" y="148" width="0.1687%" height="15" fill="rgb(206,192,2)" fg:x="9426" fg:w="16"/><text x="99.6070%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,433 samples, 99.43%)</title><rect x="0.1054%" y="68" width="99.4308%" height="15" fill="rgb(241,108,4)" fg:x="10" fg:w="9433"/><text x="0.3554%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,389 samples, 98.97%)</title><rect x="0.5692%" y="84" width="98.9670%" height="15" fill="rgb(247,173,49)" fg:x="54" fg:w="9389"/><text x="0.8192%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:97) (14 samples, 0.15%)</title><rect x="99.6627%" y="68" width="0.1476%" height="15" fill="rgb(224,114,35)" fg:x="9455" fg:w="14"/><text x="99.9127%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (14 samples, 0.15%)</title><rect x="99.8103%" y="68" width="0.1476%" height="15" fill="rgb(245,159,27)" fg:x="9469" fg:w="14"/><text x="100.0603%" y="78.50"></text></g><g><title>all (9,487 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="9487"/><text x="0.2500%" y="62.50"></text></g></svg></svg>