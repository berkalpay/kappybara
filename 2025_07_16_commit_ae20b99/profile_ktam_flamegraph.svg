<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit ae20b99</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="9624"><g><title>update (kappybara/system.py:70) (17 samples, 0.18%)</title><rect x="0.0623%" y="84" width="0.1766%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="17"/><text x="0.3123%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (17 samples, 0.18%)</title><rect x="0.0623%" y="100" width="0.1766%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="17"/><text x="0.3123%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (15 samples, 0.16%)</title><rect x="0.0831%" y="116" width="0.1559%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="15"/><text x="0.3331%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (15 samples, 0.16%)</title><rect x="0.0831%" y="132" width="0.1559%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="15"/><text x="0.3331%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (15 samples, 0.16%)</title><rect x="0.0831%" y="148" width="0.1559%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="15"/><text x="0.3331%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (13 samples, 0.14%)</title><rect x="0.1039%" y="164" width="0.1351%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="13"/><text x="0.3539%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (26 samples, 0.27%)</title><rect x="0.3221%" y="116" width="0.2702%" height="15" fill="rgb(207,160,47)" fg:x="31" fg:w="26"/><text x="0.5721%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (34 samples, 0.35%)</title><rect x="0.3221%" y="100" width="0.3533%" height="15" fill="rgb(228,23,34)" fg:x="31" fg:w="34"/><text x="0.5721%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (77 samples, 0.80%)</title><rect x="1.1638%" y="180" width="0.8001%" height="15" fill="rgb(218,30,26)" fg:x="112" fg:w="77"/><text x="1.4138%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.10%)</title><rect x="11.6687%" y="196" width="0.1039%" height="15" fill="rgb(220,122,19)" fg:x="1123" fg:w="10"/><text x="11.9187%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (979 samples, 10.17%)</title><rect x="1.9638%" y="180" width="10.1725%" height="15" fill="rgb(250,228,42)" fg:x="189" fg:w="979"/><text x="2.2138%" y="190.50">embeddings (kap..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.36%)</title><rect x="11.7727%" y="196" width="0.3637%" height="15" fill="rgb(240,193,28)" fg:x="1133" fg:w="35"/><text x="12.0227%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.12%)</title><rect x="15.0249%" y="196" width="0.1247%" height="15" fill="rgb(216,20,37)" fg:x="1446" fg:w="12"/><text x="15.2749%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (323 samples, 3.36%)</title><rect x="12.1363%" y="180" width="3.3562%" height="15" fill="rgb(206,188,39)" fg:x="1168" fg:w="323"/><text x="12.3863%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.34%)</title><rect x="15.1496%" y="196" width="0.3429%" height="15" fill="rgb(217,207,13)" fg:x="1458" fg:w="33"/><text x="15.3996%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (81 samples, 0.84%)</title><rect x="15.5133%" y="180" width="0.8416%" height="15" fill="rgb(231,73,38)" fg:x="1493" fg:w="81"/><text x="15.7633%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (57 samples, 0.59%)</title><rect x="16.3549%" y="180" width="0.5923%" height="15" fill="rgb(225,20,46)" fg:x="1574" fg:w="57"/><text x="16.6049%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (31 samples, 0.32%)</title><rect x="19.8254%" y="196" width="0.3221%" height="15" fill="rgb(210,31,41)" fg:x="1908" fg:w="31"/><text x="20.0754%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (358 samples, 3.72%)</title><rect x="16.9472%" y="180" width="3.7199%" height="15" fill="rgb(221,200,47)" fg:x="1631" fg:w="358"/><text x="17.1972%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (50 samples, 0.52%)</title><rect x="20.1475%" y="196" width="0.5195%" height="15" fill="rgb(226,26,5)" fg:x="1939" fg:w="50"/><text x="20.3975%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (264 samples, 2.74%)</title><rect x="20.6671%" y="180" width="2.7431%" height="15" fill="rgb(249,33,26)" fg:x="1989" fg:w="264"/><text x="20.9171%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (16 samples, 0.17%)</title><rect x="25.0520%" y="196" width="0.1663%" height="15" fill="rgb(235,183,28)" fg:x="2411" fg:w="16"/><text x="25.3020%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (97 samples, 1.01%)</title><rect x="25.2182%" y="196" width="1.0079%" height="15" fill="rgb(221,5,38)" fg:x="2427" fg:w="97"/><text x="25.4682%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (157 samples, 1.63%)</title><rect x="28.4705%" y="212" width="1.6313%" height="15" fill="rgb(247,18,42)" fg:x="2740" fg:w="157"/><text x="28.7205%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (92 samples, 0.96%)</title><rect x="31.9098%" y="228" width="0.9559%" height="15" fill="rgb(241,131,45)" fg:x="3071" fg:w="92"/><text x="32.1598%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (993 samples, 10.32%)</title><rect x="26.3092%" y="196" width="10.3180%" height="15" fill="rgb(249,31,29)" fg:x="2532" fg:w="993"/><text x="26.5592%" y="206.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (628 samples, 6.53%)</title><rect x="30.1018%" y="212" width="6.5254%" height="15" fill="rgb(225,111,53)" fg:x="2897" fg:w="628"/><text x="30.3518%" y="222.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:113) (362 samples, 3.76%)</title><rect x="32.8658%" y="228" width="3.7614%" height="15" fill="rgb(238,160,17)" fg:x="3163" fg:w="362"/><text x="33.1158%" y="238.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (102 samples, 1.06%)</title><rect x="36.6272%" y="196" width="1.0599%" height="15" fill="rgb(214,148,48)" fg:x="3525" fg:w="102"/><text x="36.8772%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (17 samples, 0.18%)</title><rect x="38.7261%" y="212" width="0.1766%" height="15" fill="rgb(232,36,49)" fg:x="3727" fg:w="17"/><text x="38.9761%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (186 samples, 1.93%)</title><rect x="37.7805%" y="196" width="1.9327%" height="15" fill="rgb(209,103,24)" fg:x="3636" fg:w="186"/><text x="38.0305%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (78 samples, 0.81%)</title><rect x="38.9027%" y="212" width="0.8105%" height="15" fill="rgb(229,88,8)" fg:x="3744" fg:w="78"/><text x="39.1527%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (188 samples, 1.95%)</title><rect x="49.5324%" y="212" width="1.9534%" height="15" fill="rgb(213,181,19)" fg:x="4767" fg:w="188"/><text x="49.7824%" y="222.50">_..</text></g><g><title>stated (kappybara/pattern.py:52) (16 samples, 0.17%)</title><rect x="52.3379%" y="228" width="0.1663%" height="15" fill="rgb(254,191,54)" fg:x="5037" fg:w="16"/><text x="52.5879%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (201 samples, 2.09%)</title><rect x="51.5794%" y="212" width="2.0885%" height="15" fill="rgb(241,83,37)" fg:x="4964" fg:w="201"/><text x="51.8294%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (112 samples, 1.16%)</title><rect x="52.5042%" y="228" width="1.1638%" height="15" fill="rgb(233,36,39)" fg:x="5053" fg:w="112"/><text x="52.7542%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.20%)</title><rect x="56.6812%" y="244" width="0.1974%" height="15" fill="rgb(226,3,54)" fg:x="5455" fg:w="19"/><text x="56.9312%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (503 samples, 5.23%)</title><rect x="54.5927%" y="228" width="5.2265%" height="15" fill="rgb(245,192,40)" fg:x="5254" fg:w="503"/><text x="54.8427%" y="238.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (283 samples, 2.94%)</title><rect x="56.8786%" y="244" width="2.9406%" height="15" fill="rgb(238,167,29)" fg:x="5474" fg:w="283"/><text x="57.1286%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (46 samples, 0.48%)</title><rect x="59.3412%" y="260" width="0.4780%" height="15" fill="rgb(232,182,51)" fg:x="5711" fg:w="46"/><text x="59.5912%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (271 samples, 2.82%)</title><rect x="59.8192%" y="228" width="2.8159%" height="15" fill="rgb(231,60,39)" fg:x="5757" fg:w="271"/><text x="60.0692%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (90 samples, 0.94%)</title><rect x="62.6351%" y="228" width="0.9352%" height="15" fill="rgb(208,69,12)" fg:x="6028" fg:w="90"/><text x="62.8851%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.15%)</title><rect x="63.5702%" y="228" width="0.1455%" height="15" fill="rgb(235,93,37)" fg:x="6118" fg:w="14"/><text x="63.8202%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,005 samples, 10.44%)</title><rect x="53.6679%" y="212" width="10.4426%" height="15" fill="rgb(213,116,39)" fg:x="5165" fg:w="1005"/><text x="53.9179%" y="222.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:66) (38 samples, 0.39%)</title><rect x="63.7157%" y="228" width="0.3948%" height="15" fill="rgb(222,207,29)" fg:x="6132" fg:w="38"/><text x="63.9657%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (24 samples, 0.25%)</title><rect x="64.2041%" y="212" width="0.2494%" height="15" fill="rgb(206,96,30)" fg:x="6179" fg:w="24"/><text x="64.4541%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.18%)</title><rect x="65.6588%" y="228" width="0.1766%" height="15" fill="rgb(218,138,4)" fg:x="6319" fg:w="17"/><text x="65.9088%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (323 samples, 3.36%)</title><rect x="64.4534%" y="212" width="3.3562%" height="15" fill="rgb(250,191,14)" fg:x="6203" fg:w="323"/><text x="64.7034%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (190 samples, 1.97%)</title><rect x="65.8354%" y="228" width="1.9742%" height="15" fill="rgb(239,60,40)" fg:x="6336" fg:w="190"/><text x="66.0854%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.20%)</title><rect x="67.6122%" y="244" width="0.1974%" height="15" fill="rgb(206,27,48)" fg:x="6507" fg:w="19"/><text x="67.8622%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.14%)</title><rect x="69.1500%" y="228" width="0.1351%" height="15" fill="rgb(225,35,8)" fg:x="6655" fg:w="13"/><text x="69.4000%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.12%)</title><rect x="71.8932%" y="244" width="0.1247%" height="15" fill="rgb(250,213,24)" fg:x="6919" fg:w="12"/><text x="72.1432%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (469 samples, 4.87%)</title><rect x="67.8096%" y="212" width="4.8732%" height="15" fill="rgb(247,123,22)" fg:x="6526" fg:w="469"/><text x="68.0596%" y="222.50">embeds..</text></g><g><title>__eq__ (kappybara/utils.py:33) (327 samples, 3.40%)</title><rect x="69.2851%" y="228" width="3.3978%" height="15" fill="rgb(231,138,38)" fg:x="6668" fg:w="327"/><text x="69.5351%" y="238.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (64 samples, 0.67%)</title><rect x="72.0179%" y="244" width="0.6650%" height="15" fill="rgb(231,145,46)" fg:x="6931" fg:w="64"/><text x="72.2679%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (79 samples, 0.82%)</title><rect x="72.6829%" y="212" width="0.8209%" height="15" fill="rgb(251,118,11)" fg:x="6995" fg:w="79"/><text x="72.9329%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (165 samples, 1.71%)</title><rect x="73.5141%" y="212" width="1.7145%" height="15" fill="rgb(217,147,25)" fg:x="7075" fg:w="165"/><text x="73.7641%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (82 samples, 0.85%)</title><rect x="75.2286%" y="212" width="0.8520%" height="15" fill="rgb(247,81,37)" fg:x="7240" fg:w="82"/><text x="75.4786%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (25 samples, 0.26%)</title><rect x="76.0806%" y="212" width="0.2598%" height="15" fill="rgb(209,12,38)" fg:x="7322" fg:w="25"/><text x="76.3306%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,817 samples, 39.66%)</title><rect x="39.7132%" y="196" width="39.6613%" height="15" fill="rgb(227,1,9)" fg:x="3822" fg:w="3817"/><text x="39.9632%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (292 samples, 3.03%)</title><rect x="76.3404%" y="212" width="3.0341%" height="15" fill="rgb(248,47,43)" fg:x="7347" fg:w="292"/><text x="76.5904%" y="222.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,434 samples, 56.46%)</title><rect x="23.4102%" y="180" width="56.4630%" height="15" fill="rgb(221,10,30)" fg:x="2253" fg:w="5434"/><text x="23.6602%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (48 samples, 0.50%)</title><rect x="79.3745%" y="196" width="0.4988%" height="15" fill="rgb(210,229,1)" fg:x="7639" fg:w="48"/><text x="79.6245%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (10 samples, 0.10%)</title><rect x="79.9252%" y="180" width="0.1039%" height="15" fill="rgb(222,148,37)" fg:x="7692" fg:w="10"/><text x="80.1752%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (73 samples, 0.76%)</title><rect x="81.0162%" y="196" width="0.7585%" height="15" fill="rgb(234,67,33)" fg:x="7797" fg:w="73"/><text x="81.2662%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (52 samples, 0.54%)</title><rect x="83.1047%" y="212" width="0.5403%" height="15" fill="rgb(247,98,35)" fg:x="7998" fg:w="52"/><text x="83.3547%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (611 samples, 6.35%)</title><rect x="80.0291%" y="180" width="6.3487%" height="15" fill="rgb(247,138,52)" fg:x="7702" fg:w="611"/><text x="80.2791%" y="190.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (443 samples, 4.60%)</title><rect x="81.7747%" y="196" width="4.6031%" height="15" fill="rgb(213,79,30)" fg:x="7870" fg:w="443"/><text x="82.0247%" y="206.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (263 samples, 2.73%)</title><rect x="83.6451%" y="212" width="2.7328%" height="15" fill="rgb(246,177,23)" fg:x="8050" fg:w="263"/><text x="83.8951%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:277) (93 samples, 0.97%)</title><rect x="86.3778%" y="180" width="0.9663%" height="15" fill="rgb(230,62,27)" fg:x="8313" fg:w="93"/><text x="86.6278%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (37 samples, 0.38%)</title><rect x="86.9597%" y="196" width="0.3845%" height="15" fill="rgb(216,154,8)" fg:x="8369" fg:w="37"/><text x="87.2097%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (22 samples, 0.23%)</title><rect x="87.6039%" y="196" width="0.2286%" height="15" fill="rgb(244,35,45)" fg:x="8431" fg:w="22"/><text x="87.8539%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (91 samples, 0.95%)</title><rect x="87.3441%" y="180" width="0.9456%" height="15" fill="rgb(251,115,12)" fg:x="8406" fg:w="91"/><text x="87.5941%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (44 samples, 0.46%)</title><rect x="87.8325%" y="196" width="0.4572%" height="15" fill="rgb(240,54,50)" fg:x="8453" fg:w="44"/><text x="88.0825%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.12%)</title><rect x="90.1185%" y="196" width="0.1247%" height="15" fill="rgb(233,84,52)" fg:x="8673" fg:w="12"/><text x="90.3685%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (217 samples, 2.25%)</title><rect x="88.2897%" y="180" width="2.2548%" height="15" fill="rgb(207,117,47)" fg:x="8497" fg:w="217"/><text x="88.5397%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.30%)</title><rect x="90.2431%" y="196" width="0.3013%" height="15" fill="rgb(249,43,39)" fg:x="8685" fg:w="29"/><text x="90.4931%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (53 samples, 0.55%)</title><rect x="90.5445%" y="180" width="0.5507%" height="15" fill="rgb(209,38,44)" fg:x="8714" fg:w="53"/><text x="90.7945%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (76 samples, 0.79%)</title><rect x="91.0952%" y="180" width="0.7897%" height="15" fill="rgb(236,212,23)" fg:x="8767" fg:w="76"/><text x="91.3452%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (129 samples, 1.34%)</title><rect x="94.3890%" y="196" width="1.3404%" height="15" fill="rgb(242,79,21)" fg:x="9084" fg:w="129"/><text x="94.6390%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.21%)</title><rect x="95.5216%" y="212" width="0.2078%" height="15" fill="rgb(211,96,35)" fg:x="9193" fg:w="20"/><text x="95.7716%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (382 samples, 3.97%)</title><rect x="91.8849%" y="180" width="3.9692%" height="15" fill="rgb(253,215,40)" fg:x="8843" fg:w="382"/><text x="92.1349%" y="190.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:287) (45 samples, 0.47%)</title><rect x="95.8541%" y="180" width="0.4676%" height="15" fill="rgb(211,81,21)" fg:x="9225" fg:w="45"/><text x="96.1041%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,207 samples, 95.67%)</title><rect x="0.7897%" y="164" width="95.6671%" height="15" fill="rgb(208,190,38)" fg:x="76" fg:w="9207"/><text x="1.0397%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (78 samples, 0.81%)</title><rect x="96.4568%" y="164" width="0.8105%" height="15" fill="rgb(235,213,38)" fg:x="9283" fg:w="78"/><text x="96.7068%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (15 samples, 0.16%)</title><rect x="97.1114%" y="180" width="0.1559%" height="15" fill="rgb(237,122,38)" fg:x="9346" fg:w="15"/><text x="97.3614%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (9,436 samples, 98.05%)</title><rect x="0.7377%" y="148" width="98.0466%" height="15" fill="rgb(244,218,35)" fg:x="71" fg:w="9436"/><text x="0.9877%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:124) (142 samples, 1.48%)</title><rect x="97.3088%" y="164" width="1.4755%" height="15" fill="rgb(240,68,47)" fg:x="9365" fg:w="142"/><text x="97.5588%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (34 samples, 0.35%)</title><rect x="98.4310%" y="180" width="0.3533%" height="15" fill="rgb(210,16,53)" fg:x="9473" fg:w="34"/><text x="98.6810%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (9,513 samples, 98.85%)</title><rect x="0.6754%" y="116" width="98.8466%" height="15" fill="rgb(235,124,12)" fg:x="65" fg:w="9513"/><text x="0.9254%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (9,511 samples, 98.83%)</title><rect x="0.6962%" y="132" width="98.8259%" height="15" fill="rgb(224,169,11)" fg:x="67" fg:w="9511"/><text x="0.9462%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (71 samples, 0.74%)</title><rect x="98.7843%" y="148" width="0.7377%" height="15" fill="rgb(250,166,2)" fg:x="9507" fg:w="71"/><text x="99.0343%" y="158.50"></text></g><g><title>act (kappybara/system.py:66) (9,517 samples, 98.89%)</title><rect x="0.6754%" y="100" width="98.8882%" height="15" fill="rgb(242,216,29)" fg:x="65" fg:w="9517"/><text x="0.9254%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,580 samples, 99.54%)</title><rect x="0.0520%" y="68" width="99.5428%" height="15" fill="rgb(230,116,27)" fg:x="5" fg:w="9580"/><text x="0.3020%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:71) (9,562 samples, 99.36%)</title><rect x="0.2390%" y="84" width="99.3558%" height="15" fill="rgb(228,99,48)" fg:x="23" fg:w="9562"/><text x="0.4890%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (10 samples, 0.10%)</title><rect x="99.5948%" y="68" width="0.1039%" height="15" fill="rgb(253,11,6)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.10%)</title><rect x="99.5948%" y="84" width="0.1039%" height="15" fill="rgb(247,143,39)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.10%)</title><rect x="99.5948%" y="100" width="0.1039%" height="15" fill="rgb(236,97,10)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.10%)</title><rect x="99.5948%" y="116" width="0.1039%" height="15" fill="rgb(233,208,19)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.10%)</title><rect x="99.5948%" y="132" width="0.1039%" height="15" fill="rgb(216,164,2)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.10%)</title><rect x="99.5948%" y="148" width="0.1039%" height="15" fill="rgb(220,129,5)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.10%)</title><rect x="99.5948%" y="164" width="0.1039%" height="15" fill="rgb(242,17,10)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.10%)</title><rect x="99.5948%" y="180" width="0.1039%" height="15" fill="rgb(242,107,0)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.10%)</title><rect x="99.5948%" y="196" width="0.1039%" height="15" fill="rgb(251,28,31)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.10%)</title><rect x="99.5948%" y="212" width="0.1039%" height="15" fill="rgb(233,223,10)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.10%)</title><rect x="99.5948%" y="228" width="0.1039%" height="15" fill="rgb(215,21,27)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.10%)</title><rect x="99.5948%" y="244" width="0.1039%" height="15" fill="rgb(232,23,21)" fg:x="9585" fg:w="10"/><text x="99.8448%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (10 samples, 0.10%)</title><rect x="99.7298%" y="68" width="0.1039%" height="15" fill="rgb(244,5,23)" fg:x="9598" fg:w="10"/><text x="99.9798%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (14 samples, 0.15%)</title><rect x="99.8337%" y="68" width="0.1455%" height="15" fill="rgb(226,81,46)" fg:x="9608" fg:w="14"/><text x="100.0837%" y="78.50"></text></g><g><title>all (9,624 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="9624"/><text x="0.2500%" y="62.50"></text></g></svg></svg>