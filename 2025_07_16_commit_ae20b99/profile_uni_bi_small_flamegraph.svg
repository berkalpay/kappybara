<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit ae20b99</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="11665"><g><title>update (kappybara/system.py:70) (50 samples, 0.43%)</title><rect x="0.0429%" y="84" width="0.4286%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="50"/><text x="0.2929%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (50 samples, 0.43%)</title><rect x="0.0429%" y="100" width="0.4286%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="50"/><text x="0.2929%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (48 samples, 0.41%)</title><rect x="0.0600%" y="116" width="0.4115%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="48"/><text x="0.3100%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (46 samples, 0.39%)</title><rect x="0.0772%" y="132" width="0.3943%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="46"/><text x="0.3272%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (45 samples, 0.39%)</title><rect x="0.0857%" y="148" width="0.3858%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="45"/><text x="0.3357%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (41 samples, 0.35%)</title><rect x="0.1200%" y="164" width="0.3515%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="41"/><text x="0.3700%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (13 samples, 0.11%)</title><rect x="0.5315%" y="116" width="0.1114%" height="15" fill="rgb(207,160,47)" fg:x="62" fg:w="13"/><text x="0.7815%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (35 samples, 0.30%)</title><rect x="0.5315%" y="100" width="0.3000%" height="15" fill="rgb(228,23,34)" fg:x="62" fg:w="35"/><text x="0.7815%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (67 samples, 0.57%)</title><rect x="1.2173%" y="212" width="0.5744%" height="15" fill="rgb(218,30,26)" fg:x="142" fg:w="67"/><text x="1.4673%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.12%)</title><rect x="9.5156%" y="228" width="0.1200%" height="15" fill="rgb(220,122,19)" fg:x="1110" fg:w="14"/><text x="9.7656%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (965 samples, 8.27%)</title><rect x="1.7917%" y="212" width="8.2726%" height="15" fill="rgb(250,228,42)" fg:x="209" fg:w="965"/><text x="2.0417%" y="222.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (50 samples, 0.43%)</title><rect x="9.6357%" y="228" width="0.4286%" height="15" fill="rgb(240,193,28)" fg:x="1124" fg:w="50"/><text x="9.8857%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (347 samples, 2.97%)</title><rect x="10.0643%" y="212" width="2.9747%" height="15" fill="rgb(216,20,37)" fg:x="1174" fg:w="347"/><text x="10.3143%" y="222.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.37%)</title><rect x="12.6704%" y="228" width="0.3686%" height="15" fill="rgb(206,188,39)" fg:x="1478" fg:w="43"/><text x="12.9204%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (102 samples, 0.87%)</title><rect x="13.0647%" y="212" width="0.8744%" height="15" fill="rgb(217,207,13)" fg:x="1524" fg:w="102"/><text x="13.3147%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (68 samples, 0.58%)</title><rect x="13.9391%" y="212" width="0.5829%" height="15" fill="rgb(231,73,38)" fg:x="1626" fg:w="68"/><text x="14.1891%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (32 samples, 0.27%)</title><rect x="16.9996%" y="228" width="0.2743%" height="15" fill="rgb(225,20,46)" fg:x="1983" fg:w="32"/><text x="17.2496%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (369 samples, 3.16%)</title><rect x="14.5221%" y="212" width="3.1633%" height="15" fill="rgb(210,31,41)" fg:x="1694" fg:w="369"/><text x="14.7721%" y="222.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.41%)</title><rect x="17.2739%" y="228" width="0.4115%" height="15" fill="rgb(221,200,47)" fg:x="2015" fg:w="48"/><text x="17.5239%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (245 samples, 2.10%)</title><rect x="17.6854%" y="212" width="2.1003%" height="15" fill="rgb(226,26,5)" fg:x="2063" fg:w="245"/><text x="17.9354%" y="222.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (13 samples, 0.11%)</title><rect x="21.0973%" y="228" width="0.1114%" height="15" fill="rgb(249,33,26)" fg:x="2461" fg:w="13"/><text x="21.3473%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (100 samples, 0.86%)</title><rect x="21.2087%" y="228" width="0.8573%" height="15" fill="rgb(235,183,28)" fg:x="2474" fg:w="100"/><text x="21.4587%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (134 samples, 1.15%)</title><rect x="23.6434%" y="244" width="1.1487%" height="15" fill="rgb(221,5,38)" fg:x="2758" fg:w="134"/><text x="23.8934%" y="254.50"></text></g><g><title>sites (kappybara/pattern.py:111) (92 samples, 0.79%)</title><rect x="26.1895%" y="260" width="0.7887%" height="15" fill="rgb(247,18,42)" fg:x="3055" fg:w="92"/><text x="26.4395%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (939 samples, 8.05%)</title><rect x="22.0832%" y="228" width="8.0497%" height="15" fill="rgb(241,131,45)" fg:x="2576" fg:w="939"/><text x="22.3332%" y="238.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (623 samples, 5.34%)</title><rect x="24.7921%" y="244" width="5.3408%" height="15" fill="rgb(249,31,29)" fg:x="2892" fg:w="623"/><text x="25.0421%" y="254.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (368 samples, 3.15%)</title><rect x="26.9781%" y="260" width="3.1547%" height="15" fill="rgb(225,111,53)" fg:x="3147" fg:w="368"/><text x="27.2281%" y="270.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (98 samples, 0.84%)</title><rect x="30.1329%" y="228" width="0.8401%" height="15" fill="rgb(238,160,17)" fg:x="3515" fg:w="98"/><text x="30.3829%" y="238.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (17 samples, 0.15%)</title><rect x="32.0617%" y="244" width="0.1457%" height="15" fill="rgb(214,148,48)" fg:x="3740" fg:w="17"/><text x="32.3117%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (225 samples, 1.93%)</title><rect x="31.0673%" y="228" width="1.9288%" height="15" fill="rgb(232,36,49)" fg:x="3624" fg:w="225"/><text x="31.3173%" y="238.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (92 samples, 0.79%)</title><rect x="32.2075%" y="244" width="0.7887%" height="15" fill="rgb(209,103,24)" fg:x="3757" fg:w="92"/><text x="32.4575%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (222 samples, 1.90%)</title><rect x="41.2087%" y="244" width="1.9031%" height="15" fill="rgb(229,88,8)" fg:x="4807" fg:w="222"/><text x="41.4587%" y="254.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (13 samples, 0.11%)</title><rect x="43.1119%" y="244" width="0.1114%" height="15" fill="rgb(213,181,19)" fg:x="5029" fg:w="13"/><text x="43.3619%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (152 samples, 1.30%)</title><rect x="43.2233%" y="244" width="1.3030%" height="15" fill="rgb(254,191,54)" fg:x="5042" fg:w="152"/><text x="43.4733%" y="254.50"></text></g><g><title>stated (kappybara/pattern.py:54) (98 samples, 0.84%)</title><rect x="43.6862%" y="260" width="0.8401%" height="15" fill="rgb(241,83,37)" fg:x="5096" fg:w="98"/><text x="43.9362%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:56) (23 samples, 0.20%)</title><rect x="45.2808%" y="260" width="0.1972%" height="15" fill="rgb(233,36,39)" fg:x="5282" fg:w="23"/><text x="45.5308%" y="270.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.16%)</title><rect x="47.2610%" y="276" width="0.1629%" height="15" fill="rgb(226,3,54)" fg:x="5513" fg:w="19"/><text x="47.5110%" y="286.50"></text></g><g><title>bound (kappybara/pattern.py:59) (458 samples, 3.93%)</title><rect x="45.4779%" y="260" width="3.9263%" height="15" fill="rgb(245,192,40)" fg:x="5305" fg:w="458"/><text x="45.7279%" y="270.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (231 samples, 1.98%)</title><rect x="47.4239%" y="276" width="1.9803%" height="15" fill="rgb(238,167,29)" fg:x="5532" fg:w="231"/><text x="47.6739%" y="286.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (44 samples, 0.38%)</title><rect x="49.0270%" y="292" width="0.3772%" height="15" fill="rgb(232,182,51)" fg:x="5719" fg:w="44"/><text x="49.2770%" y="302.50"></text></g><g><title>bound (kappybara/pattern.py:60) (245 samples, 2.10%)</title><rect x="49.4042%" y="260" width="2.1003%" height="15" fill="rgb(231,60,39)" fg:x="5763" fg:w="245"/><text x="49.6542%" y="270.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (98 samples, 0.84%)</title><rect x="51.5045%" y="260" width="0.8401%" height="15" fill="rgb(208,69,12)" fg:x="6008" fg:w="98"/><text x="51.7545%" y="270.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (13 samples, 0.11%)</title><rect x="52.3446%" y="260" width="0.1114%" height="15" fill="rgb(235,93,37)" fg:x="6106" fg:w="13"/><text x="52.5946%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (965 samples, 8.27%)</title><rect x="44.5264%" y="244" width="8.2726%" height="15" fill="rgb(213,116,39)" fg:x="5194" fg:w="965"/><text x="44.7764%" y="254.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (40 samples, 0.34%)</title><rect x="52.4561%" y="260" width="0.3429%" height="15" fill="rgb(222,207,29)" fg:x="6119" fg:w="40"/><text x="52.7061%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (20 samples, 0.17%)</title><rect x="52.8590%" y="244" width="0.1715%" height="15" fill="rgb(206,96,30)" fg:x="6166" fg:w="20"/><text x="53.1090%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (324 samples, 2.78%)</title><rect x="53.0304%" y="244" width="2.7775%" height="15" fill="rgb(218,138,4)" fg:x="6186" fg:w="324"/><text x="53.2804%" y="254.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (195 samples, 1.67%)</title><rect x="54.1363%" y="260" width="1.6717%" height="15" fill="rgb(250,191,14)" fg:x="6315" fg:w="195"/><text x="54.3863%" y="270.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.21%)</title><rect x="55.6022%" y="276" width="0.2057%" height="15" fill="rgb(239,60,40)" fg:x="6486" fg:w="24"/><text x="55.8522%" y="286.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (431 samples, 3.69%)</title><rect x="55.8080%" y="244" width="3.6948%" height="15" fill="rgb(206,27,48)" fg:x="6510" fg:w="431"/><text x="56.0580%" y="254.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (295 samples, 2.53%)</title><rect x="56.9739%" y="260" width="2.5289%" height="15" fill="rgb(225,35,8)" fg:x="6646" fg:w="295"/><text x="57.2239%" y="270.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (64 samples, 0.55%)</title><rect x="58.9541%" y="276" width="0.5486%" height="15" fill="rgb(250,213,24)" fg:x="6877" fg:w="64"/><text x="59.2041%" y="286.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (71 samples, 0.61%)</title><rect x="59.5028%" y="244" width="0.6087%" height="15" fill="rgb(247,123,22)" fg:x="6941" fg:w="71"/><text x="59.7528%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (174 samples, 1.49%)</title><rect x="60.1114%" y="244" width="1.4916%" height="15" fill="rgb(231,138,38)" fg:x="7012" fg:w="174"/><text x="60.3614%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (75 samples, 0.64%)</title><rect x="61.6031%" y="244" width="0.6429%" height="15" fill="rgb(231,145,46)" fg:x="7186" fg:w="75"/><text x="61.8531%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (25 samples, 0.21%)</title><rect x="62.2460%" y="244" width="0.2143%" height="15" fill="rgb(251,118,11)" fg:x="7261" fg:w="25"/><text x="62.4960%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,756 samples, 32.20%)</title><rect x="32.9961%" y="228" width="32.1989%" height="15" fill="rgb(217,147,25)" fg:x="3849" fg:w="3756"/><text x="33.2461%" y="238.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (319 samples, 2.73%)</title><rect x="62.4604%" y="244" width="2.7347%" height="15" fill="rgb(247,81,37)" fg:x="7286" fg:w="319"/><text x="62.7104%" y="254.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,341 samples, 45.79%)</title><rect x="19.7857%" y="212" width="45.7865%" height="15" fill="rgb(209,12,38)" fg:x="2308" fg:w="5341"/><text x="20.0357%" y="222.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (44 samples, 0.38%)</title><rect x="65.1950%" y="228" width="0.3772%" height="15" fill="rgb(227,1,9)" fg:x="7605" fg:w="44"/><text x="65.4450%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (64 samples, 0.55%)</title><rect x="66.5238%" y="228" width="0.5486%" height="15" fill="rgb(248,47,43)" fg:x="7760" fg:w="64"/><text x="66.7738%" y="238.50"></text></g><g><title>sites (kappybara/pattern.py:111) (45 samples, 0.39%)</title><rect x="68.0411%" y="244" width="0.3858%" height="15" fill="rgb(221,10,30)" fg:x="7937" fg:w="45"/><text x="68.2911%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (536 samples, 4.59%)</title><rect x="65.6580%" y="212" width="4.5949%" height="15" fill="rgb(210,229,1)" fg:x="7659" fg:w="536"/><text x="65.9080%" y="222.50">embed..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (371 samples, 3.18%)</title><rect x="67.0724%" y="228" width="3.1805%" height="15" fill="rgb(222,148,37)" fg:x="7824" fg:w="371"/><text x="67.3224%" y="238.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (213 samples, 1.83%)</title><rect x="68.4269%" y="244" width="1.8260%" height="15" fill="rgb(234,67,33)" fg:x="7982" fg:w="213"/><text x="68.6769%" y="254.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (102 samples, 0.87%)</title><rect x="70.2529%" y="212" width="0.8744%" height="15" fill="rgb(247,98,35)" fg:x="8195" fg:w="102"/><text x="70.5029%" y="222.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (39 samples, 0.33%)</title><rect x="70.7930%" y="228" width="0.3343%" height="15" fill="rgb(247,138,52)" fg:x="8258" fg:w="39"/><text x="71.0430%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (28 samples, 0.24%)</title><rect x="71.3330%" y="228" width="0.2400%" height="15" fill="rgb(213,79,30)" fg:x="8321" fg:w="28"/><text x="71.5830%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (79 samples, 0.68%)</title><rect x="71.1273%" y="212" width="0.6772%" height="15" fill="rgb(246,177,23)" fg:x="8297" fg:w="79"/><text x="71.3773%" y="222.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (27 samples, 0.23%)</title><rect x="71.5731%" y="228" width="0.2315%" height="15" fill="rgb(230,62,27)" fg:x="8349" fg:w="27"/><text x="71.8231%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (183 samples, 1.57%)</title><rect x="71.8045%" y="212" width="1.5688%" height="15" fill="rgb(216,154,8)" fg:x="8376" fg:w="183"/><text x="72.0545%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="73.2019%" y="228" width="0.1715%" height="15" fill="rgb(244,35,45)" fg:x="8539" fg:w="20"/><text x="73.4519%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (57 samples, 0.49%)</title><rect x="73.3733%" y="212" width="0.4886%" height="15" fill="rgb(251,115,12)" fg:x="8559" fg:w="57"/><text x="73.6233%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (83 samples, 0.71%)</title><rect x="73.8620%" y="212" width="0.7115%" height="15" fill="rgb(240,54,50)" fg:x="8616" fg:w="83"/><text x="74.1120%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (121 samples, 1.04%)</title><rect x="76.2452%" y="228" width="1.0373%" height="15" fill="rgb(233,84,52)" fg:x="8894" fg:w="121"/><text x="76.4952%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.19%)</title><rect x="77.0939%" y="244" width="0.1886%" height="15" fill="rgb(207,117,47)" fg:x="8993" fg:w="22"/><text x="77.3439%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (331 samples, 2.84%)</title><rect x="74.5735%" y="212" width="2.8375%" height="15" fill="rgb(249,43,39)" fg:x="8699" fg:w="331"/><text x="74.8235%" y="222.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:287) (57 samples, 0.49%)</title><rect x="77.4282%" y="212" width="0.4886%" height="15" fill="rgb(209,38,44)" fg:x="9032" fg:w="57"/><text x="77.6782%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (8,999 samples, 77.15%)</title><rect x="0.9430%" y="196" width="77.1453%" height="15" fill="rgb(236,212,23)" fg:x="110" fg:w="8999"/><text x="1.1930%" y="206.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (110 samples, 0.94%)</title><rect x="78.0883%" y="196" width="0.9430%" height="15" fill="rgb(242,79,21)" fg:x="9109" fg:w="110"/><text x="78.3383%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.20%)</title><rect x="78.8341%" y="212" width="0.1972%" height="15" fill="rgb(211,96,35)" fg:x="9196" fg:w="23"/><text x="79.0841%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (155 samples, 1.33%)</title><rect x="79.0570%" y="196" width="1.3288%" height="15" fill="rgb(253,215,40)" fg:x="9222" fg:w="155"/><text x="79.3070%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (27 samples, 0.23%)</title><rect x="80.1543%" y="212" width="0.2315%" height="15" fill="rgb(211,81,21)" fg:x="9350" fg:w="27"/><text x="80.4043%" y="222.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (9,271 samples, 79.48%)</title><rect x="0.9258%" y="180" width="79.4771%" height="15" fill="rgb(208,190,38)" fg:x="108" fg:w="9271"/><text x="1.1758%" y="190.50">track_component (kappybara/mixture.py:82)</text></g><g><title>track_component (kappybara/mixture.py:163) (9,362 samples, 80.26%)</title><rect x="0.8830%" y="164" width="80.2572%" height="15" fill="rgb(235,213,38)" fg:x="103" fg:w="9362"/><text x="1.1330%" y="174.50">track_component (kappybara/mixture.py:163)</text></g><g><title>track_component (kappybara/mixture.py:84) (86 samples, 0.74%)</title><rect x="80.4029%" y="180" width="0.7372%" height="15" fill="rgb(237,122,38)" fg:x="9379" fg:w="86"/><text x="80.6529%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:194) (22 samples, 0.19%)</title><rect x="81.2688%" y="180" width="0.1886%" height="15" fill="rgb(244,218,35)" fg:x="9480" fg:w="22"/><text x="81.5188%" y="190.50"></text></g><g><title>lookup (kappybara/indexed_set.py:169) (41 samples, 0.35%)</title><rect x="85.4522%" y="228" width="0.3515%" height="15" fill="rgb(240,68,47)" fg:x="9968" fg:w="41"/><text x="85.7022%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (133 samples, 1.14%)</title><rect x="85.8037%" y="228" width="1.1402%" height="15" fill="rgb(210,16,53)" fg:x="10009" fg:w="133"/><text x="86.0537%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.20%)</title><rect x="86.7467%" y="244" width="0.1972%" height="15" fill="rgb(235,124,12)" fg:x="10119" fg:w="23"/><text x="86.9967%" y="254.50"></text></g><g><title>lookup (kappybara/indexed_set.py:172) (12 samples, 0.10%)</title><rect x="86.9438%" y="228" width="0.1029%" height="15" fill="rgb(224,169,11)" fg:x="10142" fg:w="12"/><text x="87.1938%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:173) (24 samples, 0.21%)</title><rect x="87.0467%" y="228" width="0.2057%" height="15" fill="rgb(250,166,2)" fg:x="10154" fg:w="24"/><text x="87.2967%" y="238.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (730 samples, 6.26%)</title><rect x="81.4574%" y="180" width="6.2580%" height="15" fill="rgb(242,216,29)" fg:x="9502" fg:w="730"/><text x="81.7074%" y="190.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:66) (524 samples, 4.49%)</title><rect x="83.2233%" y="196" width="4.4921%" height="15" fill="rgb(230,116,27)" fg:x="9708" fg:w="524"/><text x="83.4733%" y="206.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:167) (461 samples, 3.95%)</title><rect x="83.7634%" y="212" width="3.9520%" height="15" fill="rgb(228,99,48)" fg:x="9771" fg:w="461"/><text x="84.0134%" y="222.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:174) (54 samples, 0.46%)</title><rect x="87.2525%" y="228" width="0.4629%" height="15" fill="rgb(253,11,6)" fg:x="10178" fg:w="54"/><text x="87.5025%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="89.2842%" y="196" width="0.1114%" height="15" fill="rgb(247,143,39)" fg:x="10415" fg:w="13"/><text x="89.5342%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (13 samples, 0.11%)</title><rect x="90.5701%" y="212" width="0.1114%" height="15" fill="rgb(236,97,10)" fg:x="10565" fg:w="13"/><text x="90.8201%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (152 samples, 1.30%)</title><rect x="89.6099%" y="196" width="1.3030%" height="15" fill="rgb(233,208,19)" fg:x="10453" fg:w="152"/><text x="89.8599%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (27 samples, 0.23%)</title><rect x="90.6815%" y="212" width="0.2315%" height="15" fill="rgb(216,164,2)" fg:x="10578" fg:w="27"/><text x="90.9315%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (139 samples, 1.19%)</title><rect x="90.9130%" y="196" width="1.1916%" height="15" fill="rgb(220,129,5)" fg:x="10605" fg:w="139"/><text x="91.1630%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.20%)</title><rect x="91.9074%" y="212" width="0.1972%" height="15" fill="rgb(242,17,10)" fg:x="10721" fg:w="23"/><text x="92.1574%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:134) (65 samples, 0.56%)</title><rect x="92.1046%" y="196" width="0.5572%" height="15" fill="rgb(242,107,0)" fg:x="10744" fg:w="65"/><text x="92.3546%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (169 samples, 1.45%)</title><rect x="92.6618%" y="196" width="1.4488%" height="15" fill="rgb(251,28,31)" fg:x="10809" fg:w="169"/><text x="92.9118%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.20%)</title><rect x="93.9134%" y="212" width="0.1972%" height="15" fill="rgb(233,223,10)" fg:x="10955" fg:w="23"/><text x="94.1634%" y="222.50"></text></g><g><title>track_component (kappybara/mixture.py:165) (1,581 samples, 13.55%)</title><rect x="81.1402%" y="164" width="13.5534%" height="15" fill="rgb(215,21,27)" fg:x="9465" fg:w="1581"/><text x="81.3902%" y="174.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:198) (807 samples, 6.92%)</title><rect x="87.7754%" y="180" width="6.9181%" height="15" fill="rgb(232,23,21)" fg:x="10239" fg:w="807"/><text x="88.0254%" y="190.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:138) (68 samples, 0.58%)</title><rect x="94.1106%" y="196" width="0.5829%" height="15" fill="rgb(244,5,23)" fg:x="10978" fg:w="68"/><text x="94.3606%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (10,955 samples, 93.91%)</title><rect x="0.8401%" y="132" width="93.9134%" height="15" fill="rgb(226,81,46)" fg:x="98" fg:w="10955"/><text x="1.0901%" y="142.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:175) (10,952 samples, 93.89%)</title><rect x="0.8658%" y="148" width="93.8877%" height="15" fill="rgb(247,70,30)" fg:x="101" fg:w="10952"/><text x="1.1158%" y="158.50">_update_embeddings (kappybara/mixture.py:175)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (12 samples, 0.10%)</title><rect x="94.8393%" y="180" width="0.1029%" height="15" fill="rgb(212,68,19)" fg:x="11063" fg:w="12"/><text x="95.0893%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (46 samples, 0.39%)</title><rect x="94.8307%" y="164" width="0.3943%" height="15" fill="rgb(240,187,13)" fg:x="11062" fg:w="46"/><text x="95.0807%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (33 samples, 0.28%)</title><rect x="94.9421%" y="180" width="0.2829%" height="15" fill="rgb(223,113,26)" fg:x="11075" fg:w="33"/><text x="95.1921%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (60 samples, 0.51%)</title><rect x="95.2679%" y="180" width="0.5144%" height="15" fill="rgb(206,192,2)" fg:x="11113" fg:w="60"/><text x="95.5179%" y="190.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:66) (15 samples, 0.13%)</title><rect x="95.6537%" y="196" width="0.1286%" height="15" fill="rgb(241,108,4)" fg:x="11158" fg:w="15"/><text x="95.9037%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (25 samples, 0.21%)</title><rect x="96.0480%" y="196" width="0.2143%" height="15" fill="rgb(247,173,49)" fg:x="11204" fg:w="25"/><text x="96.2980%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (17 samples, 0.15%)</title><rect x="96.2623%" y="196" width="0.1457%" height="15" fill="rgb(224,114,35)" fg:x="11229" fg:w="17"/><text x="96.5123%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (42 samples, 0.36%)</title><rect x="96.5024%" y="196" width="0.3601%" height="15" fill="rgb(245,159,27)" fg:x="11257" fg:w="42"/><text x="96.7524%" y="206.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (205 samples, 1.76%)</title><rect x="95.2250%" y="164" width="1.7574%" height="15" fill="rgb(245,172,44)" fg:x="11108" fg:w="205"/><text x="95.4750%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:198) (139 samples, 1.19%)</title><rect x="95.7908%" y="180" width="1.1916%" height="15" fill="rgb(236,23,11)" fg:x="11174" fg:w="139"/><text x="96.0408%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:138) (14 samples, 0.12%)</title><rect x="96.8624%" y="196" width="0.1200%" height="15" fill="rgb(205,117,38)" fg:x="11299" fg:w="14"/><text x="97.1124%" y="206.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (85 samples, 0.73%)</title><rect x="97.0682%" y="164" width="0.7287%" height="15" fill="rgb(237,72,25)" fg:x="11323" fg:w="85"/><text x="97.3182%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.10%)</title><rect x="97.6940%" y="180" width="0.1029%" height="15" fill="rgb(244,70,9)" fg:x="11396" fg:w="12"/><text x="97.9440%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (14 samples, 0.12%)</title><rect x="97.7968%" y="164" width="0.1200%" height="15" fill="rgb(217,125,39)" fg:x="11408" fg:w="14"/><text x="98.0468%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (73 samples, 0.63%)</title><rect x="98.7398%" y="196" width="0.6258%" height="15" fill="rgb(235,36,10)" fg:x="11518" fg:w="73"/><text x="98.9898%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:113) (46 samples, 0.39%)</title><rect x="98.9713%" y="212" width="0.3943%" height="15" fill="rgb(251,123,47)" fg:x="11545" fg:w="46"/><text x="99.2213%" y="222.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:220) (564 samples, 4.83%)</title><rect x="94.8050%" y="148" width="4.8350%" height="15" fill="rgb(221,13,13)" fg:x="11059" fg:w="564"/><text x="95.0550%" y="158.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (199 samples, 1.71%)</title><rect x="97.9340%" y="164" width="1.7060%" height="15" fill="rgb(238,131,9)" fg:x="11424" fg:w="199"/><text x="98.1840%" y="174.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (169 samples, 1.45%)</title><rect x="98.1912%" y="180" width="1.4488%" height="15" fill="rgb(211,50,8)" fg:x="11454" fg:w="169"/><text x="98.4412%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (26 samples, 0.22%)</title><rect x="99.4171%" y="196" width="0.2229%" height="15" fill="rgb(245,182,24)" fg:x="11597" fg:w="26"/><text x="99.6671%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:91) (571 samples, 4.89%)</title><rect x="94.7535%" y="132" width="4.8950%" height="15" fill="rgb(242,14,37)" fg:x="11053" fg:w="571"/><text x="95.0035%" y="142.50">apply_..</text></g><g><title>act (kappybara/system.py:66) (11,533 samples, 98.87%)</title><rect x="0.8315%" y="100" width="98.8684%" height="15" fill="rgb(246,228,12)" fg:x="97" fg:w="11533"/><text x="1.0815%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>apply_update (kappybara/mixture.py:171) (11,532 samples, 98.86%)</title><rect x="0.8401%" y="116" width="98.8598%" height="15" fill="rgb(213,55,15)" fg:x="98" fg:w="11532"/><text x="1.0901%" y="126.50">apply_update (kappybara/mixture.py:171)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,628 samples, 99.68%)</title><rect x="0.0429%" y="68" width="99.6828%" height="15" fill="rgb(209,9,3)" fg:x="5" fg:w="11628"/><text x="0.2929%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:71) (11,578 samples, 99.25%)</title><rect x="0.4715%" y="84" width="99.2542%" height="15" fill="rgb(230,59,30)" fg:x="55" fg:w="11578"/><text x="0.7215%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>all (11,665 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="11665"/><text x="0.2500%" y="62.50"></text></g></svg></svg>