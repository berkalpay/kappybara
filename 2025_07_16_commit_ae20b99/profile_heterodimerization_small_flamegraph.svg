<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit ae20b99</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="4456"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (5 samples, 0.11%)</title><rect x="0.0224%" y="68" width="0.1122%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="5"/><text x="0.2724%" y="78.50"></text></g><g><title>select (kappybara/rule.py:104) (6 samples, 0.13%)</title><rect x="0.1795%" y="116" width="0.1346%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="6"/><text x="0.4295%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (9 samples, 0.20%)</title><rect x="0.1795%" y="100" width="0.2020%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="9"/><text x="0.4295%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (30 samples, 0.67%)</title><rect x="0.7181%" y="180" width="0.6732%" height="15" fill="rgb(248,212,6)" fg:x="32" fg:w="30"/><text x="0.9681%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.11%)</title><rect x="13.5099%" y="196" width="0.1122%" height="15" fill="rgb(208,68,35)" fg:x="602" fg:w="5"/><text x="13.7599%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (571 samples, 12.81%)</title><rect x="1.3914%" y="180" width="12.8142%" height="15" fill="rgb(232,128,0)" fg:x="62" fg:w="571"/><text x="1.6414%" y="190.50">embeddings (kappyba..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.58%)</title><rect x="13.6221%" y="196" width="0.5835%" height="15" fill="rgb(207,160,47)" fg:x="607" fg:w="26"/><text x="13.8721%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="18.1553%" y="196" width="0.1346%" height="15" fill="rgb(228,23,34)" fg:x="809" fg:w="6"/><text x="18.4053%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (191 samples, 4.29%)</title><rect x="14.2056%" y="180" width="4.2864%" height="15" fill="rgb(218,30,26)" fg:x="633" fg:w="191"/><text x="14.4556%" y="190.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.20%)</title><rect x="18.2899%" y="196" width="0.2020%" height="15" fill="rgb(220,122,19)" fg:x="815" fg:w="9"/><text x="18.5399%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (43 samples, 0.96%)</title><rect x="18.5368%" y="180" width="0.9650%" height="15" fill="rgb(250,228,42)" fg:x="826" fg:w="43"/><text x="18.7868%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (41 samples, 0.92%)</title><rect x="19.5018%" y="180" width="0.9201%" height="15" fill="rgb(240,193,28)" fg:x="869" fg:w="41"/><text x="19.7518%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.36%)</title><rect x="23.4740%" y="196" width="0.3591%" height="15" fill="rgb(216,20,37)" fg:x="1046" fg:w="16"/><text x="23.7240%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (175 samples, 3.93%)</title><rect x="20.4219%" y="180" width="3.9273%" height="15" fill="rgb(206,188,39)" fg:x="910" fg:w="175"/><text x="20.6719%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.52%)</title><rect x="23.8330%" y="196" width="0.5162%" height="15" fill="rgb(217,207,13)" fg:x="1062" fg:w="23"/><text x="24.0830%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (118 samples, 2.65%)</title><rect x="24.3492%" y="180" width="2.6481%" height="15" fill="rgb(231,73,38)" fg:x="1085" fg:w="118"/><text x="24.5992%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (6 samples, 0.13%)</title><rect x="28.7702%" y="196" width="0.1346%" height="15" fill="rgb(225,20,46)" fg:x="1282" fg:w="6"/><text x="29.0202%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (48 samples, 1.08%)</title><rect x="28.9048%" y="196" width="1.0772%" height="15" fill="rgb(210,31,41)" fg:x="1288" fg:w="48"/><text x="29.1548%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (55 samples, 1.23%)</title><rect x="31.6652%" y="212" width="1.2343%" height="15" fill="rgb(221,200,47)" fg:x="1411" fg:w="55"/><text x="31.9152%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (58 samples, 1.30%)</title><rect x="34.6948%" y="228" width="1.3016%" height="15" fill="rgb(226,26,5)" fg:x="1546" fg:w="58"/><text x="34.9448%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (514 samples, 11.54%)</title><rect x="30.0045%" y="196" width="11.5350%" height="15" fill="rgb(249,33,26)" fg:x="1337" fg:w="514"/><text x="30.2545%" y="206.50">embeds_in (kappyb..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (385 samples, 8.64%)</title><rect x="32.8995%" y="212" width="8.6400%" height="15" fill="rgb(235,183,28)" fg:x="1466" fg:w="385"/><text x="33.1495%" y="222.50">__iter__ (ka..</text></g><g><title>sites (kappybara/pattern.py:113) (247 samples, 5.54%)</title><rect x="35.9964%" y="228" width="5.5431%" height="15" fill="rgb(221,5,38)" fg:x="1604" fg:w="247"/><text x="36.2464%" y="238.50">sites (..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (55 samples, 1.23%)</title><rect x="41.5395%" y="196" width="1.2343%" height="15" fill="rgb(247,18,42)" fg:x="1851" fg:w="55"/><text x="41.7895%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (6 samples, 0.13%)</title><rect x="42.7738%" y="196" width="0.1346%" height="15" fill="rgb(241,131,45)" fg:x="1906" fg:w="6"/><text x="43.0238%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (18 samples, 0.40%)</title><rect x="43.8285%" y="212" width="0.4039%" height="15" fill="rgb(249,31,29)" fg:x="1953" fg:w="18"/><text x="44.0785%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (94 samples, 2.11%)</title><rect x="42.9084%" y="196" width="2.1095%" height="15" fill="rgb(225,111,53)" fg:x="1912" fg:w="94"/><text x="43.1584%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (35 samples, 0.79%)</title><rect x="44.2325%" y="212" width="0.7855%" height="15" fill="rgb(238,160,17)" fg:x="1971" fg:w="35"/><text x="44.4825%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (68 samples, 1.53%)</title><rect x="54.3986%" y="212" width="1.5260%" height="15" fill="rgb(214,148,48)" fg:x="2424" fg:w="68"/><text x="54.6486%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (5 samples, 0.11%)</title><rect x="55.9246%" y="212" width="0.1122%" height="15" fill="rgb(232,36,49)" fg:x="2492" fg:w="5"/><text x="56.1746%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (14 samples, 0.31%)</title><rect x="56.5305%" y="228" width="0.3142%" height="15" fill="rgb(209,103,24)" fg:x="2519" fg:w="14"/><text x="56.7805%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (86 samples, 1.93%)</title><rect x="56.0368%" y="212" width="1.9300%" height="15" fill="rgb(229,88,8)" fg:x="2497" fg:w="86"/><text x="56.2868%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (50 samples, 1.12%)</title><rect x="56.8447%" y="228" width="1.1221%" height="15" fill="rgb(213,181,19)" fg:x="2533" fg:w="50"/><text x="57.0947%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (5 samples, 0.11%)</title><rect x="59.1113%" y="228" width="0.1122%" height="15" fill="rgb(254,191,54)" fg:x="2634" fg:w="5"/><text x="59.3613%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (6 samples, 0.13%)</title><rect x="61.4901%" y="244" width="0.1346%" height="15" fill="rgb(241,83,37)" fg:x="2740" fg:w="6"/><text x="61.7401%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="64.2280%" y="260" width="0.1346%" height="15" fill="rgb(233,36,39)" fg:x="2862" fg:w="6"/><text x="64.4780%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (251 samples, 5.63%)</title><rect x="59.2235%" y="228" width="5.6329%" height="15" fill="rgb(226,3,54)" fg:x="2639" fg:w="251"/><text x="59.4735%" y="238.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (144 samples, 3.23%)</title><rect x="61.6248%" y="244" width="3.2316%" height="15" fill="rgb(245,192,40)" fg:x="2746" fg:w="144"/><text x="61.8748%" y="254.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.49%)</title><rect x="64.3627%" y="260" width="0.4937%" height="15" fill="rgb(238,167,29)" fg:x="2868" fg:w="22"/><text x="64.6127%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (129 samples, 2.89%)</title><rect x="64.8564%" y="228" width="2.8950%" height="15" fill="rgb(232,182,51)" fg:x="2890" fg:w="129"/><text x="65.1064%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (41 samples, 0.92%)</title><rect x="67.7513%" y="228" width="0.9201%" height="15" fill="rgb(231,60,39)" fg:x="3019" fg:w="41"/><text x="68.0013%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (517 samples, 11.60%)</title><rect x="57.9668%" y="212" width="11.6023%" height="15" fill="rgb(208,69,12)" fg:x="2583" fg:w="517"/><text x="58.2168%" y="222.50">embeds_in (kappyb..</text></g><g><title>coupled (kappybara/pattern.py:66) (38 samples, 0.85%)</title><rect x="68.7163%" y="228" width="0.8528%" height="15" fill="rgb(235,93,37)" fg:x="3062" fg:w="38"/><text x="68.9663%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (7 samples, 0.16%)</title><rect x="69.5916%" y="212" width="0.1571%" height="15" fill="rgb(213,116,39)" fg:x="3101" fg:w="7"/><text x="69.8416%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (7 samples, 0.16%)</title><rect x="70.1975%" y="228" width="0.1571%" height="15" fill="rgb(222,207,29)" fg:x="3128" fg:w="7"/><text x="70.4475%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (78 samples, 1.75%)</title><rect x="69.7487%" y="212" width="1.7504%" height="15" fill="rgb(206,96,30)" fg:x="3108" fg:w="78"/><text x="69.9987%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (51 samples, 1.14%)</title><rect x="70.3546%" y="228" width="1.1445%" height="15" fill="rgb(218,138,4)" fg:x="3135" fg:w="51"/><text x="70.6046%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.22%)</title><rect x="71.2747%" y="244" width="0.2244%" height="15" fill="rgb(250,191,14)" fg:x="3176" fg:w="10"/><text x="71.5247%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (81 samples, 1.82%)</title><rect x="71.4991%" y="212" width="1.8178%" height="15" fill="rgb(239,60,40)" fg:x="3186" fg:w="81"/><text x="71.7491%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (55 samples, 1.23%)</title><rect x="72.0826%" y="228" width="1.2343%" height="15" fill="rgb(206,27,48)" fg:x="3212" fg:w="55"/><text x="72.3326%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.34%)</title><rect x="72.9803%" y="244" width="0.3366%" height="15" fill="rgb(225,35,8)" fg:x="3252" fg:w="15"/><text x="73.2303%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (23 samples, 0.52%)</title><rect x="73.3169%" y="212" width="0.5162%" height="15" fill="rgb(250,213,24)" fg:x="3267" fg:w="23"/><text x="73.5669%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (48 samples, 1.08%)</title><rect x="73.8555%" y="212" width="1.0772%" height="15" fill="rgb(247,123,22)" fg:x="3291" fg:w="48"/><text x="74.1055%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (18 samples, 0.40%)</title><rect x="74.9327%" y="212" width="0.4039%" height="15" fill="rgb(231,138,38)" fg:x="3339" fg:w="18"/><text x="75.1827%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (6 samples, 0.13%)</title><rect x="75.3366%" y="212" width="0.1346%" height="15" fill="rgb(231,145,46)" fg:x="3357" fg:w="6"/><text x="75.5866%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,495 samples, 33.55%)</title><rect x="45.0180%" y="196" width="33.5503%" height="15" fill="rgb(251,118,11)" fg:x="2006" fg:w="1495"/><text x="45.2680%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (138 samples, 3.10%)</title><rect x="75.4713%" y="212" width="3.0969%" height="15" fill="rgb(217,147,25)" fg:x="3363" fg:w="138"/><text x="75.7213%" y="222.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,323 samples, 52.13%)</title><rect x="26.9973%" y="180" width="52.1320%" height="15" fill="rgb(247,81,37)" fg:x="1203" fg:w="2323"/><text x="27.2473%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (25 samples, 0.56%)</title><rect x="78.5682%" y="196" width="0.5610%" height="15" fill="rgb(209,12,38)" fg:x="3501" fg:w="25"/><text x="78.8182%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (33 samples, 0.74%)</title><rect x="80.7451%" y="196" width="0.7406%" height="15" fill="rgb(227,1,9)" fg:x="3598" fg:w="33"/><text x="80.9951%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (24 samples, 0.54%)</title><rect x="82.7424%" y="212" width="0.5386%" height="15" fill="rgb(248,47,43)" fg:x="3687" fg:w="24"/><text x="82.9924%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (315 samples, 7.07%)</title><rect x="79.1966%" y="180" width="7.0691%" height="15" fill="rgb(221,10,30)" fg:x="3529" fg:w="315"/><text x="79.4466%" y="190.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (213 samples, 4.78%)</title><rect x="81.4856%" y="196" width="4.7801%" height="15" fill="rgb(210,229,1)" fg:x="3631" fg:w="213"/><text x="81.7356%" y="206.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:113) (133 samples, 2.98%)</title><rect x="83.2810%" y="212" width="2.9847%" height="15" fill="rgb(222,148,37)" fg:x="3711" fg:w="133"/><text x="83.5310%" y="222.50">sit..</text></g><g><title>__getitem__ (kappybara/pattern.py:101) (5 samples, 0.11%)</title><rect x="86.9838%" y="196" width="0.1122%" height="15" fill="rgb(234,67,33)" fg:x="3876" fg:w="5"/><text x="87.2338%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (59 samples, 1.32%)</title><rect x="86.2657%" y="180" width="1.3241%" height="15" fill="rgb(247,98,35)" fg:x="3844" fg:w="59"/><text x="86.5157%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (22 samples, 0.49%)</title><rect x="87.0961%" y="196" width="0.4937%" height="15" fill="rgb(247,138,52)" fg:x="3881" fg:w="22"/><text x="87.3461%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (5 samples, 0.11%)</title><rect x="88.0386%" y="196" width="0.1122%" height="15" fill="rgb(213,79,30)" fg:x="3923" fg:w="5"/><text x="88.2886%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (48 samples, 1.08%)</title><rect x="87.5898%" y="180" width="1.0772%" height="15" fill="rgb(246,177,23)" fg:x="3903" fg:w="48"/><text x="87.8398%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (23 samples, 0.52%)</title><rect x="88.1508%" y="196" width="0.5162%" height="15" fill="rgb(230,62,27)" fg:x="3928" fg:w="23"/><text x="88.4008%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (68 samples, 1.53%)</title><rect x="88.6670%" y="180" width="1.5260%" height="15" fill="rgb(216,154,8)" fg:x="3951" fg:w="68"/><text x="88.9170%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.25%)</title><rect x="89.9461%" y="196" width="0.2469%" height="15" fill="rgb(244,35,45)" fg:x="4008" fg:w="11"/><text x="90.1961%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (20 samples, 0.45%)</title><rect x="90.1930%" y="180" width="0.4488%" height="15" fill="rgb(251,115,12)" fg:x="4019" fg:w="20"/><text x="90.4430%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (18 samples, 0.40%)</title><rect x="90.6418%" y="180" width="0.4039%" height="15" fill="rgb(240,54,50)" fg:x="4039" fg:w="18"/><text x="90.8918%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (36 samples, 0.81%)</title><rect x="92.2127%" y="196" width="0.8079%" height="15" fill="rgb(233,84,52)" fg:x="4109" fg:w="36"/><text x="92.4627%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.16%)</title><rect x="92.8636%" y="212" width="0.1571%" height="15" fill="rgb(207,117,47)" fg:x="4138" fg:w="7"/><text x="93.1136%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (94 samples, 2.11%)</title><rect x="91.0458%" y="180" width="2.1095%" height="15" fill="rgb(249,43,39)" fg:x="4057" fg:w="94"/><text x="91.2958%" y="190.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:287) (20 samples, 0.45%)</title><rect x="93.2675%" y="180" width="0.4488%" height="15" fill="rgb(209,38,44)" fg:x="4156" fg:w="20"/><text x="93.5175%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (13 samples, 0.29%)</title><rect x="93.7163%" y="180" width="0.2917%" height="15" fill="rgb(236,212,23)" fg:x="4176" fg:w="13"/><text x="93.9663%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (4,180 samples, 93.81%)</title><rect x="0.3815%" y="164" width="93.8061%" height="15" fill="rgb(242,79,21)" fg:x="17" fg:w="4180"/><text x="0.6315%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>embeddings (kappybara/pattern.py:290) (8 samples, 0.18%)</title><rect x="94.0081%" y="180" width="0.1795%" height="15" fill="rgb(211,96,35)" fg:x="4189" fg:w="8"/><text x="94.2581%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (78 samples, 1.75%)</title><rect x="94.1876%" y="164" width="1.7504%" height="15" fill="rgb(253,215,40)" fg:x="4197" fg:w="78"/><text x="94.4376%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (18 samples, 0.40%)</title><rect x="95.5341%" y="180" width="0.4039%" height="15" fill="rgb(211,81,21)" fg:x="4257" fg:w="18"/><text x="95.7841%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (4,360 samples, 97.85%)</title><rect x="0.3815%" y="148" width="97.8456%" height="15" fill="rgb(208,190,38)" fg:x="17" fg:w="4360"/><text x="0.6315%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:124) (102 samples, 2.29%)</title><rect x="95.9381%" y="164" width="2.2890%" height="15" fill="rgb(235,213,38)" fg:x="4275" fg:w="102"/><text x="96.1881%" y="174.50">_..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (18 samples, 0.40%)</title><rect x="97.8232%" y="180" width="0.4039%" height="15" fill="rgb(237,122,38)" fg:x="4359" fg:w="18"/><text x="98.0732%" y="190.50"></text></g><g><title>act (kappybara/system.py:66) (4,432 samples, 99.46%)</title><rect x="0.3815%" y="100" width="99.4614%" height="15" fill="rgb(244,218,35)" fg:x="17" fg:w="4432"/><text x="0.6315%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>apply_update (kappybara/mixture.py:101) (4,432 samples, 99.46%)</title><rect x="0.3815%" y="116" width="99.4614%" height="15" fill="rgb(240,68,47)" fg:x="17" fg:w="4432"/><text x="0.6315%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (4,432 samples, 99.46%)</title><rect x="0.3815%" y="132" width="99.4614%" height="15" fill="rgb(210,16,53)" fg:x="17" fg:w="4432"/><text x="0.6315%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (72 samples, 1.62%)</title><rect x="98.2271%" y="148" width="1.6158%" height="15" fill="rgb(235,124,12)" fg:x="4377" fg:w="72"/><text x="98.4771%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,444 samples, 99.73%)</title><rect x="0.1346%" y="68" width="99.7307%" height="15" fill="rgb(224,169,11)" fg:x="6" fg:w="4444"/><text x="0.3846%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:71) (4,443 samples, 99.71%)</title><rect x="0.1571%" y="84" width="99.7083%" height="15" fill="rgb(250,166,2)" fg:x="7" fg:w="4443"/><text x="0.4071%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>all (4,456 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,216,29)" fg:x="0" fg:w="4456"/><text x="0.2500%" y="62.50"></text></g></svg></svg>