<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 10d4c39</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9467"><g><title>update (kappybara/system.py:69) (23 samples, 0.24%)</title><rect x="0.0634%" y="84" width="0.2429%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="23"/><text x="0.3134%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (23 samples, 0.24%)</title><rect x="0.0634%" y="100" width="0.2429%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="23"/><text x="0.3134%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (18 samples, 0.19%)</title><rect x="0.1162%" y="116" width="0.1901%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="18"/><text x="0.3662%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (11 samples, 0.12%)</title><rect x="0.1901%" y="132" width="0.1162%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="11"/><text x="0.4401%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (11 samples, 0.12%)</title><rect x="0.1901%" y="148" width="0.1162%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="11"/><text x="0.4401%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (11 samples, 0.12%)</title><rect x="0.1901%" y="164" width="0.1162%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="11"/><text x="0.4401%" y="174.50"></text></g><g><title>_produce_update (kappybara/rule.py:148) (10 samples, 0.11%)</title><rect x="0.7500%" y="132" width="0.1056%" height="15" fill="rgb(207,160,47)" fg:x="71" fg:w="10"/><text x="1.0000%" y="142.50"></text></g><g><title>act (kappybara/system.py:63) (45 samples, 0.48%)</title><rect x="0.4331%" y="100" width="0.4753%" height="15" fill="rgb(228,23,34)" fg:x="41" fg:w="45"/><text x="0.6831%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (36 samples, 0.38%)</title><rect x="0.5282%" y="116" width="0.3803%" height="15" fill="rgb(218,30,26)" fg:x="50" fg:w="36"/><text x="0.7782%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (23 samples, 0.24%)</title><rect x="1.0140%" y="148" width="0.2429%" height="15" fill="rgb(220,122,19)" fg:x="96" fg:w="23"/><text x="1.2640%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:128) (12 samples, 0.13%)</title><rect x="1.2570%" y="148" width="0.1268%" height="15" fill="rgb(250,228,42)" fg:x="119" fg:w="12"/><text x="1.5070%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (65 samples, 0.69%)</title><rect x="1.3838%" y="148" width="0.6866%" height="15" fill="rgb(240,193,28)" fg:x="131" fg:w="65"/><text x="1.6338%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (19 samples, 0.20%)</title><rect x="2.0703%" y="148" width="0.2007%" height="15" fill="rgb(216,20,37)" fg:x="196" fg:w="19"/><text x="2.3203%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (10 samples, 0.11%)</title><rect x="3.4752%" y="180" width="0.1056%" height="15" fill="rgb(206,188,39)" fg:x="329" fg:w="10"/><text x="3.7252%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (71 samples, 0.75%)</title><rect x="3.5809%" y="180" width="0.7500%" height="15" fill="rgb(217,207,13)" fg:x="339" fg:w="71"/><text x="3.8309%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (41 samples, 0.43%)</title><rect x="3.8978%" y="196" width="0.4331%" height="15" fill="rgb(231,73,38)" fg:x="369" fg:w="41"/><text x="4.1478%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (357 samples, 3.77%)</title><rect x="0.9295%" y="132" width="3.7710%" height="15" fill="rgb(225,20,46)" fg:x="88" fg:w="357"/><text x="1.1795%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (227 samples, 2.40%)</title><rect x="2.3027%" y="148" width="2.3978%" height="15" fill="rgb(210,31,41)" fg:x="218" fg:w="227"/><text x="2.5527%" y="158.50">de..</text></g><g><title>neighbors (kappybara/pattern.py:120) (198 samples, 2.09%)</title><rect x="2.6091%" y="164" width="2.0915%" height="15" fill="rgb(221,200,47)" fg:x="247" fg:w="198"/><text x="2.8591%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (30 samples, 0.32%)</title><rect x="4.3836%" y="180" width="0.3169%" height="15" fill="rgb(226,26,5)" fg:x="415" fg:w="30"/><text x="4.6336%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (27 samples, 0.29%)</title><rect x="4.7005%" y="132" width="0.2852%" height="15" fill="rgb(249,33,26)" fg:x="445" fg:w="27"/><text x="4.9505%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (22 samples, 0.23%)</title><rect x="4.7534%" y="148" width="0.2324%" height="15" fill="rgb(235,183,28)" fg:x="450" fg:w="22"/><text x="5.0034%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (387 samples, 4.09%)</title><rect x="0.9084%" y="116" width="4.0879%" height="15" fill="rgb(221,5,38)" fg:x="86" fg:w="387"/><text x="1.1584%" y="126.50">appl..</text></g><g><title>embeddings (kappybara/pattern.py:256) (37 samples, 0.39%)</title><rect x="5.5878%" y="148" width="0.3908%" height="15" fill="rgb(247,18,42)" fg:x="529" fg:w="37"/><text x="5.8378%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="9.8553%" y="164" width="0.1479%" height="15" fill="rgb(241,131,45)" fg:x="933" fg:w="14"/><text x="10.1053%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (413 samples, 4.36%)</title><rect x="5.9787%" y="148" width="4.3625%" height="15" fill="rgb(249,31,29)" fg:x="566" fg:w="413"/><text x="6.2287%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.34%)</title><rect x="10.0032%" y="164" width="0.3380%" height="15" fill="rgb(225,111,53)" fg:x="947" fg:w="32"/><text x="10.2532%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="13.2671%" y="164" width="0.1056%" height="15" fill="rgb(238,160,17)" fg:x="1256" fg:w="10"/><text x="13.5171%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (316 samples, 3.34%)</title><rect x="10.3412%" y="148" width="3.3379%" height="15" fill="rgb(214,148,48)" fg:x="979" fg:w="316"/><text x="10.5912%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.31%)</title><rect x="13.3728%" y="164" width="0.3063%" height="15" fill="rgb(232,36,49)" fg:x="1266" fg:w="29"/><text x="13.6228%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (80 samples, 0.85%)</title><rect x="13.7213%" y="148" width="0.8450%" height="15" fill="rgb(209,103,24)" fg:x="1299" fg:w="80"/><text x="13.9713%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (86 samples, 0.91%)</title><rect x="14.5664%" y="148" width="0.9084%" height="15" fill="rgb(229,88,8)" fg:x="1379" fg:w="86"/><text x="14.8164%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="17.6297%" y="164" width="0.1056%" height="15" fill="rgb(213,181,19)" fg:x="1669" fg:w="10"/><text x="17.8797%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (252 samples, 2.66%)</title><rect x="15.4748%" y="148" width="2.6619%" height="15" fill="rgb(254,191,54)" fg:x="1465" fg:w="252"/><text x="15.7248%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.40%)</title><rect x="17.7353%" y="164" width="0.4014%" height="15" fill="rgb(241,83,37)" fg:x="1679" fg:w="38"/><text x="17.9853%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (269 samples, 2.84%)</title><rect x="18.1367%" y="148" width="2.8414%" height="15" fill="rgb(233,36,39)" fg:x="1717" fg:w="269"/><text x="18.3867%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (17 samples, 0.18%)</title><rect x="22.9640%" y="164" width="0.1796%" height="15" fill="rgb(226,3,54)" fg:x="2174" fg:w="17"/><text x="23.2140%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (91 samples, 0.96%)</title><rect x="23.1436%" y="164" width="0.9612%" height="15" fill="rgb(245,192,40)" fg:x="2191" fg:w="91"/><text x="23.3936%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (119 samples, 1.26%)</title><rect x="26.0378%" y="180" width="1.2570%" height="15" fill="rgb(238,167,29)" fg:x="2465" fg:w="119"/><text x="26.2878%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (111 samples, 1.17%)</title><rect x="29.1222%" y="196" width="1.1725%" height="15" fill="rgb(232,182,51)" fg:x="2757" fg:w="111"/><text x="29.3722%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (946 samples, 9.99%)</title><rect x="24.1365%" y="164" width="9.9926%" height="15" fill="rgb(231,60,39)" fg:x="2285" fg:w="946"/><text x="24.3865%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (647 samples, 6.83%)</title><rect x="27.2948%" y="180" width="6.8343%" height="15" fill="rgb(208,69,12)" fg:x="2584" fg:w="647"/><text x="27.5448%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (363 samples, 3.83%)</title><rect x="30.2947%" y="196" width="3.8344%" height="15" fill="rgb(235,93,37)" fg:x="2868" fg:w="363"/><text x="30.5447%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (121 samples, 1.28%)</title><rect x="34.1291%" y="164" width="1.2781%" height="15" fill="rgb(213,116,39)" fg:x="3231" fg:w="121"/><text x="34.3791%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (11 samples, 0.12%)</title><rect x="35.4072%" y="164" width="0.1162%" height="15" fill="rgb(222,207,29)" fg:x="3352" fg:w="11"/><text x="35.6572%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (103 samples, 1.09%)</title><rect x="36.4635%" y="180" width="1.0880%" height="15" fill="rgb(206,96,30)" fg:x="3452" fg:w="103"/><text x="36.7135%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (199 samples, 2.10%)</title><rect x="35.5234%" y="164" width="2.1020%" height="15" fill="rgb(218,138,4)" fg:x="3363" fg:w="199"/><text x="35.7734%" y="174.50">e..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (190 samples, 2.01%)</title><rect x="48.1673%" y="180" width="2.0070%" height="15" fill="rgb(250,191,14)" fg:x="4560" fg:w="190"/><text x="48.4173%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (22 samples, 0.23%)</title><rect x="50.1743%" y="180" width="0.2324%" height="15" fill="rgb(239,60,40)" fg:x="4750" fg:w="22"/><text x="50.4243%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (18 samples, 0.19%)</title><rect x="50.8714%" y="196" width="0.1901%" height="15" fill="rgb(206,27,48)" fg:x="4816" fg:w="18"/><text x="51.1214%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (186 samples, 1.96%)</title><rect x="50.4067%" y="180" width="1.9647%" height="15" fill="rgb(225,35,8)" fg:x="4772" fg:w="186"/><text x="50.6567%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (124 samples, 1.31%)</title><rect x="51.0616%" y="196" width="1.3098%" height="15" fill="rgb(250,213,24)" fg:x="4834" fg:w="124"/><text x="51.3116%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (15 samples, 0.16%)</title><rect x="53.2587%" y="196" width="0.1584%" height="15" fill="rgb(247,123,22)" fg:x="5042" fg:w="15"/><text x="53.5087%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.16%)</title><rect x="55.6459%" y="212" width="0.1584%" height="15" fill="rgb(231,138,38)" fg:x="5268" fg:w="15"/><text x="55.8959%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (506 samples, 5.34%)</title><rect x="53.4171%" y="196" width="5.3449%" height="15" fill="rgb(231,145,46)" fg:x="5057" fg:w="506"/><text x="53.6671%" y="206.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (280 samples, 2.96%)</title><rect x="55.8044%" y="212" width="2.9576%" height="15" fill="rgb(251,118,11)" fg:x="5283" fg:w="280"/><text x="56.0544%" y="222.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.50%)</title><rect x="58.2656%" y="228" width="0.4965%" height="15" fill="rgb(217,147,25)" fg:x="5516" fg:w="47"/><text x="58.5156%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (252 samples, 2.66%)</title><rect x="58.7620%" y="196" width="2.6619%" height="15" fill="rgb(247,81,37)" fg:x="5563" fg:w="252"/><text x="59.0120%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (107 samples, 1.13%)</title><rect x="61.4239%" y="196" width="1.1302%" height="15" fill="rgb(209,12,38)" fg:x="5815" fg:w="107"/><text x="61.6739%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (13 samples, 0.14%)</title><rect x="62.5541%" y="196" width="0.1373%" height="15" fill="rgb(227,1,9)" fg:x="5922" fg:w="13"/><text x="62.8041%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,032 samples, 10.90%)</title><rect x="52.3714%" y="180" width="10.9010%" height="15" fill="rgb(248,47,43)" fg:x="4958" fg:w="1032"/><text x="52.6214%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (55 samples, 0.58%)</title><rect x="62.6915%" y="196" width="0.5810%" height="15" fill="rgb(221,10,30)" fg:x="5935" fg:w="55"/><text x="62.9415%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (25 samples, 0.26%)</title><rect x="63.2935%" y="180" width="0.2641%" height="15" fill="rgb(210,229,1)" fg:x="5992" fg:w="25"/><text x="63.5435%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.14%)</title><rect x="64.5611%" y="196" width="0.1373%" height="15" fill="rgb(222,148,37)" fg:x="6112" fg:w="13"/><text x="64.8111%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (343 samples, 3.62%)</title><rect x="63.5576%" y="180" width="3.6231%" height="15" fill="rgb(234,67,33)" fg:x="6017" fg:w="343"/><text x="63.8076%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (235 samples, 2.48%)</title><rect x="64.6984%" y="196" width="2.4823%" height="15" fill="rgb(247,98,35)" fg:x="6125" fg:w="235"/><text x="64.9484%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.42%)</title><rect x="66.7582%" y="212" width="0.4225%" height="15" fill="rgb(247,138,52)" fg:x="6320" fg:w="40"/><text x="67.0082%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.12%)</title><rect x="68.3638%" y="196" width="0.1162%" height="15" fill="rgb(213,79,30)" fg:x="6472" fg:w="11"/><text x="68.6138%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (357 samples, 3.77%)</title><rect x="67.1807%" y="180" width="3.7710%" height="15" fill="rgb(246,177,23)" fg:x="6360" fg:w="357"/><text x="67.4307%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (234 samples, 2.47%)</title><rect x="68.4800%" y="196" width="2.4717%" height="15" fill="rgb(230,62,27)" fg:x="6483" fg:w="234"/><text x="68.7300%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (49 samples, 0.52%)</title><rect x="70.4341%" y="212" width="0.5176%" height="15" fill="rgb(216,154,8)" fg:x="6668" fg:w="49"/><text x="70.6841%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (99 samples, 1.05%)</title><rect x="70.9517%" y="180" width="1.0457%" height="15" fill="rgb(244,35,45)" fg:x="6717" fg:w="99"/><text x="71.2017%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (179 samples, 1.89%)</title><rect x="72.0292%" y="180" width="1.8908%" height="15" fill="rgb(251,115,12)" fg:x="6819" fg:w="179"/><text x="72.2792%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (84 samples, 0.89%)</title><rect x="73.9199%" y="180" width="0.8873%" height="15" fill="rgb(240,54,50)" fg:x="6998" fg:w="84"/><text x="74.1699%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (28 samples, 0.30%)</title><rect x="74.8072%" y="180" width="0.2958%" height="15" fill="rgb(233,84,52)" fg:x="7082" fg:w="28"/><text x="75.0572%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,846 samples, 40.63%)</title><rect x="37.6254%" y="164" width="40.6253%" height="15" fill="rgb(207,117,47)" fg:x="3562" fg:w="3846"/><text x="37.8754%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (298 samples, 3.15%)</title><rect x="75.1030%" y="180" width="3.1478%" height="15" fill="rgb(249,43,39)" fg:x="7110" fg:w="298"/><text x="75.3530%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,465 samples, 57.73%)</title><rect x="20.9781%" y="148" width="57.7268%" height="15" fill="rgb(209,38,44)" fg:x="1986" fg:w="5465"/><text x="21.2281%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (43 samples, 0.45%)</title><rect x="78.2508%" y="164" width="0.4542%" height="15" fill="rgb(236,212,23)" fg:x="7408" fg:w="43"/><text x="78.5008%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (66 samples, 0.70%)</title><rect x="79.9725%" y="164" width="0.6972%" height="15" fill="rgb(242,79,21)" fg:x="7571" fg:w="66"/><text x="80.2225%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (51 samples, 0.54%)</title><rect x="81.8316%" y="180" width="0.5387%" height="15" fill="rgb(211,96,35)" fg:x="7747" fg:w="51"/><text x="82.0816%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (590 samples, 6.23%)</title><rect x="78.8106%" y="148" width="6.2322%" height="15" fill="rgb(253,215,40)" fg:x="7461" fg:w="590"/><text x="79.0606%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (414 samples, 4.37%)</title><rect x="80.6697%" y="164" width="4.3731%" height="15" fill="rgb(211,81,21)" fg:x="7637" fg:w="414"/><text x="80.9197%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (253 samples, 2.67%)</title><rect x="82.3703%" y="180" width="2.6724%" height="15" fill="rgb(208,190,38)" fg:x="7798" fg:w="253"/><text x="82.6203%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (45 samples, 0.48%)</title><rect x="85.6026%" y="164" width="0.4753%" height="15" fill="rgb(235,213,38)" fg:x="8104" fg:w="45"/><text x="85.8526%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (107 samples, 1.13%)</title><rect x="85.0428%" y="148" width="1.1302%" height="15" fill="rgb(237,122,38)" fg:x="8051" fg:w="107"/><text x="85.2928%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (19 samples, 0.20%)</title><rect x="86.4582%" y="164" width="0.2007%" height="15" fill="rgb(244,218,35)" fg:x="8185" fg:w="19"/><text x="86.7082%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (87 samples, 0.92%)</title><rect x="86.1730%" y="148" width="0.9190%" height="15" fill="rgb(240,68,47)" fg:x="8158" fg:w="87"/><text x="86.4230%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (41 samples, 0.43%)</title><rect x="86.6589%" y="164" width="0.4331%" height="15" fill="rgb(210,16,53)" fg:x="8204" fg:w="41"/><text x="86.9089%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (176 samples, 1.86%)</title><rect x="87.0920%" y="148" width="1.8591%" height="15" fill="rgb(235,124,12)" fg:x="8245" fg:w="176"/><text x="87.3420%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.33%)</title><rect x="88.6236%" y="164" width="0.3275%" height="15" fill="rgb(224,169,11)" fg:x="8390" fg:w="31"/><text x="88.8736%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (62 samples, 0.65%)</title><rect x="88.9511%" y="148" width="0.6549%" height="15" fill="rgb(250,166,2)" fg:x="8421" fg:w="62"/><text x="89.2011%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="89.4898%" y="164" width="0.1162%" height="15" fill="rgb(242,216,29)" fg:x="8472" fg:w="11"/><text x="89.7398%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (83 samples, 0.88%)</title><rect x="89.6060%" y="148" width="0.8767%" height="15" fill="rgb(230,116,27)" fg:x="8483" fg:w="83"/><text x="89.8560%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="90.3560%" y="164" width="0.1268%" height="15" fill="rgb(228,99,48)" fg:x="8554" fg:w="12"/><text x="90.6060%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (140 samples, 1.48%)</title><rect x="92.8172%" y="164" width="1.4788%" height="15" fill="rgb(253,11,6)" fg:x="8787" fg:w="140"/><text x="93.0672%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.20%)</title><rect x="94.0953%" y="180" width="0.2007%" height="15" fill="rgb(247,143,39)" fg:x="8908" fg:w="19"/><text x="94.3453%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (366 samples, 3.87%)</title><rect x="90.4827%" y="148" width="3.8661%" height="15" fill="rgb(236,97,10)" fg:x="8566" fg:w="366"/><text x="90.7327%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (38 samples, 0.40%)</title><rect x="94.3805%" y="148" width="0.4014%" height="15" fill="rgb(233,208,19)" fg:x="8935" fg:w="38"/><text x="94.6305%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,499 samples, 89.78%)</title><rect x="5.1442%" y="132" width="89.7750%" height="15" fill="rgb(216,164,2)" fg:x="487" fg:w="8499"/><text x="5.3942%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (42 samples, 0.44%)</title><rect x="94.9192%" y="132" width="0.4436%" height="15" fill="rgb(220,129,5)" fg:x="8986" fg:w="42"/><text x="95.1692%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (13 samples, 0.14%)</title><rect x="95.3628%" y="132" width="0.1373%" height="15" fill="rgb(242,17,10)" fg:x="9028" fg:w="13"/><text x="95.6128%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="97.9297%" y="148" width="0.1479%" height="15" fill="rgb(242,107,0)" fg:x="9271" fg:w="14"/><text x="98.1797%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (286 samples, 3.02%)</title><rect x="95.5530%" y="132" width="3.0210%" height="15" fill="rgb(251,28,31)" fg:x="9046" fg:w="286"/><text x="95.8030%" y="142.50">_up..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.50%)</title><rect x="98.0775%" y="148" width="0.4965%" height="15" fill="rgb(233,223,10)" fg:x="9285" fg:w="47"/><text x="98.3275%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (8,935 samples, 94.38%)</title><rect x="5.0491%" y="116" width="94.3805%" height="15" fill="rgb(215,21,27)" fg:x="478" fg:w="8935"/><text x="5.2991%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (81 samples, 0.86%)</title><rect x="98.5740%" y="132" width="0.8556%" height="15" fill="rgb(232,23,21)" fg:x="9332" fg:w="81"/><text x="98.8240%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="99.3028%" y="148" width="0.1268%" height="15" fill="rgb(244,5,23)" fg:x="9401" fg:w="12"/><text x="99.5528%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,328 samples, 98.53%)</title><rect x="0.9084%" y="100" width="98.5317%" height="15" fill="rgb(226,81,46)" fg:x="86" fg:w="9328"/><text x="1.1584%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,409 samples, 99.39%)</title><rect x="0.0634%" y="68" width="99.3873%" height="15" fill="rgb(247,70,30)" fg:x="6" fg:w="9409"/><text x="0.3134%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,386 samples, 99.14%)</title><rect x="0.3063%" y="84" width="99.1444%" height="15" fill="rgb(212,68,19)" fg:x="29" fg:w="9386"/><text x="0.5563%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (10 samples, 0.11%)</title><rect x="99.4507%" y="68" width="0.1056%" height="15" fill="rgb(240,187,13)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.4507%" y="84" width="0.1056%" height="15" fill="rgb(223,113,26)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.4507%" y="100" width="0.1056%" height="15" fill="rgb(206,192,2)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.4507%" y="116" width="0.1056%" height="15" fill="rgb(241,108,4)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.4507%" y="132" width="0.1056%" height="15" fill="rgb(247,173,49)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.4507%" y="148" width="0.1056%" height="15" fill="rgb(224,114,35)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.11%)</title><rect x="99.4507%" y="164" width="0.1056%" height="15" fill="rgb(245,159,27)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.4507%" y="180" width="0.1056%" height="15" fill="rgb(245,172,44)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.4507%" y="196" width="0.1056%" height="15" fill="rgb(236,23,11)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.4507%" y="212" width="0.1056%" height="15" fill="rgb(205,117,38)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.4507%" y="228" width="0.1056%" height="15" fill="rgb(237,72,25)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.4507%" y="244" width="0.1056%" height="15" fill="rgb(244,70,9)" fg:x="9415" fg:w="10"/><text x="99.7007%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (11 samples, 0.12%)</title><rect x="99.6092%" y="68" width="0.1162%" height="15" fill="rgb(217,125,39)" fg:x="9430" fg:w="11"/><text x="99.8592%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (18 samples, 0.19%)</title><rect x="99.7254%" y="68" width="0.1901%" height="15" fill="rgb(235,36,10)" fg:x="9441" fg:w="18"/><text x="99.9754%" y="78.50"></text></g><g><title>all (9,467 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="9467"/><text x="0.2500%" y="62.50"></text></g></svg></svg>