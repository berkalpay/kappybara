<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 3b41bf3</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="9983"><g><title>n_embeddings (kappybara/rule.py:76) (11 samples, 0.11%)</title><rect x="0.1503%" y="180" width="0.1102%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="11"/><text x="0.4003%" y="190.50"></text></g><g><title>update (kappybara/system.py:70) (18 samples, 0.18%)</title><rect x="0.0902%" y="84" width="0.1803%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="18"/><text x="0.3402%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (18 samples, 0.18%)</title><rect x="0.0902%" y="100" width="0.1803%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="18"/><text x="0.3402%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (15 samples, 0.15%)</title><rect x="0.1202%" y="116" width="0.1503%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="15"/><text x="0.3702%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (15 samples, 0.15%)</title><rect x="0.1202%" y="132" width="0.1503%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="15"/><text x="0.3702%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (15 samples, 0.15%)</title><rect x="0.1202%" y="148" width="0.1503%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="15"/><text x="0.3702%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (14 samples, 0.14%)</title><rect x="0.1302%" y="164" width="0.1402%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="14"/><text x="0.3802%" y="174.50"></text></g><g><title>_produce_update (kappybara/rule.py:163) (10 samples, 0.10%)</title><rect x="0.5509%" y="132" width="0.1002%" height="15" fill="rgb(228,23,34)" fg:x="55" fg:w="10"/><text x="0.8009%" y="142.50"></text></g><g><title>select (kappybara/rule.py:104) (35 samples, 0.35%)</title><rect x="0.3406%" y="116" width="0.3506%" height="15" fill="rgb(218,30,26)" fg:x="34" fg:w="35"/><text x="0.5906%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (46 samples, 0.46%)</title><rect x="0.3005%" y="100" width="0.4608%" height="15" fill="rgb(220,122,19)" fg:x="30" fg:w="46"/><text x="0.5505%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (70 samples, 0.70%)</title><rect x="1.2121%" y="180" width="0.7012%" height="15" fill="rgb(250,228,42)" fg:x="121" fg:w="70"/><text x="1.4621%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.10%)</title><rect x="12.0605%" y="196" width="0.1002%" height="15" fill="rgb(240,193,28)" fg:x="1204" fg:w="10"/><text x="12.3105%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (1,059 samples, 10.61%)</title><rect x="1.9133%" y="180" width="10.6080%" height="15" fill="rgb(216,20,37)" fg:x="191" fg:w="1059"/><text x="2.1633%" y="190.50">embeddings (kap..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.36%)</title><rect x="12.1607%" y="196" width="0.3606%" height="15" fill="rgb(206,188,39)" fg:x="1214" fg:w="36"/><text x="12.4107%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.16%)</title><rect x="15.6967%" y="196" width="0.1603%" height="15" fill="rgb(217,207,13)" fg:x="1567" fg:w="16"/><text x="15.9467%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (353 samples, 3.54%)</title><rect x="12.5213%" y="180" width="3.5360%" height="15" fill="rgb(231,73,38)" fg:x="1250" fg:w="353"/><text x="12.7713%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.20%)</title><rect x="15.8570%" y="196" width="0.2003%" height="15" fill="rgb(225,20,46)" fg:x="1583" fg:w="20"/><text x="16.1070%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (102 samples, 1.02%)</title><rect x="16.0974%" y="180" width="1.0217%" height="15" fill="rgb(210,31,41)" fg:x="1607" fg:w="102"/><text x="16.3474%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (80 samples, 0.80%)</title><rect x="17.1191%" y="180" width="0.8014%" height="15" fill="rgb(221,200,47)" fg:x="1709" fg:w="80"/><text x="17.3691%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.17%)</title><rect x="20.7553%" y="196" width="0.1703%" height="15" fill="rgb(226,26,5)" fg:x="2072" fg:w="17"/><text x="21.0053%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (337 samples, 3.38%)</title><rect x="17.9205%" y="180" width="3.3757%" height="15" fill="rgb(249,33,26)" fg:x="1789" fg:w="337"/><text x="18.1705%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.37%)</title><rect x="20.9256%" y="196" width="0.3706%" height="15" fill="rgb(235,183,28)" fg:x="2089" fg:w="37"/><text x="21.1756%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (309 samples, 3.10%)</title><rect x="21.2962%" y="180" width="3.0953%" height="15" fill="rgb(221,5,38)" fg:x="2126" fg:w="309"/><text x="21.5462%" y="190.50">emb..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (16 samples, 0.16%)</title><rect x="26.2947%" y="196" width="0.1603%" height="15" fill="rgb(247,18,42)" fg:x="2625" fg:w="16"/><text x="26.5447%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (93 samples, 0.93%)</title><rect x="26.4550%" y="196" width="0.9316%" height="15" fill="rgb(241,131,45)" fg:x="2641" fg:w="93"/><text x="26.7050%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (149 samples, 1.49%)</title><rect x="29.2097%" y="212" width="1.4925%" height="15" fill="rgb(249,31,29)" fg:x="2916" fg:w="149"/><text x="29.4597%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (108 samples, 1.08%)</title><rect x="32.4852%" y="228" width="1.0818%" height="15" fill="rgb(225,111,53)" fg:x="3243" fg:w="108"/><text x="32.7352%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,021 samples, 10.23%)</title><rect x="27.4567%" y="196" width="10.2274%" height="15" fill="rgb(238,160,17)" fg:x="2741" fg:w="1021"/><text x="27.7067%" y="206.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (697 samples, 6.98%)</title><rect x="30.7022%" y="212" width="6.9819%" height="15" fill="rgb(214,148,48)" fg:x="3065" fg:w="697"/><text x="30.9522%" y="222.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:113) (411 samples, 4.12%)</title><rect x="33.5671%" y="228" width="4.1170%" height="15" fill="rgb(232,36,49)" fg:x="3351" fg:w="411"/><text x="33.8171%" y="238.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (126 samples, 1.26%)</title><rect x="37.6841%" y="196" width="1.2621%" height="15" fill="rgb(209,103,24)" fg:x="3762" fg:w="126"/><text x="37.9341%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (17 samples, 0.17%)</title><rect x="39.9679%" y="212" width="0.1703%" height="15" fill="rgb(229,88,8)" fg:x="3990" fg:w="17"/><text x="40.2179%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (208 samples, 2.08%)</title><rect x="38.9863%" y="196" width="2.0835%" height="15" fill="rgb(213,181,19)" fg:x="3892" fg:w="208"/><text x="39.2363%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (93 samples, 0.93%)</title><rect x="40.1382%" y="212" width="0.9316%" height="15" fill="rgb(254,191,54)" fg:x="4007" fg:w="93"/><text x="40.3882%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (213 samples, 2.13%)</title><rect x="50.8364%" y="212" width="2.1336%" height="15" fill="rgb(241,83,37)" fg:x="5075" fg:w="213"/><text x="51.0864%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (11 samples, 0.11%)</title><rect x="52.9700%" y="212" width="0.1102%" height="15" fill="rgb(233,36,39)" fg:x="5288" fg:w="11"/><text x="53.2200%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (14 samples, 0.14%)</title><rect x="53.6111%" y="228" width="0.1402%" height="15" fill="rgb(226,3,54)" fg:x="5352" fg:w="14"/><text x="53.8611%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (186 samples, 1.86%)</title><rect x="53.0802%" y="212" width="1.8632%" height="15" fill="rgb(245,192,40)" fg:x="5299" fg:w="186"/><text x="53.3302%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (119 samples, 1.19%)</title><rect x="53.7514%" y="228" width="1.1920%" height="15" fill="rgb(238,167,29)" fg:x="5366" fg:w="119"/><text x="54.0014%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (15 samples, 0.15%)</title><rect x="55.8550%" y="228" width="0.1503%" height="15" fill="rgb(232,182,51)" fg:x="5576" fg:w="15"/><text x="56.1050%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (20 samples, 0.20%)</title><rect x="58.3392%" y="244" width="0.2003%" height="15" fill="rgb(231,60,39)" fg:x="5824" fg:w="20"/><text x="58.5892%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.13%)</title><rect x="60.4227%" y="260" width="0.1302%" height="15" fill="rgb(208,69,12)" fg:x="6032" fg:w="13"/><text x="60.6727%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (503 samples, 5.04%)</title><rect x="56.0052%" y="228" width="5.0386%" height="15" fill="rgb(235,93,37)" fg:x="5591" fg:w="503"/><text x="56.2552%" y="238.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (250 samples, 2.50%)</title><rect x="58.5395%" y="244" width="2.5043%" height="15" fill="rgb(213,116,39)" fg:x="5844" fg:w="250"/><text x="58.7895%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (49 samples, 0.49%)</title><rect x="60.5529%" y="260" width="0.4908%" height="15" fill="rgb(222,207,29)" fg:x="6045" fg:w="49"/><text x="60.8029%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (284 samples, 2.84%)</title><rect x="61.0438%" y="228" width="2.8448%" height="15" fill="rgb(206,96,30)" fg:x="6094" fg:w="284"/><text x="61.2938%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (95 samples, 0.95%)</title><rect x="63.8886%" y="228" width="0.9516%" height="15" fill="rgb(218,138,4)" fg:x="6378" fg:w="95"/><text x="64.1386%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,025 samples, 10.27%)</title><rect x="54.9434%" y="212" width="10.2675%" height="15" fill="rgb(250,191,14)" fg:x="5485" fg:w="1025"/><text x="55.1934%" y="222.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:66) (33 samples, 0.33%)</title><rect x="64.8803%" y="228" width="0.3306%" height="15" fill="rgb(239,60,40)" fg:x="6477" fg:w="33"/><text x="65.1303%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (20 samples, 0.20%)</title><rect x="65.2710%" y="212" width="0.2003%" height="15" fill="rgb(206,27,48)" fg:x="6516" fg:w="20"/><text x="65.5210%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.11%)</title><rect x="66.3829%" y="228" width="0.1102%" height="15" fill="rgb(225,35,8)" fg:x="6627" fg:w="11"/><text x="66.6329%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.11%)</title><rect x="68.2160%" y="244" width="0.1102%" height="15" fill="rgb(250,213,24)" fg:x="6810" fg:w="11"/><text x="68.4660%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (311 samples, 3.12%)</title><rect x="65.4713%" y="212" width="3.1153%" height="15" fill="rgb(247,123,22)" fg:x="6536" fg:w="311"/><text x="65.7213%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (209 samples, 2.09%)</title><rect x="66.4930%" y="228" width="2.0936%" height="15" fill="rgb(231,138,38)" fg:x="6638" fg:w="209"/><text x="66.7430%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.26%)</title><rect x="68.3262%" y="244" width="0.2604%" height="15" fill="rgb(231,145,46)" fg:x="6821" fg:w="26"/><text x="68.5762%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.10%)</title><rect x="72.1326%" y="244" width="0.1002%" height="15" fill="rgb(251,118,11)" fg:x="7201" fg:w="10"/><text x="72.3826%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (433 samples, 4.34%)</title><rect x="68.5866%" y="212" width="4.3374%" height="15" fill="rgb(217,147,25)" fg:x="6847" fg:w="433"/><text x="68.8366%" y="222.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (302 samples, 3.03%)</title><rect x="69.8988%" y="228" width="3.0251%" height="15" fill="rgb(247,81,37)" fg:x="6978" fg:w="302"/><text x="70.1488%" y="238.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (69 samples, 0.69%)</title><rect x="72.2328%" y="244" width="0.6912%" height="15" fill="rgb(209,12,38)" fg:x="7211" fg:w="69"/><text x="72.4828%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (68 samples, 0.68%)</title><rect x="72.9240%" y="212" width="0.6812%" height="15" fill="rgb(227,1,9)" fg:x="7280" fg:w="68"/><text x="73.1740%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (202 samples, 2.02%)</title><rect x="73.6051%" y="212" width="2.0234%" height="15" fill="rgb(248,47,43)" fg:x="7348" fg:w="202"/><text x="73.8551%" y="222.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:85) (76 samples, 0.76%)</title><rect x="75.6286%" y="212" width="0.7613%" height="15" fill="rgb(221,10,30)" fg:x="7550" fg:w="76"/><text x="75.8786%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (27 samples, 0.27%)</title><rect x="76.3899%" y="212" width="0.2705%" height="15" fill="rgb(210,229,1)" fg:x="7626" fg:w="27"/><text x="76.6399%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,859 samples, 38.66%)</title><rect x="41.0698%" y="196" width="38.6557%" height="15" fill="rgb(222,148,37)" fg:x="4100" fg:w="3859"/><text x="41.3198%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (306 samples, 3.07%)</title><rect x="76.6603%" y="212" width="3.0652%" height="15" fill="rgb(234,67,33)" fg:x="7653" fg:w="306"/><text x="76.9103%" y="222.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,568 samples, 55.77%)</title><rect x="24.3915%" y="180" width="55.7748%" height="15" fill="rgb(247,98,35)" fg:x="2435" fg:w="5568"/><text x="24.6415%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (44 samples, 0.44%)</title><rect x="79.7255%" y="196" width="0.4407%" height="15" fill="rgb(247,138,52)" fg:x="7959" fg:w="44"/><text x="79.9755%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (64 samples, 0.64%)</title><rect x="81.5086%" y="196" width="0.6411%" height="15" fill="rgb(213,79,30)" fg:x="8137" fg:w="64"/><text x="81.7586%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (60 samples, 0.60%)</title><rect x="83.1313%" y="212" width="0.6010%" height="15" fill="rgb(246,177,23)" fg:x="8299" fg:w="60"/><text x="83.3813%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (610 samples, 6.11%)</title><rect x="80.3165%" y="180" width="6.1104%" height="15" fill="rgb(230,62,27)" fg:x="8018" fg:w="610"/><text x="80.5665%" y="190.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (427 samples, 4.28%)</title><rect x="82.1497%" y="196" width="4.2773%" height="15" fill="rgb(216,154,8)" fg:x="8201" fg:w="427"/><text x="82.3997%" y="206.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (269 samples, 2.69%)</title><rect x="83.7323%" y="212" width="2.6946%" height="15" fill="rgb(244,35,45)" fg:x="8359" fg:w="269"/><text x="83.9823%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:277) (84 samples, 0.84%)</title><rect x="86.4269%" y="180" width="0.8414%" height="15" fill="rgb(251,115,12)" fg:x="8628" fg:w="84"/><text x="86.6769%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (32 samples, 0.32%)</title><rect x="86.9478%" y="196" width="0.3205%" height="15" fill="rgb(240,54,50)" fg:x="8680" fg:w="32"/><text x="87.1978%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (28 samples, 0.28%)</title><rect x="87.5188%" y="196" width="0.2805%" height="15" fill="rgb(233,84,52)" fg:x="8737" fg:w="28"/><text x="87.7688%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (95 samples, 0.95%)</title><rect x="87.2684%" y="180" width="0.9516%" height="15" fill="rgb(207,117,47)" fg:x="8712" fg:w="95"/><text x="87.5184%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (42 samples, 0.42%)</title><rect x="87.7993%" y="196" width="0.4207%" height="15" fill="rgb(249,43,39)" fg:x="8765" fg:w="42"/><text x="88.0493%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (230 samples, 2.30%)</title><rect x="88.2200%" y="180" width="2.3039%" height="15" fill="rgb(209,38,44)" fg:x="8807" fg:w="230"/><text x="88.4700%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.29%)</title><rect x="90.2334%" y="196" width="0.2905%" height="15" fill="rgb(236,212,23)" fg:x="9008" fg:w="29"/><text x="90.4834%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (65 samples, 0.65%)</title><rect x="90.5239%" y="180" width="0.6511%" height="15" fill="rgb(242,79,21)" fg:x="9037" fg:w="65"/><text x="90.7739%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (86 samples, 0.86%)</title><rect x="91.1750%" y="180" width="0.8615%" height="15" fill="rgb(211,96,35)" fg:x="9102" fg:w="86"/><text x="91.4250%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.12%)</title><rect x="91.9163%" y="196" width="0.1202%" height="15" fill="rgb(253,215,40)" fg:x="9176" fg:w="12"/><text x="92.1663%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.11%)</title><rect x="95.2619%" y="212" width="0.1102%" height="15" fill="rgb(211,81,21)" fg:x="9510" fg:w="11"/><text x="95.5119%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (140 samples, 1.40%)</title><rect x="94.1501%" y="196" width="1.4024%" height="15" fill="rgb(208,190,38)" fg:x="9399" fg:w="140"/><text x="94.4001%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.18%)</title><rect x="95.3721%" y="212" width="0.1803%" height="15" fill="rgb(235,213,38)" fg:x="9521" fg:w="18"/><text x="95.6221%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (366 samples, 3.67%)</title><rect x="92.0365%" y="180" width="3.6662%" height="15" fill="rgb(237,122,38)" fg:x="9188" fg:w="366"/><text x="92.2865%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.12%)</title><rect x="95.5825%" y="196" width="0.1202%" height="15" fill="rgb(244,218,35)" fg:x="9542" fg:w="12"/><text x="95.8325%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (41 samples, 0.41%)</title><rect x="95.7327%" y="180" width="0.4107%" height="15" fill="rgb(240,68,47)" fg:x="9557" fg:w="41"/><text x="95.9827%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (13 samples, 0.13%)</title><rect x="96.1434%" y="180" width="0.1302%" height="15" fill="rgb(210,16,53)" fg:x="9598" fg:w="13"/><text x="96.3934%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,541 samples, 95.57%)</title><rect x="0.8715%" y="164" width="95.5725%" height="15" fill="rgb(235,124,12)" fg:x="87" fg:w="9541"/><text x="1.1215%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>embeddings (kappybara/pattern.py:290) (17 samples, 0.17%)</title><rect x="96.2737%" y="180" width="0.1703%" height="15" fill="rgb(224,169,11)" fg:x="9611" fg:w="17"/><text x="96.5237%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (109 samples, 1.09%)</title><rect x="96.4440%" y="164" width="1.0919%" height="15" fill="rgb(250,166,2)" fg:x="9628" fg:w="109"/><text x="96.6940%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (28 samples, 0.28%)</title><rect x="97.2553%" y="180" width="0.2805%" height="15" fill="rgb(242,216,29)" fg:x="9709" fg:w="28"/><text x="97.5053%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (132 samples, 1.32%)</title><rect x="97.5959%" y="164" width="1.3222%" height="15" fill="rgb(230,116,27)" fg:x="9743" fg:w="132"/><text x="97.8459%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (16 samples, 0.16%)</title><rect x="98.7579%" y="180" width="0.1603%" height="15" fill="rgb(228,99,48)" fg:x="9859" fg:w="16"/><text x="99.0079%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (9,798 samples, 98.15%)</title><rect x="0.7813%" y="148" width="98.1468%" height="15" fill="rgb(253,11,6)" fg:x="78" fg:w="9798"/><text x="1.0313%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>apply_update (kappybara/mixture.py:101) (9,866 samples, 98.83%)</title><rect x="0.7613%" y="116" width="98.8280%" height="15" fill="rgb(247,143,39)" fg:x="76" fg:w="9866"/><text x="1.0113%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (9,866 samples, 98.83%)</title><rect x="0.7613%" y="132" width="98.8280%" height="15" fill="rgb(236,97,10)" fg:x="76" fg:w="9866"/><text x="1.0113%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (66 samples, 0.66%)</title><rect x="98.9282%" y="148" width="0.6611%" height="15" fill="rgb(233,208,19)" fg:x="9876" fg:w="66"/><text x="99.1782%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,940 samples, 99.57%)</title><rect x="0.0902%" y="68" width="99.5693%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="9940"/><text x="0.3402%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:71) (9,922 samples, 99.39%)</title><rect x="0.2705%" y="84" width="99.3890%" height="15" fill="rgb(220,129,5)" fg:x="27" fg:w="9922"/><text x="0.5205%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>act (kappybara/system.py:66) (9,873 samples, 98.90%)</title><rect x="0.7613%" y="100" width="98.8981%" height="15" fill="rgb(242,17,10)" fg:x="76" fg:w="9873"/><text x="1.0113%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>all (9,983 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="9983"/><text x="0.2500%" y="62.50"></text></g></svg></svg>