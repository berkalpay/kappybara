<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit b5196c5</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11711"><g><title>update (kappybara/system.py:69) (41 samples, 0.35%)</title><rect x="0.0854%" y="84" width="0.3501%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="41"/><text x="0.3354%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (41 samples, 0.35%)</title><rect x="0.0854%" y="100" width="0.3501%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="41"/><text x="0.3354%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (38 samples, 0.32%)</title><rect x="0.1110%" y="116" width="0.3245%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="38"/><text x="0.3610%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (36 samples, 0.31%)</title><rect x="0.1281%" y="132" width="0.3074%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="36"/><text x="0.3781%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (36 samples, 0.31%)</title><rect x="0.1281%" y="148" width="0.3074%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="36"/><text x="0.3781%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (32 samples, 0.27%)</title><rect x="0.1622%" y="164" width="0.2732%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="32"/><text x="0.4122%" y="174.50"></text></g><g><title>select (kappybara/rule.py:218) (29 samples, 0.25%)</title><rect x="0.6831%" y="116" width="0.2476%" height="15" fill="rgb(207,160,47)" fg:x="80" fg:w="29"/><text x="0.9331%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (47 samples, 0.40%)</title><rect x="0.5380%" y="100" width="0.4013%" height="15" fill="rgb(228,23,34)" fg:x="63" fg:w="47"/><text x="0.7880%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (20 samples, 0.17%)</title><rect x="0.9905%" y="164" width="0.1708%" height="15" fill="rgb(218,30,26)" fg:x="116" fg:w="20"/><text x="1.2405%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (37 samples, 0.32%)</title><rect x="0.9734%" y="148" width="0.3159%" height="15" fill="rgb(220,122,19)" fg:x="114" fg:w="37"/><text x="1.2234%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (15 samples, 0.13%)</title><rect x="1.1613%" y="164" width="0.1281%" height="15" fill="rgb(250,228,42)" fg:x="136" fg:w="15"/><text x="1.4113%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (60 samples, 0.51%)</title><rect x="1.3150%" y="164" width="0.5123%" height="15" fill="rgb(240,193,28)" fg:x="154" fg:w="60"/><text x="1.5650%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (14 samples, 0.12%)</title><rect x="1.7078%" y="180" width="0.1195%" height="15" fill="rgb(216,20,37)" fg:x="200" fg:w="14"/><text x="1.9578%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (23 samples, 0.20%)</title><rect x="2.1433%" y="180" width="0.1964%" height="15" fill="rgb(206,188,39)" fg:x="251" fg:w="23"/><text x="2.3933%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (22 samples, 0.19%)</title><rect x="2.3397%" y="180" width="0.1879%" height="15" fill="rgb(217,207,13)" fg:x="274" fg:w="22"/><text x="2.5897%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (14 samples, 0.12%)</title><rect x="2.5275%" y="180" width="0.1195%" height="15" fill="rgb(231,73,38)" fg:x="296" fg:w="14"/><text x="2.7775%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (24 samples, 0.20%)</title><rect x="2.6471%" y="180" width="0.2049%" height="15" fill="rgb(225,20,46)" fg:x="310" fg:w="24"/><text x="2.8971%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (200 samples, 1.71%)</title><rect x="1.2894%" y="148" width="1.7078%" height="15" fill="rgb(210,31,41)" fg:x="151" fg:w="200"/><text x="1.5394%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (136 samples, 1.16%)</title><rect x="1.8359%" y="164" width="1.1613%" height="15" fill="rgb(221,200,47)" fg:x="215" fg:w="136"/><text x="2.0859%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (17 samples, 0.15%)</title><rect x="2.8520%" y="180" width="0.1452%" height="15" fill="rgb(226,26,5)" fg:x="334" fg:w="17"/><text x="3.1020%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.12%)</title><rect x="3.6803%" y="164" width="0.1195%" height="15" fill="rgb(249,33,26)" fg:x="431" fg:w="14"/><text x="3.9303%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (98 samples, 0.84%)</title><rect x="3.0399%" y="148" width="0.8368%" height="15" fill="rgb(235,183,28)" fg:x="356" fg:w="98"/><text x="3.2899%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (22 samples, 0.19%)</title><rect x="3.8767%" y="148" width="0.1879%" height="15" fill="rgb(221,5,38)" fg:x="454" fg:w="22"/><text x="4.1267%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (62 samples, 0.53%)</title><rect x="4.8843%" y="180" width="0.5294%" height="15" fill="rgb(247,18,42)" fg:x="572" fg:w="62"/><text x="5.1343%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (40 samples, 0.34%)</title><rect x="5.0722%" y="196" width="0.3416%" height="15" fill="rgb(241,131,45)" fg:x="594" fg:w="40"/><text x="5.3222%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (544 samples, 4.65%)</title><rect x="0.9649%" y="132" width="4.6452%" height="15" fill="rgb(249,31,29)" fg:x="113" fg:w="544"/><text x="1.2149%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (177 samples, 1.51%)</title><rect x="4.0987%" y="148" width="1.5114%" height="15" fill="rgb(225,111,53)" fg:x="480" fg:w="177"/><text x="4.3487%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (143 samples, 1.22%)</title><rect x="4.3890%" y="164" width="1.2211%" height="15" fill="rgb(238,160,17)" fg:x="514" fg:w="143"/><text x="4.6390%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (19 samples, 0.16%)</title><rect x="5.4479%" y="180" width="0.1622%" height="15" fill="rgb(214,148,48)" fg:x="638" fg:w="19"/><text x="5.6979%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (548 samples, 4.68%)</title><rect x="0.9393%" y="116" width="4.6794%" height="15" fill="rgb(232,36,49)" fg:x="110" fg:w="548"/><text x="1.1893%" y="126.50">apply..</text></g><g><title>embeddings (kappybara/pattern.py:261) (76 samples, 0.65%)</title><rect x="6.0883%" y="180" width="0.6490%" height="15" fill="rgb(209,103,24)" fg:x="713" fg:w="76"/><text x="6.3383%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.13%)</title><rect x="14.6956%" y="196" width="0.1281%" height="15" fill="rgb(229,88,8)" fg:x="1721" fg:w="15"/><text x="14.9456%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (967 samples, 8.26%)</title><rect x="6.7373%" y="180" width="8.2572%" height="15" fill="rgb(213,181,19)" fg:x="789" fg:w="967"/><text x="6.9873%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="14.8237%" y="196" width="0.1708%" height="15" fill="rgb(254,191,54)" fg:x="1736" fg:w="20"/><text x="15.0737%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.14%)</title><rect x="17.5220%" y="196" width="0.1366%" height="15" fill="rgb(241,83,37)" fg:x="2052" fg:w="16"/><text x="17.7720%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (340 samples, 2.90%)</title><rect x="14.9944%" y="180" width="2.9033%" height="15" fill="rgb(233,36,39)" fg:x="1756" fg:w="340"/><text x="15.2444%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.24%)</title><rect x="17.6586%" y="196" width="0.2391%" height="15" fill="rgb(226,3,54)" fg:x="2068" fg:w="28"/><text x="17.9086%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (92 samples, 0.79%)</title><rect x="17.9319%" y="180" width="0.7856%" height="15" fill="rgb(245,192,40)" fg:x="2100" fg:w="92"/><text x="18.1819%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (69 samples, 0.59%)</title><rect x="18.7174%" y="180" width="0.5892%" height="15" fill="rgb(238,167,29)" fg:x="2192" fg:w="69"/><text x="18.9674%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (27 samples, 0.23%)</title><rect x="21.3731%" y="196" width="0.2306%" height="15" fill="rgb(232,182,51)" fg:x="2503" fg:w="27"/><text x="21.6231%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (297 samples, 2.54%)</title><rect x="19.3066%" y="180" width="2.5361%" height="15" fill="rgb(231,60,39)" fg:x="2261" fg:w="297"/><text x="19.5566%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.24%)</title><rect x="21.6036%" y="196" width="0.2391%" height="15" fill="rgb(208,69,12)" fg:x="2530" fg:w="28"/><text x="21.8536%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (228 samples, 1.95%)</title><rect x="21.8427%" y="180" width="1.9469%" height="15" fill="rgb(235,93,37)" fg:x="2558" fg:w="228"/><text x="22.0927%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (14 samples, 0.12%)</title><rect x="25.5572%" y="196" width="0.1195%" height="15" fill="rgb(213,116,39)" fg:x="2993" fg:w="14"/><text x="25.8072%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (110 samples, 0.94%)</title><rect x="25.6767%" y="196" width="0.9393%" height="15" fill="rgb(222,207,29)" fg:x="3007" fg:w="110"/><text x="25.9267%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (112 samples, 0.96%)</title><rect x="28.3665%" y="212" width="0.9564%" height="15" fill="rgb(206,96,30)" fg:x="3322" fg:w="112"/><text x="28.6165%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (89 samples, 0.76%)</title><rect x="31.0050%" y="228" width="0.7600%" height="15" fill="rgb(218,138,4)" fg:x="3631" fg:w="89"/><text x="31.2550%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (967 samples, 8.26%)</title><rect x="26.6502%" y="196" width="8.2572%" height="15" fill="rgb(250,191,14)" fg:x="3121" fg:w="967"/><text x="26.9002%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (654 samples, 5.58%)</title><rect x="29.3229%" y="212" width="5.5845%" height="15" fill="rgb(239,60,40)" fg:x="3434" fg:w="654"/><text x="29.5729%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (368 samples, 3.14%)</title><rect x="31.7650%" y="228" width="3.1423%" height="15" fill="rgb(206,27,48)" fg:x="3720" fg:w="368"/><text x="32.0150%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (109 samples, 0.93%)</title><rect x="34.9074%" y="196" width="0.9307%" height="15" fill="rgb(225,35,8)" fg:x="4088" fg:w="109"/><text x="35.1574%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (21 samples, 0.18%)</title><rect x="36.7091%" y="212" width="0.1793%" height="15" fill="rgb(250,213,24)" fg:x="4299" fg:w="21"/><text x="36.9591%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (197 samples, 1.68%)</title><rect x="35.8893%" y="196" width="1.6822%" height="15" fill="rgb(247,123,22)" fg:x="4203" fg:w="197"/><text x="36.1393%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (80 samples, 0.68%)</title><rect x="36.8884%" y="212" width="0.6831%" height="15" fill="rgb(231,138,38)" fg:x="4320" fg:w="80"/><text x="37.1384%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (185 samples, 1.58%)</title><rect x="45.2566%" y="212" width="1.5797%" height="15" fill="rgb(231,145,46)" fg:x="5300" fg:w="185"/><text x="45.5066%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (24 samples, 0.20%)</title><rect x="47.3828%" y="228" width="0.2049%" height="15" fill="rgb(251,118,11)" fg:x="5549" fg:w="24"/><text x="47.6328%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (184 samples, 1.57%)</title><rect x="46.9217%" y="212" width="1.5712%" height="15" fill="rgb(217,147,25)" fg:x="5495" fg:w="184"/><text x="47.1717%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (106 samples, 0.91%)</title><rect x="47.5877%" y="228" width="0.9051%" height="15" fill="rgb(247,81,37)" fg:x="5573" fg:w="106"/><text x="47.8377%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (16 samples, 0.14%)</title><rect x="49.4749%" y="228" width="0.1366%" height="15" fill="rgb(209,12,38)" fg:x="5794" fg:w="16"/><text x="49.7249%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.14%)</title><rect x="51.1143%" y="244" width="0.1366%" height="15" fill="rgb(227,1,9)" fg:x="5986" fg:w="16"/><text x="51.3643%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (435 samples, 3.71%)</title><rect x="49.6115%" y="228" width="3.7145%" height="15" fill="rgb(248,47,43)" fg:x="5810" fg:w="435"/><text x="49.8615%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (243 samples, 2.07%)</title><rect x="51.2510%" y="244" width="2.0750%" height="15" fill="rgb(221,10,30)" fg:x="6002" fg:w="243"/><text x="51.5010%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.32%)</title><rect x="53.0015%" y="260" width="0.3245%" height="15" fill="rgb(210,229,1)" fg:x="6207" fg:w="38"/><text x="53.2515%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (229 samples, 1.96%)</title><rect x="53.3259%" y="228" width="1.9554%" height="15" fill="rgb(222,148,37)" fg:x="6245" fg:w="229"/><text x="53.5759%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (63 samples, 0.54%)</title><rect x="55.2814%" y="228" width="0.5380%" height="15" fill="rgb(234,67,33)" fg:x="6474" fg:w="63"/><text x="55.5314%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.12%)</title><rect x="55.8193%" y="228" width="0.1195%" height="15" fill="rgb(247,98,35)" fg:x="6537" fg:w="14"/><text x="56.0693%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (914 samples, 7.80%)</title><rect x="48.4929%" y="212" width="7.8046%" height="15" fill="rgb(247,138,52)" fg:x="5679" fg:w="914"/><text x="48.7429%" y="222.50">embeds_in (..</text></g><g><title>coupled (kappybara/pattern.py:66) (42 samples, 0.36%)</title><rect x="55.9389%" y="228" width="0.3586%" height="15" fill="rgb(213,79,30)" fg:x="6551" fg:w="42"/><text x="56.1889%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (25 samples, 0.21%)</title><rect x="56.3317%" y="212" width="0.2135%" height="15" fill="rgb(246,177,23)" fg:x="6597" fg:w="25"/><text x="56.5817%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.11%)</title><rect x="57.2966%" y="228" width="0.1110%" height="15" fill="rgb(230,62,27)" fg:x="6710" fg:w="13"/><text x="57.5466%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (267 samples, 2.28%)</title><rect x="56.5451%" y="212" width="2.2799%" height="15" fill="rgb(216,154,8)" fg:x="6622" fg:w="267"/><text x="56.7951%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (166 samples, 1.42%)</title><rect x="57.4076%" y="228" width="1.4175%" height="15" fill="rgb(244,35,45)" fg:x="6723" fg:w="166"/><text x="57.6576%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.20%)</title><rect x="58.6286%" y="244" width="0.1964%" height="15" fill="rgb(251,115,12)" fg:x="6866" fg:w="23"/><text x="58.8786%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (433 samples, 3.70%)</title><rect x="58.8250%" y="212" width="3.6974%" height="15" fill="rgb(240,54,50)" fg:x="6889" fg:w="433"/><text x="59.0750%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (282 samples, 2.41%)</title><rect x="60.1144%" y="228" width="2.4080%" height="15" fill="rgb(233,84,52)" fg:x="7040" fg:w="282"/><text x="60.3644%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (50 samples, 0.43%)</title><rect x="62.0955%" y="244" width="0.4269%" height="15" fill="rgb(207,117,47)" fg:x="7272" fg:w="50"/><text x="62.3455%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (84 samples, 0.72%)</title><rect x="62.5224%" y="212" width="0.7173%" height="15" fill="rgb(249,43,39)" fg:x="7322" fg:w="84"/><text x="62.7724%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (168 samples, 1.43%)</title><rect x="63.2568%" y="212" width="1.4345%" height="15" fill="rgb(209,38,44)" fg:x="7408" fg:w="168"/><text x="63.5068%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (109 samples, 0.93%)</title><rect x="64.6913%" y="212" width="0.9307%" height="15" fill="rgb(236,212,23)" fg:x="7576" fg:w="109"/><text x="64.9413%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (21 samples, 0.18%)</title><rect x="65.6221%" y="212" width="0.1793%" height="15" fill="rgb(242,79,21)" fg:x="7685" fg:w="21"/><text x="65.8721%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,639 samples, 31.07%)</title><rect x="37.5715%" y="196" width="31.0733%" height="15" fill="rgb(211,96,35)" fg:x="4400" fg:w="3639"/><text x="37.8215%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (333 samples, 2.84%)</title><rect x="65.8014%" y="212" width="2.8435%" height="15" fill="rgb(253,215,40)" fg:x="7706" fg:w="333"/><text x="66.0514%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,315 samples, 45.38%)</title><rect x="23.7896%" y="180" width="45.3847%" height="15" fill="rgb(211,81,21)" fg:x="2786" fg:w="5315"/><text x="24.0396%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (62 samples, 0.53%)</title><rect x="68.6449%" y="196" width="0.5294%" height="15" fill="rgb(208,190,38)" fg:x="8039" fg:w="62"/><text x="68.8949%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (52 samples, 0.44%)</title><rect x="70.4210%" y="196" width="0.4440%" height="15" fill="rgb(235,213,38)" fg:x="8247" fg:w="52"/><text x="70.6710%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (38 samples, 0.32%)</title><rect x="71.8811%" y="212" width="0.3245%" height="15" fill="rgb(237,122,38)" fg:x="8418" fg:w="38"/><text x="72.1311%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (598 samples, 5.11%)</title><rect x="69.2853%" y="180" width="5.1063%" height="15" fill="rgb(244,218,35)" fg:x="8114" fg:w="598"/><text x="69.5353%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (413 samples, 3.53%)</title><rect x="70.8650%" y="196" width="3.5266%" height="15" fill="rgb(240,68,47)" fg:x="8299" fg:w="413"/><text x="71.1150%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (256 samples, 2.19%)</title><rect x="72.2056%" y="212" width="2.1860%" height="15" fill="rgb(210,16,53)" fg:x="8456" fg:w="256"/><text x="72.4556%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (88 samples, 0.75%)</title><rect x="74.3916%" y="180" width="0.7514%" height="15" fill="rgb(235,124,12)" fg:x="8712" fg:w="88"/><text x="74.6416%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (38 samples, 0.32%)</title><rect x="74.8185%" y="196" width="0.3245%" height="15" fill="rgb(224,169,11)" fg:x="8762" fg:w="38"/><text x="75.0685%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.12%)</title><rect x="75.3565%" y="196" width="0.1195%" height="15" fill="rgb(250,166,2)" fg:x="8825" fg:w="14"/><text x="75.6065%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (88 samples, 0.75%)</title><rect x="75.1430%" y="180" width="0.7514%" height="15" fill="rgb(242,216,29)" fg:x="8800" fg:w="88"/><text x="75.3930%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (49 samples, 0.42%)</title><rect x="75.4760%" y="196" width="0.4184%" height="15" fill="rgb(230,116,27)" fg:x="8839" fg:w="49"/><text x="75.7260%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (177 samples, 1.51%)</title><rect x="75.8945%" y="180" width="1.5114%" height="15" fill="rgb(228,99,48)" fg:x="8888" fg:w="177"/><text x="76.1445%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="77.1924%" y="196" width="0.2135%" height="15" fill="rgb(253,11,6)" fg:x="9040" fg:w="25"/><text x="77.4424%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (66 samples, 0.56%)</title><rect x="77.4059%" y="180" width="0.5636%" height="15" fill="rgb(247,143,39)" fg:x="9065" fg:w="66"/><text x="77.6559%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (95 samples, 0.81%)</title><rect x="77.9694%" y="180" width="0.8112%" height="15" fill="rgb(236,97,10)" fg:x="9131" fg:w="95"/><text x="78.2194%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (140 samples, 1.20%)</title><rect x="80.7788%" y="196" width="1.1955%" height="15" fill="rgb(233,208,19)" fg:x="9460" fg:w="140"/><text x="81.0288%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="81.8461%" y="212" width="0.1281%" height="15" fill="rgb(216,164,2)" fg:x="9585" fg:w="15"/><text x="82.0961%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (386 samples, 3.30%)</title><rect x="78.7806%" y="180" width="3.2960%" height="15" fill="rgb(220,129,5)" fg:x="9226" fg:w="386"/><text x="79.0306%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (37 samples, 0.32%)</title><rect x="82.0767%" y="180" width="0.3159%" height="15" fill="rgb(242,17,10)" fg:x="9612" fg:w="37"/><text x="82.3267%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (8,997 samples, 76.83%)</title><rect x="5.7382%" y="164" width="76.8252%" height="15" fill="rgb(242,107,0)" fg:x="672" fg:w="8997"/><text x="5.9882%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (100 samples, 0.85%)</title><rect x="82.5634%" y="164" width="0.8539%" height="15" fill="rgb(251,28,31)" fg:x="9669" fg:w="100"/><text x="82.8134%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.10%)</title><rect x="83.3148%" y="180" width="0.1025%" height="15" fill="rgb(233,223,10)" fg:x="9757" fg:w="12"/><text x="83.5648%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (127 samples, 1.08%)</title><rect x="83.4344%" y="164" width="1.0845%" height="15" fill="rgb(215,21,27)" fg:x="9771" fg:w="127"/><text x="83.6844%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,240 samples, 78.90%)</title><rect x="5.6699%" y="148" width="78.9002%" height="15" fill="rgb(232,23,21)" fg:x="664" fg:w="9240"/><text x="5.9199%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (26 samples, 0.22%)</title><rect x="84.6555%" y="164" width="0.2220%" height="15" fill="rgb(244,5,23)" fg:x="9914" fg:w="26"/><text x="84.9055%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (47 samples, 0.40%)</title><rect x="89.0530%" y="212" width="0.4013%" height="15" fill="rgb(226,81,46)" fg:x="10429" fg:w="47"/><text x="89.3030%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (130 samples, 1.11%)</title><rect x="89.4544%" y="212" width="1.1101%" height="15" fill="rgb(247,70,30)" fg:x="10476" fg:w="130"/><text x="89.7044%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:104) (12 samples, 0.10%)</title><rect x="90.5644%" y="212" width="0.1025%" height="15" fill="rgb(212,68,19)" fg:x="10606" fg:w="12"/><text x="90.8144%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (31 samples, 0.26%)</title><rect x="90.6669%" y="212" width="0.2647%" height="15" fill="rgb(240,187,13)" fg:x="10618" fg:w="31"/><text x="90.9169%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (758 samples, 6.47%)</title><rect x="84.8775%" y="164" width="6.4725%" height="15" fill="rgb(223,113,26)" fg:x="9940" fg:w="758"/><text x="85.1275%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (544 samples, 4.65%)</title><rect x="86.7048%" y="180" width="4.6452%" height="15" fill="rgb(206,192,2)" fg:x="10154" fg:w="544"/><text x="86.9548%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (485 samples, 4.14%)</title><rect x="87.2086%" y="196" width="4.1414%" height="15" fill="rgb(241,108,4)" fg:x="10213" fg:w="485"/><text x="87.4586%" y="206.50">&lt;lamb..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (49 samples, 0.42%)</title><rect x="90.9316%" y="212" width="0.4184%" height="15" fill="rgb(247,173,49)" fg:x="10649" fg:w="49"/><text x="91.1816%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.14%)</title><rect x="93.0322%" y="180" width="0.1366%" height="15" fill="rgb(224,114,35)" fg:x="10895" fg:w="16"/><text x="93.2822%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (12 samples, 0.10%)</title><rect x="93.1859%" y="180" width="0.1025%" height="15" fill="rgb(245,159,27)" fg:x="10913" fg:w="12"/><text x="93.4359%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (14 samples, 0.12%)</title><rect x="93.3311%" y="180" width="0.1195%" height="15" fill="rgb(245,172,44)" fg:x="10930" fg:w="14"/><text x="93.5811%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (17 samples, 0.15%)</title><rect x="93.4677%" y="180" width="0.1452%" height="15" fill="rgb(236,23,11)" fg:x="10946" fg:w="17"/><text x="93.7177%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (141 samples, 1.20%)</title><rect x="93.6128%" y="180" width="1.2040%" height="15" fill="rgb(205,117,38)" fg:x="10963" fg:w="141"/><text x="93.8628%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.20%)</title><rect x="94.6204%" y="196" width="0.1964%" height="15" fill="rgb(237,72,25)" fg:x="11081" fg:w="23"/><text x="94.8704%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (164 samples, 1.40%)</title><rect x="94.8168%" y="180" width="1.4004%" height="15" fill="rgb(244,70,9)" fg:x="11104" fg:w="164"/><text x="95.0668%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (19 samples, 0.16%)</title><rect x="96.0550%" y="196" width="0.1622%" height="15" fill="rgb(217,125,39)" fg:x="11249" fg:w="19"/><text x="96.3050%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (44 samples, 0.38%)</title><rect x="96.2172%" y="180" width="0.3757%" height="15" fill="rgb(235,36,10)" fg:x="11268" fg:w="44"/><text x="96.4672%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (164 samples, 1.40%)</title><rect x="96.5929%" y="180" width="1.4004%" height="15" fill="rgb(251,123,47)" fg:x="11312" fg:w="164"/><text x="96.8429%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.12%)</title><rect x="97.8738%" y="196" width="0.1195%" height="15" fill="rgb(221,13,13)" fg:x="11462" fg:w="14"/><text x="98.1238%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,660 samples, 14.17%)</title><rect x="84.5701%" y="148" width="14.1747%" height="15" fill="rgb(238,131,9)" fg:x="9904" fg:w="1660"/><text x="84.8201%" y="158.50">track_component (kappy..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (859 samples, 7.33%)</title><rect x="91.4098%" y="164" width="7.3350%" height="15" fill="rgb(211,50,8)" fg:x="10705" fg:w="859"/><text x="91.6598%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:70) (88 samples, 0.75%)</title><rect x="97.9933%" y="180" width="0.7514%" height="15" fill="rgb(245,182,24)" fg:x="11476" fg:w="88"/><text x="98.2433%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:96) (13 samples, 0.11%)</title><rect x="98.7448%" y="148" width="0.1110%" height="15" fill="rgb(242,14,37)" fg:x="11564" fg:w="13"/><text x="98.9948%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,644 samples, 99.43%)</title><rect x="0.0854%" y="68" width="99.4279%" height="15" fill="rgb(246,228,12)" fg:x="10" fg:w="11644"/><text x="0.3354%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,603 samples, 99.08%)</title><rect x="0.4355%" y="84" width="99.0778%" height="15" fill="rgb(213,55,15)" fg:x="51" fg:w="11603"/><text x="0.6855%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (11,544 samples, 98.57%)</title><rect x="0.9393%" y="100" width="98.5740%" height="15" fill="rgb(209,9,3)" fg:x="110" fg:w="11544"/><text x="1.1893%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (10,993 samples, 93.87%)</title><rect x="5.6443%" y="116" width="93.8690%" height="15" fill="rgb(230,59,30)" fg:x="661" fg:w="10993"/><text x="5.8943%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (10,993 samples, 93.87%)</title><rect x="5.6443%" y="132" width="93.8690%" height="15" fill="rgb(209,121,21)" fg:x="661" fg:w="10993"/><text x="5.8943%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (77 samples, 0.66%)</title><rect x="98.8558%" y="148" width="0.6575%" height="15" fill="rgb(220,109,13)" fg:x="11577" fg:w="77"/><text x="99.1058%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (14 samples, 0.12%)</title><rect x="99.5133%" y="68" width="0.1195%" height="15" fill="rgb(232,18,1)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.12%)</title><rect x="99.5133%" y="84" width="0.1195%" height="15" fill="rgb(215,41,42)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.12%)</title><rect x="99.5133%" y="100" width="0.1195%" height="15" fill="rgb(224,123,36)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.12%)</title><rect x="99.5133%" y="116" width="0.1195%" height="15" fill="rgb(240,125,3)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.12%)</title><rect x="99.5133%" y="132" width="0.1195%" height="15" fill="rgb(205,98,50)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.12%)</title><rect x="99.5133%" y="148" width="0.1195%" height="15" fill="rgb(205,185,37)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.12%)</title><rect x="99.5133%" y="164" width="0.1195%" height="15" fill="rgb(238,207,15)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.12%)</title><rect x="99.5133%" y="180" width="0.1195%" height="15" fill="rgb(213,199,42)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.12%)</title><rect x="99.5133%" y="196" width="0.1195%" height="15" fill="rgb(235,201,11)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.12%)</title><rect x="99.5133%" y="212" width="0.1195%" height="15" fill="rgb(207,46,11)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.12%)</title><rect x="99.5133%" y="228" width="0.1195%" height="15" fill="rgb(241,35,35)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.12%)</title><rect x="99.5133%" y="244" width="0.1195%" height="15" fill="rgb(243,32,47)" fg:x="11654" fg:w="14"/><text x="99.7633%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (14 samples, 0.12%)</title><rect x="99.6328%" y="68" width="0.1195%" height="15" fill="rgb(247,202,23)" fg:x="11668" fg:w="14"/><text x="99.8828%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (14 samples, 0.12%)</title><rect x="99.7524%" y="68" width="0.1195%" height="15" fill="rgb(219,102,11)" fg:x="11682" fg:w="14"/><text x="100.0024%" y="78.50"></text></g><g><title>all (11,711 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(243,110,44)" fg:x="0" fg:w="11711"/><text x="0.2500%" y="62.50"></text></g></svg></svg>