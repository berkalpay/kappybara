<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 89eaa78</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="3480"><g><title>n_embeddings (kappybara/rule.py:170) (6 samples, 0.17%)</title><rect x="0.4023%" y="180" width="0.1724%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="6"/><text x="0.6523%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (28 samples, 0.80%)</title><rect x="0.1724%" y="84" width="0.8046%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="28"/><text x="0.4224%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (28 samples, 0.80%)</title><rect x="0.1724%" y="100" width="0.8046%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="28"/><text x="0.4224%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (27 samples, 0.78%)</title><rect x="0.2011%" y="116" width="0.7759%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="27"/><text x="0.4511%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (26 samples, 0.75%)</title><rect x="0.2299%" y="132" width="0.7471%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="26"/><text x="0.4799%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (26 samples, 0.75%)</title><rect x="0.2299%" y="148" width="0.7471%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="26"/><text x="0.4799%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (24 samples, 0.69%)</title><rect x="0.2874%" y="164" width="0.6897%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="24"/><text x="0.5374%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (11 samples, 0.32%)</title><rect x="1.0345%" y="116" width="0.3161%" height="15" fill="rgb(228,23,34)" fg:x="36" fg:w="11"/><text x="1.2845%" y="126.50"></text></g><g><title>_produce_update (kappybara/rule.py:148) (8 samples, 0.23%)</title><rect x="1.1207%" y="132" width="0.2299%" height="15" fill="rgb(218,30,26)" fg:x="39" fg:w="8"/><text x="1.3707%" y="142.50"></text></g><g><title>_produce_update (kappybara/rule.py:148) (4 samples, 0.11%)</title><rect x="1.4655%" y="132" width="0.1149%" height="15" fill="rgb(220,122,19)" fg:x="51" fg:w="4"/><text x="1.7155%" y="142.50"></text></g><g><title>select (kappybara/rule.py:252) (7 samples, 0.20%)</title><rect x="1.4080%" y="116" width="0.2011%" height="15" fill="rgb(250,228,42)" fg:x="49" fg:w="7"/><text x="1.6580%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (23 samples, 0.66%)</title><rect x="0.9770%" y="100" width="0.6609%" height="15" fill="rgb(240,193,28)" fg:x="34" fg:w="23"/><text x="1.2270%" y="110.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (4 samples, 0.11%)</title><rect x="1.6379%" y="148" width="0.1149%" height="15" fill="rgb(216,20,37)" fg:x="57" fg:w="4"/><text x="1.8879%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (8 samples, 0.23%)</title><rect x="1.7529%" y="148" width="0.2299%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="8"/><text x="2.0029%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (9 samples, 0.26%)</title><rect x="2.4138%" y="180" width="0.2586%" height="15" fill="rgb(217,207,13)" fg:x="84" fg:w="9"/><text x="2.6638%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (7 samples, 0.20%)</title><rect x="2.4713%" y="196" width="0.2011%" height="15" fill="rgb(231,73,38)" fg:x="86" fg:w="7"/><text x="2.7213%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (40 samples, 1.15%)</title><rect x="1.6379%" y="132" width="1.1494%" height="15" fill="rgb(225,20,46)" fg:x="57" fg:w="40"/><text x="1.8879%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (24 samples, 0.69%)</title><rect x="2.0977%" y="148" width="0.6897%" height="15" fill="rgb(210,31,41)" fg:x="73" fg:w="24"/><text x="2.3477%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (22 samples, 0.63%)</title><rect x="2.1552%" y="164" width="0.6322%" height="15" fill="rgb(221,200,47)" fg:x="75" fg:w="22"/><text x="2.4052%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (6 samples, 0.17%)</title><rect x="2.7874%" y="132" width="0.1724%" height="15" fill="rgb(226,26,5)" fg:x="97" fg:w="6"/><text x="3.0374%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (5 samples, 0.14%)</title><rect x="2.8161%" y="148" width="0.1437%" height="15" fill="rgb(249,33,26)" fg:x="98" fg:w="5"/><text x="3.0661%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.46%)</title><rect x="4.7989%" y="148" width="0.4598%" height="15" fill="rgb(235,183,28)" fg:x="167" fg:w="16"/><text x="5.0489%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.34%)</title><rect x="7.5000%" y="164" width="0.3448%" height="15" fill="rgb(221,5,38)" fg:x="261" fg:w="12"/><text x="7.7500%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (188 samples, 5.40%)</title><rect x="2.9598%" y="132" width="5.4023%" height="15" fill="rgb(247,18,42)" fg:x="103" fg:w="188"/><text x="3.2098%" y="142.50">_remove..</text></g><g><title>__eq__ (kappybara/utils.py:33) (108 samples, 3.10%)</title><rect x="5.2586%" y="148" width="3.1034%" height="15" fill="rgb(241,131,45)" fg:x="183" fg:w="108"/><text x="5.5086%" y="158.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.52%)</title><rect x="7.8448%" y="164" width="0.5172%" height="15" fill="rgb(249,31,29)" fg:x="273" fg:w="18"/><text x="8.0948%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (236 samples, 6.78%)</title><rect x="1.6379%" y="116" width="6.7816%" height="15" fill="rgb(225,111,53)" fg:x="57" fg:w="236"/><text x="1.8879%" y="126.50">apply_upd..</text></g><g><title>apply_update (kappybara/mixture.py:106) (5 samples, 0.14%)</title><rect x="8.4195%" y="116" width="0.1437%" height="15" fill="rgb(238,160,17)" fg:x="293" fg:w="5"/><text x="8.6695%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (19 samples, 0.55%)</title><rect x="9.0517%" y="148" width="0.5460%" height="15" fill="rgb(214,148,48)" fg:x="315" fg:w="19"/><text x="9.3017%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.23%)</title><rect x="12.9885%" y="164" width="0.2299%" height="15" fill="rgb(232,36,49)" fg:x="452" fg:w="8"/><text x="13.2385%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (138 samples, 3.97%)</title><rect x="9.5977%" y="148" width="3.9655%" height="15" fill="rgb(209,103,24)" fg:x="334" fg:w="138"/><text x="9.8477%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.34%)</title><rect x="13.2184%" y="164" width="0.3448%" height="15" fill="rgb(229,88,8)" fg:x="460" fg:w="12"/><text x="13.4684%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.23%)</title><rect x="17.1552%" y="164" width="0.2299%" height="15" fill="rgb(213,181,19)" fg:x="597" fg:w="8"/><text x="17.4052%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (136 samples, 3.91%)</title><rect x="13.5632%" y="148" width="3.9080%" height="15" fill="rgb(254,191,54)" fg:x="472" fg:w="136"/><text x="13.8132%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:262) (24 samples, 0.69%)</title><rect x="17.5287%" y="148" width="0.6897%" height="15" fill="rgb(241,83,37)" fg:x="610" fg:w="24"/><text x="17.7787%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (32 samples, 0.92%)</title><rect x="18.2184%" y="148" width="0.9195%" height="15" fill="rgb(233,36,39)" fg:x="634" fg:w="32"/><text x="18.4684%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.14%)</title><rect x="21.4368%" y="164" width="0.1437%" height="15" fill="rgb(226,3,54)" fg:x="746" fg:w="5"/><text x="21.6868%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (97 samples, 2.79%)</title><rect x="19.1379%" y="148" width="2.7874%" height="15" fill="rgb(245,192,40)" fg:x="666" fg:w="97"/><text x="19.3879%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.34%)</title><rect x="21.5805%" y="164" width="0.3448%" height="15" fill="rgb(238,167,29)" fg:x="751" fg:w="12"/><text x="21.8305%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (87 samples, 2.50%)</title><rect x="21.9253%" y="148" width="2.5000%" height="15" fill="rgb(232,182,51)" fg:x="763" fg:w="87"/><text x="22.1753%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (10 samples, 0.29%)</title><rect x="26.8966%" y="164" width="0.2874%" height="15" fill="rgb(231,60,39)" fg:x="936" fg:w="10"/><text x="27.1466%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (35 samples, 1.01%)</title><rect x="27.1839%" y="164" width="1.0057%" height="15" fill="rgb(208,69,12)" fg:x="946" fg:w="35"/><text x="27.4339%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (37 samples, 1.06%)</title><rect x="30.5172%" y="180" width="1.0632%" height="15" fill="rgb(235,93,37)" fg:x="1062" fg:w="37"/><text x="30.7672%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (28 samples, 0.80%)</title><rect x="33.2759%" y="196" width="0.8046%" height="15" fill="rgb(213,116,39)" fg:x="1158" fg:w="28"/><text x="33.5259%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (337 samples, 9.68%)</title><rect x="28.2184%" y="164" width="9.6839%" height="15" fill="rgb(222,207,29)" fg:x="982" fg:w="337"/><text x="28.4684%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (220 samples, 6.32%)</title><rect x="31.5805%" y="180" width="6.3218%" height="15" fill="rgb(206,96,30)" fg:x="1099" fg:w="220"/><text x="31.8305%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (133 samples, 3.82%)</title><rect x="34.0805%" y="196" width="3.8218%" height="15" fill="rgb(218,138,4)" fg:x="1186" fg:w="133"/><text x="34.3305%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (48 samples, 1.38%)</title><rect x="37.9023%" y="164" width="1.3793%" height="15" fill="rgb(250,191,14)" fg:x="1319" fg:w="48"/><text x="38.1523%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (31 samples, 0.89%)</title><rect x="40.3736%" y="180" width="0.8908%" height="15" fill="rgb(239,60,40)" fg:x="1405" fg:w="31"/><text x="40.6236%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (73 samples, 2.10%)</title><rect x="39.3103%" y="164" width="2.0977%" height="15" fill="rgb(206,27,48)" fg:x="1368" fg:w="73"/><text x="39.5603%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (5 samples, 0.14%)</title><rect x="41.2644%" y="180" width="0.1437%" height="15" fill="rgb(225,35,8)" fg:x="1436" fg:w="5"/><text x="41.5144%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (67 samples, 1.93%)</title><rect x="50.5747%" y="180" width="1.9253%" height="15" fill="rgb(250,213,24)" fg:x="1760" fg:w="67"/><text x="50.8247%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (4 samples, 0.11%)</title><rect x="52.5000%" y="180" width="0.1149%" height="15" fill="rgb(247,123,22)" fg:x="1827" fg:w="4"/><text x="52.7500%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (4 samples, 0.11%)</title><rect x="53.2184%" y="196" width="0.1149%" height="15" fill="rgb(231,138,38)" fg:x="1852" fg:w="4"/><text x="53.4684%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (61 samples, 1.75%)</title><rect x="52.6149%" y="180" width="1.7529%" height="15" fill="rgb(231,145,46)" fg:x="1831" fg:w="61"/><text x="52.8649%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (36 samples, 1.03%)</title><rect x="53.3333%" y="196" width="1.0345%" height="15" fill="rgb(251,118,11)" fg:x="1856" fg:w="36"/><text x="53.5833%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (11 samples, 0.32%)</title><rect x="55.8046%" y="196" width="0.3161%" height="15" fill="rgb(217,147,25)" fg:x="1942" fg:w="11"/><text x="56.0546%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.14%)</title><rect x="58.6782%" y="212" width="0.1437%" height="15" fill="rgb(247,81,37)" fg:x="2042" fg:w="5"/><text x="58.9282%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.17%)</title><rect x="60.6034%" y="228" width="0.1724%" height="15" fill="rgb(209,12,38)" fg:x="2109" fg:w="6"/><text x="60.8534%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (171 samples, 4.91%)</title><rect x="56.1207%" y="196" width="4.9138%" height="15" fill="rgb(227,1,9)" fg:x="1953" fg:w="171"/><text x="56.3707%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (77 samples, 2.21%)</title><rect x="58.8218%" y="212" width="2.2126%" height="15" fill="rgb(248,47,43)" fg:x="2047" fg:w="77"/><text x="59.0718%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.26%)</title><rect x="60.7759%" y="228" width="0.2586%" height="15" fill="rgb(221,10,30)" fg:x="2115" fg:w="9"/><text x="61.0259%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (95 samples, 2.73%)</title><rect x="61.0345%" y="196" width="2.7299%" height="15" fill="rgb(210,229,1)" fg:x="2124" fg:w="95"/><text x="61.2845%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (54 samples, 1.55%)</title><rect x="63.7644%" y="196" width="1.5517%" height="15" fill="rgb(222,148,37)" fg:x="2219" fg:w="54"/><text x="64.0144%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (7 samples, 0.20%)</title><rect x="65.3161%" y="196" width="0.2011%" height="15" fill="rgb(234,67,33)" fg:x="2273" fg:w="7"/><text x="65.5661%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (399 samples, 11.47%)</title><rect x="54.3678%" y="180" width="11.4655%" height="15" fill="rgb(247,98,35)" fg:x="1892" fg:w="399"/><text x="54.6178%" y="190.50">embeds_in (kappyb..</text></g><g><title>coupled (kappybara/pattern.py:64) (11 samples, 0.32%)</title><rect x="65.5172%" y="196" width="0.3161%" height="15" fill="rgb(247,138,52)" fg:x="2280" fg:w="11"/><text x="65.7672%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (4 samples, 0.11%)</title><rect x="65.8621%" y="180" width="0.1149%" height="15" fill="rgb(213,79,30)" fg:x="2292" fg:w="4"/><text x="66.1121%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.20%)</title><rect x="68.2759%" y="212" width="0.2011%" height="15" fill="rgb(246,177,23)" fg:x="2376" fg:w="7"/><text x="68.5259%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (98 samples, 2.82%)</title><rect x="65.9770%" y="180" width="2.8161%" height="15" fill="rgb(230,62,27)" fg:x="2296" fg:w="98"/><text x="66.2270%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (60 samples, 1.72%)</title><rect x="67.0690%" y="196" width="1.7241%" height="15" fill="rgb(216,154,8)" fg:x="2334" fg:w="60"/><text x="67.3190%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.32%)</title><rect x="68.4770%" y="212" width="0.3161%" height="15" fill="rgb(244,35,45)" fg:x="2383" fg:w="11"/><text x="68.7270%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (4 samples, 0.11%)</title><rect x="69.7701%" y="196" width="0.1149%" height="15" fill="rgb(251,115,12)" fg:x="2428" fg:w="4"/><text x="70.0201%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (90 samples, 2.59%)</title><rect x="68.7931%" y="180" width="2.5862%" height="15" fill="rgb(240,54,50)" fg:x="2394" fg:w="90"/><text x="69.0431%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (52 samples, 1.49%)</title><rect x="69.8851%" y="196" width="1.4943%" height="15" fill="rgb(233,84,52)" fg:x="2432" fg:w="52"/><text x="70.1351%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.23%)</title><rect x="71.1494%" y="212" width="0.2299%" height="15" fill="rgb(207,117,47)" fg:x="2476" fg:w="8"/><text x="71.3994%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (16 samples, 0.46%)</title><rect x="71.3793%" y="180" width="0.4598%" height="15" fill="rgb(249,43,39)" fg:x="2484" fg:w="16"/><text x="71.6293%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (53 samples, 1.52%)</title><rect x="71.8678%" y="180" width="1.5230%" height="15" fill="rgb(209,38,44)" fg:x="2501" fg:w="53"/><text x="72.1178%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (17 samples, 0.49%)</title><rect x="73.3908%" y="180" width="0.4885%" height="15" fill="rgb(236,212,23)" fg:x="2554" fg:w="17"/><text x="73.6408%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (6 samples, 0.17%)</title><rect x="73.8793%" y="180" width="0.1724%" height="15" fill="rgb(242,79,21)" fg:x="2571" fg:w="6"/><text x="74.1293%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,246 samples, 35.80%)</title><rect x="41.4080%" y="164" width="35.8046%" height="15" fill="rgb(211,96,35)" fg:x="1441" fg:w="1246"/><text x="41.6580%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (110 samples, 3.16%)</title><rect x="74.0517%" y="180" width="3.1609%" height="15" fill="rgb(253,215,40)" fg:x="2577" fg:w="110"/><text x="74.3017%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (1,861 samples, 53.48%)</title><rect x="24.4253%" y="148" width="53.4770%" height="15" fill="rgb(211,81,21)" fg:x="850" fg:w="1861"/><text x="24.6753%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (24 samples, 0.69%)</title><rect x="77.2126%" y="164" width="0.6897%" height="15" fill="rgb(208,190,38)" fg:x="2687" fg:w="24"/><text x="77.4626%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (5 samples, 0.14%)</title><rect x="77.9023%" y="148" width="0.1437%" height="15" fill="rgb(235,213,38)" fg:x="2711" fg:w="5"/><text x="78.1523%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (12 samples, 0.34%)</title><rect x="79.1667%" y="164" width="0.3448%" height="15" fill="rgb(237,122,38)" fg:x="2755" fg:w="12"/><text x="79.4167%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (24 samples, 0.69%)</title><rect x="80.8908%" y="180" width="0.6897%" height="15" fill="rgb(244,218,35)" fg:x="2815" fg:w="24"/><text x="81.1408%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (211 samples, 6.06%)</title><rect x="78.0460%" y="148" width="6.0632%" height="15" fill="rgb(240,68,47)" fg:x="2716" fg:w="211"/><text x="78.2960%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (160 samples, 4.60%)</title><rect x="79.5115%" y="164" width="4.5977%" height="15" fill="rgb(210,16,53)" fg:x="2767" fg:w="160"/><text x="79.7615%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (88 samples, 2.53%)</title><rect x="81.5805%" y="180" width="2.5287%" height="15" fill="rgb(235,124,12)" fg:x="2839" fg:w="88"/><text x="81.8305%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (19 samples, 0.55%)</title><rect x="84.9713%" y="164" width="0.5460%" height="15" fill="rgb(224,169,11)" fg:x="2957" fg:w="19"/><text x="85.2213%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (54 samples, 1.55%)</title><rect x="84.1092%" y="148" width="1.5517%" height="15" fill="rgb(250,166,2)" fg:x="2927" fg:w="54"/><text x="84.3592%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (5 samples, 0.14%)</title><rect x="85.5172%" y="164" width="0.1437%" height="15" fill="rgb(242,216,29)" fg:x="2976" fg:w="5"/><text x="85.7672%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (4 samples, 0.11%)</title><rect x="86.1782%" y="164" width="0.1149%" height="15" fill="rgb(230,116,27)" fg:x="2999" fg:w="4"/><text x="86.4282%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (52 samples, 1.49%)</title><rect x="85.6609%" y="148" width="1.4943%" height="15" fill="rgb(228,99,48)" fg:x="2981" fg:w="52"/><text x="85.9109%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (30 samples, 0.86%)</title><rect x="86.2931%" y="164" width="0.8621%" height="15" fill="rgb(253,11,6)" fg:x="3003" fg:w="30"/><text x="86.5431%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.14%)</title><rect x="88.1034%" y="164" width="0.1437%" height="15" fill="rgb(247,143,39)" fg:x="3066" fg:w="5"/><text x="88.3534%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (51 samples, 1.47%)</title><rect x="87.1552%" y="148" width="1.4655%" height="15" fill="rgb(236,97,10)" fg:x="3033" fg:w="51"/><text x="87.4052%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.37%)</title><rect x="88.2471%" y="164" width="0.3736%" height="15" fill="rgb(233,208,19)" fg:x="3071" fg:w="13"/><text x="88.4971%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (18 samples, 0.52%)</title><rect x="88.6207%" y="148" width="0.5172%" height="15" fill="rgb(216,164,2)" fg:x="3084" fg:w="18"/><text x="88.8707%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (22 samples, 0.63%)</title><rect x="89.1379%" y="148" width="0.6322%" height="15" fill="rgb(220,129,5)" fg:x="3102" fg:w="22"/><text x="89.3879%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (33 samples, 0.95%)</title><rect x="91.2931%" y="164" width="0.9483%" height="15" fill="rgb(242,17,10)" fg:x="3177" fg:w="33"/><text x="91.5431%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.14%)</title><rect x="92.0977%" y="180" width="0.1437%" height="15" fill="rgb(242,107,0)" fg:x="3205" fg:w="5"/><text x="92.3477%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (88 samples, 2.53%)</title><rect x="89.7701%" y="148" width="2.5287%" height="15" fill="rgb(251,28,31)" fg:x="3124" fg:w="88"/><text x="90.0201%" y="158.50">em..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (4 samples, 0.11%)</title><rect x="92.4713%" y="164" width="0.1149%" height="15" fill="rgb(233,223,10)" fg:x="3218" fg:w="4"/><text x="92.7213%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (14 samples, 0.40%)</title><rect x="92.2989%" y="148" width="0.4023%" height="15" fill="rgb(215,21,27)" fg:x="3212" fg:w="14"/><text x="92.5489%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:111) (4 samples, 0.11%)</title><rect x="92.5862%" y="164" width="0.1149%" height="15" fill="rgb(232,23,21)" fg:x="3222" fg:w="4"/><text x="92.8362%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (14 samples, 0.40%)</title><rect x="92.7586%" y="148" width="0.4023%" height="15" fill="rgb(244,5,23)" fg:x="3228" fg:w="14"/><text x="93.0086%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (6 samples, 0.17%)</title><rect x="93.1609%" y="148" width="0.1724%" height="15" fill="rgb(226,81,46)" fg:x="3242" fg:w="6"/><text x="93.4109%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (2,949 samples, 84.74%)</title><rect x="8.6207%" y="132" width="84.7414%" height="15" fill="rgb(247,70,30)" fg:x="300" fg:w="2949"/><text x="8.8707%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (23 samples, 0.66%)</title><rect x="93.3621%" y="132" width="0.6609%" height="15" fill="rgb(212,68,19)" fg:x="3249" fg:w="23"/><text x="93.6121%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (4 samples, 0.11%)</title><rect x="94.1092%" y="132" width="0.1149%" height="15" fill="rgb(240,187,13)" fg:x="3275" fg:w="4"/><text x="94.3592%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.14%)</title><rect x="97.7299%" y="148" width="0.1437%" height="15" fill="rgb(223,113,26)" fg:x="3401" fg:w="5"/><text x="97.9799%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (137 samples, 3.94%)</title><rect x="94.2241%" y="132" width="3.9368%" height="15" fill="rgb(206,192,2)" fg:x="3279" fg:w="137"/><text x="94.4741%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.29%)</title><rect x="97.8736%" y="148" width="0.2874%" height="15" fill="rgb(241,108,4)" fg:x="3406" fg:w="10"/><text x="98.1236%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (3,156 samples, 90.69%)</title><rect x="8.5632%" y="116" width="90.6897%" height="15" fill="rgb(247,173,49)" fg:x="298" fg:w="3156"/><text x="8.8132%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (38 samples, 1.09%)</title><rect x="98.1609%" y="132" width="1.0920%" height="15" fill="rgb(224,114,35)" fg:x="3416" fg:w="38"/><text x="98.4109%" y="142.50"></text></g><g><title>act (kappybara/system.py:65) (3,398 samples, 97.64%)</title><rect x="1.6379%" y="100" width="97.6437%" height="15" fill="rgb(245,159,27)" fg:x="57" fg:w="3398"/><text x="1.8879%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:25) (3,451 samples, 99.17%)</title><rect x="0.1724%" y="68" width="99.1667%" height="15" fill="rgb(245,172,44)" fg:x="6" fg:w="3451"/><text x="0.4224%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:25)</text></g><g><title>update (kappybara/system.py:70) (3,423 samples, 98.36%)</title><rect x="0.9770%" y="84" width="98.3621%" height="15" fill="rgb(236,23,11)" fg:x="34" fg:w="3423"/><text x="1.2270%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (7 samples, 0.20%)</title><rect x="99.3391%" y="68" width="0.2011%" height="15" fill="rgb(205,117,38)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (7 samples, 0.20%)</title><rect x="99.3391%" y="84" width="0.2011%" height="15" fill="rgb(237,72,25)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (7 samples, 0.20%)</title><rect x="99.3391%" y="100" width="0.2011%" height="15" fill="rgb(244,70,9)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (7 samples, 0.20%)</title><rect x="99.3391%" y="116" width="0.2011%" height="15" fill="rgb(217,125,39)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (7 samples, 0.20%)</title><rect x="99.3391%" y="132" width="0.2011%" height="15" fill="rgb(235,36,10)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (7 samples, 0.20%)</title><rect x="99.3391%" y="148" width="0.2011%" height="15" fill="rgb(251,123,47)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (7 samples, 0.20%)</title><rect x="99.3391%" y="164" width="0.2011%" height="15" fill="rgb(221,13,13)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (7 samples, 0.20%)</title><rect x="99.3391%" y="180" width="0.2011%" height="15" fill="rgb(238,131,9)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (7 samples, 0.20%)</title><rect x="99.3391%" y="196" width="0.2011%" height="15" fill="rgb(211,50,8)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (7 samples, 0.20%)</title><rect x="99.3391%" y="212" width="0.2011%" height="15" fill="rgb(245,182,24)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (7 samples, 0.20%)</title><rect x="99.3391%" y="228" width="0.2011%" height="15" fill="rgb(242,14,37)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (7 samples, 0.20%)</title><rect x="99.3391%" y="244" width="0.2011%" height="15" fill="rgb(246,228,12)" fg:x="3457" fg:w="7"/><text x="99.5891%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (6 samples, 0.17%)</title><rect x="99.3678%" y="260" width="0.1724%" height="15" fill="rgb(213,55,15)" fg:x="3458" fg:w="6"/><text x="99.6178%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (6 samples, 0.17%)</title><rect x="99.3678%" y="276" width="0.1724%" height="15" fill="rgb(209,9,3)" fg:x="3458" fg:w="6"/><text x="99.6178%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (6 samples, 0.17%)</title><rect x="99.3678%" y="292" width="0.1724%" height="15" fill="rgb(230,59,30)" fg:x="3458" fg:w="6"/><text x="99.6178%" y="302.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (7 samples, 0.20%)</title><rect x="99.5402%" y="68" width="0.2011%" height="15" fill="rgb(209,121,21)" fg:x="3464" fg:w="7"/><text x="99.7902%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (4 samples, 0.11%)</title><rect x="99.7414%" y="68" width="0.1149%" height="15" fill="rgb(220,109,13)" fg:x="3471" fg:w="4"/><text x="99.9914%" y="78.50"></text></g><g><title>all (3,480 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="3480"/><text x="0.2500%" y="62.50"></text></g></svg></svg>