<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit adc5460</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="8687"><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (16 samples, 0.18%)</title><rect x="0.4374%" y="196" width="0.1842%" height="15" fill="rgb(227,0,7)" fg:x="38" fg:w="16"/><text x="0.6874%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (14 samples, 0.16%)</title><rect x="0.4605%" y="212" width="0.1612%" height="15" fill="rgb(217,0,24)" fg:x="40" fg:w="14"/><text x="0.7105%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:170) (44 samples, 0.51%)</title><rect x="0.1381%" y="180" width="0.5065%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="44"/><text x="0.3881%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (9 samples, 0.10%)</title><rect x="0.8173%" y="180" width="0.1036%" height="15" fill="rgb(248,212,6)" fg:x="71" fg:w="9"/><text x="1.0673%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (16 samples, 0.18%)</title><rect x="0.9209%" y="180" width="0.1842%" height="15" fill="rgb(208,68,35)" fg:x="80" fg:w="16"/><text x="1.1709%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (14 samples, 0.16%)</title><rect x="1.1051%" y="180" width="0.1612%" height="15" fill="rgb(232,128,0)" fg:x="96" fg:w="14"/><text x="1.3551%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (9 samples, 0.10%)</title><rect x="1.1627%" y="196" width="0.1036%" height="15" fill="rgb(207,160,47)" fg:x="101" fg:w="9"/><text x="1.4127%" y="206.50"></text></g><g><title>update (kappybara/system.py:69) (113 samples, 1.30%)</title><rect x="0.0691%" y="84" width="1.3008%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="113"/><text x="0.3191%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (112 samples, 1.29%)</title><rect x="0.0806%" y="100" width="1.2893%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="112"/><text x="0.3306%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (112 samples, 1.29%)</title><rect x="0.0806%" y="116" width="1.2893%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="112"/><text x="0.3306%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (112 samples, 1.29%)</title><rect x="0.0806%" y="132" width="1.2893%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="112"/><text x="0.3306%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (112 samples, 1.29%)</title><rect x="0.0806%" y="148" width="1.2893%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="112"/><text x="0.3306%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (110 samples, 1.27%)</title><rect x="0.1036%" y="164" width="1.2663%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="110"/><text x="0.3536%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (16 samples, 0.18%)</title><rect x="1.4044%" y="100" width="0.1842%" height="15" fill="rgb(206,188,39)" fg:x="122" fg:w="16"/><text x="1.6544%" y="110.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (10 samples, 0.12%)</title><rect x="1.6461%" y="148" width="0.1151%" height="15" fill="rgb(217,207,13)" fg:x="143" fg:w="10"/><text x="1.8961%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (13 samples, 0.15%)</title><rect x="1.7613%" y="148" width="0.1496%" height="15" fill="rgb(231,73,38)" fg:x="153" fg:w="13"/><text x="2.0113%" y="158.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (56 samples, 0.64%)</title><rect x="1.6116%" y="132" width="0.6446%" height="15" fill="rgb(225,20,46)" fg:x="140" fg:w="56"/><text x="1.8616%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (28 samples, 0.32%)</title><rect x="1.9339%" y="148" width="0.3223%" height="15" fill="rgb(210,31,41)" fg:x="168" fg:w="28"/><text x="2.1839%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (25 samples, 0.29%)</title><rect x="1.9685%" y="164" width="0.2878%" height="15" fill="rgb(221,200,47)" fg:x="171" fg:w="25"/><text x="2.2185%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (9 samples, 0.10%)</title><rect x="2.2562%" y="132" width="0.1036%" height="15" fill="rgb(226,26,5)" fg:x="196" fg:w="9"/><text x="2.5062%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (34 samples, 0.39%)</title><rect x="4.4089%" y="148" width="0.3914%" height="15" fill="rgb(249,33,26)" fg:x="383" fg:w="34"/><text x="4.6589%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (30 samples, 0.35%)</title><rect x="8.2307%" y="164" width="0.3453%" height="15" fill="rgb(235,183,28)" fg:x="715" fg:w="30"/><text x="8.4807%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (608 samples, 7.00%)</title><rect x="2.3598%" y="132" width="6.9990%" height="15" fill="rgb(221,5,38)" fg:x="205" fg:w="608"/><text x="2.6098%" y="142.50">_remove_e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (396 samples, 4.56%)</title><rect x="4.8003%" y="148" width="4.5585%" height="15" fill="rgb(247,18,42)" fg:x="417" fg:w="396"/><text x="5.0503%" y="158.50">__eq_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (68 samples, 0.78%)</title><rect x="8.5760%" y="164" width="0.7828%" height="15" fill="rgb(241,131,45)" fg:x="745" fg:w="68"/><text x="8.8260%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (677 samples, 7.79%)</title><rect x="1.5886%" y="116" width="7.7933%" height="15" fill="rgb(249,31,29)" fg:x="138" fg:w="677"/><text x="1.8386%" y="126.50">apply_updat..</text></g><g><title>apply_update (kappybara/mixture.py:106) (9 samples, 0.10%)</title><rect x="9.3818%" y="116" width="0.1036%" height="15" fill="rgb(225,111,53)" fg:x="815" fg:w="9"/><text x="9.6318%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (10 samples, 0.12%)</title><rect x="9.4854%" y="132" width="0.1151%" height="15" fill="rgb(238,160,17)" fg:x="824" fg:w="10"/><text x="9.7354%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (30 samples, 0.35%)</title><rect x="9.9114%" y="148" width="0.3453%" height="15" fill="rgb(214,148,48)" fg:x="861" fg:w="30"/><text x="10.1614%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.26%)</title><rect x="13.8713%" y="164" width="0.2648%" height="15" fill="rgb(232,36,49)" fg:x="1205" fg:w="23"/><text x="14.1213%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (364 samples, 4.19%)</title><rect x="10.2567%" y="148" width="4.1902%" height="15" fill="rgb(209,103,24)" fg:x="891" fg:w="364"/><text x="10.5067%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.31%)</title><rect x="14.1361%" y="164" width="0.3108%" height="15" fill="rgb(229,88,8)" fg:x="1228" fg:w="27"/><text x="14.3861%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="17.6471%" y="164" width="0.1036%" height="15" fill="rgb(213,181,19)" fg:x="1533" fg:w="9"/><text x="17.8971%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (315 samples, 3.63%)</title><rect x="14.4469%" y="148" width="3.6261%" height="15" fill="rgb(254,191,54)" fg:x="1255" fg:w="315"/><text x="14.6969%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.32%)</title><rect x="17.7507%" y="164" width="0.3223%" height="15" fill="rgb(241,83,37)" fg:x="1542" fg:w="28"/><text x="18.0007%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (63 samples, 0.73%)</title><rect x="18.0845%" y="148" width="0.7252%" height="15" fill="rgb(233,36,39)" fg:x="1571" fg:w="63"/><text x="18.3345%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (68 samples, 0.78%)</title><rect x="18.8097%" y="148" width="0.7828%" height="15" fill="rgb(226,3,54)" fg:x="1634" fg:w="68"/><text x="19.0597%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.25%)</title><rect x="21.8027%" y="164" width="0.2533%" height="15" fill="rgb(245,192,40)" fg:x="1894" fg:w="22"/><text x="22.0527%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (237 samples, 2.73%)</title><rect x="19.5925%" y="148" width="2.7282%" height="15" fill="rgb(238,167,29)" fg:x="1702" fg:w="237"/><text x="19.8425%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.26%)</title><rect x="22.0559%" y="164" width="0.2648%" height="15" fill="rgb(232,182,51)" fg:x="1916" fg:w="23"/><text x="22.3059%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (237 samples, 2.73%)</title><rect x="22.3207%" y="148" width="2.7282%" height="15" fill="rgb(231,60,39)" fg:x="1939" fg:w="237"/><text x="22.5707%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (12 samples, 0.14%)</title><rect x="27.5584%" y="164" width="0.1381%" height="15" fill="rgb(208,69,12)" fg:x="2394" fg:w="12"/><text x="27.8084%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (72 samples, 0.83%)</title><rect x="27.6966%" y="164" width="0.8288%" height="15" fill="rgb(235,93,37)" fg:x="2406" fg:w="72"/><text x="27.9466%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (120 samples, 1.38%)</title><rect x="30.5744%" y="180" width="1.3814%" height="15" fill="rgb(213,116,39)" fg:x="2656" fg:w="120"/><text x="30.8244%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (96 samples, 1.11%)</title><rect x="34.0624%" y="196" width="1.1051%" height="15" fill="rgb(222,207,29)" fg:x="2959" fg:w="96"/><text x="34.3124%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (902 samples, 10.38%)</title><rect x="28.5484%" y="164" width="10.3833%" height="15" fill="rgb(206,96,30)" fg:x="2480" fg:w="902"/><text x="28.7984%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (606 samples, 6.98%)</title><rect x="31.9558%" y="180" width="6.9759%" height="15" fill="rgb(218,138,4)" fg:x="2776" fg:w="606"/><text x="32.2058%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (327 samples, 3.76%)</title><rect x="35.1675%" y="196" width="3.7642%" height="15" fill="rgb(250,191,14)" fg:x="3055" fg:w="327"/><text x="35.4175%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (122 samples, 1.40%)</title><rect x="38.9317%" y="164" width="1.4044%" height="15" fill="rgb(239,60,40)" fg:x="3382" fg:w="122"/><text x="39.1817%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (81 samples, 0.93%)</title><rect x="41.3261%" y="180" width="0.9324%" height="15" fill="rgb(206,27,48)" fg:x="3590" fg:w="81"/><text x="41.5761%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (180 samples, 2.07%)</title><rect x="40.4052%" y="164" width="2.0721%" height="15" fill="rgb(225,35,8)" fg:x="3510" fg:w="180"/><text x="40.6552%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.22%)</title><rect x="42.2585%" y="180" width="0.2187%" height="15" fill="rgb(250,213,24)" fg:x="3671" fg:w="19"/><text x="42.5085%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (173 samples, 1.99%)</title><rect x="52.0087%" y="180" width="1.9915%" height="15" fill="rgb(247,123,22)" fg:x="4518" fg:w="173"/><text x="52.2587%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (11 samples, 0.13%)</title><rect x="54.0002%" y="180" width="0.1266%" height="15" fill="rgb(231,138,38)" fg:x="4691" fg:w="11"/><text x="54.2502%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (21 samples, 0.24%)</title><rect x="54.6909%" y="196" width="0.2417%" height="15" fill="rgb(231,145,46)" fg:x="4751" fg:w="21"/><text x="54.9409%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (168 samples, 1.93%)</title><rect x="54.1269%" y="180" width="1.9339%" height="15" fill="rgb(251,118,11)" fg:x="4702" fg:w="168"/><text x="54.3769%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (98 samples, 1.13%)</title><rect x="54.9327%" y="196" width="1.1281%" height="15" fill="rgb(217,147,25)" fg:x="4772" fg:w="98"/><text x="55.1827%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (20 samples, 0.23%)</title><rect x="57.4767%" y="196" width="0.2302%" height="15" fill="rgb(247,81,37)" fg:x="4993" fg:w="20"/><text x="57.7267%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (9 samples, 0.10%)</title><rect x="59.2840%" y="212" width="0.1036%" height="15" fill="rgb(209,12,38)" fg:x="5150" fg:w="9"/><text x="59.5340%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (339 samples, 3.90%)</title><rect x="57.7069%" y="196" width="3.9024%" height="15" fill="rgb(227,1,9)" fg:x="5013" fg:w="339"/><text x="57.9569%" y="206.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (193 samples, 2.22%)</title><rect x="59.3876%" y="212" width="2.2217%" height="15" fill="rgb(248,47,43)" fg:x="5159" fg:w="193"/><text x="59.6376%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.36%)</title><rect x="61.2524%" y="228" width="0.3569%" height="15" fill="rgb(221,10,30)" fg:x="5321" fg:w="31"/><text x="61.5024%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (219 samples, 2.52%)</title><rect x="61.6093%" y="196" width="2.5210%" height="15" fill="rgb(210,229,1)" fg:x="5352" fg:w="219"/><text x="61.8593%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (108 samples, 1.24%)</title><rect x="64.1303%" y="196" width="1.2432%" height="15" fill="rgb(222,148,37)" fg:x="5571" fg:w="108"/><text x="64.3803%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (13 samples, 0.15%)</title><rect x="65.3735%" y="196" width="0.1496%" height="15" fill="rgb(234,67,33)" fg:x="5679" fg:w="13"/><text x="65.6235%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (859 samples, 9.89%)</title><rect x="56.0608%" y="180" width="9.8883%" height="15" fill="rgb(247,98,35)" fg:x="4870" fg:w="859"/><text x="56.3108%" y="190.50">embeds_in (kap..</text></g><g><title>coupled (kappybara/pattern.py:64) (37 samples, 0.43%)</title><rect x="65.5232%" y="196" width="0.4259%" height="15" fill="rgb(247,138,52)" fg:x="5692" fg:w="37"/><text x="65.7732%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (26 samples, 0.30%)</title><rect x="65.9952%" y="180" width="0.2993%" height="15" fill="rgb(213,79,30)" fg:x="5733" fg:w="26"/><text x="66.2452%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (177 samples, 2.04%)</title><rect x="66.2945%" y="180" width="2.0375%" height="15" fill="rgb(246,177,23)" fg:x="5759" fg:w="177"/><text x="66.5445%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (102 samples, 1.17%)</title><rect x="67.1578%" y="196" width="1.1742%" height="15" fill="rgb(230,62,27)" fg:x="5834" fg:w="102"/><text x="67.4078%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.13%)</title><rect x="68.2054%" y="212" width="0.1266%" height="15" fill="rgb(216,154,8)" fg:x="5925" fg:w="11"/><text x="68.4554%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (9 samples, 0.10%)</title><rect x="69.3680%" y="196" width="0.1036%" height="15" fill="rgb(244,35,45)" fg:x="6026" fg:w="9"/><text x="69.6180%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (274 samples, 3.15%)</title><rect x="68.3320%" y="180" width="3.1541%" height="15" fill="rgb(251,115,12)" fg:x="5936" fg:w="274"/><text x="68.5820%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (175 samples, 2.01%)</title><rect x="69.4716%" y="196" width="2.0145%" height="15" fill="rgb(240,54,50)" fg:x="6035" fg:w="175"/><text x="69.7216%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.35%)</title><rect x="71.1408%" y="212" width="0.3453%" height="15" fill="rgb(233,84,52)" fg:x="6180" fg:w="30"/><text x="71.3908%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (55 samples, 0.63%)</title><rect x="71.4861%" y="180" width="0.6331%" height="15" fill="rgb(207,117,47)" fg:x="6210" fg:w="55"/><text x="71.7361%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (139 samples, 1.60%)</title><rect x="72.1193%" y="180" width="1.6001%" height="15" fill="rgb(249,43,39)" fg:x="6265" fg:w="139"/><text x="72.3693%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (62 samples, 0.71%)</title><rect x="73.7194%" y="180" width="0.7137%" height="15" fill="rgb(209,38,44)" fg:x="6404" fg:w="62"/><text x="73.9694%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (16 samples, 0.18%)</title><rect x="74.4331%" y="180" width="0.1842%" height="15" fill="rgb(236,212,23)" fg:x="6466" fg:w="16"/><text x="74.6831%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,035 samples, 34.94%)</title><rect x="42.4773%" y="164" width="34.9373%" height="15" fill="rgb(242,79,21)" fg:x="3690" fg:w="3035"/><text x="42.7273%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (243 samples, 2.80%)</title><rect x="74.6172%" y="180" width="2.7973%" height="15" fill="rgb(211,96,35)" fg:x="6482" fg:w="243"/><text x="74.8672%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,603 samples, 52.99%)</title><rect x="25.0489%" y="148" width="52.9872%" height="15" fill="rgb(253,215,40)" fg:x="2176" fg:w="4603"/><text x="25.2989%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (54 samples, 0.62%)</title><rect x="77.4145%" y="164" width="0.6216%" height="15" fill="rgb(211,81,21)" fg:x="6725" fg:w="54"/><text x="77.6645%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (51 samples, 0.59%)</title><rect x="79.5441%" y="164" width="0.5871%" height="15" fill="rgb(208,190,38)" fg:x="6910" fg:w="51"/><text x="79.7941%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (41 samples, 0.47%)</title><rect x="81.6392%" y="180" width="0.4720%" height="15" fill="rgb(235,213,38)" fg:x="7092" fg:w="41"/><text x="81.8892%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (571 samples, 6.57%)</title><rect x="78.1513%" y="148" width="6.5730%" height="15" fill="rgb(237,122,38)" fg:x="6789" fg:w="571"/><text x="78.4013%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (399 samples, 4.59%)</title><rect x="80.1312%" y="164" width="4.5931%" height="15" fill="rgb(244,218,35)" fg:x="6961" fg:w="399"/><text x="80.3812%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (227 samples, 2.61%)</title><rect x="82.1112%" y="180" width="2.6131%" height="15" fill="rgb(240,68,47)" fg:x="7133" fg:w="227"/><text x="82.3612%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (40 samples, 0.46%)</title><rect x="85.5301%" y="164" width="0.4605%" height="15" fill="rgb(210,16,53)" fg:x="7430" fg:w="40"/><text x="85.7801%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (116 samples, 1.34%)</title><rect x="84.7243%" y="148" width="1.3353%" height="15" fill="rgb(235,124,12)" fg:x="7360" fg:w="116"/><text x="84.9743%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (19 samples, 0.22%)</title><rect x="86.3244%" y="164" width="0.2187%" height="15" fill="rgb(224,169,11)" fg:x="7499" fg:w="19"/><text x="86.5744%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (105 samples, 1.21%)</title><rect x="86.0596%" y="148" width="1.2087%" height="15" fill="rgb(250,166,2)" fg:x="7476" fg:w="105"/><text x="86.3096%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (63 samples, 0.73%)</title><rect x="86.5431%" y="164" width="0.7252%" height="15" fill="rgb(242,216,29)" fg:x="7518" fg:w="63"/><text x="86.7931%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (91 samples, 1.05%)</title><rect x="87.2683%" y="148" width="1.0475%" height="15" fill="rgb(230,116,27)" fg:x="7581" fg:w="91"/><text x="87.5183%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.21%)</title><rect x="88.1087%" y="164" width="0.2072%" height="15" fill="rgb(228,99,48)" fg:x="7654" fg:w="18"/><text x="88.3587%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (51 samples, 0.59%)</title><rect x="88.3159%" y="148" width="0.5871%" height="15" fill="rgb(253,11,6)" fg:x="7672" fg:w="51"/><text x="88.5659%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (38 samples, 0.44%)</title><rect x="88.9030%" y="148" width="0.4374%" height="15" fill="rgb(247,143,39)" fg:x="7723" fg:w="38"/><text x="89.1530%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (74 samples, 0.85%)</title><rect x="90.8944%" y="164" width="0.8518%" height="15" fill="rgb(236,97,10)" fg:x="7896" fg:w="74"/><text x="91.1444%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (213 samples, 2.45%)</title><rect x="89.3404%" y="148" width="2.4519%" height="15" fill="rgb(233,208,19)" fg:x="7761" fg:w="213"/><text x="89.5904%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (21 samples, 0.24%)</title><rect x="91.7923%" y="148" width="0.2417%" height="15" fill="rgb(216,164,2)" fg:x="7974" fg:w="21"/><text x="92.0423%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (27 samples, 0.31%)</title><rect x="92.0341%" y="148" width="0.3108%" height="15" fill="rgb(220,129,5)" fg:x="7995" fg:w="27"/><text x="92.2841%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (9 samples, 0.10%)</title><rect x="92.3449%" y="148" width="0.1036%" height="15" fill="rgb(242,17,10)" fg:x="8022" fg:w="9"/><text x="92.5949%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,203 samples, 82.92%)</title><rect x="9.6006%" y="132" width="82.9170%" height="15" fill="rgb(242,107,0)" fg:x="834" fg:w="7203"/><text x="9.8506%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (54 samples, 0.62%)</title><rect x="92.5176%" y="132" width="0.6216%" height="15" fill="rgb(251,28,31)" fg:x="8037" fg:w="54"/><text x="92.7676%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (18 samples, 0.21%)</title><rect x="93.1392%" y="132" width="0.2072%" height="15" fill="rgb(233,223,10)" fg:x="8091" fg:w="18"/><text x="93.3892%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (19 samples, 0.22%)</title><rect x="93.3464%" y="132" width="0.2187%" height="15" fill="rgb(215,21,27)" fg:x="8109" fg:w="19"/><text x="93.5964%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (390 samples, 4.49%)</title><rect x="93.5651%" y="132" width="4.4895%" height="15" fill="rgb(232,23,21)" fg:x="8128" fg:w="390"/><text x="93.8151%" y="142.50">_upda..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.30%)</title><rect x="97.7553%" y="148" width="0.2993%" height="15" fill="rgb(244,5,23)" fg:x="8492" fg:w="26"/><text x="98.0053%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="99.1482%" y="148" width="0.1036%" height="15" fill="rgb(226,81,46)" fg:x="8613" fg:w="9"/><text x="99.3982%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (8,497 samples, 97.81%)</title><rect x="1.5886%" y="100" width="97.8128%" height="15" fill="rgb(247,70,30)" fg:x="138" fg:w="8497"/><text x="1.8386%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (7,811 samples, 89.92%)</title><rect x="9.4854%" y="116" width="89.9160%" height="15" fill="rgb(212,68,19)" fg:x="824" fg:w="7811"/><text x="9.7354%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (117 samples, 1.35%)</title><rect x="98.0546%" y="132" width="1.3468%" height="15" fill="rgb(240,187,13)" fg:x="8518" fg:w="117"/><text x="98.3046%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.15%)</title><rect x="99.2518%" y="148" width="0.1496%" height="15" fill="rgb(223,113,26)" fg:x="8622" fg:w="13"/><text x="99.5018%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,630 samples, 99.34%)</title><rect x="0.0691%" y="68" width="99.3438%" height="15" fill="rgb(206,192,2)" fg:x="6" fg:w="8630"/><text x="0.3191%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,517 samples, 98.04%)</title><rect x="1.3699%" y="84" width="98.0431%" height="15" fill="rgb(241,108,4)" fg:x="119" fg:w="8517"/><text x="1.6199%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (11 samples, 0.13%)</title><rect x="99.4129%" y="260" width="0.1266%" height="15" fill="rgb(247,173,49)" fg:x="8636" fg:w="11"/><text x="99.6629%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (11 samples, 0.13%)</title><rect x="99.4129%" y="276" width="0.1266%" height="15" fill="rgb(224,114,35)" fg:x="8636" fg:w="11"/><text x="99.6629%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (11 samples, 0.13%)</title><rect x="99.4129%" y="292" width="0.1266%" height="15" fill="rgb(245,159,27)" fg:x="8636" fg:w="11"/><text x="99.6629%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (13 samples, 0.15%)</title><rect x="99.4129%" y="68" width="0.1496%" height="15" fill="rgb(245,172,44)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.15%)</title><rect x="99.4129%" y="84" width="0.1496%" height="15" fill="rgb(236,23,11)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.15%)</title><rect x="99.4129%" y="100" width="0.1496%" height="15" fill="rgb(205,117,38)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.15%)</title><rect x="99.4129%" y="116" width="0.1496%" height="15" fill="rgb(237,72,25)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.15%)</title><rect x="99.4129%" y="132" width="0.1496%" height="15" fill="rgb(244,70,9)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.15%)</title><rect x="99.4129%" y="148" width="0.1496%" height="15" fill="rgb(217,125,39)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (13 samples, 0.15%)</title><rect x="99.4129%" y="164" width="0.1496%" height="15" fill="rgb(235,36,10)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.15%)</title><rect x="99.4129%" y="180" width="0.1496%" height="15" fill="rgb(251,123,47)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.15%)</title><rect x="99.4129%" y="196" width="0.1496%" height="15" fill="rgb(221,13,13)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.15%)</title><rect x="99.4129%" y="212" width="0.1496%" height="15" fill="rgb(238,131,9)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.15%)</title><rect x="99.4129%" y="228" width="0.1496%" height="15" fill="rgb(211,50,8)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.15%)</title><rect x="99.4129%" y="244" width="0.1496%" height="15" fill="rgb(245,182,24)" fg:x="8636" fg:w="13"/><text x="99.6629%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (9 samples, 0.10%)</title><rect x="99.5626%" y="68" width="0.1036%" height="15" fill="rgb(242,14,37)" fg:x="8649" fg:w="9"/><text x="99.8126%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (15 samples, 0.17%)</title><rect x="99.6662%" y="68" width="0.1727%" height="15" fill="rgb(246,228,12)" fg:x="8658" fg:w="15"/><text x="99.9162%" y="78.50"></text></g><g><title>all (8,687 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="8687"/><text x="0.2500%" y="62.50"></text></g></svg></svg>