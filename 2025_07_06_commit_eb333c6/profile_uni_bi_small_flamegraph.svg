<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="378" onload="init(evt)" viewBox="0 0 1200 378" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="378" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit eb333c6</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="367.00"> </text><svg id="frames" x="10" width="1180" total_samples="9226"><g><title>update (kappybara/system.py:69) (35 samples, 0.38%)</title><rect x="0.0976%" y="84" width="0.3794%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="35"/><text x="0.3476%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (35 samples, 0.38%)</title><rect x="0.0976%" y="100" width="0.3794%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="35"/><text x="0.3476%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (32 samples, 0.35%)</title><rect x="0.1301%" y="116" width="0.3468%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="32"/><text x="0.3801%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (29 samples, 0.31%)</title><rect x="0.1626%" y="132" width="0.3143%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="29"/><text x="0.4126%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (29 samples, 0.31%)</title><rect x="0.1626%" y="148" width="0.3143%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="29"/><text x="0.4126%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (29 samples, 0.31%)</title><rect x="0.1626%" y="164" width="0.3143%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="29"/><text x="0.4126%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (17 samples, 0.18%)</title><rect x="0.5528%" y="116" width="0.1843%" height="15" fill="rgb(207,160,47)" fg:x="51" fg:w="17"/><text x="0.8028%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (34 samples, 0.37%)</title><rect x="0.5419%" y="100" width="0.3685%" height="15" fill="rgb(228,23,34)" fg:x="50" fg:w="34"/><text x="0.7919%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (11 samples, 0.12%)</title><rect x="0.7912%" y="116" width="0.1192%" height="15" fill="rgb(218,30,26)" fg:x="73" fg:w="11"/><text x="1.0412%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (21 samples, 0.23%)</title><rect x="1.0297%" y="148" width="0.2276%" height="15" fill="rgb(220,122,19)" fg:x="95" fg:w="21"/><text x="1.2797%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (76 samples, 0.82%)</title><rect x="1.3115%" y="148" width="0.8238%" height="15" fill="rgb(250,228,42)" fg:x="121" fg:w="76"/><text x="1.5615%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (21 samples, 0.23%)</title><rect x="2.1353%" y="148" width="0.2276%" height="15" fill="rgb(240,193,28)" fg:x="197" fg:w="21"/><text x="2.3853%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (83 samples, 0.90%)</title><rect x="3.5985%" y="180" width="0.8996%" height="15" fill="rgb(216,20,37)" fg:x="332" fg:w="83"/><text x="3.8485%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (46 samples, 0.50%)</title><rect x="3.9996%" y="196" width="0.4986%" height="15" fill="rgb(206,188,39)" fg:x="369" fg:w="46"/><text x="4.2496%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (351 samples, 3.80%)</title><rect x="0.9647%" y="132" width="3.8045%" height="15" fill="rgb(217,207,13)" fg:x="89" fg:w="351"/><text x="1.2147%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (218 samples, 2.36%)</title><rect x="2.4062%" y="148" width="2.3629%" height="15" fill="rgb(231,73,38)" fg:x="222" fg:w="218"/><text x="2.6562%" y="158.50">de..</text></g><g><title>neighbors (kappybara/pattern.py:120) (186 samples, 2.02%)</title><rect x="2.7531%" y="164" width="2.0160%" height="15" fill="rgb(225,20,46)" fg:x="254" fg:w="186"/><text x="3.0031%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (23 samples, 0.25%)</title><rect x="4.5198%" y="180" width="0.2493%" height="15" fill="rgb(210,31,41)" fg:x="417" fg:w="23"/><text x="4.7698%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (372 samples, 4.03%)</title><rect x="0.9213%" y="116" width="4.0321%" height="15" fill="rgb(221,200,47)" fg:x="85" fg:w="372"/><text x="1.1713%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (17 samples, 0.18%)</title><rect x="4.7691%" y="132" width="0.1843%" height="15" fill="rgb(226,26,5)" fg:x="440" fg:w="17"/><text x="5.0191%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (12 samples, 0.13%)</title><rect x="4.8233%" y="148" width="0.1301%" height="15" fill="rgb(249,33,26)" fg:x="445" fg:w="12"/><text x="5.0733%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (37 samples, 0.40%)</title><rect x="5.4520%" y="148" width="0.4010%" height="15" fill="rgb(235,183,28)" fg:x="503" fg:w="37"/><text x="5.7020%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.22%)</title><rect x="9.3648%" y="164" width="0.2168%" height="15" fill="rgb(221,5,38)" fg:x="864" fg:w="20"/><text x="9.6148%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (393 samples, 4.26%)</title><rect x="5.8530%" y="148" width="4.2597%" height="15" fill="rgb(247,18,42)" fg:x="540" fg:w="393"/><text x="6.1030%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (49 samples, 0.53%)</title><rect x="9.5816%" y="164" width="0.5311%" height="15" fill="rgb(241,131,45)" fg:x="884" fg:w="49"/><text x="9.8316%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="13.1476%" y="164" width="0.1301%" height="15" fill="rgb(249,31,29)" fg:x="1213" fg:w="12"/><text x="13.3976%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (313 samples, 3.39%)</title><rect x="10.1127%" y="148" width="3.3926%" height="15" fill="rgb(225,111,53)" fg:x="933" fg:w="313"/><text x="10.3627%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.23%)</title><rect x="13.2777%" y="164" width="0.2276%" height="15" fill="rgb(238,160,17)" fg:x="1225" fg:w="21"/><text x="13.5277%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (71 samples, 0.77%)</title><rect x="13.5270%" y="148" width="0.7696%" height="15" fill="rgb(214,148,48)" fg:x="1248" fg:w="71"/><text x="13.7770%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (63 samples, 0.68%)</title><rect x="14.2966%" y="148" width="0.6829%" height="15" fill="rgb(232,36,49)" fg:x="1319" fg:w="63"/><text x="14.5466%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (28 samples, 0.30%)</title><rect x="17.4073%" y="164" width="0.3035%" height="15" fill="rgb(209,103,24)" fg:x="1606" fg:w="28"/><text x="17.6573%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (283 samples, 3.07%)</title><rect x="14.9794%" y="148" width="3.0674%" height="15" fill="rgb(229,88,8)" fg:x="1382" fg:w="283"/><text x="15.2294%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.34%)</title><rect x="17.7108%" y="164" width="0.3360%" height="15" fill="rgb(213,181,19)" fg:x="1634" fg:w="31"/><text x="17.9608%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (241 samples, 2.61%)</title><rect x="18.0468%" y="148" width="2.6122%" height="15" fill="rgb(254,191,54)" fg:x="1665" fg:w="241"/><text x="18.2968%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (22 samples, 0.24%)</title><rect x="23.0111%" y="164" width="0.2385%" height="15" fill="rgb(241,83,37)" fg:x="2123" fg:w="22"/><text x="23.2611%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (105 samples, 1.14%)</title><rect x="23.2495%" y="164" width="1.1381%" height="15" fill="rgb(233,36,39)" fg:x="2145" fg:w="105"/><text x="23.4995%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (131 samples, 1.42%)</title><rect x="26.6529%" y="180" width="1.4199%" height="15" fill="rgb(226,3,54)" fg:x="2459" fg:w="131"/><text x="26.9029%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (101 samples, 1.09%)</title><rect x="30.0780%" y="196" width="1.0947%" height="15" fill="rgb(245,192,40)" fg:x="2775" fg:w="101"/><text x="30.3280%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (967 samples, 10.48%)</title><rect x="24.4418%" y="164" width="10.4812%" height="15" fill="rgb(238,167,29)" fg:x="2255" fg:w="967"/><text x="24.6918%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (632 samples, 6.85%)</title><rect x="28.0728%" y="180" width="6.8502%" height="15" fill="rgb(232,182,51)" fg:x="2590" fg:w="632"/><text x="28.3228%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (346 samples, 3.75%)</title><rect x="31.1728%" y="196" width="3.7503%" height="15" fill="rgb(231,60,39)" fg:x="2876" fg:w="346"/><text x="31.4228%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (126 samples, 1.37%)</title><rect x="34.9230%" y="164" width="1.3657%" height="15" fill="rgb(208,69,12)" fg:x="3222" fg:w="126"/><text x="35.1730%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (81 samples, 0.88%)</title><rect x="37.4052%" y="180" width="0.8780%" height="15" fill="rgb(235,93,37)" fg:x="3451" fg:w="81"/><text x="37.6552%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (195 samples, 2.11%)</title><rect x="36.3213%" y="164" width="2.1136%" height="15" fill="rgb(213,116,39)" fg:x="3351" fg:w="195"/><text x="36.5713%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (14 samples, 0.15%)</title><rect x="38.2831%" y="180" width="0.1517%" height="15" fill="rgb(222,207,29)" fg:x="3532" fg:w="14"/><text x="38.5331%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (209 samples, 2.27%)</title><rect x="49.5122%" y="180" width="2.2653%" height="15" fill="rgb(206,96,30)" fg:x="4568" fg:w="209"/><text x="49.7622%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (10 samples, 0.11%)</title><rect x="51.7776%" y="180" width="0.1084%" height="15" fill="rgb(218,138,4)" fg:x="4777" fg:w="10"/><text x="52.0276%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (12 samples, 0.13%)</title><rect x="52.4930%" y="196" width="0.1301%" height="15" fill="rgb(250,191,14)" fg:x="4843" fg:w="12"/><text x="52.7430%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (153 samples, 1.66%)</title><rect x="51.8860%" y="180" width="1.6584%" height="15" fill="rgb(239,60,40)" fg:x="4787" fg:w="153"/><text x="52.1360%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (85 samples, 0.92%)</title><rect x="52.6230%" y="196" width="0.9213%" height="15" fill="rgb(206,27,48)" fg:x="4855" fg:w="85"/><text x="52.8730%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (31 samples, 0.34%)</title><rect x="54.9642%" y="196" width="0.3360%" height="15" fill="rgb(225,35,8)" fg:x="5071" fg:w="31"/><text x="55.2142%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.16%)</title><rect x="57.3922%" y="212" width="0.1626%" height="15" fill="rgb(250,213,24)" fg:x="5295" fg:w="15"/><text x="57.6422%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (438 samples, 4.75%)</title><rect x="55.3002%" y="196" width="4.7475%" height="15" fill="rgb(247,123,22)" fg:x="5102" fg:w="438"/><text x="55.5502%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (230 samples, 2.49%)</title><rect x="57.5547%" y="212" width="2.4930%" height="15" fill="rgb(231,138,38)" fg:x="5310" fg:w="230"/><text x="57.8047%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.33%)</title><rect x="59.7225%" y="228" width="0.3252%" height="15" fill="rgb(231,145,46)" fg:x="5510" fg:w="30"/><text x="59.9725%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (230 samples, 2.49%)</title><rect x="60.0477%" y="196" width="2.4930%" height="15" fill="rgb(251,118,11)" fg:x="5540" fg:w="230"/><text x="60.2977%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (100 samples, 1.08%)</title><rect x="62.5406%" y="196" width="1.0839%" height="15" fill="rgb(217,147,25)" fg:x="5770" fg:w="100"/><text x="62.7906%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (16 samples, 0.17%)</title><rect x="63.6245%" y="196" width="0.1734%" height="15" fill="rgb(247,81,37)" fg:x="5870" fg:w="16"/><text x="63.8745%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (975 samples, 10.57%)</title><rect x="53.5443%" y="180" width="10.5680%" height="15" fill="rgb(209,12,38)" fg:x="4940" fg:w="975"/><text x="53.7943%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (29 samples, 0.31%)</title><rect x="63.7980%" y="196" width="0.3143%" height="15" fill="rgb(227,1,9)" fg:x="5886" fg:w="29"/><text x="64.0480%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (22 samples, 0.24%)</title><rect x="64.1882%" y="180" width="0.2385%" height="15" fill="rgb(248,47,43)" fg:x="5922" fg:w="22"/><text x="64.4382%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.12%)</title><rect x="65.4346%" y="196" width="0.1192%" height="15" fill="rgb(221,10,30)" fg:x="6037" fg:w="11"/><text x="65.6846%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (332 samples, 3.60%)</title><rect x="64.4266%" y="180" width="3.5985%" height="15" fill="rgb(210,229,1)" fg:x="5944" fg:w="332"/><text x="64.6766%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (228 samples, 2.47%)</title><rect x="65.5539%" y="196" width="2.4713%" height="15" fill="rgb(222,148,37)" fg:x="6048" fg:w="228"/><text x="65.8039%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.37%)</title><rect x="67.6566%" y="212" width="0.3685%" height="15" fill="rgb(234,67,33)" fg:x="6242" fg:w="34"/><text x="67.9066%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (386 samples, 4.18%)</title><rect x="68.0251%" y="180" width="4.1838%" height="15" fill="rgb(247,98,35)" fg:x="6276" fg:w="386"/><text x="68.2751%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (260 samples, 2.82%)</title><rect x="69.3909%" y="196" width="2.8181%" height="15" fill="rgb(247,138,52)" fg:x="6402" fg:w="260"/><text x="69.6409%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (45 samples, 0.49%)</title><rect x="71.7212%" y="212" width="0.4878%" height="15" fill="rgb(213,79,30)" fg:x="6617" fg:w="45"/><text x="71.9712%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (66 samples, 0.72%)</title><rect x="72.2090%" y="180" width="0.7154%" height="15" fill="rgb(246,177,23)" fg:x="6662" fg:w="66"/><text x="72.4590%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (149 samples, 1.62%)</title><rect x="72.9352%" y="180" width="1.6150%" height="15" fill="rgb(230,62,27)" fg:x="6729" fg:w="149"/><text x="73.1852%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (105 samples, 1.14%)</title><rect x="74.5502%" y="180" width="1.1381%" height="15" fill="rgb(216,154,8)" fg:x="6878" fg:w="105"/><text x="74.8002%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (29 samples, 0.31%)</title><rect x="75.6883%" y="180" width="0.3143%" height="15" fill="rgb(244,35,45)" fg:x="6983" fg:w="29"/><text x="75.9383%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,791 samples, 41.09%)</title><rect x="38.4349%" y="164" width="41.0904%" height="15" fill="rgb(251,115,12)" fg:x="3546" fg:w="3791"/><text x="38.6849%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (325 samples, 3.52%)</title><rect x="76.0026%" y="180" width="3.5227%" height="15" fill="rgb(240,54,50)" fg:x="7012" fg:w="325"/><text x="76.2526%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,470 samples, 59.29%)</title><rect x="20.6590%" y="148" width="59.2890%" height="15" fill="rgb(233,84,52)" fg:x="1906" fg:w="5470"/><text x="20.9090%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (39 samples, 0.42%)</title><rect x="79.5253%" y="164" width="0.4227%" height="15" fill="rgb(207,117,47)" fg:x="7337" fg:w="39"/><text x="79.7753%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (10 samples, 0.11%)</title><rect x="79.9480%" y="148" width="0.1084%" height="15" fill="rgb(249,43,39)" fg:x="7376" fg:w="10"/><text x="80.1980%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (60 samples, 0.65%)</title><rect x="81.2920%" y="164" width="0.6503%" height="15" fill="rgb(209,38,44)" fg:x="7500" fg:w="60"/><text x="81.5420%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (50 samples, 0.54%)</title><rect x="83.3839%" y="180" width="0.5419%" height="15" fill="rgb(236,212,23)" fg:x="7693" fg:w="50"/><text x="83.6339%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (580 samples, 6.29%)</title><rect x="80.0564%" y="148" width="6.2866%" height="15" fill="rgb(242,79,21)" fg:x="7386" fg:w="580"/><text x="80.3064%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (406 samples, 4.40%)</title><rect x="81.9423%" y="164" width="4.4006%" height="15" fill="rgb(211,96,35)" fg:x="7560" fg:w="406"/><text x="82.1923%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (223 samples, 2.42%)</title><rect x="83.9259%" y="180" width="2.4171%" height="15" fill="rgb(253,215,40)" fg:x="7743" fg:w="223"/><text x="84.1759%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (43 samples, 0.47%)</title><rect x="86.9282%" y="164" width="0.4661%" height="15" fill="rgb(211,81,21)" fg:x="8020" fg:w="43"/><text x="87.1782%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (102 samples, 1.11%)</title><rect x="86.3429%" y="148" width="1.1056%" height="15" fill="rgb(208,190,38)" fg:x="7966" fg:w="102"/><text x="86.5929%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="87.7954%" y="164" width="0.1843%" height="15" fill="rgb(235,213,38)" fg:x="8100" fg:w="17"/><text x="88.0454%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (104 samples, 1.13%)</title><rect x="87.4485%" y="148" width="1.1272%" height="15" fill="rgb(237,122,38)" fg:x="8068" fg:w="104"/><text x="87.6985%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (55 samples, 0.60%)</title><rect x="87.9796%" y="164" width="0.5961%" height="15" fill="rgb(244,218,35)" fg:x="8117" fg:w="55"/><text x="88.2296%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (113 samples, 1.22%)</title><rect x="88.5758%" y="148" width="1.2248%" height="15" fill="rgb(240,68,47)" fg:x="8172" fg:w="113"/><text x="88.8258%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.21%)</title><rect x="89.5946%" y="164" width="0.2059%" height="15" fill="rgb(210,16,53)" fg:x="8266" fg:w="19"/><text x="89.8446%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (54 samples, 0.59%)</title><rect x="89.8006%" y="148" width="0.5853%" height="15" fill="rgb(235,124,12)" fg:x="8285" fg:w="54"/><text x="90.0506%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (74 samples, 0.80%)</title><rect x="90.3859%" y="148" width="0.8021%" height="15" fill="rgb(224,169,11)" fg:x="8339" fg:w="74"/><text x="90.6359%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (114 samples, 1.24%)</title><rect x="93.1606%" y="164" width="1.2356%" height="15" fill="rgb(250,166,2)" fg:x="8595" fg:w="114"/><text x="93.4106%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="94.2770%" y="180" width="0.1192%" height="15" fill="rgb(242,216,29)" fg:x="8698" fg:w="11"/><text x="94.5270%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (303 samples, 3.28%)</title><rect x="91.1879%" y="148" width="3.2842%" height="15" fill="rgb(230,116,27)" fg:x="8413" fg:w="303"/><text x="91.4379%" y="158.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:282) (34 samples, 0.37%)</title><rect x="94.4938%" y="148" width="0.3685%" height="15" fill="rgb(228,99,48)" fg:x="8718" fg:w="34"/><text x="94.7438%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (11 samples, 0.12%)</title><rect x="94.8623%" y="148" width="0.1192%" height="15" fill="rgb(253,11,6)" fg:x="8752" fg:w="11"/><text x="95.1123%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,302 samples, 89.98%)</title><rect x="5.0726%" y="132" width="89.9848%" height="15" fill="rgb(247,143,39)" fg:x="468" fg:w="8302"/><text x="5.3226%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (37 samples, 0.40%)</title><rect x="95.0574%" y="132" width="0.4010%" height="15" fill="rgb(236,97,10)" fg:x="8770" fg:w="37"/><text x="95.3074%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (15 samples, 0.16%)</title><rect x="95.4585%" y="132" width="0.1626%" height="15" fill="rgb(233,208,19)" fg:x="8807" fg:w="15"/><text x="95.7085%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (256 samples, 2.77%)</title><rect x="95.7186%" y="132" width="2.7748%" height="15" fill="rgb(216,164,2)" fg:x="8831" fg:w="256"/><text x="95.9686%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.25%)</title><rect x="98.2441%" y="148" width="0.2493%" height="15" fill="rgb(220,129,5)" fg:x="9064" fg:w="23"/><text x="98.4941%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (8,706 samples, 94.36%)</title><rect x="4.9859%" y="116" width="94.3638%" height="15" fill="rgb(242,17,10)" fg:x="460" fg:w="8706"/><text x="5.2359%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (79 samples, 0.86%)</title><rect x="98.4934%" y="132" width="0.8563%" height="15" fill="rgb(242,107,0)" fg:x="9087" fg:w="79"/><text x="98.7434%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="99.2196%" y="148" width="0.1301%" height="15" fill="rgb(251,28,31)" fg:x="9154" fg:w="12"/><text x="99.4696%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,084 samples, 98.46%)</title><rect x="0.9105%" y="100" width="98.4609%" height="15" fill="rgb(233,223,10)" fg:x="84" fg:w="9084"/><text x="1.1605%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,161 samples, 99.30%)</title><rect x="0.0976%" y="68" width="99.2955%" height="15" fill="rgb(215,21,27)" fg:x="9" fg:w="9161"/><text x="0.3476%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,126 samples, 98.92%)</title><rect x="0.4769%" y="84" width="98.9161%" height="15" fill="rgb(232,23,21)" fg:x="44" fg:w="9126"/><text x="0.7269%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (20 samples, 0.22%)</title><rect x="99.3930%" y="68" width="0.2168%" height="15" fill="rgb(244,5,23)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (20 samples, 0.22%)</title><rect x="99.3930%" y="84" width="0.2168%" height="15" fill="rgb(226,81,46)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (20 samples, 0.22%)</title><rect x="99.3930%" y="100" width="0.2168%" height="15" fill="rgb(247,70,30)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (20 samples, 0.22%)</title><rect x="99.3930%" y="116" width="0.2168%" height="15" fill="rgb(212,68,19)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (20 samples, 0.22%)</title><rect x="99.3930%" y="132" width="0.2168%" height="15" fill="rgb(240,187,13)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (20 samples, 0.22%)</title><rect x="99.3930%" y="148" width="0.2168%" height="15" fill="rgb(223,113,26)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (20 samples, 0.22%)</title><rect x="99.3930%" y="164" width="0.2168%" height="15" fill="rgb(206,192,2)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (20 samples, 0.22%)</title><rect x="99.3930%" y="180" width="0.2168%" height="15" fill="rgb(241,108,4)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (20 samples, 0.22%)</title><rect x="99.3930%" y="196" width="0.2168%" height="15" fill="rgb(247,173,49)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (20 samples, 0.22%)</title><rect x="99.3930%" y="212" width="0.2168%" height="15" fill="rgb(224,114,35)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (20 samples, 0.22%)</title><rect x="99.3930%" y="228" width="0.2168%" height="15" fill="rgb(245,159,27)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (20 samples, 0.22%)</title><rect x="99.3930%" y="244" width="0.2168%" height="15" fill="rgb(245,172,44)" fg:x="9170" fg:w="20"/><text x="99.6430%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (10 samples, 0.11%)</title><rect x="99.5014%" y="260" width="0.1084%" height="15" fill="rgb(236,23,11)" fg:x="9180" fg:w="10"/><text x="99.7514%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.5014%" y="276" width="0.1084%" height="15" fill="rgb(205,117,38)" fg:x="9180" fg:w="10"/><text x="99.7514%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.5014%" y="292" width="0.1084%" height="15" fill="rgb(237,72,25)" fg:x="9180" fg:w="10"/><text x="99.7514%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.5014%" y="308" width="0.1084%" height="15" fill="rgb(244,70,9)" fg:x="9180" fg:w="10"/><text x="99.7514%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.5014%" y="324" width="0.1084%" height="15" fill="rgb(217,125,39)" fg:x="9180" fg:w="10"/><text x="99.7514%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.5014%" y="340" width="0.1084%" height="15" fill="rgb(235,36,10)" fg:x="9180" fg:w="10"/><text x="99.7514%" y="350.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (10 samples, 0.11%)</title><rect x="99.6098%" y="68" width="0.1084%" height="15" fill="rgb(251,123,47)" fg:x="9190" fg:w="10"/><text x="99.8598%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (16 samples, 0.17%)</title><rect x="99.7182%" y="68" width="0.1734%" height="15" fill="rgb(221,13,13)" fg:x="9200" fg:w="16"/><text x="99.9682%" y="78.50"></text></g><g><title>all (9,226 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="9226"/><text x="0.2500%" y="62.50"></text></g></svg></svg>