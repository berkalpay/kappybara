<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit eb333c6</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9205"><g><title>update (kappybara/system.py:69) (17 samples, 0.18%)</title><rect x="0.0869%" y="84" width="0.1847%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="17"/><text x="0.3369%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (17 samples, 0.18%)</title><rect x="0.0869%" y="100" width="0.1847%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="17"/><text x="0.3369%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (14 samples, 0.15%)</title><rect x="0.1195%" y="116" width="0.1521%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="14"/><text x="0.3695%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (11 samples, 0.12%)</title><rect x="0.1521%" y="132" width="0.1195%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="11"/><text x="0.4021%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (11 samples, 0.12%)</title><rect x="0.1521%" y="148" width="0.1195%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="11"/><text x="0.4021%" y="158.50"></text></g><g><title>act (kappybara/system.py:63) (39 samples, 0.42%)</title><rect x="0.3259%" y="100" width="0.4237%" height="15" fill="rgb(232,128,0)" fg:x="30" fg:w="39"/><text x="0.5759%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (31 samples, 0.34%)</title><rect x="0.4128%" y="116" width="0.3368%" height="15" fill="rgb(207,160,47)" fg:x="38" fg:w="31"/><text x="0.6628%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (24 samples, 0.26%)</title><rect x="0.8474%" y="148" width="0.2607%" height="15" fill="rgb(228,23,34)" fg:x="78" fg:w="24"/><text x="1.0974%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (79 samples, 0.86%)</title><rect x="1.1841%" y="148" width="0.8582%" height="15" fill="rgb(218,30,26)" fg:x="109" fg:w="79"/><text x="1.4341%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (18 samples, 0.20%)</title><rect x="2.0424%" y="148" width="0.1955%" height="15" fill="rgb(220,122,19)" fg:x="188" fg:w="18"/><text x="2.2924%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (66 samples, 0.72%)</title><rect x="3.4981%" y="180" width="0.7170%" height="15" fill="rgb(250,228,42)" fg:x="322" fg:w="66"/><text x="3.7481%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (34 samples, 0.37%)</title><rect x="3.8457%" y="196" width="0.3694%" height="15" fill="rgb(240,193,28)" fg:x="354" fg:w="34"/><text x="4.0957%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (343 samples, 3.73%)</title><rect x="0.8148%" y="132" width="3.7262%" height="15" fill="rgb(216,20,37)" fg:x="75" fg:w="343"/><text x="1.0648%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (206 samples, 2.24%)</title><rect x="2.3031%" y="148" width="2.2379%" height="15" fill="rgb(206,188,39)" fg:x="212" fg:w="206"/><text x="2.5531%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (167 samples, 1.81%)</title><rect x="2.7268%" y="164" width="1.8142%" height="15" fill="rgb(217,207,13)" fg:x="251" fg:w="167"/><text x="2.9768%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (25 samples, 0.27%)</title><rect x="4.2694%" y="180" width="0.2716%" height="15" fill="rgb(231,73,38)" fg:x="393" fg:w="25"/><text x="4.5194%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (27 samples, 0.29%)</title><rect x="4.5410%" y="132" width="0.2933%" height="15" fill="rgb(225,20,46)" fg:x="418" fg:w="27"/><text x="4.7910%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (16 samples, 0.17%)</title><rect x="4.6605%" y="148" width="0.1738%" height="15" fill="rgb(210,31,41)" fg:x="429" fg:w="16"/><text x="4.9105%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (376 samples, 4.08%)</title><rect x="0.7605%" y="116" width="4.0847%" height="15" fill="rgb(221,200,47)" fg:x="70" fg:w="376"/><text x="1.0105%" y="126.50">appl..</text></g><g><title>embeddings (kappybara/pattern.py:256) (40 samples, 0.43%)</title><rect x="5.2254%" y="148" width="0.4345%" height="15" fill="rgb(226,26,5)" fg:x="481" fg:w="40"/><text x="5.4754%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.18%)</title><rect x="9.5492%" y="164" width="0.1847%" height="15" fill="rgb(249,33,26)" fg:x="879" fg:w="17"/><text x="9.7992%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (403 samples, 4.38%)</title><rect x="5.6600%" y="148" width="4.3781%" height="15" fill="rgb(235,183,28)" fg:x="521" fg:w="403"/><text x="5.9100%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.30%)</title><rect x="9.7338%" y="164" width="0.3042%" height="15" fill="rgb(221,5,38)" fg:x="896" fg:w="28"/><text x="9.9838%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.17%)</title><rect x="13.1776%" y="164" width="0.1738%" height="15" fill="rgb(247,18,42)" fg:x="1213" fg:w="16"/><text x="13.4276%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (339 samples, 3.68%)</title><rect x="10.0380%" y="148" width="3.6828%" height="15" fill="rgb(241,131,45)" fg:x="924" fg:w="339"/><text x="10.2880%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.37%)</title><rect x="13.3514%" y="164" width="0.3694%" height="15" fill="rgb(249,31,29)" fg:x="1229" fg:w="34"/><text x="13.6014%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (87 samples, 0.95%)</title><rect x="13.7643%" y="148" width="0.9451%" height="15" fill="rgb(225,111,53)" fg:x="1267" fg:w="87"/><text x="14.0143%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (71 samples, 0.77%)</title><rect x="14.7094%" y="148" width="0.7713%" height="15" fill="rgb(238,160,17)" fg:x="1354" fg:w="71"/><text x="14.9594%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (30 samples, 0.33%)</title><rect x="18.0337%" y="164" width="0.3259%" height="15" fill="rgb(214,148,48)" fg:x="1660" fg:w="30"/><text x="18.2837%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (298 samples, 3.24%)</title><rect x="15.4807%" y="148" width="3.2374%" height="15" fill="rgb(232,36,49)" fg:x="1425" fg:w="298"/><text x="15.7307%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.36%)</title><rect x="18.3596%" y="164" width="0.3585%" height="15" fill="rgb(209,103,24)" fg:x="1690" fg:w="33"/><text x="18.6096%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (225 samples, 2.44%)</title><rect x="18.7181%" y="148" width="2.4443%" height="15" fill="rgb(229,88,8)" fg:x="1723" fg:w="225"/><text x="18.9681%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (11 samples, 0.12%)</title><rect x="23.5090%" y="164" width="0.1195%" height="15" fill="rgb(213,181,19)" fg:x="2164" fg:w="11"/><text x="23.7590%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (74 samples, 0.80%)</title><rect x="23.6285%" y="164" width="0.8039%" height="15" fill="rgb(254,191,54)" fg:x="2175" fg:w="74"/><text x="23.8785%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (111 samples, 1.21%)</title><rect x="26.4965%" y="180" width="1.2059%" height="15" fill="rgb(241,83,37)" fg:x="2439" fg:w="111"/><text x="26.7465%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (89 samples, 0.97%)</title><rect x="30.3531%" y="196" width="0.9669%" height="15" fill="rgb(233,36,39)" fg:x="2794" fg:w="89"/><text x="30.6031%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,005 samples, 10.92%)</title><rect x="24.4541%" y="164" width="10.9180%" height="15" fill="rgb(226,3,54)" fg:x="2251" fg:w="1005"/><text x="24.7041%" y="174.50">embeds_in (kappy..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (706 samples, 7.67%)</title><rect x="27.7023%" y="180" width="7.6697%" height="15" fill="rgb(245,192,40)" fg:x="2550" fg:w="706"/><text x="27.9523%" y="190.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:111) (373 samples, 4.05%)</title><rect x="31.3199%" y="196" width="4.0521%" height="15" fill="rgb(238,167,29)" fg:x="2883" fg:w="373"/><text x="31.5699%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (105 samples, 1.14%)</title><rect x="35.3721%" y="164" width="1.1407%" height="15" fill="rgb(232,182,51)" fg:x="3256" fg:w="105"/><text x="35.6221%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (92 samples, 1.00%)</title><rect x="37.6752%" y="180" width="0.9995%" height="15" fill="rgb(231,60,39)" fg:x="3468" fg:w="92"/><text x="37.9252%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (220 samples, 2.39%)</title><rect x="36.5345%" y="164" width="2.3900%" height="15" fill="rgb(208,69,12)" fg:x="3363" fg:w="220"/><text x="36.7845%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (23 samples, 0.25%)</title><rect x="38.6746%" y="180" width="0.2499%" height="15" fill="rgb(235,93,37)" fg:x="3560" fg:w="23"/><text x="38.9246%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (200 samples, 2.17%)</title><rect x="49.8316%" y="180" width="2.1727%" height="15" fill="rgb(213,116,39)" fg:x="4587" fg:w="200"/><text x="50.0816%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (19 samples, 0.21%)</title><rect x="52.0043%" y="180" width="0.2064%" height="15" fill="rgb(222,207,29)" fg:x="4787" fg:w="19"/><text x="52.2543%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (21 samples, 0.23%)</title><rect x="52.9060%" y="196" width="0.2281%" height="15" fill="rgb(206,96,30)" fg:x="4870" fg:w="21"/><text x="53.1560%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (183 samples, 1.99%)</title><rect x="52.2108%" y="180" width="1.9880%" height="15" fill="rgb(218,138,4)" fg:x="4806" fg:w="183"/><text x="52.4608%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (98 samples, 1.06%)</title><rect x="53.1342%" y="196" width="1.0646%" height="15" fill="rgb(250,191,14)" fg:x="4891" fg:w="98"/><text x="53.3842%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (29 samples, 0.32%)</title><rect x="55.2526%" y="196" width="0.3150%" height="15" fill="rgb(239,60,40)" fg:x="5086" fg:w="29"/><text x="55.5026%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:57) (418 samples, 4.54%)</title><rect x="55.5676%" y="196" width="4.5410%" height="15" fill="rgb(206,27,48)" fg:x="5115" fg:w="418"/><text x="55.8176%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (218 samples, 2.37%)</title><rect x="57.7404%" y="212" width="2.3683%" height="15" fill="rgb(225,35,8)" fg:x="5315" fg:w="218"/><text x="57.9904%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.37%)</title><rect x="59.7393%" y="228" width="0.3694%" height="15" fill="rgb(250,213,24)" fg:x="5499" fg:w="34"/><text x="59.9893%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (254 samples, 2.76%)</title><rect x="60.1086%" y="196" width="2.7594%" height="15" fill="rgb(247,123,22)" fg:x="5533" fg:w="254"/><text x="60.3586%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (81 samples, 0.88%)</title><rect x="62.8680%" y="196" width="0.8800%" height="15" fill="rgb(231,138,38)" fg:x="5787" fg:w="81"/><text x="63.1180%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (18 samples, 0.20%)</title><rect x="63.7480%" y="196" width="0.1955%" height="15" fill="rgb(231,145,46)" fg:x="5868" fg:w="18"/><text x="63.9980%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (935 samples, 10.16%)</title><rect x="54.1988%" y="180" width="10.1575%" height="15" fill="rgb(251,118,11)" fg:x="4989" fg:w="935"/><text x="54.4488%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (38 samples, 0.41%)</title><rect x="63.9435%" y="196" width="0.4128%" height="15" fill="rgb(217,147,25)" fg:x="5886" fg:w="38"/><text x="64.1935%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (25 samples, 0.27%)</title><rect x="64.4541%" y="180" width="0.2716%" height="15" fill="rgb(247,81,37)" fg:x="5933" fg:w="25"/><text x="64.7041%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.16%)</title><rect x="65.5622%" y="196" width="0.1630%" height="15" fill="rgb(209,12,38)" fg:x="6035" fg:w="15"/><text x="65.8122%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (257 samples, 2.79%)</title><rect x="64.7257%" y="180" width="2.7920%" height="15" fill="rgb(227,1,9)" fg:x="5958" fg:w="257"/><text x="64.9757%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (165 samples, 1.79%)</title><rect x="65.7251%" y="196" width="1.7925%" height="15" fill="rgb(248,47,43)" fg:x="6050" fg:w="165"/><text x="65.9751%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.27%)</title><rect x="67.2461%" y="212" width="0.2716%" height="15" fill="rgb(221,10,30)" fg:x="6190" fg:w="25"/><text x="67.4961%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.12%)</title><rect x="68.7344%" y="196" width="0.1195%" height="15" fill="rgb(210,229,1)" fg:x="6327" fg:w="11"/><text x="68.9844%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="71.0375%" y="212" width="0.1086%" height="15" fill="rgb(222,148,37)" fg:x="6539" fg:w="10"/><text x="71.2875%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (374 samples, 4.06%)</title><rect x="67.5177%" y="180" width="4.0630%" height="15" fill="rgb(234,67,33)" fg:x="6215" fg:w="374"/><text x="67.7677%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (251 samples, 2.73%)</title><rect x="68.8539%" y="196" width="2.7268%" height="15" fill="rgb(247,98,35)" fg:x="6338" fg:w="251"/><text x="69.1039%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.43%)</title><rect x="71.1461%" y="212" width="0.4345%" height="15" fill="rgb(247,138,52)" fg:x="6549" fg:w="40"/><text x="71.3961%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (59 samples, 0.64%)</title><rect x="71.5807%" y="180" width="0.6410%" height="15" fill="rgb(213,79,30)" fg:x="6589" fg:w="59"/><text x="71.8307%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (176 samples, 1.91%)</title><rect x="72.2325%" y="180" width="1.9120%" height="15" fill="rgb(246,177,23)" fg:x="6649" fg:w="176"/><text x="72.4825%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (82 samples, 0.89%)</title><rect x="74.1445%" y="180" width="0.8908%" height="15" fill="rgb(230,62,27)" fg:x="6825" fg:w="82"/><text x="74.3945%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (26 samples, 0.28%)</title><rect x="75.0353%" y="180" width="0.2825%" height="15" fill="rgb(216,154,8)" fg:x="6907" fg:w="26"/><text x="75.2853%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,682 samples, 40.00%)</title><rect x="38.9245%" y="164" width="40.0000%" height="15" fill="rgb(244,35,45)" fg:x="3583" fg:w="3682"/><text x="39.1745%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (332 samples, 3.61%)</title><rect x="75.3178%" y="180" width="3.6067%" height="15" fill="rgb(251,115,12)" fg:x="6933" fg:w="332"/><text x="75.5678%" y="190.50">site..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,371 samples, 58.35%)</title><rect x="21.1624%" y="148" width="58.3487%" height="15" fill="rgb(240,54,50)" fg:x="1948" fg:w="5371"/><text x="21.4124%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (54 samples, 0.59%)</title><rect x="78.9245%" y="164" width="0.5866%" height="15" fill="rgb(233,84,52)" fg:x="7265" fg:w="54"/><text x="79.1745%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (45 samples, 0.49%)</title><rect x="80.7822%" y="164" width="0.4889%" height="15" fill="rgb(207,117,47)" fg:x="7436" fg:w="45"/><text x="81.0322%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (42 samples, 0.46%)</title><rect x="82.6399%" y="180" width="0.4563%" height="15" fill="rgb(249,43,39)" fg:x="7607" fg:w="42"/><text x="82.8899%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (563 samples, 6.12%)</title><rect x="79.6198%" y="148" width="6.1162%" height="15" fill="rgb(209,38,44)" fg:x="7329" fg:w="563"/><text x="79.8698%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (411 samples, 4.46%)</title><rect x="81.2710%" y="164" width="4.4650%" height="15" fill="rgb(236,212,23)" fg:x="7481" fg:w="411"/><text x="81.5210%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (243 samples, 2.64%)</title><rect x="83.0961%" y="180" width="2.6399%" height="15" fill="rgb(242,79,21)" fg:x="7649" fg:w="243"/><text x="83.3461%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (42 samples, 0.46%)</title><rect x="86.2901%" y="164" width="0.4563%" height="15" fill="rgb(211,96,35)" fg:x="7943" fg:w="42"/><text x="86.5401%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (101 samples, 1.10%)</title><rect x="85.7360%" y="148" width="1.0972%" height="15" fill="rgb(253,215,40)" fg:x="7892" fg:w="101"/><text x="85.9860%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (28 samples, 0.30%)</title><rect x="87.0940%" y="164" width="0.3042%" height="15" fill="rgb(211,81,21)" fg:x="8017" fg:w="28"/><text x="87.3440%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (104 samples, 1.13%)</title><rect x="86.8332%" y="148" width="1.1298%" height="15" fill="rgb(208,190,38)" fg:x="7993" fg:w="104"/><text x="87.0832%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (52 samples, 0.56%)</title><rect x="87.3982%" y="164" width="0.5649%" height="15" fill="rgb(235,213,38)" fg:x="8045" fg:w="52"/><text x="87.6482%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="89.1255%" y="164" width="0.1304%" height="15" fill="rgb(237,122,38)" fg:x="8204" fg:w="12"/><text x="89.3755%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (148 samples, 1.61%)</title><rect x="87.9631%" y="148" width="1.6078%" height="15" fill="rgb(244,218,35)" fg:x="8097" fg:w="148"/><text x="88.2131%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.32%)</title><rect x="89.2558%" y="164" width="0.3150%" height="15" fill="rgb(240,68,47)" fg:x="8216" fg:w="29"/><text x="89.5058%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (61 samples, 0.66%)</title><rect x="89.5709%" y="148" width="0.6627%" height="15" fill="rgb(210,16,53)" fg:x="8245" fg:w="61"/><text x="89.8209%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (65 samples, 0.71%)</title><rect x="90.2336%" y="148" width="0.7061%" height="15" fill="rgb(235,124,12)" fg:x="8306" fg:w="65"/><text x="90.4836%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (119 samples, 1.29%)</title><rect x="93.0690%" y="164" width="1.2928%" height="15" fill="rgb(224,169,11)" fg:x="8567" fg:w="119"/><text x="93.3190%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.15%)</title><rect x="94.2097%" y="180" width="0.1521%" height="15" fill="rgb(250,166,2)" fg:x="8672" fg:w="14"/><text x="94.4597%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (323 samples, 3.51%)</title><rect x="90.9397%" y="148" width="3.5090%" height="15" fill="rgb(242,216,29)" fg:x="8371" fg:w="323"/><text x="91.1897%" y="158.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:282) (34 samples, 0.37%)</title><rect x="94.4487%" y="148" width="0.3694%" height="15" fill="rgb(230,116,27)" fg:x="8694" fg:w="34"/><text x="94.6987%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,292 samples, 90.08%)</title><rect x="4.8995%" y="132" width="90.0815%" height="15" fill="rgb(228,99,48)" fg:x="451" fg:w="8292"/><text x="5.1495%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (39 samples, 0.42%)</title><rect x="94.9810%" y="132" width="0.4237%" height="15" fill="rgb(253,11,6)" fg:x="8743" fg:w="39"/><text x="95.2310%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (12 samples, 0.13%)</title><rect x="95.4047%" y="132" width="0.1304%" height="15" fill="rgb(247,143,39)" fg:x="8782" fg:w="12"/><text x="95.6547%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (18 samples, 0.20%)</title><rect x="95.5350%" y="132" width="0.1955%" height="15" fill="rgb(236,97,10)" fg:x="8794" fg:w="18"/><text x="95.7850%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (255 samples, 2.77%)</title><rect x="95.7306%" y="132" width="2.7702%" height="15" fill="rgb(233,208,19)" fg:x="8812" fg:w="255"/><text x="95.9806%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.26%)</title><rect x="98.2401%" y="148" width="0.2607%" height="15" fill="rgb(216,164,2)" fg:x="9043" fg:w="24"/><text x="98.4901%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,077 samples, 98.61%)</title><rect x="0.7496%" y="100" width="98.6095%" height="15" fill="rgb(220,129,5)" fg:x="69" fg:w="9077"/><text x="0.9996%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,697 samples, 94.48%)</title><rect x="4.8778%" y="116" width="94.4813%" height="15" fill="rgb(242,17,10)" fg:x="449" fg:w="8697"/><text x="5.1278%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (79 samples, 0.86%)</title><rect x="98.5008%" y="132" width="0.8582%" height="15" fill="rgb(242,107,0)" fg:x="9067" fg:w="79"/><text x="98.7508%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.11%)</title><rect x="99.2504%" y="148" width="0.1086%" height="15" fill="rgb(251,28,31)" fg:x="9136" fg:w="10"/><text x="99.5004%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,140 samples, 99.29%)</title><rect x="0.0869%" y="68" width="99.2939%" height="15" fill="rgb(233,223,10)" fg:x="8" fg:w="9140"/><text x="0.3369%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,123 samples, 99.11%)</title><rect x="0.2716%" y="84" width="99.1092%" height="15" fill="rgb(215,21,27)" fg:x="25" fg:w="9123"/><text x="0.5216%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (12 samples, 0.13%)</title><rect x="99.3808%" y="68" width="0.1304%" height="15" fill="rgb(232,23,21)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.13%)</title><rect x="99.3808%" y="84" width="0.1304%" height="15" fill="rgb(244,5,23)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.13%)</title><rect x="99.3808%" y="100" width="0.1304%" height="15" fill="rgb(226,81,46)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.13%)</title><rect x="99.3808%" y="116" width="0.1304%" height="15" fill="rgb(247,70,30)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.13%)</title><rect x="99.3808%" y="132" width="0.1304%" height="15" fill="rgb(212,68,19)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.13%)</title><rect x="99.3808%" y="148" width="0.1304%" height="15" fill="rgb(240,187,13)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (12 samples, 0.13%)</title><rect x="99.3808%" y="164" width="0.1304%" height="15" fill="rgb(223,113,26)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.13%)</title><rect x="99.3808%" y="180" width="0.1304%" height="15" fill="rgb(206,192,2)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.13%)</title><rect x="99.3808%" y="196" width="0.1304%" height="15" fill="rgb(241,108,4)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.13%)</title><rect x="99.3808%" y="212" width="0.1304%" height="15" fill="rgb(247,173,49)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.13%)</title><rect x="99.3808%" y="228" width="0.1304%" height="15" fill="rgb(224,114,35)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.13%)</title><rect x="99.3808%" y="244" width="0.1304%" height="15" fill="rgb(245,159,27)" fg:x="9148" fg:w="12"/><text x="99.6308%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (10 samples, 0.11%)</title><rect x="99.5111%" y="68" width="0.1086%" height="15" fill="rgb(245,172,44)" fg:x="9160" fg:w="10"/><text x="99.7611%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (14 samples, 0.15%)</title><rect x="99.6198%" y="68" width="0.1521%" height="15" fill="rgb(236,23,11)" fg:x="9170" fg:w="14"/><text x="99.8698%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (10 samples, 0.11%)</title><rect x="99.7719%" y="68" width="0.1086%" height="15" fill="rgb(205,117,38)" fg:x="9184" fg:w="10"/><text x="100.0219%" y="78.50"></text></g><g><title>all (9,205 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="9205"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (11 samples, 0.12%)</title><rect x="99.8805%" y="68" width="0.1195%" height="15" fill="rgb(244,70,9)" fg:x="9194" fg:w="11"/><text x="100.1305%" y="78.50"></text></g></svg></svg>