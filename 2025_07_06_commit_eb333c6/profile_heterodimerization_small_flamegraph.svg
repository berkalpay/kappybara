<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="474" onload="init(evt)" viewBox="0 0 1200 474" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="474" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit eb333c6</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="463.00"> </text><svg id="frames" x="10" width="1180" total_samples="4888"><g><title>&lt;module&gt; (kappybara/grammar.py:35) (7 samples, 0.14%)</title><rect x="0.0000%" y="260" width="0.1432%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="7"/><text x="0.2500%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (7 samples, 0.14%)</title><rect x="0.0000%" y="276" width="0.1432%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="7"/><text x="0.2500%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (7 samples, 0.14%)</title><rect x="0.0000%" y="292" width="0.1432%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="7"/><text x="0.2500%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (12 samples, 0.25%)</title><rect x="0.0000%" y="68" width="0.2455%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="12"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.25%)</title><rect x="0.0000%" y="84" width="0.2455%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="12"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.25%)</title><rect x="0.0000%" y="100" width="0.2455%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="12"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.25%)</title><rect x="0.0000%" y="116" width="0.2455%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="12"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.25%)</title><rect x="0.0000%" y="132" width="0.2455%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="12"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.25%)</title><rect x="0.0000%" y="148" width="0.2455%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="12"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (12 samples, 0.25%)</title><rect x="0.0000%" y="164" width="0.2455%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="12"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.25%)</title><rect x="0.0000%" y="180" width="0.2455%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="12"/><text x="0.2500%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.25%)</title><rect x="0.0000%" y="196" width="0.2455%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="12"/><text x="0.2500%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.25%)</title><rect x="0.0000%" y="212" width="0.2455%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="12"/><text x="0.2500%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.25%)</title><rect x="0.0000%" y="228" width="0.2455%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="12"/><text x="0.2500%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.25%)</title><rect x="0.0000%" y="244" width="0.2455%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="12"/><text x="0.2500%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (5 samples, 0.10%)</title><rect x="0.1432%" y="260" width="0.1023%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="5"/><text x="0.3932%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (5 samples, 0.10%)</title><rect x="0.1432%" y="276" width="0.1023%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="5"/><text x="0.3932%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (5 samples, 0.10%)</title><rect x="0.1432%" y="292" width="0.1023%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="5"/><text x="0.3932%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (5 samples, 0.10%)</title><rect x="0.1432%" y="308" width="0.1023%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="5"/><text x="0.3932%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (5 samples, 0.10%)</title><rect x="0.1432%" y="324" width="0.1023%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="5"/><text x="0.3932%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (5 samples, 0.10%)</title><rect x="0.1432%" y="340" width="0.1023%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="5"/><text x="0.3932%" y="350.50"></text></g><g><title>&lt;module&gt; (lark/__init__.py:11) (5 samples, 0.10%)</title><rect x="0.1432%" y="356" width="0.1023%" height="15" fill="rgb(235,183,28)" fg:x="7" fg:w="5"/><text x="0.3932%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (5 samples, 0.10%)</title><rect x="0.1432%" y="372" width="0.1023%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="5"/><text x="0.3932%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (5 samples, 0.10%)</title><rect x="0.1432%" y="388" width="0.1023%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="5"/><text x="0.3932%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (5 samples, 0.10%)</title><rect x="0.1432%" y="404" width="0.1023%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="5"/><text x="0.3932%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (5 samples, 0.10%)</title><rect x="0.1432%" y="420" width="0.1023%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="5"/><text x="0.3932%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (5 samples, 0.10%)</title><rect x="0.1432%" y="436" width="0.1023%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="5"/><text x="0.3932%" y="446.50"></text></g><g><title>heterodimerization_system (kappybara/examples.py:15) (7 samples, 0.14%)</title><rect x="0.2660%" y="84" width="0.1432%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="7"/><text x="0.5160%" y="94.50"></text></g><g><title>__init__ (kappybara/mixture.py:45) (7 samples, 0.14%)</title><rect x="0.2660%" y="100" width="0.1432%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="7"/><text x="0.5160%" y="110.50"></text></g><g><title>instantiate (kappybara/mixture.py:53) (7 samples, 0.14%)</title><rect x="0.2660%" y="116" width="0.1432%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="7"/><text x="0.5160%" y="126.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (9 samples, 0.18%)</title><rect x="0.2455%" y="68" width="0.1841%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="9"/><text x="0.4955%" y="78.50"></text></g><g><title>update (kappybara/system.py:69) (5 samples, 0.10%)</title><rect x="0.4296%" y="84" width="0.1023%" height="15" fill="rgb(229,88,8)" fg:x="21" fg:w="5"/><text x="0.6796%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (5 samples, 0.10%)</title><rect x="0.4296%" y="100" width="0.1023%" height="15" fill="rgb(213,181,19)" fg:x="21" fg:w="5"/><text x="0.6796%" y="110.50"></text></g><g><title>act (kappybara/system.py:63) (5 samples, 0.10%)</title><rect x="0.5524%" y="100" width="0.1023%" height="15" fill="rgb(254,191,54)" fg:x="27" fg:w="5"/><text x="0.8024%" y="110.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (69 samples, 1.41%)</title><rect x="0.7160%" y="132" width="1.4116%" height="15" fill="rgb(241,83,37)" fg:x="35" fg:w="69"/><text x="0.9660%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (12 samples, 0.25%)</title><rect x="2.6187%" y="148" width="0.2455%" height="15" fill="rgb(233,36,39)" fg:x="128" fg:w="12"/><text x="2.8687%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.41%)</title><rect x="6.9354%" y="164" width="0.4092%" height="15" fill="rgb(226,3,54)" fg:x="339" fg:w="20"/><text x="7.1854%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (232 samples, 4.75%)</title><rect x="2.8642%" y="148" width="4.7463%" height="15" fill="rgb(245,192,40)" fg:x="140" fg:w="232"/><text x="3.1142%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.27%)</title><rect x="7.3445%" y="164" width="0.2660%" height="15" fill="rgb(238,167,29)" fg:x="359" fg:w="13"/><text x="7.5945%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.10%)</title><rect x="11.2316%" y="164" width="0.1023%" height="15" fill="rgb(232,182,51)" fg:x="549" fg:w="5"/><text x="11.4816%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (195 samples, 3.99%)</title><rect x="7.6105%" y="148" width="3.9894%" height="15" fill="rgb(231,60,39)" fg:x="372" fg:w="195"/><text x="7.8605%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.27%)</title><rect x="11.3339%" y="164" width="0.2660%" height="15" fill="rgb(208,69,12)" fg:x="554" fg:w="13"/><text x="11.5839%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (43 samples, 0.88%)</title><rect x="11.6817%" y="148" width="0.8797%" height="15" fill="rgb(235,93,37)" fg:x="571" fg:w="43"/><text x="11.9317%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (35 samples, 0.72%)</title><rect x="12.5614%" y="148" width="0.7160%" height="15" fill="rgb(213,116,39)" fg:x="614" fg:w="35"/><text x="12.8114%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.39%)</title><rect x="15.3437%" y="164" width="0.3887%" height="15" fill="rgb(222,207,29)" fg:x="750" fg:w="19"/><text x="15.5937%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (136 samples, 2.78%)</title><rect x="13.2774%" y="148" width="2.7823%" height="15" fill="rgb(206,96,30)" fg:x="649" fg:w="136"/><text x="13.5274%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.33%)</title><rect x="15.7324%" y="164" width="0.3273%" height="15" fill="rgb(218,138,4)" fg:x="769" fg:w="16"/><text x="15.9824%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (119 samples, 2.43%)</title><rect x="16.0597%" y="148" width="2.4345%" height="15" fill="rgb(250,191,14)" fg:x="785" fg:w="119"/><text x="16.3097%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (13 samples, 0.27%)</title><rect x="20.5196%" y="164" width="0.2660%" height="15" fill="rgb(239,60,40)" fg:x="1003" fg:w="13"/><text x="20.7696%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (49 samples, 1.00%)</title><rect x="20.7856%" y="164" width="1.0025%" height="15" fill="rgb(206,27,48)" fg:x="1016" fg:w="49"/><text x="21.0356%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (67 samples, 1.37%)</title><rect x="24.2226%" y="180" width="1.3707%" height="15" fill="rgb(225,35,8)" fg:x="1184" fg:w="67"/><text x="24.4726%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (39 samples, 0.80%)</title><rect x="27.4345%" y="196" width="0.7979%" height="15" fill="rgb(250,213,24)" fg:x="1341" fg:w="39"/><text x="27.6845%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (511 samples, 10.45%)</title><rect x="21.8085%" y="164" width="10.4542%" height="15" fill="rgb(247,123,22)" fg:x="1066" fg:w="511"/><text x="22.0585%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (326 samples, 6.67%)</title><rect x="25.5933%" y="180" width="6.6694%" height="15" fill="rgb(231,138,38)" fg:x="1251" fg:w="326"/><text x="25.8433%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (197 samples, 4.03%)</title><rect x="28.2324%" y="196" width="4.0303%" height="15" fill="rgb(231,145,46)" fg:x="1380" fg:w="197"/><text x="28.4824%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (69 samples, 1.41%)</title><rect x="32.2627%" y="164" width="1.4116%" height="15" fill="rgb(251,118,11)" fg:x="1577" fg:w="69"/><text x="32.5127%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (41 samples, 0.84%)</title><rect x="34.4926%" y="180" width="0.8388%" height="15" fill="rgb(217,147,25)" fg:x="1686" fg:w="41"/><text x="34.7426%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (96 samples, 1.96%)</title><rect x="33.7561%" y="164" width="1.9640%" height="15" fill="rgb(247,81,37)" fg:x="1650" fg:w="96"/><text x="34.0061%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.39%)</title><rect x="35.3314%" y="180" width="0.3887%" height="15" fill="rgb(209,12,38)" fg:x="1727" fg:w="19"/><text x="35.5814%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (96 samples, 1.96%)</title><rect x="44.3944%" y="180" width="1.9640%" height="15" fill="rgb(227,1,9)" fg:x="2170" fg:w="96"/><text x="44.6444%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (7 samples, 0.14%)</title><rect x="46.3584%" y="180" width="0.1432%" height="15" fill="rgb(248,47,43)" fg:x="2266" fg:w="7"/><text x="46.6084%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (5 samples, 0.10%)</title><rect x="47.0336%" y="196" width="0.1023%" height="15" fill="rgb(221,10,30)" fg:x="2299" fg:w="5"/><text x="47.2836%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (88 samples, 1.80%)</title><rect x="46.5016%" y="180" width="1.8003%" height="15" fill="rgb(210,229,1)" fg:x="2273" fg:w="88"/><text x="46.7516%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (57 samples, 1.17%)</title><rect x="47.1358%" y="196" width="1.1661%" height="15" fill="rgb(222,148,37)" fg:x="2304" fg:w="57"/><text x="47.3858%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (22 samples, 0.45%)</title><rect x="49.9795%" y="196" width="0.4501%" height="15" fill="rgb(234,67,33)" fg:x="2443" fg:w="22"/><text x="50.2295%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.27%)</title><rect x="52.3732%" y="212" width="0.2660%" height="15" fill="rgb(247,98,35)" fg:x="2560" fg:w="13"/><text x="52.6232%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (222 samples, 4.54%)</title><rect x="50.4296%" y="196" width="4.5417%" height="15" fill="rgb(247,138,52)" fg:x="2465" fg:w="222"/><text x="50.6796%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (114 samples, 2.33%)</title><rect x="52.6391%" y="212" width="2.3322%" height="15" fill="rgb(213,79,30)" fg:x="2573" fg:w="114"/><text x="52.8891%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.37%)</title><rect x="54.6031%" y="228" width="0.3682%" height="15" fill="rgb(246,177,23)" fg:x="2669" fg:w="18"/><text x="54.8531%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (116 samples, 2.37%)</title><rect x="54.9714%" y="196" width="2.3732%" height="15" fill="rgb(230,62,27)" fg:x="2687" fg:w="116"/><text x="55.2214%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (49 samples, 1.00%)</title><rect x="57.3445%" y="196" width="1.0025%" height="15" fill="rgb(216,154,8)" fg:x="2803" fg:w="49"/><text x="57.5945%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (13 samples, 0.27%)</title><rect x="58.3470%" y="196" width="0.2660%" height="15" fill="rgb(244,35,45)" fg:x="2852" fg:w="13"/><text x="58.5970%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (539 samples, 11.03%)</title><rect x="48.3020%" y="180" width="11.0270%" height="15" fill="rgb(251,115,12)" fg:x="2361" fg:w="539"/><text x="48.5520%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (35 samples, 0.72%)</title><rect x="58.6129%" y="196" width="0.7160%" height="15" fill="rgb(240,54,50)" fg:x="2865" fg:w="35"/><text x="58.8629%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (8 samples, 0.16%)</title><rect x="59.4108%" y="180" width="0.1637%" height="15" fill="rgb(233,84,52)" fg:x="2904" fg:w="8"/><text x="59.6608%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (8 samples, 0.16%)</title><rect x="60.0859%" y="196" width="0.1637%" height="15" fill="rgb(207,117,47)" fg:x="2937" fg:w="8"/><text x="60.3359%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (82 samples, 1.68%)</title><rect x="59.5745%" y="180" width="1.6776%" height="15" fill="rgb(249,43,39)" fg:x="2912" fg:w="82"/><text x="59.8245%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (49 samples, 1.00%)</title><rect x="60.2496%" y="196" width="1.0025%" height="15" fill="rgb(209,38,44)" fg:x="2945" fg:w="49"/><text x="60.4996%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.12%)</title><rect x="61.1293%" y="212" width="0.1227%" height="15" fill="rgb(236,212,23)" fg:x="2988" fg:w="6"/><text x="61.3793%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (64 samples, 1.31%)</title><rect x="61.2520%" y="180" width="1.3093%" height="15" fill="rgb(242,79,21)" fg:x="2994" fg:w="64"/><text x="61.5020%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (36 samples, 0.74%)</title><rect x="61.8249%" y="196" width="0.7365%" height="15" fill="rgb(211,96,35)" fg:x="3022" fg:w="36"/><text x="62.0749%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.10%)</title><rect x="62.4591%" y="212" width="0.1023%" height="15" fill="rgb(253,215,40)" fg:x="3053" fg:w="5"/><text x="62.7091%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (23 samples, 0.47%)</title><rect x="62.5614%" y="180" width="0.4705%" height="15" fill="rgb(211,81,21)" fg:x="3058" fg:w="23"/><text x="62.8114%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (48 samples, 0.98%)</title><rect x="63.0319%" y="180" width="0.9820%" height="15" fill="rgb(208,190,38)" fg:x="3081" fg:w="48"/><text x="63.2819%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (32 samples, 0.65%)</title><rect x="64.0139%" y="180" width="0.6547%" height="15" fill="rgb(235,213,38)" fg:x="3129" fg:w="32"/><text x="64.2639%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (8 samples, 0.16%)</title><rect x="64.6686%" y="180" width="0.1637%" height="15" fill="rgb(237,122,38)" fg:x="3161" fg:w="8"/><text x="64.9186%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,559 samples, 31.89%)</title><rect x="35.7201%" y="164" width="31.8944%" height="15" fill="rgb(244,218,35)" fg:x="1746" fg:w="1559"/><text x="35.9701%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (136 samples, 2.78%)</title><rect x="64.8322%" y="180" width="2.7823%" height="15" fill="rgb(240,68,47)" fg:x="3169" fg:w="136"/><text x="65.0822%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,425 samples, 49.61%)</title><rect x="18.4943%" y="148" width="49.6113%" height="15" fill="rgb(210,16,53)" fg:x="904" fg:w="2425"/><text x="18.7443%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (24 samples, 0.49%)</title><rect x="67.6146%" y="164" width="0.4910%" height="15" fill="rgb(235,124,12)" fg:x="3305" fg:w="24"/><text x="67.8646%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (6 samples, 0.12%)</title><rect x="68.1056%" y="148" width="0.1227%" height="15" fill="rgb(224,169,11)" fg:x="3329" fg:w="6"/><text x="68.3556%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (22 samples, 0.45%)</title><rect x="69.7218%" y="164" width="0.4501%" height="15" fill="rgb(250,166,2)" fg:x="3408" fg:w="22"/><text x="69.9718%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (39 samples, 0.80%)</title><rect x="71.3993%" y="180" width="0.7979%" height="15" fill="rgb(242,216,29)" fg:x="3490" fg:w="39"/><text x="71.6493%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (319 samples, 6.53%)</title><rect x="68.2488%" y="148" width="6.5262%" height="15" fill="rgb(230,116,27)" fg:x="3336" fg:w="319"/><text x="68.4988%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (225 samples, 4.60%)</title><rect x="70.1718%" y="164" width="4.6031%" height="15" fill="rgb(228,99,48)" fg:x="3430" fg:w="225"/><text x="70.4218%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (126 samples, 2.58%)</title><rect x="72.1972%" y="180" width="2.5777%" height="15" fill="rgb(253,11,6)" fg:x="3529" fg:w="126"/><text x="72.4472%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (16 samples, 0.33%)</title><rect x="75.4501%" y="164" width="0.3273%" height="15" fill="rgb(247,143,39)" fg:x="3688" fg:w="16"/><text x="75.7001%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (56 samples, 1.15%)</title><rect x="74.7750%" y="148" width="1.1457%" height="15" fill="rgb(236,97,10)" fg:x="3655" fg:w="56"/><text x="75.0250%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (7 samples, 0.14%)</title><rect x="75.7774%" y="164" width="0.1432%" height="15" fill="rgb(233,208,19)" fg:x="3704" fg:w="7"/><text x="76.0274%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (5 samples, 0.10%)</title><rect x="76.1866%" y="164" width="0.1023%" height="15" fill="rgb(216,164,2)" fg:x="3724" fg:w="5"/><text x="76.4366%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (49 samples, 1.00%)</title><rect x="75.9206%" y="148" width="1.0025%" height="15" fill="rgb(220,129,5)" fg:x="3711" fg:w="49"/><text x="76.1706%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (31 samples, 0.63%)</title><rect x="76.2889%" y="164" width="0.6342%" height="15" fill="rgb(242,17,10)" fg:x="3729" fg:w="31"/><text x="76.5389%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (30 samples, 0.61%)</title><rect x="76.9231%" y="148" width="0.6137%" height="15" fill="rgb(242,107,0)" fg:x="3760" fg:w="30"/><text x="77.1731%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.20%)</title><rect x="77.3322%" y="164" width="0.2046%" height="15" fill="rgb(251,28,31)" fg:x="3780" fg:w="10"/><text x="77.5822%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (11 samples, 0.23%)</title><rect x="77.5368%" y="148" width="0.2250%" height="15" fill="rgb(233,223,10)" fg:x="3790" fg:w="11"/><text x="77.7868%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (21 samples, 0.43%)</title><rect x="77.7619%" y="148" width="0.4296%" height="15" fill="rgb(215,21,27)" fg:x="3801" fg:w="21"/><text x="78.0119%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (120 samples, 2.45%)</title><rect x="78.1915%" y="148" width="2.4550%" height="15" fill="rgb(232,23,21)" fg:x="3822" fg:w="120"/><text x="78.4415%" y="158.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (51 samples, 1.04%)</title><rect x="79.6031%" y="164" width="1.0434%" height="15" fill="rgb(244,5,23)" fg:x="3891" fg:w="51"/><text x="79.8531%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.10%)</title><rect x="80.5442%" y="180" width="0.1023%" height="15" fill="rgb(226,81,46)" fg:x="3937" fg:w="5"/><text x="80.7942%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (16 samples, 0.33%)</title><rect x="80.7079%" y="148" width="0.3273%" height="15" fill="rgb(247,70,30)" fg:x="3945" fg:w="16"/><text x="80.9579%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (36 samples, 0.74%)</title><rect x="81.0352%" y="148" width="0.7365%" height="15" fill="rgb(212,68,19)" fg:x="3961" fg:w="36"/><text x="81.2852%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,896 samples, 79.71%)</title><rect x="2.1277%" y="132" width="79.7054%" height="15" fill="rgb(240,187,13)" fg:x="104" fg:w="3896"/><text x="2.3777%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (33 samples, 0.68%)</title><rect x="81.8331%" y="132" width="0.6751%" height="15" fill="rgb(223,113,26)" fg:x="4000" fg:w="33"/><text x="82.0831%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (8 samples, 0.16%)</title><rect x="82.5082%" y="132" width="0.1637%" height="15" fill="rgb(206,192,2)" fg:x="4033" fg:w="8"/><text x="82.7582%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (13 samples, 0.27%)</title><rect x="82.6718%" y="132" width="0.2660%" height="15" fill="rgb(241,108,4)" fg:x="4041" fg:w="13"/><text x="82.9218%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (158 samples, 3.23%)</title><rect x="90.8552%" y="148" width="3.2324%" height="15" fill="rgb(247,173,49)" fg:x="4441" fg:w="158"/><text x="91.1052%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.37%)</title><rect x="94.0876%" y="148" width="0.3682%" height="15" fill="rgb(224,114,35)" fg:x="4599" fg:w="18"/><text x="94.3376%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (592 samples, 12.11%)</title><rect x="82.9378%" y="132" width="12.1113%" height="15" fill="rgb(245,159,27)" fg:x="4054" fg:w="592"/><text x="83.1878%" y="142.50">_update_embeddings..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.59%)</title><rect x="94.4558%" y="148" width="0.5933%" height="15" fill="rgb(245,172,44)" fg:x="4617" fg:w="29"/><text x="94.7058%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (43 samples, 0.88%)</title><rect x="98.6293%" y="148" width="0.8797%" height="15" fill="rgb(236,23,11)" fg:x="4821" fg:w="43"/><text x="98.8793%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,854 samples, 99.30%)</title><rect x="0.4296%" y="68" width="99.3044%" height="15" fill="rgb(205,117,38)" fg:x="21" fg:w="4854"/><text x="0.6796%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,849 samples, 99.20%)</title><rect x="0.5319%" y="84" width="99.2021%" height="15" fill="rgb(237,72,25)" fg:x="26" fg:w="4849"/><text x="0.7819%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,843 samples, 99.08%)</title><rect x="0.6547%" y="100" width="99.0794%" height="15" fill="rgb(244,70,9)" fg:x="32" fg:w="4843"/><text x="0.9047%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,840 samples, 99.02%)</title><rect x="0.7160%" y="116" width="99.0180%" height="15" fill="rgb(217,125,39)" fg:x="35" fg:w="4840"/><text x="0.9660%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (229 samples, 4.68%)</title><rect x="95.0491%" y="132" width="4.6849%" height="15" fill="rgb(235,36,10)" fg:x="4646" fg:w="229"/><text x="95.2991%" y="142.50">_upda..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.23%)</title><rect x="99.5090%" y="148" width="0.2250%" height="15" fill="rgb(251,123,47)" fg:x="4864" fg:w="11"/><text x="99.7590%" y="158.50"></text></g><g><title>all (4,888 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="4888"/><text x="0.2500%" y="62.50"></text></g></svg></svg>