<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 269b6c4</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="12206"><g><title>n_embeddings (kappybara/rule.py:185) (20 samples, 0.16%)</title><rect x="0.1720%" y="180" width="0.1639%" height="15" fill="rgb(227,0,7)" fg:x="21" fg:w="20"/><text x="0.4220%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (68 samples, 0.56%)</title><rect x="0.0573%" y="84" width="0.5571%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="68"/><text x="0.3073%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (68 samples, 0.56%)</title><rect x="0.0573%" y="100" width="0.5571%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="68"/><text x="0.3073%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (62 samples, 0.51%)</title><rect x="0.1065%" y="116" width="0.5079%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="62"/><text x="0.3565%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (61 samples, 0.50%)</title><rect x="0.1147%" y="132" width="0.4998%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="61"/><text x="0.3647%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (60 samples, 0.49%)</title><rect x="0.1229%" y="148" width="0.4916%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="60"/><text x="0.3729%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (58 samples, 0.48%)</title><rect x="0.1393%" y="164" width="0.4752%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="58"/><text x="0.3893%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (13 samples, 0.11%)</title><rect x="0.6718%" y="116" width="0.1065%" height="15" fill="rgb(228,23,34)" fg:x="82" fg:w="13"/><text x="0.9218%" y="126.50"></text></g><g><title>select (kappybara/rule.py:218) (14 samples, 0.11%)</title><rect x="0.8602%" y="116" width="0.1147%" height="15" fill="rgb(218,30,26)" fg:x="105" fg:w="14"/><text x="1.1102%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (41 samples, 0.34%)</title><rect x="0.6718%" y="100" width="0.3359%" height="15" fill="rgb(220,122,19)" fg:x="82" fg:w="41"/><text x="0.9218%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (17 samples, 0.14%)</title><rect x="1.1388%" y="164" width="0.1393%" height="15" fill="rgb(250,228,42)" fg:x="139" fg:w="17"/><text x="1.3888%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (25 samples, 0.20%)</title><rect x="1.2781%" y="164" width="0.2048%" height="15" fill="rgb(240,193,28)" fg:x="156" fg:w="25"/><text x="1.5281%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (43 samples, 0.35%)</title><rect x="1.1388%" y="148" width="0.3523%" height="15" fill="rgb(216,20,37)" fg:x="139" fg:w="43"/><text x="1.3888%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (45 samples, 0.37%)</title><rect x="1.5238%" y="164" width="0.3687%" height="15" fill="rgb(206,188,39)" fg:x="186" fg:w="45"/><text x="1.7738%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (13 samples, 0.11%)</title><rect x="1.7860%" y="180" width="0.1065%" height="15" fill="rgb(217,207,13)" fg:x="218" fg:w="13"/><text x="2.0360%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (30 samples, 0.25%)</title><rect x="2.1711%" y="180" width="0.2458%" height="15" fill="rgb(231,73,38)" fg:x="265" fg:w="30"/><text x="2.4211%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (29 samples, 0.24%)</title><rect x="2.4168%" y="180" width="0.2376%" height="15" fill="rgb(225,20,46)" fg:x="295" fg:w="29"/><text x="2.6668%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (40 samples, 0.33%)</title><rect x="2.7364%" y="180" width="0.3277%" height="15" fill="rgb(210,31,41)" fg:x="334" fg:w="40"/><text x="2.9864%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (211 samples, 1.73%)</title><rect x="1.4911%" y="148" width="1.7287%" height="15" fill="rgb(221,200,47)" fg:x="182" fg:w="211"/><text x="1.7411%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (158 samples, 1.29%)</title><rect x="1.9253%" y="164" width="1.2944%" height="15" fill="rgb(226,26,5)" fg:x="235" fg:w="158"/><text x="2.1753%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (19 samples, 0.16%)</title><rect x="3.0641%" y="180" width="0.1557%" height="15" fill="rgb(249,33,26)" fg:x="374" fg:w="19"/><text x="3.3141%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (67 samples, 0.55%)</title><rect x="3.2771%" y="148" width="0.5489%" height="15" fill="rgb(235,183,28)" fg:x="400" fg:w="67"/><text x="3.5271%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (17 samples, 0.14%)</title><rect x="3.8260%" y="148" width="0.1393%" height="15" fill="rgb(221,5,38)" fg:x="467" fg:w="17"/><text x="4.0760%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (63 samples, 0.52%)</title><rect x="4.8009%" y="180" width="0.5161%" height="15" fill="rgb(247,18,42)" fg:x="586" fg:w="63"/><text x="5.0509%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (43 samples, 0.35%)</title><rect x="4.9648%" y="196" width="0.3523%" height="15" fill="rgb(241,131,45)" fg:x="606" fg:w="43"/><text x="5.2148%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (556 samples, 4.56%)</title><rect x="1.0077%" y="116" width="4.5551%" height="15" fill="rgb(249,31,29)" fg:x="123" fg:w="556"/><text x="1.2577%" y="126.50">apply..</text></g><g><title>_remove_edge (kappybara/mixture.py:191) (544 samples, 4.46%)</title><rect x="1.1060%" y="132" width="4.4568%" height="15" fill="rgb(225,111,53)" fg:x="135" fg:w="544"/><text x="1.3560%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (190 samples, 1.56%)</title><rect x="4.0062%" y="148" width="1.5566%" height="15" fill="rgb(238,160,17)" fg:x="489" fg:w="190"/><text x="4.2562%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (158 samples, 1.29%)</title><rect x="4.2684%" y="164" width="1.2944%" height="15" fill="rgb(214,148,48)" fg:x="521" fg:w="158"/><text x="4.5184%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (24 samples, 0.20%)</title><rect x="5.3662%" y="180" width="0.1966%" height="15" fill="rgb(232,36,49)" fg:x="655" fg:w="24"/><text x="5.6162%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (83 samples, 0.68%)</title><rect x="6.0626%" y="180" width="0.6800%" height="15" fill="rgb(209,103,24)" fg:x="740" fg:w="83"/><text x="6.3126%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (983 samples, 8.05%)</title><rect x="6.7426%" y="180" width="8.0534%" height="15" fill="rgb(229,88,8)" fg:x="823" fg:w="983"/><text x="6.9926%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.34%)</title><rect x="14.4519%" y="196" width="0.3441%" height="15" fill="rgb(213,181,19)" fg:x="1764" fg:w="42"/><text x="14.7019%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (301 samples, 2.47%)</title><rect x="14.7960%" y="180" width="2.4660%" height="15" fill="rgb(254,191,54)" fg:x="1806" fg:w="301"/><text x="15.0460%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.25%)</title><rect x="17.0080%" y="196" width="0.2540%" height="15" fill="rgb(241,83,37)" fg:x="2076" fg:w="31"/><text x="17.2580%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (119 samples, 0.97%)</title><rect x="17.3194%" y="180" width="0.9749%" height="15" fill="rgb(233,36,39)" fg:x="2114" fg:w="119"/><text x="17.5694%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (63 samples, 0.52%)</title><rect x="18.2943%" y="180" width="0.5161%" height="15" fill="rgb(226,3,54)" fg:x="2233" fg:w="63"/><text x="18.5443%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.17%)</title><rect x="20.9897%" y="196" width="0.1720%" height="15" fill="rgb(245,192,40)" fg:x="2562" fg:w="21"/><text x="21.2397%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (331 samples, 2.71%)</title><rect x="18.8104%" y="180" width="2.7118%" height="15" fill="rgb(238,167,29)" fg:x="2296" fg:w="331"/><text x="19.0604%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (44 samples, 0.36%)</title><rect x="21.1617%" y="196" width="0.3605%" height="15" fill="rgb(232,182,51)" fg:x="2583" fg:w="44"/><text x="21.4117%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (325 samples, 2.66%)</title><rect x="21.5222%" y="180" width="2.6626%" height="15" fill="rgb(231,60,39)" fg:x="2627" fg:w="325"/><text x="21.7722%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (13 samples, 0.11%)</title><rect x="25.9299%" y="196" width="0.1065%" height="15" fill="rgb(208,69,12)" fg:x="3165" fg:w="13"/><text x="26.1799%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (130 samples, 1.07%)</title><rect x="26.0364%" y="196" width="1.0650%" height="15" fill="rgb(235,93,37)" fg:x="3178" fg:w="130"/><text x="26.2864%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (152 samples, 1.25%)</title><rect x="28.8874%" y="212" width="1.2453%" height="15" fill="rgb(213,116,39)" fg:x="3526" fg:w="152"/><text x="29.1374%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (123 samples, 1.01%)</title><rect x="31.6484%" y="228" width="1.0077%" height="15" fill="rgb(222,207,29)" fg:x="3863" fg:w="123"/><text x="31.8984%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,062 samples, 8.70%)</title><rect x="27.1260%" y="196" width="8.7006%" height="15" fill="rgb(206,96,30)" fg:x="3311" fg:w="1062"/><text x="27.3760%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (695 samples, 5.69%)</title><rect x="30.1327%" y="212" width="5.6939%" height="15" fill="rgb(218,138,4)" fg:x="3678" fg:w="695"/><text x="30.3827%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (387 samples, 3.17%)</title><rect x="32.6561%" y="228" width="3.1706%" height="15" fill="rgb(250,191,14)" fg:x="3986" fg:w="387"/><text x="32.9061%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (108 samples, 0.88%)</title><rect x="35.8266%" y="196" width="0.8848%" height="15" fill="rgb(239,60,40)" fg:x="4373" fg:w="108"/><text x="36.0766%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (191 samples, 1.56%)</title><rect x="36.7852%" y="196" width="1.5648%" height="15" fill="rgb(206,27,48)" fg:x="4490" fg:w="191"/><text x="37.0352%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (87 samples, 0.71%)</title><rect x="37.6372%" y="212" width="0.7128%" height="15" fill="rgb(225,35,8)" fg:x="4594" fg:w="87"/><text x="37.8872%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (210 samples, 1.72%)</title><rect x="45.8053%" y="212" width="1.7205%" height="15" fill="rgb(250,213,24)" fg:x="5591" fg:w="210"/><text x="46.0553%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (16 samples, 0.13%)</title><rect x="47.5258%" y="212" width="0.1311%" height="15" fill="rgb(247,123,22)" fg:x="5801" fg:w="16"/><text x="47.7758%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (13 samples, 0.11%)</title><rect x="47.9191%" y="228" width="0.1065%" height="15" fill="rgb(231,138,38)" fg:x="5849" fg:w="13"/><text x="48.1691%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (177 samples, 1.45%)</title><rect x="47.6569%" y="212" width="1.4501%" height="15" fill="rgb(231,145,46)" fg:x="5817" fg:w="177"/><text x="47.9069%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (132 samples, 1.08%)</title><rect x="48.0256%" y="228" width="1.0814%" height="15" fill="rgb(251,118,11)" fg:x="5862" fg:w="132"/><text x="48.2756%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (26 samples, 0.21%)</title><rect x="49.8607%" y="228" width="0.2130%" height="15" fill="rgb(217,147,25)" fg:x="6086" fg:w="26"/><text x="50.1107%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (18 samples, 0.15%)</title><rect x="51.7287%" y="244" width="0.1475%" height="15" fill="rgb(247,81,37)" fg:x="6314" fg:w="18"/><text x="51.9787%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.15%)</title><rect x="53.4737%" y="260" width="0.1475%" height="15" fill="rgb(209,12,38)" fg:x="6527" fg:w="18"/><text x="53.7237%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (468 samples, 3.83%)</title><rect x="50.0737%" y="228" width="3.8342%" height="15" fill="rgb(227,1,9)" fg:x="6112" fg:w="468"/><text x="50.3237%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (248 samples, 2.03%)</title><rect x="51.8761%" y="244" width="2.0318%" height="15" fill="rgb(248,47,43)" fg:x="6332" fg:w="248"/><text x="52.1261%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.29%)</title><rect x="53.6212%" y="260" width="0.2867%" height="15" fill="rgb(221,10,30)" fg:x="6545" fg:w="35"/><text x="53.8712%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (293 samples, 2.40%)</title><rect x="53.9079%" y="228" width="2.4005%" height="15" fill="rgb(210,229,1)" fg:x="6580" fg:w="293"/><text x="54.1579%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (104 samples, 0.85%)</title><rect x="56.3084%" y="228" width="0.8520%" height="15" fill="rgb(222,148,37)" fg:x="6873" fg:w="104"/><text x="56.5584%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,030 samples, 8.44%)</title><rect x="49.1070%" y="212" width="8.4385%" height="15" fill="rgb(234,67,33)" fg:x="5994" fg:w="1030"/><text x="49.3570%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (40 samples, 0.33%)</title><rect x="57.2178%" y="228" width="0.3277%" height="15" fill="rgb(247,98,35)" fg:x="6984" fg:w="40"/><text x="57.4678%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (23 samples, 0.19%)</title><rect x="57.5700%" y="212" width="0.1884%" height="15" fill="rgb(247,138,52)" fg:x="7027" fg:w="23"/><text x="57.8200%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (321 samples, 2.63%)</title><rect x="57.7585%" y="212" width="2.6299%" height="15" fill="rgb(213,79,30)" fg:x="7050" fg:w="321"/><text x="58.0085%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (221 samples, 1.81%)</title><rect x="58.5777%" y="228" width="1.8106%" height="15" fill="rgb(246,177,23)" fg:x="7150" fg:w="221"/><text x="58.8277%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.33%)</title><rect x="60.0606%" y="244" width="0.3277%" height="15" fill="rgb(230,62,27)" fg:x="7331" fg:w="40"/><text x="60.3106%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (21 samples, 0.17%)</title><rect x="61.3059%" y="228" width="0.1720%" height="15" fill="rgb(216,154,8)" fg:x="7483" fg:w="21"/><text x="61.5559%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (415 samples, 3.40%)</title><rect x="60.3883%" y="212" width="3.4000%" height="15" fill="rgb(244,35,45)" fg:x="7371" fg:w="415"/><text x="60.6383%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (282 samples, 2.31%)</title><rect x="61.4780%" y="228" width="2.3103%" height="15" fill="rgb(251,115,12)" fg:x="7504" fg:w="282"/><text x="61.7280%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (57 samples, 0.47%)</title><rect x="63.3213%" y="244" width="0.4670%" height="15" fill="rgb(240,54,50)" fg:x="7729" fg:w="57"/><text x="63.5713%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (104 samples, 0.85%)</title><rect x="63.7883%" y="212" width="0.8520%" height="15" fill="rgb(233,84,52)" fg:x="7786" fg:w="104"/><text x="64.0383%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (166 samples, 1.36%)</title><rect x="64.6567%" y="212" width="1.3600%" height="15" fill="rgb(207,117,47)" fg:x="7892" fg:w="166"/><text x="64.9067%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (71 samples, 0.58%)</title><rect x="66.0167%" y="212" width="0.5817%" height="15" fill="rgb(249,43,39)" fg:x="8058" fg:w="71"/><text x="66.2667%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (27 samples, 0.22%)</title><rect x="66.5984%" y="212" width="0.2212%" height="15" fill="rgb(209,38,44)" fg:x="8129" fg:w="27"/><text x="66.8484%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,771 samples, 30.89%)</title><rect x="38.3500%" y="196" width="30.8946%" height="15" fill="rgb(236,212,23)" fg:x="4681" fg:w="3771"/><text x="38.6000%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (296 samples, 2.43%)</title><rect x="66.8196%" y="212" width="2.4250%" height="15" fill="rgb(242,79,21)" fg:x="8156" fg:w="296"/><text x="67.0696%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,558 samples, 45.53%)</title><rect x="24.1848%" y="180" width="45.5350%" height="15" fill="rgb(211,96,35)" fg:x="2952" fg:w="5558"/><text x="24.4348%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (58 samples, 0.48%)</title><rect x="69.2446%" y="196" width="0.4752%" height="15" fill="rgb(253,215,40)" fg:x="8452" fg:w="58"/><text x="69.4946%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (15 samples, 0.12%)</title><rect x="69.7198%" y="180" width="0.1229%" height="15" fill="rgb(211,81,21)" fg:x="8510" fg:w="15"/><text x="69.9698%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (61 samples, 0.50%)</title><rect x="70.8012%" y="196" width="0.4998%" height="15" fill="rgb(208,190,38)" fg:x="8642" fg:w="61"/><text x="71.0512%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (53 samples, 0.43%)</title><rect x="72.3579%" y="212" width="0.4342%" height="15" fill="rgb(235,213,38)" fg:x="8832" fg:w="53"/><text x="72.6079%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (614 samples, 5.03%)</title><rect x="69.8837%" y="180" width="5.0303%" height="15" fill="rgb(237,122,38)" fg:x="8530" fg:w="614"/><text x="70.1337%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (441 samples, 3.61%)</title><rect x="71.3010%" y="196" width="3.6130%" height="15" fill="rgb(244,218,35)" fg:x="8703" fg:w="441"/><text x="71.5510%" y="206.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (259 samples, 2.12%)</title><rect x="72.7921%" y="212" width="2.1219%" height="15" fill="rgb(240,68,47)" fg:x="8885" fg:w="259"/><text x="73.0421%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (90 samples, 0.74%)</title><rect x="74.9140%" y="180" width="0.7373%" height="15" fill="rgb(210,16,53)" fg:x="9144" fg:w="90"/><text x="75.1640%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (35 samples, 0.29%)</title><rect x="75.3646%" y="196" width="0.2867%" height="15" fill="rgb(235,124,12)" fg:x="9199" fg:w="35"/><text x="75.6146%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (21 samples, 0.17%)</title><rect x="75.8479%" y="196" width="0.1720%" height="15" fill="rgb(224,169,11)" fg:x="9258" fg:w="21"/><text x="76.0979%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (75 samples, 0.61%)</title><rect x="75.6513%" y="180" width="0.6145%" height="15" fill="rgb(250,166,2)" fg:x="9234" fg:w="75"/><text x="75.9013%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (30 samples, 0.25%)</title><rect x="76.0200%" y="196" width="0.2458%" height="15" fill="rgb(242,216,29)" fg:x="9279" fg:w="30"/><text x="76.2700%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (243 samples, 1.99%)</title><rect x="76.2658%" y="180" width="1.9908%" height="15" fill="rgb(230,116,27)" fg:x="9309" fg:w="243"/><text x="76.5158%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.33%)</title><rect x="77.9289%" y="196" width="0.3277%" height="15" fill="rgb(228,99,48)" fg:x="9512" fg:w="40"/><text x="78.1789%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (69 samples, 0.57%)</title><rect x="78.2566%" y="180" width="0.5653%" height="15" fill="rgb(253,11,6)" fg:x="9552" fg:w="69"/><text x="78.5066%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (100 samples, 0.82%)</title><rect x="78.8219%" y="180" width="0.8193%" height="15" fill="rgb(247,143,39)" fg:x="9621" fg:w="100"/><text x="79.0719%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (147 samples, 1.20%)</title><rect x="81.5255%" y="196" width="1.2043%" height="15" fill="rgb(236,97,10)" fg:x="9951" fg:w="147"/><text x="81.7755%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.21%)</title><rect x="82.5168%" y="212" width="0.2130%" height="15" fill="rgb(233,208,19)" fg:x="10072" fg:w="26"/><text x="82.7668%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (394 samples, 3.23%)</title><rect x="79.6412%" y="180" width="3.2279%" height="15" fill="rgb(216,164,2)" fg:x="9721" fg:w="394"/><text x="79.8912%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (45 samples, 0.37%)</title><rect x="82.8773%" y="180" width="0.3687%" height="15" fill="rgb(220,129,5)" fg:x="10116" fg:w="45"/><text x="83.1273%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,476 samples, 77.63%)</title><rect x="5.6530%" y="164" width="77.6340%" height="15" fill="rgb(242,17,10)" fg:x="690" fg:w="9476"/><text x="5.9030%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (104 samples, 0.85%)</title><rect x="83.2869%" y="164" width="0.8520%" height="15" fill="rgb(242,107,0)" fg:x="10166" fg:w="104"/><text x="83.5369%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (30 samples, 0.25%)</title><rect x="83.8932%" y="180" width="0.2458%" height="15" fill="rgb(251,28,31)" fg:x="10240" fg:w="30"/><text x="84.1432%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (140 samples, 1.15%)</title><rect x="84.1799%" y="164" width="1.1470%" height="15" fill="rgb(233,223,10)" fg:x="10275" fg:w="140"/><text x="84.4299%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (26 samples, 0.21%)</title><rect x="85.1139%" y="180" width="0.2130%" height="15" fill="rgb(215,21,27)" fg:x="10389" fg:w="26"/><text x="85.3639%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,729 samples, 79.71%)</title><rect x="5.6284%" y="148" width="79.7067%" height="15" fill="rgb(232,23,21)" fg:x="687" fg:w="9729"/><text x="5.8784%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (25 samples, 0.20%)</title><rect x="85.4088%" y="164" width="0.2048%" height="15" fill="rgb(244,5,23)" fg:x="10425" fg:w="25"/><text x="85.6588%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (35 samples, 0.29%)</title><rect x="89.4724%" y="212" width="0.2867%" height="15" fill="rgb(226,81,46)" fg:x="10921" fg:w="35"/><text x="89.7224%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (137 samples, 1.12%)</title><rect x="89.7591%" y="212" width="1.1224%" height="15" fill="rgb(247,70,30)" fg:x="10956" fg:w="137"/><text x="90.0091%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.31%)</title><rect x="90.5702%" y="228" width="0.3113%" height="15" fill="rgb(212,68,19)" fg:x="11055" fg:w="38"/><text x="90.8202%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:104) (16 samples, 0.13%)</title><rect x="90.8815%" y="212" width="0.1311%" height="15" fill="rgb(240,187,13)" fg:x="11093" fg:w="16"/><text x="91.1315%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (26 samples, 0.21%)</title><rect x="91.0126%" y="212" width="0.2130%" height="15" fill="rgb(223,113,26)" fg:x="11109" fg:w="26"/><text x="91.2626%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (737 samples, 6.04%)</title><rect x="85.6136%" y="164" width="6.0380%" height="15" fill="rgb(206,192,2)" fg:x="10450" fg:w="737"/><text x="85.8636%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (526 samples, 4.31%)</title><rect x="87.3423%" y="180" width="4.3094%" height="15" fill="rgb(241,108,4)" fg:x="10661" fg:w="526"/><text x="87.5923%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (464 samples, 3.80%)</title><rect x="87.8502%" y="196" width="3.8014%" height="15" fill="rgb(247,173,49)" fg:x="10723" fg:w="464"/><text x="88.1002%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (52 samples, 0.43%)</title><rect x="91.2256%" y="212" width="0.4260%" height="15" fill="rgb(224,114,35)" fg:x="11135" fg:w="52"/><text x="91.4756%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.20%)</title><rect x="92.9543%" y="180" width="0.2048%" height="15" fill="rgb(245,159,27)" fg:x="11346" fg:w="25"/><text x="93.2043%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (17 samples, 0.14%)</title><rect x="93.1755%" y="180" width="0.1393%" height="15" fill="rgb(245,172,44)" fg:x="11373" fg:w="17"/><text x="93.4255%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (13 samples, 0.11%)</title><rect x="94.4372%" y="196" width="0.1065%" height="15" fill="rgb(236,23,11)" fg:x="11527" fg:w="13"/><text x="94.6872%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (154 samples, 1.26%)</title><rect x="93.5360%" y="180" width="1.2617%" height="15" fill="rgb(205,117,38)" fg:x="11417" fg:w="154"/><text x="93.7860%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (31 samples, 0.25%)</title><rect x="94.5437%" y="196" width="0.2540%" height="15" fill="rgb(237,72,25)" fg:x="11540" fg:w="31"/><text x="94.7937%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (162 samples, 1.33%)</title><rect x="94.7976%" y="180" width="1.3272%" height="15" fill="rgb(244,70,9)" fg:x="11571" fg:w="162"/><text x="95.0476%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (26 samples, 0.21%)</title><rect x="95.9118%" y="196" width="0.2130%" height="15" fill="rgb(217,125,39)" fg:x="11707" fg:w="26"/><text x="96.1618%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (47 samples, 0.39%)</title><rect x="96.1249%" y="180" width="0.3851%" height="15" fill="rgb(235,36,10)" fg:x="11733" fg:w="47"/><text x="96.3749%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (193 samples, 1.58%)</title><rect x="96.5099%" y="180" width="1.5812%" height="15" fill="rgb(251,123,47)" fg:x="11780" fg:w="193"/><text x="96.7599%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (25 samples, 0.20%)</title><rect x="97.8863%" y="196" width="0.2048%" height="15" fill="rgb(221,13,13)" fg:x="11948" fg:w="25"/><text x="98.1363%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,635 samples, 13.40%)</title><rect x="85.3351%" y="148" width="13.3951%" height="15" fill="rgb(238,131,9)" fg:x="10416" fg:w="1635"/><text x="85.5851%" y="158.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (857 samples, 7.02%)</title><rect x="91.7090%" y="164" width="7.0211%" height="15" fill="rgb(211,50,8)" fg:x="11194" fg:w="857"/><text x="91.9590%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:70) (78 samples, 0.64%)</title><rect x="98.0911%" y="180" width="0.6390%" height="15" fill="rgb(245,182,24)" fg:x="11973" fg:w="78"/><text x="98.3411%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:96) (13 samples, 0.11%)</title><rect x="98.7383%" y="148" width="0.1065%" height="15" fill="rgb(242,14,37)" fg:x="12052" fg:w="13"/><text x="98.9883%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (12,038 samples, 98.62%)</title><rect x="1.0077%" y="100" width="98.6236%" height="15" fill="rgb(246,228,12)" fg:x="123" fg:w="12038"/><text x="1.2577%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,479 samples, 94.04%)</title><rect x="5.5874%" y="116" width="94.0439%" height="15" fill="rgb(213,55,15)" fg:x="682" fg:w="11479"/><text x="5.8374%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,479 samples, 94.04%)</title><rect x="5.5874%" y="132" width="94.0439%" height="15" fill="rgb(209,9,3)" fg:x="682" fg:w="11479"/><text x="5.8374%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (96 samples, 0.79%)</title><rect x="98.8448%" y="148" width="0.7865%" height="15" fill="rgb(230,59,30)" fg:x="12065" fg:w="96"/><text x="99.0948%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (12,156 samples, 99.59%)</title><rect x="0.0492%" y="68" width="99.5904%" height="15" fill="rgb(209,121,21)" fg:x="6" fg:w="12156"/><text x="0.2992%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (12,087 samples, 99.03%)</title><rect x="0.6145%" y="84" width="99.0251%" height="15" fill="rgb(220,109,13)" fg:x="75" fg:w="12087"/><text x="0.8645%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>sites (kappybara/pattern.py:111) (15 samples, 0.12%)</title><rect x="99.8443%" y="68" width="0.1229%" height="15" fill="rgb(232,18,1)" fg:x="12187" fg:w="15"/><text x="100.0943%" y="78.50"></text></g><g><title>all (12,206 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="12206"/><text x="0.2500%" y="62.50"></text></g></svg></svg>