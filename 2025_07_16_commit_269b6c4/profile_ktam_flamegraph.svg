<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 269b6c4</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11689"><g><title>update (kappybara/system.py:69) (13 samples, 0.11%)</title><rect x="0.0684%" y="84" width="0.1112%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="13"/><text x="0.3184%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (13 samples, 0.11%)</title><rect x="0.0684%" y="100" width="0.1112%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="13"/><text x="0.3184%" y="110.50"></text></g><g><title>select (kappybara/rule.py:104) (20 samples, 0.17%)</title><rect x="0.2395%" y="116" width="0.1711%" height="15" fill="rgb(221,193,54)" fg:x="28" fg:w="20"/><text x="0.4895%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (29 samples, 0.25%)</title><rect x="0.2224%" y="100" width="0.2481%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="29"/><text x="0.4724%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (15 samples, 0.13%)</title><rect x="0.5390%" y="164" width="0.1283%" height="15" fill="rgb(208,68,35)" fg:x="63" fg:w="15"/><text x="0.7890%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (39 samples, 0.33%)</title><rect x="0.5390%" y="148" width="0.3336%" height="15" fill="rgb(232,128,0)" fg:x="63" fg:w="39"/><text x="0.7890%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (23 samples, 0.20%)</title><rect x="0.6758%" y="164" width="0.1968%" height="15" fill="rgb(207,160,47)" fg:x="79" fg:w="23"/><text x="0.9258%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (51 samples, 0.44%)</title><rect x="0.9239%" y="164" width="0.4363%" height="15" fill="rgb(228,23,34)" fg:x="108" fg:w="51"/><text x="1.1739%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (13 samples, 0.11%)</title><rect x="1.2490%" y="180" width="0.1112%" height="15" fill="rgb(218,30,26)" fg:x="146" fg:w="13"/><text x="1.4990%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (28 samples, 0.24%)</title><rect x="1.7025%" y="180" width="0.2395%" height="15" fill="rgb(220,122,19)" fg:x="199" fg:w="28"/><text x="1.9525%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (26 samples, 0.22%)</title><rect x="1.9420%" y="180" width="0.2224%" height="15" fill="rgb(250,228,42)" fg:x="227" fg:w="26"/><text x="2.1920%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (32 samples, 0.27%)</title><rect x="2.2158%" y="180" width="0.2738%" height="15" fill="rgb(240,193,28)" fg:x="259" fg:w="32"/><text x="2.4658%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (205 samples, 1.75%)</title><rect x="0.8726%" y="148" width="1.7538%" height="15" fill="rgb(216,20,37)" fg:x="102" fg:w="205"/><text x="1.1226%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (147 samples, 1.26%)</title><rect x="1.3688%" y="164" width="1.2576%" height="15" fill="rgb(206,188,39)" fg:x="160" fg:w="147"/><text x="1.6188%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (16 samples, 0.14%)</title><rect x="2.4895%" y="180" width="0.1369%" height="15" fill="rgb(217,207,13)" fg:x="291" fg:w="16"/><text x="2.7395%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (83 samples, 0.71%)</title><rect x="2.6692%" y="148" width="0.7101%" height="15" fill="rgb(231,73,38)" fg:x="312" fg:w="83"/><text x="2.9192%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="3.2680%" y="164" width="0.1112%" height="15" fill="rgb(225,20,46)" fg:x="382" fg:w="13"/><text x="3.5180%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (13 samples, 0.11%)</title><rect x="3.3792%" y="148" width="0.1112%" height="15" fill="rgb(210,31,41)" fg:x="395" fg:w="13"/><text x="3.6292%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (70 samples, 0.60%)</title><rect x="4.4401%" y="180" width="0.5989%" height="15" fill="rgb(221,200,47)" fg:x="519" fg:w="70"/><text x="4.6901%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (39 samples, 0.33%)</title><rect x="4.7053%" y="196" width="0.3336%" height="15" fill="rgb(226,26,5)" fg:x="550" fg:w="39"/><text x="4.9553%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (550 samples, 4.71%)</title><rect x="0.5047%" y="132" width="4.7053%" height="15" fill="rgb(249,33,26)" fg:x="59" fg:w="550"/><text x="0.7547%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (196 samples, 1.68%)</title><rect x="3.5332%" y="148" width="1.6768%" height="15" fill="rgb(235,183,28)" fg:x="413" fg:w="196"/><text x="3.7832%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (155 samples, 1.33%)</title><rect x="3.8840%" y="164" width="1.3260%" height="15" fill="rgb(221,5,38)" fg:x="454" fg:w="155"/><text x="4.1340%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (17 samples, 0.15%)</title><rect x="5.0646%" y="180" width="0.1454%" height="15" fill="rgb(247,18,42)" fg:x="592" fg:w="17"/><text x="5.3146%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (555 samples, 4.75%)</title><rect x="0.4705%" y="116" width="4.7481%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="555"/><text x="0.7205%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:261) (81 samples, 0.69%)</title><rect x="5.7661%" y="180" width="0.6930%" height="15" fill="rgb(249,31,29)" fg:x="674" fg:w="81"/><text x="6.0161%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (976 samples, 8.35%)</title><rect x="6.4591%" y="180" width="8.3497%" height="15" fill="rgb(225,111,53)" fg:x="755" fg:w="976"/><text x="6.7091%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.29%)</title><rect x="14.5179%" y="196" width="0.2909%" height="15" fill="rgb(238,160,17)" fg:x="1697" fg:w="34"/><text x="14.7679%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.13%)</title><rect x="17.1614%" y="196" width="0.1283%" height="15" fill="rgb(214,148,48)" fg:x="2006" fg:w="15"/><text x="17.4114%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (317 samples, 2.71%)</title><rect x="14.8088%" y="180" width="2.7120%" height="15" fill="rgb(232,36,49)" fg:x="1731" fg:w="317"/><text x="15.0588%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.23%)</title><rect x="17.2898%" y="196" width="0.2310%" height="15" fill="rgb(209,103,24)" fg:x="2021" fg:w="27"/><text x="17.5398%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (91 samples, 0.78%)</title><rect x="17.5379%" y="180" width="0.7785%" height="15" fill="rgb(229,88,8)" fg:x="2050" fg:w="91"/><text x="17.7879%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (63 samples, 0.54%)</title><rect x="18.3164%" y="180" width="0.5390%" height="15" fill="rgb(213,181,19)" fg:x="2141" fg:w="63"/><text x="18.5664%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.16%)</title><rect x="21.1566%" y="196" width="0.1625%" height="15" fill="rgb(254,191,54)" fg:x="2473" fg:w="19"/><text x="21.4066%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (341 samples, 2.92%)</title><rect x="18.8553%" y="180" width="2.9173%" height="15" fill="rgb(241,83,37)" fg:x="2204" fg:w="341"/><text x="19.1053%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (53 samples, 0.45%)</title><rect x="21.3192%" y="196" width="0.4534%" height="15" fill="rgb(233,36,39)" fg:x="2492" fg:w="53"/><text x="21.5692%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (279 samples, 2.39%)</title><rect x="21.7726%" y="180" width="2.3869%" height="15" fill="rgb(226,3,54)" fg:x="2545" fg:w="279"/><text x="22.0226%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (17 samples, 0.15%)</title><rect x="25.6823%" y="196" width="0.1454%" height="15" fill="rgb(245,192,40)" fg:x="3002" fg:w="17"/><text x="25.9323%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (95 samples, 0.81%)</title><rect x="25.8277%" y="196" width="0.8127%" height="15" fill="rgb(238,167,29)" fg:x="3019" fg:w="95"/><text x="26.0777%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (130 samples, 1.11%)</title><rect x="28.3686%" y="212" width="1.1122%" height="15" fill="rgb(232,182,51)" fg:x="3316" fg:w="130"/><text x="28.6186%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (95 samples, 0.81%)</title><rect x="30.9265%" y="228" width="0.8127%" height="15" fill="rgb(231,60,39)" fg:x="3615" fg:w="95"/><text x="31.1765%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (961 samples, 8.22%)</title><rect x="26.6918%" y="196" width="8.2214%" height="15" fill="rgb(208,69,12)" fg:x="3120" fg:w="961"/><text x="26.9418%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (635 samples, 5.43%)</title><rect x="29.4807%" y="212" width="5.4325%" height="15" fill="rgb(235,93,37)" fg:x="3446" fg:w="635"/><text x="29.7307%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (371 samples, 3.17%)</title><rect x="31.7392%" y="228" width="3.1739%" height="15" fill="rgb(213,116,39)" fg:x="3710" fg:w="371"/><text x="31.9892%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (96 samples, 0.82%)</title><rect x="34.9132%" y="196" width="0.8213%" height="15" fill="rgb(222,207,29)" fg:x="4081" fg:w="96"/><text x="35.1632%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (17 samples, 0.15%)</title><rect x="36.6670%" y="212" width="0.1454%" height="15" fill="rgb(206,96,30)" fg:x="4286" fg:w="17"/><text x="36.9170%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (180 samples, 1.54%)</title><rect x="35.7858%" y="196" width="1.5399%" height="15" fill="rgb(218,138,4)" fg:x="4183" fg:w="180"/><text x="36.0358%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (60 samples, 0.51%)</title><rect x="36.8124%" y="212" width="0.5133%" height="15" fill="rgb(250,191,14)" fg:x="4303" fg:w="60"/><text x="37.0624%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (200 samples, 1.71%)</title><rect x="46.0946%" y="212" width="1.7110%" height="15" fill="rgb(239,60,40)" fg:x="5388" fg:w="200"/><text x="46.3446%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (14 samples, 0.12%)</title><rect x="47.8056%" y="212" width="0.1198%" height="15" fill="rgb(206,27,48)" fg:x="5588" fg:w="14"/><text x="48.0556%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (193 samples, 1.65%)</title><rect x="47.9254%" y="212" width="1.6511%" height="15" fill="rgb(225,35,8)" fg:x="5602" fg:w="193"/><text x="48.1754%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (143 samples, 1.22%)</title><rect x="48.3532%" y="228" width="1.2234%" height="15" fill="rgb(250,213,24)" fg:x="5652" fg:w="143"/><text x="48.6032%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (15 samples, 0.13%)</title><rect x="50.3978%" y="228" width="0.1283%" height="15" fill="rgb(247,123,22)" fg:x="5891" fg:w="15"/><text x="50.6478%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.13%)</title><rect x="52.4510%" y="244" width="0.1283%" height="15" fill="rgb(231,138,38)" fg:x="6131" fg:w="15"/><text x="52.7010%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.10%)</title><rect x="54.2219%" y="260" width="0.1027%" height="15" fill="rgb(231,145,46)" fg:x="6338" fg:w="12"/><text x="54.4719%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (484 samples, 4.14%)</title><rect x="50.5261%" y="228" width="4.1406%" height="15" fill="rgb(251,118,11)" fg:x="5906" fg:w="484"/><text x="50.7761%" y="238.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (244 samples, 2.09%)</title><rect x="52.5793%" y="244" width="2.0874%" height="15" fill="rgb(217,147,25)" fg:x="6146" fg:w="244"/><text x="52.8293%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.34%)</title><rect x="54.3246%" y="260" width="0.3422%" height="15" fill="rgb(247,81,37)" fg:x="6350" fg:w="40"/><text x="54.5746%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (277 samples, 2.37%)</title><rect x="54.6668%" y="228" width="2.3697%" height="15" fill="rgb(209,12,38)" fg:x="6390" fg:w="277"/><text x="54.9168%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (119 samples, 1.02%)</title><rect x="57.0365%" y="228" width="1.0181%" height="15" fill="rgb(227,1,9)" fg:x="6667" fg:w="119"/><text x="57.2865%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.12%)</title><rect x="58.0546%" y="228" width="0.1198%" height="15" fill="rgb(248,47,43)" fg:x="6786" fg:w="14"/><text x="58.3046%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,040 samples, 8.90%)</title><rect x="49.5765%" y="212" width="8.8973%" height="15" fill="rgb(221,10,30)" fg:x="5795" fg:w="1040"/><text x="49.8265%" y="222.50">embeds_in (ka..</text></g><g><title>coupled (kappybara/pattern.py:66) (35 samples, 0.30%)</title><rect x="58.1744%" y="228" width="0.2994%" height="15" fill="rgb(210,229,1)" fg:x="6800" fg:w="35"/><text x="58.4244%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (19 samples, 0.16%)</title><rect x="58.5166%" y="212" width="0.1625%" height="15" fill="rgb(222,148,37)" fg:x="6840" fg:w="19"/><text x="58.7666%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (283 samples, 2.42%)</title><rect x="58.6791%" y="212" width="2.4211%" height="15" fill="rgb(234,67,33)" fg:x="6859" fg:w="283"/><text x="58.9291%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (169 samples, 1.45%)</title><rect x="59.6544%" y="228" width="1.4458%" height="15" fill="rgb(247,98,35)" fg:x="6973" fg:w="169"/><text x="59.9044%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="60.8179%" y="244" width="0.2823%" height="15" fill="rgb(247,138,52)" fg:x="7109" fg:w="33"/><text x="61.0679%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.10%)</title><rect x="62.1867%" y="228" width="0.1027%" height="15" fill="rgb(213,79,30)" fg:x="7269" fg:w="12"/><text x="62.4367%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (451 samples, 3.86%)</title><rect x="61.1002%" y="212" width="3.8583%" height="15" fill="rgb(246,177,23)" fg:x="7142" fg:w="451"/><text x="61.3502%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (312 samples, 2.67%)</title><rect x="62.2893%" y="228" width="2.6692%" height="15" fill="rgb(230,62,27)" fg:x="7281" fg:w="312"/><text x="62.5393%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (69 samples, 0.59%)</title><rect x="64.3682%" y="244" width="0.5903%" height="15" fill="rgb(216,154,8)" fg:x="7524" fg:w="69"/><text x="64.6182%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (68 samples, 0.58%)</title><rect x="64.9585%" y="212" width="0.5817%" height="15" fill="rgb(244,35,45)" fg:x="7593" fg:w="68"/><text x="65.2085%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (180 samples, 1.54%)</title><rect x="65.5574%" y="212" width="1.5399%" height="15" fill="rgb(251,115,12)" fg:x="7663" fg:w="180"/><text x="65.8074%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (80 samples, 0.68%)</title><rect x="67.0973%" y="212" width="0.6844%" height="15" fill="rgb(240,54,50)" fg:x="7843" fg:w="80"/><text x="67.3473%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (18 samples, 0.15%)</title><rect x="67.7817%" y="212" width="0.1540%" height="15" fill="rgb(233,84,52)" fg:x="7923" fg:w="18"/><text x="68.0317%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,865 samples, 33.07%)</title><rect x="37.3257%" y="196" width="33.0653%" height="15" fill="rgb(207,117,47)" fg:x="4363" fg:w="3865"/><text x="37.5757%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (287 samples, 2.46%)</title><rect x="67.9357%" y="212" width="2.4553%" height="15" fill="rgb(249,43,39)" fg:x="7941" fg:w="287"/><text x="68.1857%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,455 samples, 46.67%)</title><rect x="24.1595%" y="180" width="46.6678%" height="15" fill="rgb(209,38,44)" fg:x="2824" fg:w="5455"/><text x="24.4095%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (51 samples, 0.44%)</title><rect x="70.3910%" y="196" width="0.4363%" height="15" fill="rgb(236,212,23)" fg:x="8228" fg:w="51"/><text x="70.6410%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (62 samples, 0.53%)</title><rect x="71.8025%" y="196" width="0.5304%" height="15" fill="rgb(242,79,21)" fg:x="8393" fg:w="62"/><text x="72.0525%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (42 samples, 0.36%)</title><rect x="73.2740%" y="212" width="0.3593%" height="15" fill="rgb(211,96,35)" fg:x="8565" fg:w="42"/><text x="73.5240%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (512 samples, 4.38%)</title><rect x="70.9214%" y="180" width="4.3802%" height="15" fill="rgb(253,215,40)" fg:x="8290" fg:w="512"/><text x="71.1714%" y="190.50">embed..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (347 samples, 2.97%)</title><rect x="72.3330%" y="196" width="2.9686%" height="15" fill="rgb(211,81,21)" fg:x="8455" fg:w="347"/><text x="72.5830%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (195 samples, 1.67%)</title><rect x="73.6333%" y="212" width="1.6682%" height="15" fill="rgb(208,190,38)" fg:x="8607" fg:w="195"/><text x="73.8833%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (88 samples, 0.75%)</title><rect x="75.3016%" y="180" width="0.7528%" height="15" fill="rgb(235,213,38)" fg:x="8802" fg:w="88"/><text x="75.5516%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (32 samples, 0.27%)</title><rect x="75.7806%" y="196" width="0.2738%" height="15" fill="rgb(237,122,38)" fg:x="8858" fg:w="32"/><text x="76.0306%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (80 samples, 0.68%)</title><rect x="76.0544%" y="180" width="0.6844%" height="15" fill="rgb(244,218,35)" fg:x="8890" fg:w="80"/><text x="76.3044%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (42 samples, 0.36%)</title><rect x="76.3795%" y="196" width="0.3593%" height="15" fill="rgb(240,68,47)" fg:x="8928" fg:w="42"/><text x="76.6295%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.10%)</title><rect x="78.2274%" y="196" width="0.1027%" height="15" fill="rgb(210,16,53)" fg:x="9144" fg:w="12"/><text x="78.4774%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (209 samples, 1.79%)</title><rect x="76.7388%" y="180" width="1.7880%" height="15" fill="rgb(235,124,12)" fg:x="8970" fg:w="209"/><text x="76.9888%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.20%)</title><rect x="78.3301%" y="196" width="0.1968%" height="15" fill="rgb(224,169,11)" fg:x="9156" fg:w="23"/><text x="78.5801%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (62 samples, 0.53%)</title><rect x="78.5268%" y="180" width="0.5304%" height="15" fill="rgb(250,166,2)" fg:x="9179" fg:w="62"/><text x="78.7768%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.12%)</title><rect x="78.9375%" y="196" width="0.1198%" height="15" fill="rgb(242,216,29)" fg:x="9227" fg:w="14"/><text x="79.1875%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (73 samples, 0.62%)</title><rect x="79.0572%" y="180" width="0.6245%" height="15" fill="rgb(230,116,27)" fg:x="9241" fg:w="73"/><text x="79.3072%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (160 samples, 1.37%)</title><rect x="81.4612%" y="196" width="1.3688%" height="15" fill="rgb(228,99,48)" fg:x="9522" fg:w="160"/><text x="81.7112%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.23%)</title><rect x="82.5990%" y="212" width="0.2310%" height="15" fill="rgb(253,11,6)" fg:x="9655" fg:w="27"/><text x="82.8490%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (384 samples, 3.29%)</title><rect x="79.6818%" y="180" width="3.2851%" height="15" fill="rgb(247,143,39)" fg:x="9314" fg:w="384"/><text x="79.9318%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (33 samples, 0.28%)</title><rect x="82.9754%" y="180" width="0.2823%" height="15" fill="rgb(236,97,10)" fg:x="9699" fg:w="33"/><text x="83.2254%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,120 samples, 78.02%)</title><rect x="5.3555%" y="164" width="78.0221%" height="15" fill="rgb(233,208,19)" fg:x="626" fg:w="9120"/><text x="5.6055%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (90 samples, 0.77%)</title><rect x="83.3775%" y="164" width="0.7700%" height="15" fill="rgb(216,164,2)" fg:x="9746" fg:w="90"/><text x="83.6275%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (24 samples, 0.21%)</title><rect x="83.9422%" y="180" width="0.2053%" height="15" fill="rgb(220,129,5)" fg:x="9812" fg:w="24"/><text x="84.1922%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (129 samples, 1.10%)</title><rect x="84.1903%" y="164" width="1.1036%" height="15" fill="rgb(242,17,10)" fg:x="9841" fg:w="129"/><text x="84.4403%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (26 samples, 0.22%)</title><rect x="85.0714%" y="180" width="0.2224%" height="15" fill="rgb(242,107,0)" fg:x="9944" fg:w="26"/><text x="85.3214%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,350 samples, 79.99%)</title><rect x="5.3384%" y="148" width="79.9897%" height="15" fill="rgb(251,28,31)" fg:x="624" fg:w="9350"/><text x="5.5884%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (22 samples, 0.19%)</title><rect x="85.4051%" y="164" width="0.1882%" height="15" fill="rgb(233,223,10)" fg:x="9983" fg:w="22"/><text x="85.6551%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (45 samples, 0.38%)</title><rect x="89.3490%" y="212" width="0.3850%" height="15" fill="rgb(215,21,27)" fg:x="10444" fg:w="45"/><text x="89.5990%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (150 samples, 1.28%)</title><rect x="89.7339%" y="212" width="1.2833%" height="15" fill="rgb(232,23,21)" fg:x="10489" fg:w="150"/><text x="89.9839%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.27%)</title><rect x="90.7520%" y="228" width="0.2652%" height="15" fill="rgb(244,5,23)" fg:x="10608" fg:w="31"/><text x="91.0020%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (35 samples, 0.30%)</title><rect x="91.1113%" y="212" width="0.2994%" height="15" fill="rgb(226,81,46)" fg:x="10650" fg:w="35"/><text x="91.3613%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (746 samples, 6.38%)</title><rect x="85.5933%" y="164" width="6.3821%" height="15" fill="rgb(247,70,30)" fg:x="10005" fg:w="746"/><text x="85.8433%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (545 samples, 4.66%)</title><rect x="87.3129%" y="180" width="4.6625%" height="15" fill="rgb(212,68,19)" fg:x="10206" fg:w="545"/><text x="87.5629%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (478 samples, 4.09%)</title><rect x="87.8860%" y="196" width="4.0893%" height="15" fill="rgb(240,187,13)" fg:x="10273" fg:w="478"/><text x="88.1360%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (66 samples, 0.56%)</title><rect x="91.4107%" y="212" width="0.5646%" height="15" fill="rgb(223,113,26)" fg:x="10685" fg:w="66"/><text x="91.6607%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="93.5153%" y="180" width="0.2139%" height="15" fill="rgb(206,192,2)" fg:x="10931" fg:w="25"/><text x="93.7653%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (137 samples, 1.17%)</title><rect x="94.0029%" y="180" width="1.1720%" height="15" fill="rgb(241,108,4)" fg:x="10988" fg:w="137"/><text x="94.2529%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (31 samples, 0.27%)</title><rect x="94.9097%" y="196" width="0.2652%" height="15" fill="rgb(247,173,49)" fg:x="11094" fg:w="31"/><text x="95.1597%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (137 samples, 1.17%)</title><rect x="95.1750%" y="180" width="1.1720%" height="15" fill="rgb(224,114,35)" fg:x="11125" fg:w="137"/><text x="95.4250%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (21 samples, 0.18%)</title><rect x="96.1673%" y="196" width="0.1797%" height="15" fill="rgb(245,159,27)" fg:x="11241" fg:w="21"/><text x="96.4173%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (45 samples, 0.38%)</title><rect x="96.3470%" y="180" width="0.3850%" height="15" fill="rgb(245,172,44)" fg:x="11262" fg:w="45"/><text x="96.5970%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (174 samples, 1.49%)</title><rect x="96.7320%" y="180" width="1.4886%" height="15" fill="rgb(236,23,11)" fg:x="11307" fg:w="174"/><text x="96.9820%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (20 samples, 0.17%)</title><rect x="98.0494%" y="196" width="0.1711%" height="15" fill="rgb(205,117,38)" fg:x="11461" fg:w="20"/><text x="98.2994%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,585 samples, 13.56%)</title><rect x="85.3281%" y="148" width="13.5598%" height="15" fill="rgb(237,72,25)" fg:x="9974" fg:w="1585"/><text x="85.5781%" y="158.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (796 samples, 6.81%)</title><rect x="92.0780%" y="164" width="6.8098%" height="15" fill="rgb(244,70,9)" fg:x="10763" fg:w="796"/><text x="92.3280%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:70) (78 samples, 0.67%)</title><rect x="98.2205%" y="180" width="0.6673%" height="15" fill="rgb(217,125,39)" fg:x="11481" fg:w="78"/><text x="98.4705%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (11,637 samples, 99.56%)</title><rect x="0.0684%" y="68" width="99.5551%" height="15" fill="rgb(235,36,10)" fg:x="8" fg:w="11637"/><text x="0.3184%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,624 samples, 99.44%)</title><rect x="0.1797%" y="84" width="99.4439%" height="15" fill="rgb(251,123,47)" fg:x="21" fg:w="11624"/><text x="0.4297%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (11,590 samples, 99.15%)</title><rect x="0.4705%" y="100" width="99.1530%" height="15" fill="rgb(221,13,13)" fg:x="55" fg:w="11590"/><text x="0.7205%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,025 samples, 94.32%)</title><rect x="5.3041%" y="116" width="94.3194%" height="15" fill="rgb(238,131,9)" fg:x="620" fg:w="11025"/><text x="5.5541%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,024 samples, 94.31%)</title><rect x="5.3127%" y="132" width="94.3109%" height="15" fill="rgb(211,50,8)" fg:x="621" fg:w="11024"/><text x="5.5627%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (78 samples, 0.67%)</title><rect x="98.9563%" y="148" width="0.6673%" height="15" fill="rgb(245,182,24)" fg:x="11567" fg:w="78"/><text x="99.2063%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:111) (17 samples, 0.15%)</title><rect x="99.8203%" y="68" width="0.1454%" height="15" fill="rgb(242,14,37)" fg:x="11668" fg:w="17"/><text x="100.0703%" y="78.50"></text></g><g><title>all (11,689 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="11689"/><text x="0.2500%" y="62.50"></text></g></svg></svg>