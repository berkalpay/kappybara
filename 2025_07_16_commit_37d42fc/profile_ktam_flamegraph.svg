<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 37d42fc</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11826"><g><title>update (kappybara/system.py:69) (13 samples, 0.11%)</title><rect x="0.0592%" y="84" width="0.1099%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="13"/><text x="0.3092%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (13 samples, 0.11%)</title><rect x="0.0592%" y="100" width="0.1099%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="13"/><text x="0.3092%" y="110.50"></text></g><g><title>select (kappybara/rule.py:104) (29 samples, 0.25%)</title><rect x="0.2537%" y="116" width="0.2452%" height="15" fill="rgb(221,193,54)" fg:x="30" fg:w="29"/><text x="0.5037%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (40 samples, 0.34%)</title><rect x="0.2368%" y="100" width="0.3382%" height="15" fill="rgb(248,212,6)" fg:x="28" fg:w="40"/><text x="0.4868%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (13 samples, 0.11%)</title><rect x="0.6849%" y="164" width="0.1099%" height="15" fill="rgb(208,68,35)" fg:x="81" fg:w="13"/><text x="0.9349%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (19 samples, 0.16%)</title><rect x="0.7949%" y="164" width="0.1607%" height="15" fill="rgb(232,128,0)" fg:x="94" fg:w="19"/><text x="1.0449%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (36 samples, 0.30%)</title><rect x="0.6596%" y="148" width="0.3044%" height="15" fill="rgb(207,160,47)" fg:x="78" fg:w="36"/><text x="0.9096%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (62 samples, 0.52%)</title><rect x="0.9978%" y="164" width="0.5243%" height="15" fill="rgb(228,23,34)" fg:x="118" fg:w="62"/><text x="1.2478%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (16 samples, 0.14%)</title><rect x="1.3868%" y="180" width="0.1353%" height="15" fill="rgb(218,30,26)" fg:x="164" fg:w="16"/><text x="1.6368%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (23 samples, 0.19%)</title><rect x="1.7504%" y="180" width="0.1945%" height="15" fill="rgb(220,122,19)" fg:x="207" fg:w="23"/><text x="2.0004%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (24 samples, 0.20%)</title><rect x="1.9449%" y="180" width="0.2029%" height="15" fill="rgb(250,228,42)" fg:x="230" fg:w="24"/><text x="2.1949%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (34 samples, 0.29%)</title><rect x="2.2408%" y="180" width="0.2875%" height="15" fill="rgb(240,193,28)" fg:x="265" fg:w="34"/><text x="2.4908%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (201 samples, 1.70%)</title><rect x="0.9640%" y="148" width="1.6996%" height="15" fill="rgb(216,20,37)" fg:x="114" fg:w="201"/><text x="1.2140%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (132 samples, 1.12%)</title><rect x="1.5474%" y="164" width="1.1162%" height="15" fill="rgb(206,188,39)" fg:x="183" fg:w="132"/><text x="1.7974%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (16 samples, 0.14%)</title><rect x="2.5283%" y="180" width="0.1353%" height="15" fill="rgb(217,207,13)" fg:x="299" fg:w="16"/><text x="2.7783%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (87 samples, 0.74%)</title><rect x="2.6890%" y="148" width="0.7357%" height="15" fill="rgb(231,73,38)" fg:x="318" fg:w="87"/><text x="2.9390%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (19 samples, 0.16%)</title><rect x="3.4247%" y="148" width="0.1607%" height="15" fill="rgb(225,20,46)" fg:x="405" fg:w="19"/><text x="3.6747%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (80 samples, 0.68%)</title><rect x="4.6169%" y="180" width="0.6765%" height="15" fill="rgb(210,31,41)" fg:x="546" fg:w="80"/><text x="4.8669%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (41 samples, 0.35%)</title><rect x="4.9467%" y="196" width="0.3467%" height="15" fill="rgb(221,200,47)" fg:x="585" fg:w="41"/><text x="5.1967%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (575 samples, 4.86%)</title><rect x="0.6257%" y="132" width="4.8622%" height="15" fill="rgb(226,26,5)" fg:x="74" fg:w="575"/><text x="0.8757%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (220 samples, 1.86%)</title><rect x="3.6276%" y="148" width="1.8603%" height="15" fill="rgb(249,33,26)" fg:x="429" fg:w="220"/><text x="3.8776%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:122) (181 samples, 1.53%)</title><rect x="3.9574%" y="164" width="1.5305%" height="15" fill="rgb(235,183,28)" fg:x="468" fg:w="181"/><text x="4.2074%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (20 samples, 0.17%)</title><rect x="5.3188%" y="180" width="0.1691%" height="15" fill="rgb(221,5,38)" fg:x="629" fg:w="20"/><text x="5.5688%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (582 samples, 4.92%)</title><rect x="0.5750%" y="116" width="4.9214%" height="15" fill="rgb(247,18,42)" fg:x="68" fg:w="582"/><text x="0.8250%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:261) (73 samples, 0.62%)</title><rect x="6.1221%" y="180" width="0.6173%" height="15" fill="rgb(241,131,45)" fg:x="724" fg:w="73"/><text x="6.3721%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (24 samples, 0.20%)</title><rect x="14.2314%" y="196" width="0.2029%" height="15" fill="rgb(249,31,29)" fg:x="1683" fg:w="24"/><text x="14.4814%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (950 samples, 8.03%)</title><rect x="6.7394%" y="180" width="8.0331%" height="15" fill="rgb(225,111,53)" fg:x="797" fg:w="950"/><text x="6.9894%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.34%)</title><rect x="14.4343%" y="196" width="0.3382%" height="15" fill="rgb(238,160,17)" fg:x="1707" fg:w="40"/><text x="14.6843%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.18%)</title><rect x="17.5292%" y="196" width="0.1776%" height="15" fill="rgb(214,148,48)" fg:x="2073" fg:w="21"/><text x="17.7792%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (380 samples, 3.21%)</title><rect x="14.7725%" y="180" width="3.2133%" height="15" fill="rgb(232,36,49)" fg:x="1747" fg:w="380"/><text x="15.0225%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="17.7067%" y="196" width="0.2790%" height="15" fill="rgb(209,103,24)" fg:x="2094" fg:w="33"/><text x="17.9567%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (78 samples, 0.66%)</title><rect x="18.0196%" y="180" width="0.6596%" height="15" fill="rgb(229,88,8)" fg:x="2131" fg:w="78"/><text x="18.2696%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (60 samples, 0.51%)</title><rect x="18.6792%" y="180" width="0.5074%" height="15" fill="rgb(213,181,19)" fg:x="2209" fg:w="60"/><text x="18.9292%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.19%)</title><rect x="21.4696%" y="196" width="0.1945%" height="15" fill="rgb(254,191,54)" fg:x="2539" fg:w="23"/><text x="21.7196%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (326 samples, 2.76%)</title><rect x="19.1865%" y="180" width="2.7566%" height="15" fill="rgb(241,83,37)" fg:x="2269" fg:w="326"/><text x="19.4365%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="21.6641%" y="196" width="0.2790%" height="15" fill="rgb(233,36,39)" fg:x="2562" fg:w="33"/><text x="21.9141%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (279 samples, 2.36%)</title><rect x="21.9432%" y="180" width="2.3592%" height="15" fill="rgb(226,3,54)" fg:x="2595" fg:w="279"/><text x="22.1932%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (20 samples, 0.17%)</title><rect x="26.1542%" y="196" width="0.1691%" height="15" fill="rgb(245,192,40)" fg:x="3093" fg:w="20"/><text x="26.4042%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (97 samples, 0.82%)</title><rect x="26.3234%" y="196" width="0.8202%" height="15" fill="rgb(238,167,29)" fg:x="3113" fg:w="97"/><text x="26.5734%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (127 samples, 1.07%)</title><rect x="28.7333%" y="212" width="1.0739%" height="15" fill="rgb(232,182,51)" fg:x="3398" fg:w="127"/><text x="28.9833%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (91 samples, 0.77%)</title><rect x="31.8113%" y="228" width="0.7695%" height="15" fill="rgb(231,60,39)" fg:x="3762" fg:w="91"/><text x="32.0613%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (956 samples, 8.08%)</title><rect x="27.1605%" y="196" width="8.0839%" height="15" fill="rgb(208,69,12)" fg:x="3212" fg:w="956"/><text x="27.4105%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (643 samples, 5.44%)</title><rect x="29.8072%" y="212" width="5.4372%" height="15" fill="rgb(235,93,37)" fg:x="3525" fg:w="643"/><text x="30.0572%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (315 samples, 2.66%)</title><rect x="32.5808%" y="228" width="2.6636%" height="15" fill="rgb(213,116,39)" fg:x="3853" fg:w="315"/><text x="32.8308%" y="238.50">si..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (126 samples, 1.07%)</title><rect x="35.2444%" y="196" width="1.0654%" height="15" fill="rgb(222,207,29)" fg:x="4168" fg:w="126"/><text x="35.4944%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (19 samples, 0.16%)</title><rect x="37.1554%" y="212" width="0.1607%" height="15" fill="rgb(206,96,30)" fg:x="4394" fg:w="19"/><text x="37.4054%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (185 samples, 1.56%)</title><rect x="36.3690%" y="196" width="1.5643%" height="15" fill="rgb(218,138,4)" fg:x="4301" fg:w="185"/><text x="36.6190%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (73 samples, 0.62%)</title><rect x="37.3161%" y="212" width="0.6173%" height="15" fill="rgb(250,191,14)" fg:x="4413" fg:w="73"/><text x="37.5661%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (205 samples, 1.73%)</title><rect x="45.6452%" y="212" width="1.7335%" height="15" fill="rgb(239,60,40)" fg:x="5398" fg:w="205"/><text x="45.8952%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (17 samples, 0.14%)</title><rect x="47.9198%" y="228" width="0.1438%" height="15" fill="rgb(206,27,48)" fg:x="5667" fg:w="17"/><text x="48.1698%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (174 samples, 1.47%)</title><rect x="47.4632%" y="212" width="1.4713%" height="15" fill="rgb(225,35,8)" fg:x="5613" fg:w="174"/><text x="47.7132%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (103 samples, 0.87%)</title><rect x="48.0636%" y="228" width="0.8710%" height="15" fill="rgb(250,213,24)" fg:x="5684" fg:w="103"/><text x="48.3136%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (14 samples, 0.12%)</title><rect x="49.9577%" y="228" width="0.1184%" height="15" fill="rgb(247,123,22)" fg:x="5908" fg:w="14"/><text x="50.2077%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.14%)</title><rect x="51.8603%" y="244" width="0.1438%" height="15" fill="rgb(231,138,38)" fg:x="6133" fg:w="17"/><text x="52.1103%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (466 samples, 3.94%)</title><rect x="50.0761%" y="228" width="3.9405%" height="15" fill="rgb(231,145,46)" fg:x="5922" fg:w="466"/><text x="50.3261%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (238 samples, 2.01%)</title><rect x="52.0041%" y="244" width="2.0125%" height="15" fill="rgb(251,118,11)" fg:x="6150" fg:w="238"/><text x="52.2541%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.33%)</title><rect x="53.6868%" y="260" width="0.3298%" height="15" fill="rgb(217,147,25)" fg:x="6349" fg:w="39"/><text x="53.9368%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (244 samples, 2.06%)</title><rect x="54.0166%" y="228" width="2.0633%" height="15" fill="rgb(247,81,37)" fg:x="6388" fg:w="244"/><text x="54.2666%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (74 samples, 0.63%)</title><rect x="56.0798%" y="228" width="0.6257%" height="15" fill="rgb(209,12,38)" fg:x="6632" fg:w="74"/><text x="56.3298%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.12%)</title><rect x="56.7056%" y="228" width="0.1184%" height="15" fill="rgb(227,1,9)" fg:x="6706" fg:w="14"/><text x="56.9556%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (970 samples, 8.20%)</title><rect x="48.9346%" y="212" width="8.2023%" height="15" fill="rgb(248,47,43)" fg:x="5787" fg:w="970"/><text x="49.1846%" y="222.50">embeds_in (..</text></g><g><title>coupled (kappybara/pattern.py:66) (37 samples, 0.31%)</title><rect x="56.8239%" y="228" width="0.3129%" height="15" fill="rgb(221,10,30)" fg:x="6720" fg:w="37"/><text x="57.0739%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (33 samples, 0.28%)</title><rect x="57.1960%" y="212" width="0.2790%" height="15" fill="rgb(210,229,1)" fg:x="6764" fg:w="33"/><text x="57.4460%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (20 samples, 0.17%)</title><rect x="58.1431%" y="228" width="0.1691%" height="15" fill="rgb(222,148,37)" fg:x="6876" fg:w="20"/><text x="58.3931%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.10%)</title><rect x="59.3185%" y="244" width="0.1015%" height="15" fill="rgb(234,67,33)" fg:x="7015" fg:w="12"/><text x="59.5685%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (251 samples, 2.12%)</title><rect x="57.4751%" y="212" width="2.1224%" height="15" fill="rgb(247,98,35)" fg:x="6797" fg:w="251"/><text x="57.7251%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (152 samples, 1.29%)</title><rect x="58.3122%" y="228" width="1.2853%" height="15" fill="rgb(247,138,52)" fg:x="6896" fg:w="152"/><text x="58.5622%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.18%)</title><rect x="59.4199%" y="244" width="0.1776%" height="15" fill="rgb(213,79,30)" fg:x="7027" fg:w="21"/><text x="59.6699%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.14%)</title><rect x="60.9335%" y="228" width="0.1438%" height="15" fill="rgb(246,177,23)" fg:x="7206" fg:w="17"/><text x="61.1835%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (433 samples, 3.66%)</title><rect x="59.5975%" y="212" width="3.6614%" height="15" fill="rgb(230,62,27)" fg:x="7048" fg:w="433"/><text x="59.8475%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (258 samples, 2.18%)</title><rect x="61.0773%" y="228" width="2.1816%" height="15" fill="rgb(216,154,8)" fg:x="7223" fg:w="258"/><text x="61.3273%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.25%)</title><rect x="63.0137%" y="244" width="0.2452%" height="15" fill="rgb(244,35,45)" fg:x="7452" fg:w="29"/><text x="63.2637%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (69 samples, 0.58%)</title><rect x="63.2589%" y="212" width="0.5835%" height="15" fill="rgb(251,115,12)" fg:x="7481" fg:w="69"/><text x="63.5089%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (147 samples, 1.24%)</title><rect x="63.8424%" y="212" width="1.2430%" height="15" fill="rgb(240,54,50)" fg:x="7550" fg:w="147"/><text x="64.0924%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (106 samples, 0.90%)</title><rect x="65.0854%" y="212" width="0.8963%" height="15" fill="rgb(233,84,52)" fg:x="7697" fg:w="106"/><text x="65.3354%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (23 samples, 0.19%)</title><rect x="65.9817%" y="212" width="0.1945%" height="15" fill="rgb(207,117,47)" fg:x="7803" fg:w="23"/><text x="66.2317%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,655 samples, 30.91%)</title><rect x="37.9334%" y="196" width="30.9065%" height="15" fill="rgb(249,43,39)" fg:x="4486" fg:w="3655"/><text x="38.1834%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (315 samples, 2.66%)</title><rect x="66.1762%" y="212" width="2.6636%" height="15" fill="rgb(209,38,44)" fg:x="7826" fg:w="315"/><text x="66.4262%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,321 samples, 44.99%)</title><rect x="24.3024%" y="180" width="44.9941%" height="15" fill="rgb(236,212,23)" fg:x="2874" fg:w="5321"/><text x="24.5524%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (54 samples, 0.46%)</title><rect x="68.8398%" y="196" width="0.4566%" height="15" fill="rgb(242,79,21)" fg:x="8141" fg:w="54"/><text x="69.0898%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (46 samples, 0.39%)</title><rect x="70.4042%" y="196" width="0.3890%" height="15" fill="rgb(211,96,35)" fg:x="8326" fg:w="46"/><text x="70.6542%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (56 samples, 0.47%)</title><rect x="71.9601%" y="212" width="0.4735%" height="15" fill="rgb(253,215,40)" fg:x="8510" fg:w="56"/><text x="72.2101%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (592 samples, 5.01%)</title><rect x="69.3895%" y="180" width="5.0059%" height="15" fill="rgb(211,81,21)" fg:x="8206" fg:w="592"/><text x="69.6395%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (426 samples, 3.60%)</title><rect x="70.7932%" y="196" width="3.6022%" height="15" fill="rgb(208,190,38)" fg:x="8372" fg:w="426"/><text x="71.0432%" y="206.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (232 samples, 1.96%)</title><rect x="72.4336%" y="212" width="1.9618%" height="15" fill="rgb(235,213,38)" fg:x="8566" fg:w="232"/><text x="72.6836%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (103 samples, 0.87%)</title><rect x="74.3954%" y="180" width="0.8710%" height="15" fill="rgb(237,122,38)" fg:x="8798" fg:w="103"/><text x="74.6454%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (32 samples, 0.27%)</title><rect x="74.9958%" y="196" width="0.2706%" height="15" fill="rgb(244,218,35)" fg:x="8869" fg:w="32"/><text x="75.2458%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (12 samples, 0.10%)</title><rect x="75.5370%" y="196" width="0.1015%" height="15" fill="rgb(240,68,47)" fg:x="8933" fg:w="12"/><text x="75.7870%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (94 samples, 0.79%)</title><rect x="75.2664%" y="180" width="0.7949%" height="15" fill="rgb(210,16,53)" fg:x="8901" fg:w="94"/><text x="75.5164%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (50 samples, 0.42%)</title><rect x="75.6384%" y="196" width="0.4228%" height="15" fill="rgb(235,124,12)" fg:x="8945" fg:w="50"/><text x="75.8884%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (196 samples, 1.66%)</title><rect x="76.0612%" y="180" width="1.6574%" height="15" fill="rgb(224,169,11)" fg:x="8995" fg:w="196"/><text x="76.3112%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.19%)</title><rect x="77.5241%" y="196" width="0.1945%" height="15" fill="rgb(250,166,2)" fg:x="9168" fg:w="23"/><text x="77.7741%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (74 samples, 0.63%)</title><rect x="77.7186%" y="180" width="0.6257%" height="15" fill="rgb(242,216,29)" fg:x="9191" fg:w="74"/><text x="77.9686%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (74 samples, 0.63%)</title><rect x="78.3443%" y="180" width="0.6257%" height="15" fill="rgb(230,116,27)" fg:x="9265" fg:w="74"/><text x="78.5943%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.12%)</title><rect x="81.6929%" y="212" width="0.1184%" height="15" fill="rgb(228,99,48)" fg:x="9661" fg:w="14"/><text x="81.9429%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (139 samples, 1.18%)</title><rect x="80.7712%" y="196" width="1.1754%" height="15" fill="rgb(253,11,6)" fg:x="9552" fg:w="139"/><text x="81.0212%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.14%)</title><rect x="81.8113%" y="212" width="0.1353%" height="15" fill="rgb(247,143,39)" fg:x="9675" fg:w="16"/><text x="82.0613%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (361 samples, 3.05%)</title><rect x="78.9701%" y="180" width="3.0526%" height="15" fill="rgb(236,97,10)" fg:x="9339" fg:w="361"/><text x="79.2201%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (35 samples, 0.30%)</title><rect x="82.0480%" y="180" width="0.2960%" height="15" fill="rgb(233,208,19)" fg:x="9703" fg:w="35"/><text x="82.2980%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,087 samples, 76.84%)</title><rect x="5.6909%" y="164" width="76.8392%" height="15" fill="rgb(216,164,2)" fg:x="673" fg:w="9087"/><text x="5.9409%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (96 samples, 0.81%)</title><rect x="82.5300%" y="164" width="0.8118%" height="15" fill="rgb(220,129,5)" fg:x="9760" fg:w="96"/><text x="82.7800%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (156 samples, 1.32%)</title><rect x="83.3672%" y="164" width="1.3191%" height="15" fill="rgb(242,17,10)" fg:x="9859" fg:w="156"/><text x="83.6172%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,352 samples, 79.08%)</title><rect x="5.6317%" y="148" width="79.0800%" height="15" fill="rgb(242,107,0)" fg:x="666" fg:w="9352"/><text x="5.8817%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (25 samples, 0.21%)</title><rect x="84.8469%" y="164" width="0.2114%" height="15" fill="rgb(251,28,31)" fg:x="10034" fg:w="25"/><text x="85.0969%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (50 samples, 0.42%)</title><rect x="89.3286%" y="212" width="0.4228%" height="15" fill="rgb(233,223,10)" fg:x="10564" fg:w="50"/><text x="89.5786%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (134 samples, 1.13%)</title><rect x="89.7514%" y="212" width="1.1331%" height="15" fill="rgb(215,21,27)" fg:x="10614" fg:w="134"/><text x="90.0014%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="90.7577%" y="228" width="0.1268%" height="15" fill="rgb(232,23,21)" fg:x="10733" fg:w="15"/><text x="91.0077%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (35 samples, 0.30%)</title><rect x="90.9437%" y="212" width="0.2960%" height="15" fill="rgb(244,5,23)" fg:x="10755" fg:w="35"/><text x="91.1937%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (783 samples, 6.62%)</title><rect x="85.0583%" y="164" width="6.6210%" height="15" fill="rgb(226,81,46)" fg:x="10059" fg:w="783"/><text x="85.3083%" y="174.50">create_in..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (556 samples, 4.70%)</title><rect x="86.9778%" y="180" width="4.7015%" height="15" fill="rgb(247,70,30)" fg:x="10286" fg:w="556"/><text x="87.2278%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (479 samples, 4.05%)</title><rect x="87.6290%" y="196" width="4.0504%" height="15" fill="rgb(212,68,19)" fg:x="10363" fg:w="479"/><text x="87.8790%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (52 samples, 0.44%)</title><rect x="91.2396%" y="212" width="0.4397%" height="15" fill="rgb(240,187,13)" fg:x="10790" fg:w="52"/><text x="91.4896%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.14%)</title><rect x="93.2099%" y="180" width="0.1353%" height="15" fill="rgb(223,113,26)" fg:x="11023" fg:w="16"/><text x="93.4599%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (17 samples, 0.14%)</title><rect x="93.5397%" y="180" width="0.1438%" height="15" fill="rgb(206,192,2)" fg:x="11062" fg:w="17"/><text x="93.7897%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (131 samples, 1.11%)</title><rect x="93.6834%" y="180" width="1.1077%" height="15" fill="rgb(241,108,4)" fg:x="11079" fg:w="131"/><text x="93.9334%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (28 samples, 0.24%)</title><rect x="94.5544%" y="196" width="0.2368%" height="15" fill="rgb(247,173,49)" fg:x="11182" fg:w="28"/><text x="94.8044%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (156 samples, 1.32%)</title><rect x="94.7911%" y="180" width="1.3191%" height="15" fill="rgb(224,114,35)" fg:x="11210" fg:w="156"/><text x="95.0411%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.12%)</title><rect x="95.9919%" y="196" width="0.1184%" height="15" fill="rgb(245,159,27)" fg:x="11352" fg:w="14"/><text x="96.2419%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (50 samples, 0.42%)</title><rect x="96.1103%" y="180" width="0.4228%" height="15" fill="rgb(245,172,44)" fg:x="11366" fg:w="50"/><text x="96.3603%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (177 samples, 1.50%)</title><rect x="96.5331%" y="180" width="1.4967%" height="15" fill="rgb(236,23,11)" fg:x="11416" fg:w="177"/><text x="96.7831%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (15 samples, 0.13%)</title><rect x="97.9029%" y="196" width="0.1268%" height="15" fill="rgb(205,117,38)" fg:x="11578" fg:w="15"/><text x="98.1529%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,659 samples, 14.03%)</title><rect x="84.7117%" y="148" width="14.0284%" height="15" fill="rgb(237,72,25)" fg:x="10018" fg:w="1659"/><text x="84.9617%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (833 samples, 7.04%)</title><rect x="91.6963%" y="164" width="7.0438%" height="15" fill="rgb(244,70,9)" fg:x="10844" fg:w="833"/><text x="91.9463%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:70) (84 samples, 0.71%)</title><rect x="98.0298%" y="180" width="0.7103%" height="15" fill="rgb(217,125,39)" fg:x="11593" fg:w="84"/><text x="98.2798%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (11,703 samples, 98.96%)</title><rect x="0.5750%" y="100" width="98.9599%" height="15" fill="rgb(235,36,10)" fg:x="68" fg:w="11703"/><text x="0.8250%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,110 samples, 93.95%)</title><rect x="5.5894%" y="116" width="93.9455%" height="15" fill="rgb(251,123,47)" fg:x="661" fg:w="11110"/><text x="5.8394%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,107 samples, 93.92%)</title><rect x="5.6147%" y="132" width="93.9202%" height="15" fill="rgb(221,13,13)" fg:x="664" fg:w="11107"/><text x="5.8647%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (85 samples, 0.72%)</title><rect x="98.8162%" y="148" width="0.7188%" height="15" fill="rgb(238,131,9)" fg:x="11686" fg:w="85"/><text x="99.0662%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (11,766 samples, 99.49%)</title><rect x="0.0592%" y="68" width="99.4926%" height="15" fill="rgb(211,50,8)" fg:x="7" fg:w="11766"/><text x="0.3092%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,753 samples, 99.38%)</title><rect x="0.1691%" y="84" width="99.3827%" height="15" fill="rgb(245,182,24)" fg:x="20" fg:w="11753"/><text x="0.4191%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:99) (12 samples, 0.10%)</title><rect x="99.6956%" y="68" width="0.1015%" height="15" fill="rgb(242,14,37)" fg:x="11790" fg:w="12"/><text x="99.9456%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (14 samples, 0.12%)</title><rect x="99.7971%" y="68" width="0.1184%" height="15" fill="rgb(246,228,12)" fg:x="11802" fg:w="14"/><text x="100.0471%" y="78.50"></text></g><g><title>all (11,826 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="11826"/><text x="0.2500%" y="62.50"></text></g></svg></svg>