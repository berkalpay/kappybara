<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 9699ce8</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="12291"><g><title>n_embeddings (kappybara/rule.py:171) (44 samples, 0.36%)</title><rect x="0.2115%" y="180" width="0.3580%" height="15" fill="rgb(227,0,7)" fg:x="26" fg:w="44"/><text x="0.4615%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:172) (26 samples, 0.21%)</title><rect x="0.3580%" y="196" width="0.2115%" height="15" fill="rgb(217,0,24)" fg:x="44" fg:w="26"/><text x="0.6080%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:160) (21 samples, 0.17%)</title><rect x="0.3987%" y="212" width="0.1709%" height="15" fill="rgb(221,193,54)" fg:x="49" fg:w="21"/><text x="0.6487%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:222) (26 samples, 0.21%)</title><rect x="0.6753%" y="180" width="0.2115%" height="15" fill="rgb(248,212,6)" fg:x="83" fg:w="26"/><text x="0.9253%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:160) (18 samples, 0.15%)</title><rect x="0.7404%" y="196" width="0.1464%" height="15" fill="rgb(208,68,35)" fg:x="91" fg:w="18"/><text x="0.9904%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (13 samples, 0.11%)</title><rect x="0.8868%" y="180" width="0.1058%" height="15" fill="rgb(232,128,0)" fg:x="109" fg:w="13"/><text x="1.1368%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:225) (20 samples, 0.16%)</title><rect x="0.9926%" y="180" width="0.1627%" height="15" fill="rgb(207,160,47)" fg:x="122" fg:w="20"/><text x="1.2426%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:160) (18 samples, 0.15%)</title><rect x="1.0089%" y="196" width="0.1464%" height="15" fill="rgb(228,23,34)" fg:x="124" fg:w="18"/><text x="1.2589%" y="206.50"></text></g><g><title>update (kappybara/system.py:69) (140 samples, 1.14%)</title><rect x="0.1139%" y="84" width="1.1390%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="140"/><text x="0.3639%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (140 samples, 1.14%)</title><rect x="0.1139%" y="100" width="1.1390%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="140"/><text x="0.3639%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (139 samples, 1.13%)</title><rect x="0.1220%" y="116" width="1.1309%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="139"/><text x="0.3720%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (136 samples, 1.11%)</title><rect x="0.1464%" y="132" width="1.1065%" height="15" fill="rgb(240,193,28)" fg:x="18" fg:w="136"/><text x="0.3964%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (136 samples, 1.11%)</title><rect x="0.1464%" y="148" width="1.1065%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="136"/><text x="0.3964%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (136 samples, 1.11%)</title><rect x="0.1464%" y="164" width="1.1065%" height="15" fill="rgb(206,188,39)" fg:x="18" fg:w="136"/><text x="0.3964%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (28 samples, 0.23%)</title><rect x="1.2855%" y="100" width="0.2278%" height="15" fill="rgb(217,207,13)" fg:x="158" fg:w="28"/><text x="1.5355%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (79 samples, 0.64%)</title><rect x="1.8387%" y="212" width="0.6427%" height="15" fill="rgb(231,73,38)" fg:x="226" fg:w="79"/><text x="2.0887%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.15%)</title><rect x="9.2751%" y="228" width="0.1464%" height="15" fill="rgb(225,20,46)" fg:x="1140" fg:w="18"/><text x="9.5251%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (878 samples, 7.14%)</title><rect x="2.4815%" y="212" width="7.1434%" height="15" fill="rgb(210,31,41)" fg:x="305" fg:w="878"/><text x="2.7315%" y="222.50">embeddings..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.20%)</title><rect x="9.4215%" y="228" width="0.2034%" height="15" fill="rgb(221,200,47)" fg:x="1158" fg:w="25"/><text x="9.6715%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.13%)</title><rect x="12.2935%" y="228" width="0.1302%" height="15" fill="rgb(226,26,5)" fg:x="1511" fg:w="16"/><text x="12.5435%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (369 samples, 3.00%)</title><rect x="9.6249%" y="212" width="3.0022%" height="15" fill="rgb(249,33,26)" fg:x="1183" fg:w="369"/><text x="9.8749%" y="222.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.20%)</title><rect x="12.4237%" y="228" width="0.2034%" height="15" fill="rgb(235,183,28)" fg:x="1527" fg:w="25"/><text x="12.6737%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (86 samples, 0.70%)</title><rect x="12.6353%" y="212" width="0.6997%" height="15" fill="rgb(221,5,38)" fg:x="1553" fg:w="86"/><text x="12.8853%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (50 samples, 0.41%)</title><rect x="13.3350%" y="212" width="0.4068%" height="15" fill="rgb(247,18,42)" fg:x="1639" fg:w="50"/><text x="13.5850%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (29 samples, 0.24%)</title><rect x="15.8653%" y="228" width="0.2359%" height="15" fill="rgb(241,131,45)" fg:x="1950" fg:w="29"/><text x="16.1153%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (317 samples, 2.58%)</title><rect x="13.7418%" y="212" width="2.5791%" height="15" fill="rgb(249,31,29)" fg:x="1689" fg:w="317"/><text x="13.9918%" y="222.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.22%)</title><rect x="16.1012%" y="228" width="0.2197%" height="15" fill="rgb(225,111,53)" fg:x="1979" fg:w="27"/><text x="16.3512%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (242 samples, 1.97%)</title><rect x="16.3209%" y="212" width="1.9689%" height="15" fill="rgb(238,160,17)" fg:x="2006" fg:w="242"/><text x="16.5709%" y="222.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (17 samples, 0.14%)</title><rect x="19.7299%" y="228" width="0.1383%" height="15" fill="rgb(214,148,48)" fg:x="2425" fg:w="17"/><text x="19.9799%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (91 samples, 0.74%)</title><rect x="19.8682%" y="228" width="0.7404%" height="15" fill="rgb(232,36,49)" fg:x="2442" fg:w="91"/><text x="20.1182%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (138 samples, 1.12%)</title><rect x="21.9998%" y="244" width="1.1228%" height="15" fill="rgb(209,103,24)" fg:x="2704" fg:w="138"/><text x="22.2498%" y="254.50"></text></g><g><title>sites (kappybara/pattern.py:111) (97 samples, 0.79%)</title><rect x="24.3837%" y="260" width="0.7892%" height="15" fill="rgb(229,88,8)" fg:x="2997" fg:w="97"/><text x="24.6337%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (943 samples, 7.67%)</title><rect x="20.6493%" y="228" width="7.6723%" height="15" fill="rgb(213,181,19)" fg:x="2538" fg:w="943"/><text x="20.8993%" y="238.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (639 samples, 5.20%)</title><rect x="23.1226%" y="244" width="5.1989%" height="15" fill="rgb(254,191,54)" fg:x="2842" fg:w="639"/><text x="23.3726%" y="254.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:113) (387 samples, 3.15%)</title><rect x="25.1729%" y="260" width="3.1486%" height="15" fill="rgb(241,83,37)" fg:x="3094" fg:w="387"/><text x="25.4229%" y="270.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (113 samples, 0.92%)</title><rect x="28.3215%" y="228" width="0.9194%" height="15" fill="rgb(233,36,39)" fg:x="3481" fg:w="113"/><text x="28.5715%" y="238.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (51 samples, 0.41%)</title><rect x="29.9894%" y="244" width="0.4149%" height="15" fill="rgb(226,3,54)" fg:x="3686" fg:w="51"/><text x="30.2394%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (237 samples, 1.93%)</title><rect x="29.2653%" y="228" width="1.9282%" height="15" fill="rgb(245,192,40)" fg:x="3597" fg:w="237"/><text x="29.5153%" y="238.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (97 samples, 0.79%)</title><rect x="30.4044%" y="244" width="0.7892%" height="15" fill="rgb(238,167,29)" fg:x="3737" fg:w="97"/><text x="30.6544%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (169 samples, 1.37%)</title><rect x="37.4827%" y="244" width="1.3750%" height="15" fill="rgb(232,182,51)" fg:x="4607" fg:w="169"/><text x="37.7327%" y="254.50"></text></g><g><title>stated (kappybara/pattern.py:52) (16 samples, 0.13%)</title><rect x="39.3052%" y="260" width="0.1302%" height="15" fill="rgb(231,60,39)" fg:x="4831" fg:w="16"/><text x="39.5552%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (154 samples, 1.25%)</title><rect x="38.8984%" y="244" width="1.2529%" height="15" fill="rgb(208,69,12)" fg:x="4781" fg:w="154"/><text x="39.1484%" y="254.50"></text></g><g><title>stated (kappybara/pattern.py:54) (88 samples, 0.72%)</title><rect x="39.4354%" y="260" width="0.7160%" height="15" fill="rgb(235,93,37)" fg:x="4847" fg:w="88"/><text x="39.6854%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:56) (18 samples, 0.15%)</title><rect x="41.1277%" y="260" width="0.1464%" height="15" fill="rgb(213,116,39)" fg:x="5055" fg:w="18"/><text x="41.3777%" y="270.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (22 samples, 0.18%)</title><rect x="42.7955%" y="276" width="0.1790%" height="15" fill="rgb(222,207,29)" fg:x="5260" fg:w="22"/><text x="43.0455%" y="286.50"></text></g><g><title>bound (kappybara/pattern.py:59) (431 samples, 3.51%)</title><rect x="41.2741%" y="260" width="3.5066%" height="15" fill="rgb(206,96,30)" fg:x="5073" fg:w="431"/><text x="41.5241%" y="270.50">bou..</text></g><g><title>__eq__ (kappybara/utils.py:33) (222 samples, 1.81%)</title><rect x="42.9745%" y="276" width="1.8062%" height="15" fill="rgb(218,138,4)" fg:x="5282" fg:w="222"/><text x="43.2245%" y="286.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.28%)</title><rect x="44.5041%" y="292" width="0.2766%" height="15" fill="rgb(250,191,14)" fg:x="5470" fg:w="34"/><text x="44.7541%" y="302.50"></text></g><g><title>bound (kappybara/pattern.py:60) (216 samples, 1.76%)</title><rect x="44.7807%" y="260" width="1.7574%" height="15" fill="rgb(239,60,40)" fg:x="5504" fg:w="216"/><text x="45.0307%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:61) (95 samples, 0.77%)</title><rect x="46.5381%" y="260" width="0.7729%" height="15" fill="rgb(206,27,48)" fg:x="5720" fg:w="95"/><text x="46.7881%" y="270.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (16 samples, 0.13%)</title><rect x="47.3110%" y="260" width="0.1302%" height="15" fill="rgb(225,35,8)" fg:x="5815" fg:w="16"/><text x="47.5610%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (941 samples, 7.66%)</title><rect x="40.1513%" y="244" width="7.6560%" height="15" fill="rgb(250,213,24)" fg:x="4935" fg:w="941"/><text x="40.4013%" y="254.50">embeds_in ..</text></g><g><title>coupled (kappybara/pattern.py:66) (45 samples, 0.37%)</title><rect x="47.4412%" y="260" width="0.3661%" height="15" fill="rgb(247,123,22)" fg:x="5831" fg:w="45"/><text x="47.6912%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (32 samples, 0.26%)</title><rect x="47.8968%" y="244" width="0.2604%" height="15" fill="rgb(231,138,38)" fg:x="5887" fg:w="32"/><text x="48.1468%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.11%)</title><rect x="48.6291%" y="260" width="0.1139%" height="15" fill="rgb(231,145,46)" fg:x="5977" fg:w="14"/><text x="48.8791%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (198 samples, 1.61%)</title><rect x="48.1572%" y="244" width="1.6109%" height="15" fill="rgb(251,118,11)" fg:x="5919" fg:w="198"/><text x="48.4072%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (126 samples, 1.03%)</title><rect x="48.7430%" y="260" width="1.0251%" height="15" fill="rgb(217,147,25)" fg:x="5991" fg:w="126"/><text x="48.9930%" y="270.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.19%)</title><rect x="49.5810%" y="276" width="0.1871%" height="15" fill="rgb(247,81,37)" fg:x="6094" fg:w="23"/><text x="49.8310%" y="286.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (315 samples, 2.56%)</title><rect x="49.7681%" y="244" width="2.5629%" height="15" fill="rgb(209,12,38)" fg:x="6117" fg:w="315"/><text x="50.0181%" y="254.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (200 samples, 1.63%)</title><rect x="50.7038%" y="260" width="1.6272%" height="15" fill="rgb(227,1,9)" fg:x="6232" fg:w="200"/><text x="50.9538%" y="270.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.33%)</title><rect x="51.9974%" y="276" width="0.3336%" height="15" fill="rgb(248,47,43)" fg:x="6391" fg:w="41"/><text x="52.2474%" y="286.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (57 samples, 0.46%)</title><rect x="52.3310%" y="244" width="0.4638%" height="15" fill="rgb(221,10,30)" fg:x="6432" fg:w="57"/><text x="52.5810%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (108 samples, 0.88%)</title><rect x="52.7947%" y="244" width="0.8787%" height="15" fill="rgb(210,229,1)" fg:x="6489" fg:w="108"/><text x="53.0447%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (57 samples, 0.46%)</title><rect x="53.6734%" y="244" width="0.4638%" height="15" fill="rgb(222,148,37)" fg:x="6597" fg:w="57"/><text x="53.9234%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (19 samples, 0.15%)</title><rect x="54.1372%" y="244" width="0.1546%" height="15" fill="rgb(234,67,33)" fg:x="6654" fg:w="19"/><text x="54.3872%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,101 samples, 25.23%)</title><rect x="31.1936%" y="228" width="25.2298%" height="15" fill="rgb(247,98,35)" fg:x="3834" fg:w="3101"/><text x="31.4436%" y="238.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (262 samples, 2.13%)</title><rect x="54.2918%" y="244" width="2.1316%" height="15" fill="rgb(247,138,52)" fg:x="6673" fg:w="262"/><text x="54.5418%" y="254.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (4,741 samples, 38.57%)</title><rect x="18.2898%" y="212" width="38.5729%" height="15" fill="rgb(213,79,30)" fg:x="2248" fg:w="4741"/><text x="18.5398%" y="222.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (54 samples, 0.44%)</title><rect x="56.4234%" y="228" width="0.4393%" height="15" fill="rgb(246,177,23)" fg:x="6935" fg:w="54"/><text x="56.6734%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (47 samples, 0.38%)</title><rect x="57.9692%" y="228" width="0.3824%" height="15" fill="rgb(230,62,27)" fg:x="7125" fg:w="47"/><text x="58.2192%" y="238.50"></text></g><g><title>sites (kappybara/pattern.py:111) (66 samples, 0.54%)</title><rect x="59.1408%" y="244" width="0.5370%" height="15" fill="rgb(216,154,8)" fg:x="7269" fg:w="66"/><text x="59.3908%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (550 samples, 4.47%)</title><rect x="56.9848%" y="212" width="4.4748%" height="15" fill="rgb(244,35,45)" fg:x="7004" fg:w="550"/><text x="57.2348%" y="222.50">embed..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (382 samples, 3.11%)</title><rect x="58.3516%" y="228" width="3.1080%" height="15" fill="rgb(251,115,12)" fg:x="7172" fg:w="382"/><text x="58.6016%" y="238.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (219 samples, 1.78%)</title><rect x="59.6778%" y="244" width="1.7818%" height="15" fill="rgb(240,54,50)" fg:x="7335" fg:w="219"/><text x="59.9278%" y="254.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (92 samples, 0.75%)</title><rect x="61.4596%" y="212" width="0.7485%" height="15" fill="rgb(233,84,52)" fg:x="7554" fg:w="92"/><text x="61.7096%" y="222.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (26 samples, 0.21%)</title><rect x="61.9966%" y="228" width="0.2115%" height="15" fill="rgb(207,117,47)" fg:x="7620" fg:w="26"/><text x="62.2466%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (106 samples, 0.86%)</title><rect x="62.2081%" y="212" width="0.8624%" height="15" fill="rgb(249,43,39)" fg:x="7646" fg:w="106"/><text x="62.4581%" y="222.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (56 samples, 0.46%)</title><rect x="62.6149%" y="228" width="0.4556%" height="15" fill="rgb(209,38,44)" fg:x="7696" fg:w="56"/><text x="62.8649%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (149 samples, 1.21%)</title><rect x="63.0705%" y="212" width="1.2123%" height="15" fill="rgb(236,212,23)" fg:x="7752" fg:w="149"/><text x="63.3205%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.13%)</title><rect x="64.1526%" y="228" width="0.1302%" height="15" fill="rgb(242,79,21)" fg:x="7885" fg:w="16"/><text x="64.4026%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (50 samples, 0.41%)</title><rect x="64.2828%" y="212" width="0.4068%" height="15" fill="rgb(211,96,35)" fg:x="7901" fg:w="50"/><text x="64.5328%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (57 samples, 0.46%)</title><rect x="64.6896%" y="212" width="0.4638%" height="15" fill="rgb(253,215,40)" fg:x="7951" fg:w="57"/><text x="64.9396%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (96 samples, 0.78%)</title><rect x="66.2517%" y="228" width="0.7811%" height="15" fill="rgb(211,81,21)" fg:x="8143" fg:w="96"/><text x="66.5017%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (235 samples, 1.91%)</title><rect x="65.1534%" y="212" width="1.9120%" height="15" fill="rgb(208,190,38)" fg:x="8008" fg:w="235"/><text x="65.4034%" y="222.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:283) (17 samples, 0.14%)</title><rect x="67.0653%" y="212" width="0.1383%" height="15" fill="rgb(235,213,38)" fg:x="8243" fg:w="17"/><text x="67.3153%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (28 samples, 0.23%)</title><rect x="67.2118%" y="212" width="0.2278%" height="15" fill="rgb(237,122,38)" fg:x="8261" fg:w="28"/><text x="67.4618%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (27 samples, 0.22%)</title><rect x="67.4396%" y="212" width="0.2197%" height="15" fill="rgb(244,218,35)" fg:x="8289" fg:w="27"/><text x="67.6896%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (8,136 samples, 66.19%)</title><rect x="1.5540%" y="196" width="66.1948%" height="15" fill="rgb(240,68,47)" fg:x="191" fg:w="8136"/><text x="1.8040%" y="206.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (125 samples, 1.02%)</title><rect x="67.7488%" y="196" width="1.0170%" height="15" fill="rgb(210,16,53)" fg:x="8327" fg:w="125"/><text x="67.9988%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (21 samples, 0.17%)</title><rect x="68.5949%" y="212" width="0.1709%" height="15" fill="rgb(235,124,12)" fg:x="8431" fg:w="21"/><text x="68.8449%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (161 samples, 1.31%)</title><rect x="68.7902%" y="196" width="1.3099%" height="15" fill="rgb(224,169,11)" fg:x="8455" fg:w="161"/><text x="69.0402%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (13 samples, 0.11%)</title><rect x="69.9943%" y="212" width="0.1058%" height="15" fill="rgb(250,166,2)" fg:x="8603" fg:w="13"/><text x="70.2443%" y="222.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (8,430 samples, 68.59%)</title><rect x="1.5296%" y="180" width="68.5868%" height="15" fill="rgb(242,216,29)" fg:x="188" fg:w="8430"/><text x="1.7796%" y="190.50">track_component (kappybara/mixture.py:82)</text></g><g><title>track_component (kappybara/mixture.py:163) (8,608 samples, 70.03%)</title><rect x="1.5214%" y="164" width="70.0350%" height="15" fill="rgb(230,116,27)" fg:x="187" fg:w="8608"/><text x="1.7714%" y="174.50">track_component (kappybara/mixture.py:163)</text></g><g><title>track_component (kappybara/mixture.py:84) (177 samples, 1.44%)</title><rect x="70.1163%" y="180" width="1.4401%" height="15" fill="rgb(228,99,48)" fg:x="8618" fg:w="177"/><text x="70.3663%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:126) (28 samples, 0.23%)</title><rect x="71.6296%" y="180" width="0.2278%" height="15" fill="rgb(253,11,6)" fg:x="8804" fg:w="28"/><text x="71.8796%" y="190.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (54 samples, 0.44%)</title><rect x="76.9425%" y="228" width="0.4393%" height="15" fill="rgb(247,143,39)" fg:x="9457" fg:w="54"/><text x="77.1925%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.11%)</title><rect x="78.4314%" y="244" width="0.1058%" height="15" fill="rgb(236,97,10)" fg:x="9640" fg:w="13"/><text x="78.6814%" y="254.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (161 samples, 1.31%)</title><rect x="77.3818%" y="228" width="1.3099%" height="15" fill="rgb(233,208,19)" fg:x="9511" fg:w="161"/><text x="77.6318%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.15%)</title><rect x="78.5371%" y="244" width="0.1546%" height="15" fill="rgb(216,164,2)" fg:x="9653" fg:w="19"/><text x="78.7871%" y="254.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (40 samples, 0.33%)</title><rect x="78.7812%" y="228" width="0.3254%" height="15" fill="rgb(220,129,5)" fg:x="9683" fg:w="40"/><text x="79.0312%" y="238.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (960 samples, 7.81%)</title><rect x="71.8575%" y="180" width="7.8106%" height="15" fill="rgb(242,17,10)" fg:x="8832" fg:w="960"/><text x="72.1075%" y="190.50">create_inde..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (705 samples, 5.74%)</title><rect x="73.9321%" y="196" width="5.7359%" height="15" fill="rgb(242,107,0)" fg:x="9087" fg:w="705"/><text x="74.1821%" y="206.50">__call_..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:167) (623 samples, 5.07%)</title><rect x="74.5993%" y="212" width="5.0687%" height="15" fill="rgb(251,28,31)" fg:x="9169" fg:w="623"/><text x="74.8493%" y="222.50">&lt;lambd..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (69 samples, 0.56%)</title><rect x="79.1067%" y="228" width="0.5614%" height="15" fill="rgb(233,223,10)" fg:x="9723" fg:w="69"/><text x="79.3567%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (45 samples, 0.37%)</title><rect x="81.7183%" y="196" width="0.3661%" height="15" fill="rgb(215,21,27)" fg:x="10044" fg:w="45"/><text x="81.9683%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.16%)</title><rect x="82.0845%" y="196" width="0.1627%" height="15" fill="rgb(232,23,21)" fg:x="10089" fg:w="20"/><text x="82.3345%" y="206.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:50) (33 samples, 0.27%)</title><rect x="82.2472%" y="196" width="0.2685%" height="15" fill="rgb(244,5,23)" fg:x="10109" fg:w="33"/><text x="82.4972%" y="206.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (43 samples, 0.35%)</title><rect x="82.5808%" y="196" width="0.3498%" height="15" fill="rgb(226,81,46)" fg:x="10150" fg:w="43"/><text x="82.8308%" y="206.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:55) (21 samples, 0.17%)</title><rect x="82.9306%" y="196" width="0.1709%" height="15" fill="rgb(247,70,30)" fg:x="10193" fg:w="21"/><text x="83.1806%" y="206.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (42 samples, 0.34%)</title><rect x="83.1015%" y="196" width="0.3417%" height="15" fill="rgb(212,68,19)" fg:x="10214" fg:w="42"/><text x="83.3515%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (13 samples, 0.11%)</title><rect x="83.5489%" y="196" width="0.1058%" height="15" fill="rgb(240,187,13)" fg:x="10269" fg:w="13"/><text x="83.7989%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (191 samples, 1.55%)</title><rect x="83.6547%" y="196" width="1.5540%" height="15" fill="rgb(223,113,26)" fg:x="10282" fg:w="191"/><text x="83.9047%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (50 samples, 0.41%)</title><rect x="84.8019%" y="212" width="0.4068%" height="15" fill="rgb(206,192,2)" fg:x="10423" fg:w="50"/><text x="85.0519%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (205 samples, 1.67%)</title><rect x="85.2087%" y="196" width="1.6679%" height="15" fill="rgb(241,108,4)" fg:x="10473" fg:w="205"/><text x="85.4587%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (39 samples, 0.32%)</title><rect x="86.5593%" y="212" width="0.3173%" height="15" fill="rgb(247,173,49)" fg:x="10639" fg:w="39"/><text x="86.8093%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (77 samples, 0.63%)</title><rect x="86.8766%" y="196" width="0.6265%" height="15" fill="rgb(224,114,35)" fg:x="10678" fg:w="77"/><text x="87.1266%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (268 samples, 2.18%)</title><rect x="87.5031%" y="196" width="2.1805%" height="15" fill="rgb(245,159,27)" fg:x="10755" fg:w="268"/><text x="87.7531%" y="206.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (35 samples, 0.28%)</title><rect x="89.3987%" y="212" width="0.2848%" height="15" fill="rgb(245,172,44)" fg:x="10988" fg:w="35"/><text x="89.6487%" y="222.50"></text></g><g><title>track_component (kappybara/mixture.py:165) (2,350 samples, 19.12%)</title><rect x="71.5564%" y="164" width="19.1197%" height="15" fill="rgb(236,23,11)" fg:x="8795" fg:w="2350"/><text x="71.8064%" y="174.50">track_component (kappybara/mix..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (1,350 samples, 10.98%)</title><rect x="79.6925%" y="180" width="10.9836%" height="15" fill="rgb(205,117,38)" fg:x="9795" fg:w="1350"/><text x="79.9425%" y="190.50">create_index (ka..</text></g><g><title>add (kappybara/indexed_set.py:70) (122 samples, 0.99%)</title><rect x="89.6835%" y="196" width="0.9926%" height="15" fill="rgb(237,72,25)" fg:x="11023" fg:w="122"/><text x="89.9335%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (10,964 samples, 89.20%)</title><rect x="1.5214%" y="132" width="89.2035%" height="15" fill="rgb(244,70,9)" fg:x="187" fg:w="10964"/><text x="1.7714%" y="142.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:175) (10,964 samples, 89.20%)</title><rect x="1.5214%" y="148" width="89.2035%" height="15" fill="rgb(217,125,39)" fg:x="187" fg:w="10964"/><text x="1.7714%" y="158.50">_update_embeddings (kappybara/mixture.py:175)</text></g><g><title>__init__ (kappybara/pattern.py:218) (32 samples, 0.26%)</title><rect x="90.8388%" y="164" width="0.2604%" height="15" fill="rgb(235,36,10)" fg:x="11165" fg:w="32"/><text x="91.0888%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (22 samples, 0.18%)</title><rect x="90.9202%" y="180" width="0.1790%" height="15" fill="rgb(251,123,47)" fg:x="11175" fg:w="22"/><text x="91.1702%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:220) (81 samples, 0.66%)</title><rect x="90.7493%" y="148" width="0.6590%" height="15" fill="rgb(221,13,13)" fg:x="11154" fg:w="81"/><text x="90.9993%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (28 samples, 0.23%)</title><rect x="91.1805%" y="164" width="0.2278%" height="15" fill="rgb(238,131,9)" fg:x="11207" fg:w="28"/><text x="91.4305%" y="174.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (26 samples, 0.21%)</title><rect x="91.1968%" y="180" width="0.2115%" height="15" fill="rgb(211,50,8)" fg:x="11209" fg:w="26"/><text x="91.4468%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (24 samples, 0.20%)</title><rect x="91.4165%" y="164" width="0.1953%" height="15" fill="rgb(245,182,24)" fg:x="11236" fg:w="24"/><text x="91.6665%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (15 samples, 0.12%)</title><rect x="91.4897%" y="180" width="0.1220%" height="15" fill="rgb(242,14,37)" fg:x="11245" fg:w="15"/><text x="91.7397%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (32 samples, 0.26%)</title><rect x="91.6443%" y="180" width="0.2604%" height="15" fill="rgb(246,228,12)" fg:x="11264" fg:w="32"/><text x="91.8943%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (17 samples, 0.14%)</title><rect x="92.0592%" y="196" width="0.1383%" height="15" fill="rgb(213,55,15)" fg:x="11315" fg:w="17"/><text x="92.3092%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (15 samples, 0.12%)</title><rect x="92.1975%" y="196" width="0.1220%" height="15" fill="rgb(209,9,3)" fg:x="11332" fg:w="15"/><text x="92.4475%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (19 samples, 0.15%)</title><rect x="92.3440%" y="196" width="0.1546%" height="15" fill="rgb(230,59,30)" fg:x="11350" fg:w="19"/><text x="92.5940%" y="206.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (119 samples, 0.97%)</title><rect x="91.6117%" y="164" width="0.9682%" height="15" fill="rgb(209,121,21)" fg:x="11260" fg:w="119"/><text x="91.8617%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (83 samples, 0.68%)</title><rect x="91.9046%" y="180" width="0.6753%" height="15" fill="rgb(220,109,13)" fg:x="11296" fg:w="83"/><text x="92.1546%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (25 samples, 0.20%)</title><rect x="92.5799%" y="164" width="0.2034%" height="15" fill="rgb(232,18,1)" fg:x="11379" fg:w="25"/><text x="92.8299%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (46 samples, 0.37%)</title><rect x="93.1251%" y="196" width="0.3743%" height="15" fill="rgb(215,41,42)" fg:x="11446" fg:w="46"/><text x="93.3751%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:113) (23 samples, 0.19%)</title><rect x="93.3122%" y="212" width="0.1871%" height="15" fill="rgb(224,123,36)" fg:x="11469" fg:w="23"/><text x="93.5622%" y="222.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:223) (272 samples, 2.21%)</title><rect x="91.4083%" y="148" width="2.2130%" height="15" fill="rgb(240,125,3)" fg:x="11235" fg:w="272"/><text x="91.6583%" y="158.50">_..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (99 samples, 0.81%)</title><rect x="92.8159%" y="164" width="0.8055%" height="15" fill="rgb(205,98,50)" fg:x="11408" fg:w="99"/><text x="93.0659%" y="174.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (88 samples, 0.72%)</title><rect x="92.9054%" y="180" width="0.7160%" height="15" fill="rgb(205,185,37)" fg:x="11419" fg:w="88"/><text x="93.1554%" y="190.50"></text></g><g><title>remove (kappybara/indexed_set.py:79) (16 samples, 0.13%)</title><rect x="93.8329%" y="180" width="0.1302%" height="15" fill="rgb(238,207,15)" fg:x="11533" fg:w="16"/><text x="94.0829%" y="190.50"></text></g><g><title>remove (kappybara/indexed_set.py:80) (21 samples, 0.17%)</title><rect x="93.9631%" y="180" width="0.1709%" height="15" fill="rgb(213,199,42)" fg:x="11549" fg:w="21"/><text x="94.2131%" y="190.50"></text></g><g><title>remove (kappybara/indexed_set.py:83) (19 samples, 0.15%)</title><rect x="94.1339%" y="180" width="0.1546%" height="15" fill="rgb(235,201,11)" fg:x="11570" fg:w="19"/><text x="94.3839%" y="190.50"></text></g><g><title>remove (kappybara/indexed_set.py:94) (106 samples, 0.86%)</title><rect x="93.6539%" y="164" width="0.8624%" height="15" fill="rgb(207,46,11)" fg:x="11511" fg:w="106"/><text x="93.9039%" y="174.50"></text></g><g><title>remove (kappybara/indexed_set.py:97) (31 samples, 0.25%)</title><rect x="94.5163%" y="164" width="0.2522%" height="15" fill="rgb(241,35,35)" fg:x="11617" fg:w="31"/><text x="94.7663%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:230) (192 samples, 1.56%)</title><rect x="93.6213%" y="148" width="1.5621%" height="15" fill="rgb(243,32,47)" fg:x="11507" fg:w="192"/><text x="93.8713%" y="158.50"></text></g><g><title>remove (kappybara/indexed_set.py:98) (51 samples, 0.41%)</title><rect x="94.7685%" y="164" width="0.4149%" height="15" fill="rgb(247,202,23)" fg:x="11648" fg:w="51"/><text x="95.0185%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (18 samples, 0.15%)</title><rect x="95.3543%" y="180" width="0.1464%" height="15" fill="rgb(219,102,11)" fg:x="11720" fg:w="18"/><text x="95.6043%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:75) (38 samples, 0.31%)</title><rect x="95.1997%" y="164" width="0.3092%" height="15" fill="rgb(243,110,44)" fg:x="11701" fg:w="38"/><text x="95.4497%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:231) (59 samples, 0.48%)</title><rect x="95.1835%" y="148" width="0.4800%" height="15" fill="rgb(222,74,54)" fg:x="11699" fg:w="59"/><text x="95.4335%" y="158.50"></text></g><g><title>add (kappybara/indexed_set.py:76) (19 samples, 0.15%)</title><rect x="95.5089%" y="164" width="0.1546%" height="15" fill="rgb(216,99,12)" fg:x="11739" fg:w="19"/><text x="95.7589%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (54 samples, 0.44%)</title><rect x="96.2818%" y="180" width="0.4393%" height="15" fill="rgb(226,22,26)" fg:x="11834" fg:w="54"/><text x="96.5318%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:55) (16 samples, 0.13%)</title><rect x="96.7212%" y="180" width="0.1302%" height="15" fill="rgb(217,163,10)" fg:x="11888" fg:w="16"/><text x="96.9712%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (164 samples, 1.33%)</title><rect x="96.8514%" y="180" width="1.3343%" height="15" fill="rgb(213,25,53)" fg:x="11904" fg:w="164"/><text x="97.1014%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:75) (312 samples, 2.54%)</title><rect x="95.7042%" y="164" width="2.5384%" height="15" fill="rgb(252,105,26)" fg:x="11763" fg:w="312"/><text x="95.9542%" y="174.50">ad..</text></g><g><title>add (kappybara/indexed_set.py:62) (15 samples, 0.12%)</title><rect x="98.4216%" y="180" width="0.1220%" height="15" fill="rgb(220,39,43)" fg:x="12097" fg:w="15"/><text x="98.6716%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (13 samples, 0.11%)</title><rect x="98.5436%" y="180" width="0.1058%" height="15" fill="rgb(229,68,48)" fg:x="12112" fg:w="13"/><text x="98.7936%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (31 samples, 0.25%)</title><rect x="98.6820%" y="180" width="0.2522%" height="15" fill="rgb(252,8,32)" fg:x="12129" fg:w="31"/><text x="98.9320%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:91) (1,020 samples, 8.30%)</title><rect x="90.7249%" y="132" width="8.2988%" height="15" fill="rgb(223,20,43)" fg:x="11151" fg:w="1020"/><text x="90.9749%" y="142.50">apply_update..</text></g><g><title>_remove_edge (kappybara/mixture.py:232) (413 samples, 3.36%)</title><rect x="95.6635%" y="148" width="3.3602%" height="15" fill="rgb(229,81,49)" fg:x="11758" fg:w="413"/><text x="95.9135%" y="158.50">_re..</text></g><g><title>add (kappybara/indexed_set.py:76) (96 samples, 0.78%)</title><rect x="98.2426%" y="164" width="0.7811%" height="15" fill="rgb(236,28,36)" fg:x="12075" fg:w="96"/><text x="98.4926%" y="174.50"></text></g><g><title>_add_edge (kappybara/mixture.py:200) (20 samples, 0.16%)</title><rect x="99.0399%" y="148" width="0.1627%" height="15" fill="rgb(249,185,26)" fg:x="12173" fg:w="20"/><text x="99.2899%" y="158.50"></text></g><g><title>_add_edge (kappybara/mixture.py:204) (35 samples, 0.28%)</title><rect x="99.2027%" y="148" width="0.2848%" height="15" fill="rgb(249,174,33)" fg:x="12193" fg:w="35"/><text x="99.4527%" y="158.50"></text></g><g><title>add (kappybara/pattern.py:248) (34 samples, 0.28%)</title><rect x="99.2108%" y="164" width="0.2766%" height="15" fill="rgb(233,201,37)" fg:x="12194" fg:w="34"/><text x="99.4608%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:76) (13 samples, 0.11%)</title><rect x="99.3817%" y="180" width="0.1058%" height="15" fill="rgb(221,78,26)" fg:x="12215" fg:w="13"/><text x="99.6317%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (12,043 samples, 97.98%)</title><rect x="1.5133%" y="100" width="97.9823%" height="15" fill="rgb(250,127,30)" fg:x="186" fg:w="12043"/><text x="1.7633%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:171) (12,042 samples, 97.97%)</title><rect x="1.5214%" y="116" width="97.9741%" height="15" fill="rgb(230,49,44)" fg:x="187" fg:w="12042"/><text x="1.7714%" y="126.50">apply_update (kappybara/mixture.py:171)</text></g><g><title>apply_update (kappybara/mixture.py:97) (58 samples, 0.47%)</title><rect x="99.0237%" y="132" width="0.4719%" height="15" fill="rgb(229,67,23)" fg:x="12171" fg:w="58"/><text x="99.2737%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (12,216 samples, 99.39%)</title><rect x="0.1139%" y="68" width="99.3898%" height="15" fill="rgb(249,83,47)" fg:x="14" fg:w="12216"/><text x="0.3639%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (12,076 samples, 98.25%)</title><rect x="1.2529%" y="84" width="98.2508%" height="15" fill="rgb(215,43,3)" fg:x="154" fg:w="12076"/><text x="1.5029%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:99) (13 samples, 0.11%)</title><rect x="99.6420%" y="68" width="0.1058%" height="15" fill="rgb(238,154,13)" fg:x="12247" fg:w="13"/><text x="99.8920%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (20 samples, 0.16%)</title><rect x="99.7478%" y="68" width="0.1627%" height="15" fill="rgb(219,56,2)" fg:x="12260" fg:w="20"/><text x="99.9978%" y="78.50"></text></g><g><title>all (12,291 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(233,0,4)" fg:x="0" fg:w="12291"/><text x="0.2500%" y="62.50"></text></g></svg></svg>