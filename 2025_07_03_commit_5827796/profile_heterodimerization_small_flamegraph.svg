<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 5827796</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="4589"><g><title>&lt;module&gt; (kappybara/grammar.py:35) (8 samples, 0.17%)</title><rect x="0.0436%" y="260" width="0.1743%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="8"/><text x="0.2936%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (8 samples, 0.17%)</title><rect x="0.0436%" y="276" width="0.1743%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="8"/><text x="0.2936%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (8 samples, 0.17%)</title><rect x="0.0436%" y="292" width="0.1743%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="8"/><text x="0.2936%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (13 samples, 0.28%)</title><rect x="0.0000%" y="68" width="0.2833%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="13"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.28%)</title><rect x="0.0000%" y="84" width="0.2833%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="13"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.28%)</title><rect x="0.0000%" y="100" width="0.2833%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="13"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.28%)</title><rect x="0.0000%" y="116" width="0.2833%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="13"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.28%)</title><rect x="0.0000%" y="132" width="0.2833%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="13"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.28%)</title><rect x="0.0000%" y="148" width="0.2833%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="13"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (11 samples, 0.24%)</title><rect x="0.0436%" y="164" width="0.2397%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="11"/><text x="0.2936%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (11 samples, 0.24%)</title><rect x="0.0436%" y="180" width="0.2397%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="11"/><text x="0.2936%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (11 samples, 0.24%)</title><rect x="0.0436%" y="196" width="0.2397%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="11"/><text x="0.2936%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (11 samples, 0.24%)</title><rect x="0.0436%" y="212" width="0.2397%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="11"/><text x="0.2936%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (11 samples, 0.24%)</title><rect x="0.0436%" y="228" width="0.2397%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="11"/><text x="0.2936%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (11 samples, 0.24%)</title><rect x="0.0436%" y="244" width="0.2397%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="11"/><text x="0.2936%" y="254.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (7 samples, 0.15%)</title><rect x="0.2833%" y="68" width="0.1525%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="7"/><text x="0.5333%" y="78.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (36 samples, 0.78%)</title><rect x="1.0678%" y="180" width="0.7845%" height="15" fill="rgb(225,20,46)" fg:x="49" fg:w="36"/><text x="1.3178%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="13.1837%" y="196" width="0.1307%" height="15" fill="rgb(210,31,41)" fg:x="605" fg:w="6"/><text x="13.4337%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (542 samples, 11.81%)</title><rect x="1.8523%" y="180" width="11.8109%" height="15" fill="rgb(221,200,47)" fg:x="85" fg:w="542"/><text x="2.1023%" y="190.50">embeddings (kappyb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.35%)</title><rect x="13.3144%" y="196" width="0.3487%" height="15" fill="rgb(226,26,5)" fg:x="611" fg:w="16"/><text x="13.5644%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.17%)</title><rect x="17.2151%" y="196" width="0.1743%" height="15" fill="rgb(249,33,26)" fg:x="790" fg:w="8"/><text x="17.4651%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (182 samples, 3.97%)</title><rect x="13.6631%" y="180" width="3.9660%" height="15" fill="rgb(235,183,28)" fg:x="627" fg:w="182"/><text x="13.9131%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.24%)</title><rect x="17.3894%" y="196" width="0.2397%" height="15" fill="rgb(221,5,38)" fg:x="798" fg:w="11"/><text x="17.6394%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (55 samples, 1.20%)</title><rect x="17.6727%" y="180" width="1.1985%" height="15" fill="rgb(247,18,42)" fg:x="811" fg:w="55"/><text x="17.9227%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (32 samples, 0.70%)</title><rect x="18.8712%" y="180" width="0.6973%" height="15" fill="rgb(241,131,45)" fg:x="866" fg:w="32"/><text x="19.1212%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="22.3796%" y="196" width="0.1307%" height="15" fill="rgb(249,31,29)" fg:x="1027" fg:w="6"/><text x="22.6296%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (148 samples, 3.23%)</title><rect x="19.5685%" y="180" width="3.2251%" height="15" fill="rgb(225,111,53)" fg:x="898" fg:w="148"/><text x="19.8185%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.28%)</title><rect x="22.5104%" y="196" width="0.2833%" height="15" fill="rgb(238,160,17)" fg:x="1033" fg:w="13"/><text x="22.7604%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (120 samples, 2.61%)</title><rect x="22.7936%" y="180" width="2.6149%" height="15" fill="rgb(214,148,48)" fg:x="1046" fg:w="120"/><text x="23.0436%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (11 samples, 0.24%)</title><rect x="27.2390%" y="196" width="0.2397%" height="15" fill="rgb(232,36,49)" fg:x="1250" fg:w="11"/><text x="27.4890%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (52 samples, 1.13%)</title><rect x="27.4788%" y="196" width="1.1331%" height="15" fill="rgb(209,103,24)" fg:x="1261" fg:w="52"/><text x="27.7288%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (5 samples, 0.11%)</title><rect x="28.6119%" y="196" width="0.1090%" height="15" fill="rgb(229,88,8)" fg:x="1313" fg:w="5"/><text x="28.8619%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (79 samples, 1.72%)</title><rect x="30.7692%" y="212" width="1.7215%" height="15" fill="rgb(213,181,19)" fg:x="1412" fg:w="79"/><text x="31.0192%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (46 samples, 1.00%)</title><rect x="34.3866%" y="228" width="1.0024%" height="15" fill="rgb(254,191,54)" fg:x="1578" fg:w="46"/><text x="34.6366%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (555 samples, 12.09%)</title><rect x="28.7209%" y="196" width="12.0941%" height="15" fill="rgb(241,83,37)" fg:x="1318" fg:w="555"/><text x="28.9709%" y="206.50">embeds_in (kappyba..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (382 samples, 8.32%)</title><rect x="32.4907%" y="212" width="8.3243%" height="15" fill="rgb(233,36,39)" fg:x="1491" fg:w="382"/><text x="32.7407%" y="222.50">__iter__ (ka..</text></g><g><title>sites (kappybara/pattern.py:113) (249 samples, 5.43%)</title><rect x="35.3890%" y="228" width="5.4260%" height="15" fill="rgb(226,3,54)" fg:x="1624" fg:w="249"/><text x="35.6390%" y="238.50">sites (..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (49 samples, 1.07%)</title><rect x="40.8150%" y="196" width="1.0678%" height="15" fill="rgb(245,192,40)" fg:x="1873" fg:w="49"/><text x="41.0650%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (16 samples, 0.35%)</title><rect x="43.1249%" y="212" width="0.3487%" height="15" fill="rgb(238,167,29)" fg:x="1979" fg:w="16"/><text x="43.3749%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (99 samples, 2.16%)</title><rect x="41.9481%" y="196" width="2.1573%" height="15" fill="rgb(232,182,51)" fg:x="1925" fg:w="99"/><text x="42.1981%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (29 samples, 0.63%)</title><rect x="43.4735%" y="212" width="0.6319%" height="15" fill="rgb(231,60,39)" fg:x="1995" fg:w="29"/><text x="43.7235%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (112 samples, 2.44%)</title><rect x="53.9987%" y="212" width="2.4406%" height="15" fill="rgb(208,69,12)" fg:x="2478" fg:w="112"/><text x="54.2487%" y="222.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (15 samples, 0.33%)</title><rect x="56.4393%" y="212" width="0.3269%" height="15" fill="rgb(235,93,37)" fg:x="2590" fg:w="15"/><text x="56.6893%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (12 samples, 0.26%)</title><rect x="57.2456%" y="228" width="0.2615%" height="15" fill="rgb(213,116,39)" fg:x="2627" fg:w="12"/><text x="57.4956%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (101 samples, 2.20%)</title><rect x="56.7662%" y="212" width="2.2009%" height="15" fill="rgb(222,207,29)" fg:x="2605" fg:w="101"/><text x="57.0162%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (67 samples, 1.46%)</title><rect x="57.5071%" y="228" width="1.4600%" height="15" fill="rgb(206,96,30)" fg:x="2639" fg:w="67"/><text x="57.7571%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (6 samples, 0.13%)</title><rect x="60.0349%" y="228" width="0.1307%" height="15" fill="rgb(218,138,4)" fg:x="2755" fg:w="6"/><text x="60.2849%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (18 samples, 0.39%)</title><rect x="62.2576%" y="244" width="0.3922%" height="15" fill="rgb(250,191,14)" fg:x="2857" fg:w="18"/><text x="62.5076%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="64.5892%" y="260" width="0.1307%" height="15" fill="rgb(239,60,40)" fg:x="2964" fg:w="6"/><text x="64.8392%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (228 samples, 4.97%)</title><rect x="60.1656%" y="228" width="4.9684%" height="15" fill="rgb(206,27,48)" fg:x="2761" fg:w="228"/><text x="60.4156%" y="238.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (114 samples, 2.48%)</title><rect x="62.6498%" y="244" width="2.4842%" height="15" fill="rgb(225,35,8)" fg:x="2875" fg:w="114"/><text x="62.8998%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.41%)</title><rect x="64.7200%" y="260" width="0.4140%" height="15" fill="rgb(250,213,24)" fg:x="2970" fg:w="19"/><text x="64.9700%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (98 samples, 2.14%)</title><rect x="65.1340%" y="228" width="2.1355%" height="15" fill="rgb(247,123,22)" fg:x="2989" fg:w="98"/><text x="65.3840%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (48 samples, 1.05%)</title><rect x="67.2696%" y="228" width="1.0460%" height="15" fill="rgb(231,138,38)" fg:x="3087" fg:w="48"/><text x="67.5196%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (5 samples, 0.11%)</title><rect x="68.3155%" y="228" width="0.1090%" height="15" fill="rgb(231,145,46)" fg:x="3135" fg:w="5"/><text x="68.5655%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (491 samples, 10.70%)</title><rect x="58.9671%" y="212" width="10.6995%" height="15" fill="rgb(251,118,11)" fg:x="2706" fg:w="491"/><text x="59.2171%" y="222.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:66) (57 samples, 1.24%)</title><rect x="68.4245%" y="228" width="1.2421%" height="15" fill="rgb(217,147,25)" fg:x="3140" fg:w="57"/><text x="68.6745%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (6 samples, 0.13%)</title><rect x="69.6666%" y="212" width="0.1307%" height="15" fill="rgb(247,81,37)" fg:x="3197" fg:w="6"/><text x="69.9166%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (83 samples, 1.81%)</title><rect x="69.7973%" y="212" width="1.8087%" height="15" fill="rgb(209,12,38)" fg:x="3203" fg:w="83"/><text x="70.0473%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (54 samples, 1.18%)</title><rect x="70.4293%" y="228" width="1.1767%" height="15" fill="rgb(227,1,9)" fg:x="3232" fg:w="54"/><text x="70.6793%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.20%)</title><rect x="71.4099%" y="244" width="0.1961%" height="15" fill="rgb(248,47,43)" fg:x="3277" fg:w="9"/><text x="71.6599%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (66 samples, 1.44%)</title><rect x="71.6060%" y="212" width="1.4382%" height="15" fill="rgb(221,10,30)" fg:x="3286" fg:w="66"/><text x="71.8560%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (43 samples, 0.94%)</title><rect x="72.1072%" y="228" width="0.9370%" height="15" fill="rgb(210,229,1)" fg:x="3309" fg:w="43"/><text x="72.3572%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.24%)</title><rect x="72.8045%" y="244" width="0.2397%" height="15" fill="rgb(222,148,37)" fg:x="3341" fg:w="11"/><text x="73.0545%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (22 samples, 0.48%)</title><rect x="73.0442%" y="212" width="0.4794%" height="15" fill="rgb(234,67,33)" fg:x="3352" fg:w="22"/><text x="73.2942%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (52 samples, 1.13%)</title><rect x="73.5236%" y="212" width="1.1331%" height="15" fill="rgb(247,98,35)" fg:x="3374" fg:w="52"/><text x="73.7736%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (19 samples, 0.41%)</title><rect x="74.6568%" y="212" width="0.4140%" height="15" fill="rgb(247,138,52)" fg:x="3426" fg:w="19"/><text x="74.9068%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (6 samples, 0.13%)</title><rect x="75.0708%" y="212" width="0.1307%" height="15" fill="rgb(213,79,30)" fg:x="3445" fg:w="6"/><text x="75.3208%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,587 samples, 34.58%)</title><rect x="44.1055%" y="196" width="34.5827%" height="15" fill="rgb(246,177,23)" fg:x="2024" fg:w="1587"/><text x="44.3555%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (160 samples, 3.49%)</title><rect x="75.2016%" y="212" width="3.4866%" height="15" fill="rgb(230,62,27)" fg:x="3451" fg:w="160"/><text x="75.4516%" y="222.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,474 samples, 53.91%)</title><rect x="25.4086%" y="180" width="53.9115%" height="15" fill="rgb(216,154,8)" fg:x="1166" fg:w="2474"/><text x="25.6586%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (29 samples, 0.63%)</title><rect x="78.6882%" y="196" width="0.6319%" height="15" fill="rgb(244,35,45)" fg:x="3611" fg:w="29"/><text x="78.9382%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (7 samples, 0.15%)</title><rect x="79.3201%" y="180" width="0.1525%" height="15" fill="rgb(251,115,12)" fg:x="3640" fg:w="7"/><text x="79.5701%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (26 samples, 0.57%)</title><rect x="81.0852%" y="196" width="0.5666%" height="15" fill="rgb(240,54,50)" fg:x="3721" fg:w="26"/><text x="81.3352%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (32 samples, 0.70%)</title><rect x="82.7413%" y="212" width="0.6973%" height="15" fill="rgb(233,84,52)" fg:x="3797" fg:w="32"/><text x="82.9913%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (300 samples, 6.54%)</title><rect x="79.5380%" y="180" width="6.5374%" height="15" fill="rgb(207,117,47)" fg:x="3650" fg:w="300"/><text x="79.7880%" y="190.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (203 samples, 4.42%)</title><rect x="81.6518%" y="196" width="4.4236%" height="15" fill="rgb(249,43,39)" fg:x="3747" fg:w="203"/><text x="81.9018%" y="206.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (121 samples, 2.64%)</title><rect x="83.4387%" y="212" width="2.6367%" height="15" fill="rgb(209,38,44)" fg:x="3829" fg:w="121"/><text x="83.6887%" y="222.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:101) (7 samples, 0.15%)</title><rect x="86.5330%" y="196" width="0.1525%" height="15" fill="rgb(236,212,23)" fg:x="3971" fg:w="7"/><text x="86.7830%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (47 samples, 1.02%)</title><rect x="86.0754%" y="180" width="1.0242%" height="15" fill="rgb(242,79,21)" fg:x="3950" fg:w="47"/><text x="86.3254%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (19 samples, 0.41%)</title><rect x="86.6856%" y="196" width="0.4140%" height="15" fill="rgb(211,96,35)" fg:x="3978" fg:w="19"/><text x="86.9356%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.31%)</title><rect x="87.3175%" y="196" width="0.3051%" height="15" fill="rgb(253,215,40)" fg:x="4007" fg:w="14"/><text x="87.5675%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (64 samples, 1.39%)</title><rect x="87.0996%" y="180" width="1.3946%" height="15" fill="rgb(211,81,21)" fg:x="3997" fg:w="64"/><text x="87.3496%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (40 samples, 0.87%)</title><rect x="87.6226%" y="196" width="0.8716%" height="15" fill="rgb(208,190,38)" fg:x="4021" fg:w="40"/><text x="87.8726%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (61 samples, 1.33%)</title><rect x="88.4942%" y="180" width="1.3293%" height="15" fill="rgb(235,213,38)" fg:x="4061" fg:w="61"/><text x="88.7442%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.17%)</title><rect x="89.6492%" y="196" width="0.1743%" height="15" fill="rgb(237,122,38)" fg:x="4114" fg:w="8"/><text x="89.8992%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (20 samples, 0.44%)</title><rect x="89.8235%" y="180" width="0.4358%" height="15" fill="rgb(244,218,35)" fg:x="4122" fg:w="20"/><text x="90.0735%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (31 samples, 0.68%)</title><rect x="90.2593%" y="180" width="0.6755%" height="15" fill="rgb(240,68,47)" fg:x="4142" fg:w="31"/><text x="90.5093%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="90.8259%" y="196" width="0.1090%" height="15" fill="rgb(210,16,53)" fg:x="4168" fg:w="5"/><text x="91.0759%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (35 samples, 0.76%)</title><rect x="92.4166%" y="196" width="0.7627%" height="15" fill="rgb(235,124,12)" fg:x="4241" fg:w="35"/><text x="92.6666%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.15%)</title><rect x="93.0268%" y="212" width="0.1525%" height="15" fill="rgb(224,169,11)" fg:x="4269" fg:w="7"/><text x="93.2768%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (107 samples, 2.33%)</title><rect x="90.9348%" y="180" width="2.3317%" height="15" fill="rgb(250,166,2)" fg:x="4173" fg:w="107"/><text x="91.1848%" y="190.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:287) (14 samples, 0.31%)</title><rect x="93.2883%" y="180" width="0.3051%" height="15" fill="rgb(242,216,29)" fg:x="4281" fg:w="14"/><text x="93.5383%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (7 samples, 0.15%)</title><rect x="93.5934%" y="180" width="0.1525%" height="15" fill="rgb(230,116,27)" fg:x="4295" fg:w="7"/><text x="93.8434%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (4,276 samples, 93.18%)</title><rect x="0.6973%" y="164" width="93.1793%" height="15" fill="rgb(228,99,48)" fg:x="32" fg:w="4276"/><text x="0.9473%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>embeddings (kappybara/pattern.py:290) (6 samples, 0.13%)</title><rect x="93.7459%" y="180" width="0.1307%" height="15" fill="rgb(253,11,6)" fg:x="4302" fg:w="6"/><text x="93.9959%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (6 samples, 0.13%)</title><rect x="95.2059%" y="180" width="0.1307%" height="15" fill="rgb(247,143,39)" fg:x="4369" fg:w="6"/><text x="95.4559%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (89 samples, 1.94%)</title><rect x="93.8767%" y="164" width="1.9394%" height="15" fill="rgb(236,97,10)" fg:x="4308" fg:w="89"/><text x="94.1267%" y="174.50">_..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (22 samples, 0.48%)</title><rect x="95.3367%" y="180" width="0.4794%" height="15" fill="rgb(233,208,19)" fg:x="4375" fg:w="22"/><text x="95.5867%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (6 samples, 0.13%)</title><rect x="97.8645%" y="180" width="0.1307%" height="15" fill="rgb(216,164,2)" fg:x="4491" fg:w="6"/><text x="98.1145%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (4,479 samples, 97.60%)</title><rect x="0.6973%" y="148" width="97.6030%" height="15" fill="rgb(220,129,5)" fg:x="32" fg:w="4479"/><text x="0.9473%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (114 samples, 2.48%)</title><rect x="95.8161%" y="164" width="2.4842%" height="15" fill="rgb(242,17,10)" fg:x="4397" fg:w="114"/><text x="96.0661%" y="174.50">__..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.31%)</title><rect x="97.9952%" y="180" width="0.3051%" height="15" fill="rgb(242,107,0)" fg:x="4497" fg:w="14"/><text x="98.2452%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (4,542 samples, 98.98%)</title><rect x="0.6537%" y="116" width="98.9758%" height="15" fill="rgb(251,28,31)" fg:x="30" fg:w="4542"/><text x="0.9037%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (4,542 samples, 98.98%)</title><rect x="0.6537%" y="132" width="98.9758%" height="15" fill="rgb(233,223,10)" fg:x="30" fg:w="4542"/><text x="0.9037%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (61 samples, 1.33%)</title><rect x="98.3003%" y="148" width="1.3293%" height="15" fill="rgb(215,21,27)" fg:x="4511" fg:w="61"/><text x="98.5503%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,553 samples, 99.22%)</title><rect x="0.4358%" y="68" width="99.2155%" height="15" fill="rgb(232,23,21)" fg:x="20" fg:w="4553"/><text x="0.6858%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,549 samples, 99.13%)</title><rect x="0.5230%" y="84" width="99.1284%" height="15" fill="rgb(244,5,23)" fg:x="24" fg:w="4549"/><text x="0.7730%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,543 samples, 99.00%)</title><rect x="0.6537%" y="100" width="98.9976%" height="15" fill="rgb(226,81,46)" fg:x="30" fg:w="4543"/><text x="0.9037%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>__iter__ (kappybara/pattern.py:99) (5 samples, 0.11%)</title><rect x="99.6949%" y="68" width="0.1090%" height="15" fill="rgb(247,70,30)" fg:x="4575" fg:w="5"/><text x="99.9449%" y="78.50"></text></g><g><title>all (4,589 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="4589"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (9 samples, 0.20%)</title><rect x="99.8039%" y="68" width="0.1961%" height="15" fill="rgb(240,187,13)" fg:x="4580" fg:w="9"/><text x="100.0539%" y="78.50"></text></g></svg></svg>