<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="394" onload="init(evt)" viewBox="0 0 1200 394" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="394" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_systems_flamegraph.svg -- python profile_systems.py # commit 682aacd</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="383.00"> </text><svg id="frames" x="10" width="1180" total_samples="4922"><g><title>_parse_grammar (lark/load_grammar.py:966) (7 samples, 0.14%)</title><rect x="0.0610%" y="356" width="0.1422%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="7"/><text x="0.3110%" y="366.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1415) (8 samples, 0.16%)</title><rect x="0.0610%" y="324" width="0.1625%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="8"/><text x="0.3110%" y="334.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1240) (8 samples, 0.16%)</title><rect x="0.0610%" y="340" width="0.1625%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="8"/><text x="0.3110%" y="350.50"></text></g><g><title>__init__ (lark/lark.py:357) (9 samples, 0.18%)</title><rect x="0.0610%" y="308" width="0.1829%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="9"/><text x="0.3110%" y="318.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:1) (13 samples, 0.26%)</title><rect x="0.0000%" y="68" width="0.2641%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="13"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.26%)</title><rect x="0.0000%" y="84" width="0.2641%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="13"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.26%)</title><rect x="0.0000%" y="100" width="0.2641%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="13"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.26%)</title><rect x="0.0000%" y="116" width="0.2641%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="13"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.26%)</title><rect x="0.0000%" y="132" width="0.2641%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="13"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.26%)</title><rect x="0.0000%" y="148" width="0.2641%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="13"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.20%)</title><rect x="0.0610%" y="164" width="0.2032%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="10"/><text x="0.3110%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.20%)</title><rect x="0.0610%" y="180" width="0.2032%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="10"/><text x="0.3110%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.20%)</title><rect x="0.0610%" y="196" width="0.2032%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="10"/><text x="0.3110%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.20%)</title><rect x="0.0610%" y="212" width="0.2032%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="10"/><text x="0.3110%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.20%)</title><rect x="0.0610%" y="228" width="0.2032%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="10"/><text x="0.3110%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.20%)</title><rect x="0.0610%" y="244" width="0.2032%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="10"/><text x="0.3110%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (10 samples, 0.20%)</title><rect x="0.0610%" y="260" width="0.2032%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="10"/><text x="0.3110%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (10 samples, 0.20%)</title><rect x="0.0610%" y="276" width="0.2032%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="10"/><text x="0.3110%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (10 samples, 0.20%)</title><rect x="0.0610%" y="292" width="0.2032%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="10"/><text x="0.3110%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:12) (5 samples, 0.10%)</title><rect x="0.2641%" y="68" width="0.1016%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="5"/><text x="0.5141%" y="78.50"></text></g><g><title>update (kappybara/system.py:69) (8 samples, 0.16%)</title><rect x="0.3860%" y="84" width="0.1625%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="8"/><text x="0.6360%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (8 samples, 0.16%)</title><rect x="0.3860%" y="100" width="0.1625%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="8"/><text x="0.6360%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (8 samples, 0.16%)</title><rect x="0.3860%" y="116" width="0.1625%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="8"/><text x="0.6360%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (8 samples, 0.16%)</title><rect x="0.3860%" y="132" width="0.1625%" height="15" fill="rgb(247,18,42)" fg:x="19" fg:w="8"/><text x="0.6360%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (7 samples, 0.14%)</title><rect x="0.4063%" y="148" width="0.1422%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="7"/><text x="0.6563%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (7 samples, 0.14%)</title><rect x="0.4063%" y="164" width="0.1422%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="7"/><text x="0.6563%" y="174.50"></text></g><g><title>n_embeddings (kappybara/rule.py:62) (6 samples, 0.12%)</title><rect x="0.4267%" y="180" width="0.1219%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="6"/><text x="0.6767%" y="190.50"></text></g><g><title>act (kappybara/system.py:63) (10 samples, 0.20%)</title><rect x="0.5892%" y="100" width="0.2032%" height="15" fill="rgb(238,160,17)" fg:x="29" fg:w="10"/><text x="0.8392%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (9 samples, 0.18%)</title><rect x="0.6095%" y="116" width="0.1829%" height="15" fill="rgb(214,148,48)" fg:x="30" fg:w="9"/><text x="0.8595%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (90 samples, 1.83%)</title><rect x="0.8939%" y="132" width="1.8285%" height="15" fill="rgb(232,36,49)" fg:x="44" fg:w="90"/><text x="1.1439%" y="142.50">_..</text></g><g><title>embeddings (kappybara/pattern.py:256) (21 samples, 0.43%)</title><rect x="3.1288%" y="148" width="0.4267%" height="15" fill="rgb(209,103,24)" fg:x="154" fg:w="21"/><text x="3.3788%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.18%)</title><rect x="7.5579%" y="164" width="0.1829%" height="15" fill="rgb(229,88,8)" fg:x="372" fg:w="9"/><text x="7.8079%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (224 samples, 4.55%)</title><rect x="3.5555%" y="148" width="4.5510%" height="15" fill="rgb(213,181,19)" fg:x="175" fg:w="224"/><text x="3.8055%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.37%)</title><rect x="7.7408%" y="164" width="0.3657%" height="15" fill="rgb(254,191,54)" fg:x="381" fg:w="18"/><text x="7.9908%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.14%)</title><rect x="11.6010%" y="164" width="0.1422%" height="15" fill="rgb(241,83,37)" fg:x="571" fg:w="7"/><text x="11.8510%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (190 samples, 3.86%)</title><rect x="8.1065%" y="148" width="3.8602%" height="15" fill="rgb(233,36,39)" fg:x="399" fg:w="190"/><text x="8.3565%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.22%)</title><rect x="11.7432%" y="164" width="0.2235%" height="15" fill="rgb(226,3,54)" fg:x="578" fg:w="11"/><text x="11.9932%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (42 samples, 0.85%)</title><rect x="12.0073%" y="148" width="0.8533%" height="15" fill="rgb(245,192,40)" fg:x="591" fg:w="42"/><text x="12.2573%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (30 samples, 0.61%)</title><rect x="12.8606%" y="148" width="0.6095%" height="15" fill="rgb(238,167,29)" fg:x="633" fg:w="30"/><text x="13.1106%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.28%)</title><rect x="15.7253%" y="164" width="0.2844%" height="15" fill="rgb(232,182,51)" fg:x="774" fg:w="14"/><text x="15.9753%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (143 samples, 2.91%)</title><rect x="13.4701%" y="148" width="2.9053%" height="15" fill="rgb(231,60,39)" fg:x="663" fg:w="143"/><text x="13.7201%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.37%)</title><rect x="16.0098%" y="164" width="0.3657%" height="15" fill="rgb(208,69,12)" fg:x="788" fg:w="18"/><text x="16.2598%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (119 samples, 2.42%)</title><rect x="16.3755%" y="148" width="2.4177%" height="15" fill="rgb(235,93,37)" fg:x="806" fg:w="119"/><text x="16.6255%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (11 samples, 0.22%)</title><rect x="21.2515%" y="164" width="0.2235%" height="15" fill="rgb(213,116,39)" fg:x="1046" fg:w="11"/><text x="21.5015%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (50 samples, 1.02%)</title><rect x="21.4750%" y="164" width="1.0158%" height="15" fill="rgb(222,207,29)" fg:x="1057" fg:w="50"/><text x="21.7250%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (53 samples, 1.08%)</title><rect x="24.5429%" y="180" width="1.0768%" height="15" fill="rgb(206,96,30)" fg:x="1208" fg:w="53"/><text x="24.7929%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (53 samples, 1.08%)</title><rect x="27.4279%" y="196" width="1.0768%" height="15" fill="rgb(218,138,4)" fg:x="1350" fg:w="53"/><text x="27.6779%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (493 samples, 10.02%)</title><rect x="22.5315%" y="164" width="10.0163%" height="15" fill="rgb(250,191,14)" fg:x="1109" fg:w="493"/><text x="22.7815%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (341 samples, 6.93%)</title><rect x="25.6197%" y="180" width="6.9281%" height="15" fill="rgb(239,60,40)" fg:x="1261" fg:w="341"/><text x="25.8697%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (199 samples, 4.04%)</title><rect x="28.5047%" y="196" width="4.0431%" height="15" fill="rgb(206,27,48)" fg:x="1403" fg:w="199"/><text x="28.7547%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (58 samples, 1.18%)</title><rect x="32.5477%" y="164" width="1.1784%" height="15" fill="rgb(225,35,8)" fg:x="1602" fg:w="58"/><text x="32.7977%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (47 samples, 0.95%)</title><rect x="34.9451%" y="180" width="0.9549%" height="15" fill="rgb(250,213,24)" fg:x="1720" fg:w="47"/><text x="35.1951%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (139 samples, 2.82%)</title><rect x="33.8074%" y="164" width="2.8241%" height="15" fill="rgb(247,123,22)" fg:x="1664" fg:w="139"/><text x="34.0574%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (36 samples, 0.73%)</title><rect x="35.9000%" y="180" width="0.7314%" height="15" fill="rgb(231,138,38)" fg:x="1767" fg:w="36"/><text x="36.1500%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (93 samples, 1.89%)</title><rect x="45.3068%" y="180" width="1.8895%" height="15" fill="rgb(231,145,46)" fg:x="2230" fg:w="93"/><text x="45.5568%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (5 samples, 0.10%)</title><rect x="47.1963%" y="180" width="0.1016%" height="15" fill="rgb(251,118,11)" fg:x="2323" fg:w="5"/><text x="47.4463%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (13 samples, 0.26%)</title><rect x="47.7855%" y="196" width="0.2641%" height="15" fill="rgb(217,147,25)" fg:x="2352" fg:w="13"/><text x="48.0355%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (101 samples, 2.05%)</title><rect x="47.2978%" y="180" width="2.0520%" height="15" fill="rgb(247,81,37)" fg:x="2328" fg:w="101"/><text x="47.5478%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (64 samples, 1.30%)</title><rect x="48.0496%" y="196" width="1.3003%" height="15" fill="rgb(209,12,38)" fg:x="2365" fg:w="64"/><text x="48.2996%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (12 samples, 0.24%)</title><rect x="50.6095%" y="196" width="0.2438%" height="15" fill="rgb(227,1,9)" fg:x="2491" fg:w="12"/><text x="50.8595%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.22%)</title><rect x="52.9460%" y="212" width="0.2235%" height="15" fill="rgb(248,47,43)" fg:x="2606" fg:w="11"/><text x="53.1960%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.14%)</title><rect x="55.3637%" y="228" width="0.1422%" height="15" fill="rgb(221,10,30)" fg:x="2725" fg:w="7"/><text x="55.6137%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (243 samples, 4.94%)</title><rect x="50.8533%" y="196" width="4.9370%" height="15" fill="rgb(210,229,1)" fg:x="2503" fg:w="243"/><text x="51.1033%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (129 samples, 2.62%)</title><rect x="53.1694%" y="212" width="2.6209%" height="15" fill="rgb(222,148,37)" fg:x="2617" fg:w="129"/><text x="53.4194%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.28%)</title><rect x="55.5059%" y="228" width="0.2844%" height="15" fill="rgb(234,67,33)" fg:x="2732" fg:w="14"/><text x="55.7559%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (115 samples, 2.34%)</title><rect x="55.7903%" y="196" width="2.3364%" height="15" fill="rgb(247,98,35)" fg:x="2746" fg:w="115"/><text x="56.0403%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (40 samples, 0.81%)</title><rect x="58.1268%" y="196" width="0.8127%" height="15" fill="rgb(247,138,52)" fg:x="2861" fg:w="40"/><text x="58.3768%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (9 samples, 0.18%)</title><rect x="58.9395%" y="196" width="0.1829%" height="15" fill="rgb(213,79,30)" fg:x="2901" fg:w="9"/><text x="59.1895%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (516 samples, 10.48%)</title><rect x="49.3499%" y="180" width="10.4835%" height="15" fill="rgb(246,177,23)" fg:x="2429" fg:w="516"/><text x="49.5999%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (35 samples, 0.71%)</title><rect x="59.1223%" y="196" width="0.7111%" height="15" fill="rgb(230,62,27)" fg:x="2910" fg:w="35"/><text x="59.3723%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (6 samples, 0.12%)</title><rect x="59.8334%" y="180" width="0.1219%" height="15" fill="rgb(216,154,8)" fg:x="2945" fg:w="6"/><text x="60.0834%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (9 samples, 0.18%)</title><rect x="59.9553%" y="180" width="0.1829%" height="15" fill="rgb(244,35,45)" fg:x="2951" fg:w="9"/><text x="60.2053%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (107 samples, 2.17%)</title><rect x="60.1382%" y="180" width="2.1739%" height="15" fill="rgb(251,115,12)" fg:x="2960" fg:w="107"/><text x="60.3882%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (64 samples, 1.30%)</title><rect x="61.0118%" y="196" width="1.3003%" height="15" fill="rgb(240,54,50)" fg:x="3003" fg:w="64"/><text x="61.2618%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.18%)</title><rect x="62.1292%" y="212" width="0.1829%" height="15" fill="rgb(233,84,52)" fg:x="3058" fg:w="9"/><text x="62.3792%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (65 samples, 1.32%)</title><rect x="62.3121%" y="180" width="1.3206%" height="15" fill="rgb(207,117,47)" fg:x="3067" fg:w="65"/><text x="62.5621%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (43 samples, 0.87%)</title><rect x="62.7590%" y="196" width="0.8736%" height="15" fill="rgb(249,43,39)" fg:x="3089" fg:w="43"/><text x="63.0090%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.18%)</title><rect x="63.4498%" y="212" width="0.1829%" height="15" fill="rgb(209,38,44)" fg:x="3123" fg:w="9"/><text x="63.6998%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (25 samples, 0.51%)</title><rect x="63.6327%" y="180" width="0.5079%" height="15" fill="rgb(236,212,23)" fg:x="3132" fg:w="25"/><text x="63.8827%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (56 samples, 1.14%)</title><rect x="64.1609%" y="180" width="1.1377%" height="15" fill="rgb(242,79,21)" fg:x="3158" fg:w="56"/><text x="64.4109%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (23 samples, 0.47%)</title><rect x="65.2987%" y="180" width="0.4673%" height="15" fill="rgb(211,96,35)" fg:x="3214" fg:w="23"/><text x="65.5487%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (6 samples, 0.12%)</title><rect x="65.7659%" y="180" width="0.1219%" height="15" fill="rgb(253,215,40)" fg:x="3237" fg:w="6"/><text x="66.0159%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,585 samples, 32.20%)</title><rect x="36.6315%" y="164" width="32.2024%" height="15" fill="rgb(211,81,21)" fg:x="1803" fg:w="1585"/><text x="36.8815%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (145 samples, 2.95%)</title><rect x="65.8879%" y="180" width="2.9460%" height="15" fill="rgb(208,190,38)" fg:x="3243" fg:w="145"/><text x="66.1379%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,494 samples, 50.67%)</title><rect x="18.7932%" y="148" width="50.6705%" height="15" fill="rgb(235,213,38)" fg:x="925" fg:w="2494"/><text x="19.0432%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (31 samples, 0.63%)</title><rect x="68.8338%" y="164" width="0.6298%" height="15" fill="rgb(237,122,38)" fg:x="3388" fg:w="31"/><text x="69.0838%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (36 samples, 0.73%)</title><rect x="70.9265%" y="164" width="0.7314%" height="15" fill="rgb(244,218,35)" fg:x="3491" fg:w="36"/><text x="71.1765%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (39 samples, 0.79%)</title><rect x="72.9988%" y="180" width="0.7924%" height="15" fill="rgb(240,68,47)" fg:x="3593" fg:w="39"/><text x="73.2488%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (321 samples, 6.52%)</title><rect x="69.5449%" y="148" width="6.5217%" height="15" fill="rgb(210,16,53)" fg:x="3423" fg:w="321"/><text x="69.7949%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (217 samples, 4.41%)</title><rect x="71.6579%" y="164" width="4.4088%" height="15" fill="rgb(235,124,12)" fg:x="3527" fg:w="217"/><text x="71.9079%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (112 samples, 2.28%)</title><rect x="73.7911%" y="180" width="2.2755%" height="15" fill="rgb(224,169,11)" fg:x="3632" fg:w="112"/><text x="74.0411%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (7 samples, 0.14%)</title><rect x="76.8184%" y="164" width="0.1422%" height="15" fill="rgb(250,166,2)" fg:x="3781" fg:w="7"/><text x="77.0684%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (46 samples, 0.93%)</title><rect x="76.0666%" y="148" width="0.9346%" height="15" fill="rgb(242,216,29)" fg:x="3744" fg:w="46"/><text x="76.3166%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (39 samples, 0.79%)</title><rect x="77.0012%" y="148" width="0.7924%" height="15" fill="rgb(230,116,27)" fg:x="3790" fg:w="39"/><text x="77.2512%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (27 samples, 0.55%)</title><rect x="77.2450%" y="164" width="0.5486%" height="15" fill="rgb(228,99,48)" fg:x="3802" fg:w="27"/><text x="77.4950%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (46 samples, 0.93%)</title><rect x="77.7936%" y="148" width="0.9346%" height="15" fill="rgb(253,11,6)" fg:x="3829" fg:w="46"/><text x="78.0436%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.20%)</title><rect x="78.5250%" y="164" width="0.2032%" height="15" fill="rgb(247,143,39)" fg:x="3865" fg:w="10"/><text x="78.7750%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (14 samples, 0.28%)</title><rect x="78.7282%" y="148" width="0.2844%" height="15" fill="rgb(236,97,10)" fg:x="3875" fg:w="14"/><text x="78.9782%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (22 samples, 0.45%)</title><rect x="79.0126%" y="148" width="0.4470%" height="15" fill="rgb(233,208,19)" fg:x="3889" fg:w="22"/><text x="79.2626%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (24 samples, 0.49%)</title><rect x="80.7395%" y="164" width="0.4876%" height="15" fill="rgb(216,164,2)" fg:x="3974" fg:w="24"/><text x="80.9895%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (90 samples, 1.83%)</title><rect x="79.4596%" y="148" width="1.8285%" height="15" fill="rgb(220,129,5)" fg:x="3911" fg:w="90"/><text x="79.7096%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (22 samples, 0.45%)</title><rect x="81.3287%" y="148" width="0.4470%" height="15" fill="rgb(242,17,10)" fg:x="4003" fg:w="22"/><text x="81.5787%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (50 samples, 1.02%)</title><rect x="81.7757%" y="148" width="1.0158%" height="15" fill="rgb(242,107,0)" fg:x="4025" fg:w="50"/><text x="82.0257%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,947 samples, 80.19%)</title><rect x="2.7225%" y="132" width="80.1910%" height="15" fill="rgb(251,28,31)" fg:x="134" fg:w="3947"/><text x="2.9725%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (6 samples, 0.12%)</title><rect x="82.7915%" y="148" width="0.1219%" height="15" fill="rgb(233,223,10)" fg:x="4075" fg:w="6"/><text x="83.0415%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (28 samples, 0.57%)</title><rect x="82.9134%" y="132" width="0.5689%" height="15" fill="rgb(215,21,27)" fg:x="4081" fg:w="28"/><text x="83.1634%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (8 samples, 0.16%)</title><rect x="83.4823%" y="132" width="0.1625%" height="15" fill="rgb(232,23,21)" fg:x="4109" fg:w="8"/><text x="83.7323%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (10 samples, 0.20%)</title><rect x="83.6449%" y="132" width="0.2032%" height="15" fill="rgb(244,5,23)" fg:x="4117" fg:w="10"/><text x="83.8949%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (163 samples, 3.31%)</title><rect x="91.2434%" y="148" width="3.3117%" height="15" fill="rgb(226,81,46)" fg:x="4491" fg:w="163"/><text x="91.4934%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.30%)</title><rect x="94.5551%" y="148" width="0.3048%" height="15" fill="rgb(247,70,30)" fg:x="4654" fg:w="15"/><text x="94.8051%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (578 samples, 11.74%)</title><rect x="83.8480%" y="132" width="11.7432%" height="15" fill="rgb(212,68,19)" fg:x="4127" fg:w="578"/><text x="84.0980%" y="142.50">_update_embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.73%)</title><rect x="94.8598%" y="148" width="0.7314%" height="15" fill="rgb(240,187,13)" fg:x="4669" fg:w="36"/><text x="95.1098%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (41 samples, 0.83%)</title><rect x="98.5981%" y="148" width="0.8330%" height="15" fill="rgb(223,113,26)" fg:x="4853" fg:w="41"/><text x="98.8481%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:14) (4,886 samples, 99.27%)</title><rect x="0.3657%" y="68" width="99.2686%" height="15" fill="rgb(206,192,2)" fg:x="18" fg:w="4886"/><text x="0.6157%" y="78.50">&lt;module&gt; (profile_systems.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,877 samples, 99.09%)</title><rect x="0.5486%" y="84" width="99.0857%" height="15" fill="rgb(241,108,4)" fg:x="27" fg:w="4877"/><text x="0.7986%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,865 samples, 98.84%)</title><rect x="0.7924%" y="100" width="98.8419%" height="15" fill="rgb(247,173,49)" fg:x="39" fg:w="4865"/><text x="1.0424%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,860 samples, 98.74%)</title><rect x="0.8939%" y="116" width="98.7403%" height="15" fill="rgb(224,114,35)" fg:x="44" fg:w="4860"/><text x="1.1439%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (199 samples, 4.04%)</title><rect x="95.5912%" y="132" width="4.0431%" height="15" fill="rgb(245,159,27)" fg:x="4705" fg:w="199"/><text x="95.8412%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.20%)</title><rect x="99.4311%" y="148" width="0.2032%" height="15" fill="rgb(245,172,44)" fg:x="4894" fg:w="10"/><text x="99.6811%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (7 samples, 0.14%)</title><rect x="99.6952%" y="68" width="0.1422%" height="15" fill="rgb(236,23,11)" fg:x="4907" fg:w="7"/><text x="99.9452%" y="78.50"></text></g><g><title>all (4,922 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="4922"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (5 samples, 0.10%)</title><rect x="99.8984%" y="68" width="0.1016%" height="15" fill="rgb(237,72,25)" fg:x="4917" fg:w="5"/><text x="100.1484%" y="78.50"></text></g></svg></svg>