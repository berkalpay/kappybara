<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 131c770</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="9275"><g><title>update (kappybara/system.py:70) (16 samples, 0.17%)</title><rect x="0.0539%" y="84" width="0.1725%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="16"/><text x="0.3039%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (16 samples, 0.17%)</title><rect x="0.0539%" y="100" width="0.1725%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="16"/><text x="0.3039%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (15 samples, 0.16%)</title><rect x="0.0647%" y="116" width="0.1617%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="15"/><text x="0.3147%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (11 samples, 0.12%)</title><rect x="0.1078%" y="132" width="0.1186%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="11"/><text x="0.3578%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (11 samples, 0.12%)</title><rect x="0.1078%" y="148" width="0.1186%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="11"/><text x="0.3578%" y="158.50"></text></g><g><title>select (kappybara/rule.py:104) (26 samples, 0.28%)</title><rect x="0.3342%" y="116" width="0.2803%" height="15" fill="rgb(232,128,0)" fg:x="31" fg:w="26"/><text x="0.5842%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (35 samples, 0.38%)</title><rect x="0.3019%" y="100" width="0.3774%" height="15" fill="rgb(207,160,47)" fg:x="28" fg:w="35"/><text x="0.5519%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (70 samples, 0.75%)</title><rect x="1.3369%" y="180" width="0.7547%" height="15" fill="rgb(228,23,34)" fg:x="124" fg:w="70"/><text x="1.5869%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.18%)</title><rect x="11.3100%" y="196" width="0.1833%" height="15" fill="rgb(218,30,26)" fg:x="1049" fg:w="17"/><text x="11.5600%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (904 samples, 9.75%)</title><rect x="2.0916%" y="180" width="9.7466%" height="15" fill="rgb(220,122,19)" fg:x="194" fg:w="904"/><text x="2.3416%" y="190.50">embeddings (ka..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.35%)</title><rect x="11.4933%" y="196" width="0.3450%" height="15" fill="rgb(250,228,42)" fg:x="1066" fg:w="32"/><text x="11.7433%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (324 samples, 3.49%)</title><rect x="11.8383%" y="180" width="3.4933%" height="15" fill="rgb(240,193,28)" fg:x="1098" fg:w="324"/><text x="12.0883%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.38%)</title><rect x="14.9542%" y="196" width="0.3774%" height="15" fill="rgb(216,20,37)" fg:x="1387" fg:w="35"/><text x="15.2042%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (78 samples, 0.84%)</title><rect x="15.3854%" y="180" width="0.8410%" height="15" fill="rgb(206,188,39)" fg:x="1427" fg:w="78"/><text x="15.6354%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (65 samples, 0.70%)</title><rect x="16.2264%" y="180" width="0.7008%" height="15" fill="rgb(217,207,13)" fg:x="1505" fg:w="65"/><text x="16.4764%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (33 samples, 0.36%)</title><rect x="20.1078%" y="196" width="0.3558%" height="15" fill="rgb(231,73,38)" fg:x="1865" fg:w="33"/><text x="20.3578%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (344 samples, 3.71%)</title><rect x="16.9272%" y="180" width="3.7089%" height="15" fill="rgb(225,20,46)" fg:x="1570" fg:w="344"/><text x="17.1772%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.17%)</title><rect x="20.4636%" y="196" width="0.1725%" height="15" fill="rgb(210,31,41)" fg:x="1898" fg:w="16"/><text x="20.7136%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (236 samples, 2.54%)</title><rect x="20.6361%" y="180" width="2.5445%" height="15" fill="rgb(221,200,47)" fg:x="1914" fg:w="236"/><text x="20.8861%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (19 samples, 0.20%)</title><rect x="25.0889%" y="196" width="0.2049%" height="15" fill="rgb(226,26,5)" fg:x="2327" fg:w="19"/><text x="25.3389%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (95 samples, 1.02%)</title><rect x="25.2938%" y="196" width="1.0243%" height="15" fill="rgb(249,33,26)" fg:x="2346" fg:w="95"/><text x="25.5438%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (119 samples, 1.28%)</title><rect x="28.2911%" y="212" width="1.2830%" height="15" fill="rgb(235,183,28)" fg:x="2624" fg:w="119"/><text x="28.5411%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (84 samples, 0.91%)</title><rect x="31.4394%" y="228" width="0.9057%" height="15" fill="rgb(221,5,38)" fg:x="2916" fg:w="84"/><text x="31.6894%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (896 samples, 9.66%)</title><rect x="26.3181%" y="196" width="9.6604%" height="15" fill="rgb(247,18,42)" fg:x="2441" fg:w="896"/><text x="26.5681%" y="206.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (594 samples, 6.40%)</title><rect x="29.5741%" y="212" width="6.4043%" height="15" fill="rgb(241,131,45)" fg:x="2743" fg:w="594"/><text x="29.8241%" y="222.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:113) (337 samples, 3.63%)</title><rect x="32.3450%" y="228" width="3.6334%" height="15" fill="rgb(249,31,29)" fg:x="3000" fg:w="337"/><text x="32.5950%" y="238.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (127 samples, 1.37%)</title><rect x="35.9784%" y="196" width="1.3693%" height="15" fill="rgb(225,111,53)" fg:x="3337" fg:w="127"/><text x="36.2284%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (17 samples, 0.18%)</title><rect x="38.2749%" y="212" width="0.1833%" height="15" fill="rgb(238,160,17)" fg:x="3550" fg:w="17"/><text x="38.5249%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (178 samples, 1.92%)</title><rect x="37.4124%" y="196" width="1.9191%" height="15" fill="rgb(214,148,48)" fg:x="3470" fg:w="178"/><text x="37.6624%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (81 samples, 0.87%)</title><rect x="38.4582%" y="212" width="0.8733%" height="15" fill="rgb(232,36,49)" fg:x="3567" fg:w="81"/><text x="38.7082%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (195 samples, 2.10%)</title><rect x="49.2183%" y="212" width="2.1024%" height="15" fill="rgb(209,103,24)" fg:x="4565" fg:w="195"/><text x="49.4683%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (10 samples, 0.11%)</title><rect x="51.3208%" y="212" width="0.1078%" height="15" fill="rgb(229,88,8)" fg:x="4760" fg:w="10"/><text x="51.5708%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (25 samples, 0.27%)</title><rect x="51.8922%" y="228" width="0.2695%" height="15" fill="rgb(213,181,19)" fg:x="4813" fg:w="25"/><text x="52.1422%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (168 samples, 1.81%)</title><rect x="51.4286%" y="212" width="1.8113%" height="15" fill="rgb(254,191,54)" fg:x="4770" fg:w="168"/><text x="51.6786%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (100 samples, 1.08%)</title><rect x="52.1617%" y="228" width="1.0782%" height="15" fill="rgb(241,83,37)" fg:x="4838" fg:w="100"/><text x="52.4117%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (25 samples, 0.27%)</title><rect x="54.6092%" y="228" width="0.2695%" height="15" fill="rgb(233,36,39)" fg:x="5065" fg:w="25"/><text x="54.8592%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (23 samples, 0.25%)</title><rect x="57.1644%" y="244" width="0.2480%" height="15" fill="rgb(226,3,54)" fg:x="5302" fg:w="23"/><text x="57.4144%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="59.4933%" y="260" width="0.1078%" height="15" fill="rgb(245,192,40)" fg:x="5518" fg:w="10"/><text x="59.7433%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (460 samples, 4.96%)</title><rect x="54.8787%" y="228" width="4.9596%" height="15" fill="rgb(238,167,29)" fg:x="5090" fg:w="460"/><text x="55.1287%" y="238.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (225 samples, 2.43%)</title><rect x="57.4124%" y="244" width="2.4259%" height="15" fill="rgb(232,182,51)" fg:x="5325" fg:w="225"/><text x="57.6624%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.24%)</title><rect x="59.6011%" y="260" width="0.2372%" height="15" fill="rgb(231,60,39)" fg:x="5528" fg:w="22"/><text x="59.8511%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (249 samples, 2.68%)</title><rect x="59.8383%" y="228" width="2.6846%" height="15" fill="rgb(208,69,12)" fg:x="5550" fg:w="249"/><text x="60.0883%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (118 samples, 1.27%)</title><rect x="62.5229%" y="228" width="1.2722%" height="15" fill="rgb(235,93,37)" fg:x="5799" fg:w="118"/><text x="62.7729%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,010 samples, 10.89%)</title><rect x="53.2399%" y="212" width="10.8895%" height="15" fill="rgb(213,116,39)" fg:x="4938" fg:w="1010"/><text x="53.4899%" y="222.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:66) (23 samples, 0.25%)</title><rect x="63.8814%" y="228" width="0.2480%" height="15" fill="rgb(222,207,29)" fg:x="5925" fg:w="23"/><text x="64.1314%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (30 samples, 0.32%)</title><rect x="64.1941%" y="212" width="0.3235%" height="15" fill="rgb(206,96,30)" fg:x="5954" fg:w="30"/><text x="64.4441%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (23 samples, 0.25%)</title><rect x="65.4987%" y="228" width="0.2480%" height="15" fill="rgb(218,138,4)" fg:x="6075" fg:w="23"/><text x="65.7487%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="67.2668%" y="244" width="0.1078%" height="15" fill="rgb(250,191,14)" fg:x="6239" fg:w="10"/><text x="67.5168%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (298 samples, 3.21%)</title><rect x="64.5175%" y="212" width="3.2129%" height="15" fill="rgb(239,60,40)" fg:x="5984" fg:w="298"/><text x="64.7675%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (184 samples, 1.98%)</title><rect x="65.7466%" y="228" width="1.9838%" height="15" fill="rgb(206,27,48)" fg:x="6098" fg:w="184"/><text x="65.9966%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.36%)</title><rect x="67.3747%" y="244" width="0.3558%" height="15" fill="rgb(225,35,8)" fg:x="6249" fg:w="33"/><text x="67.6247%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.13%)</title><rect x="69.0782%" y="228" width="0.1294%" height="15" fill="rgb(250,213,24)" fg:x="6407" fg:w="12"/><text x="69.3282%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="71.6011%" y="244" width="0.1294%" height="15" fill="rgb(247,123,22)" fg:x="6641" fg:w="12"/><text x="71.8511%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (407 samples, 4.39%)</title><rect x="67.7305%" y="212" width="4.3881%" height="15" fill="rgb(231,138,38)" fg:x="6282" fg:w="407"/><text x="67.9805%" y="222.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (270 samples, 2.91%)</title><rect x="69.2075%" y="228" width="2.9111%" height="15" fill="rgb(231,145,46)" fg:x="6419" fg:w="270"/><text x="69.4575%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.39%)</title><rect x="71.7305%" y="244" width="0.3881%" height="15" fill="rgb(251,118,11)" fg:x="6653" fg:w="36"/><text x="71.9805%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (95 samples, 1.02%)</title><rect x="72.1186%" y="212" width="1.0243%" height="15" fill="rgb(217,147,25)" fg:x="6689" fg:w="95"/><text x="72.3686%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (175 samples, 1.89%)</title><rect x="73.1536%" y="212" width="1.8868%" height="15" fill="rgb(247,81,37)" fg:x="6785" fg:w="175"/><text x="73.4036%" y="222.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:85) (74 samples, 0.80%)</title><rect x="75.0404%" y="212" width="0.7978%" height="15" fill="rgb(209,12,38)" fg:x="6960" fg:w="74"/><text x="75.2904%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (17 samples, 0.18%)</title><rect x="75.8383%" y="212" width="0.1833%" height="15" fill="rgb(227,1,9)" fg:x="7034" fg:w="17"/><text x="76.0883%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,699 samples, 39.88%)</title><rect x="39.3315%" y="196" width="39.8814%" height="15" fill="rgb(248,47,43)" fg:x="3648" fg:w="3699"/><text x="39.5815%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (296 samples, 3.19%)</title><rect x="76.0216%" y="212" width="3.1914%" height="15" fill="rgb(221,10,30)" fg:x="7051" fg:w="296"/><text x="76.2716%" y="222.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,246 samples, 56.56%)</title><rect x="23.1806%" y="180" width="56.5606%" height="15" fill="rgb(210,229,1)" fg:x="2150" fg:w="5246"/><text x="23.4306%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (49 samples, 0.53%)</title><rect x="79.2129%" y="196" width="0.5283%" height="15" fill="rgb(222,148,37)" fg:x="7347" fg:w="49"/><text x="79.4629%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (10 samples, 0.11%)</title><rect x="79.7412%" y="180" width="0.1078%" height="15" fill="rgb(234,67,33)" fg:x="7396" fg:w="10"/><text x="79.9912%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (63 samples, 0.68%)</title><rect x="81.5633%" y="196" width="0.6792%" height="15" fill="rgb(247,98,35)" fg:x="7565" fg:w="63"/><text x="81.8133%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (54 samples, 0.58%)</title><rect x="83.3208%" y="212" width="0.5822%" height="15" fill="rgb(247,138,52)" fg:x="7728" fg:w="54"/><text x="83.5708%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (589 samples, 6.35%)</title><rect x="79.9353%" y="180" width="6.3504%" height="15" fill="rgb(213,79,30)" fg:x="7414" fg:w="589"/><text x="80.1853%" y="190.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (375 samples, 4.04%)</title><rect x="82.2426%" y="196" width="4.0431%" height="15" fill="rgb(246,177,23)" fg:x="7628" fg:w="375"/><text x="82.4926%" y="206.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (221 samples, 2.38%)</title><rect x="83.9030%" y="212" width="2.3827%" height="15" fill="rgb(230,62,27)" fg:x="7782" fg:w="221"/><text x="84.1530%" y="222.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:101) (14 samples, 0.15%)</title><rect x="86.7817%" y="196" width="0.1509%" height="15" fill="rgb(216,154,8)" fg:x="8049" fg:w="14"/><text x="87.0317%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (94 samples, 1.01%)</title><rect x="86.2857%" y="180" width="1.0135%" height="15" fill="rgb(244,35,45)" fg:x="8003" fg:w="94"/><text x="86.5357%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (34 samples, 0.37%)</title><rect x="86.9326%" y="196" width="0.3666%" height="15" fill="rgb(251,115,12)" fg:x="8063" fg:w="34"/><text x="87.1826%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (16 samples, 0.17%)</title><rect x="87.6226%" y="196" width="0.1725%" height="15" fill="rgb(240,54,50)" fg:x="8127" fg:w="16"/><text x="87.8726%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (85 samples, 0.92%)</title><rect x="87.2992%" y="180" width="0.9164%" height="15" fill="rgb(233,84,52)" fg:x="8097" fg:w="85"/><text x="87.5492%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (39 samples, 0.42%)</title><rect x="87.7951%" y="196" width="0.4205%" height="15" fill="rgb(207,117,47)" fg:x="8143" fg:w="39"/><text x="88.0451%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (193 samples, 2.08%)</title><rect x="88.2156%" y="180" width="2.0809%" height="15" fill="rgb(249,43,39)" fg:x="8182" fg:w="193"/><text x="88.4656%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.16%)</title><rect x="90.1348%" y="196" width="0.1617%" height="15" fill="rgb(209,38,44)" fg:x="8360" fg:w="15"/><text x="90.3848%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (63 samples, 0.68%)</title><rect x="90.2965%" y="180" width="0.6792%" height="15" fill="rgb(236,212,23)" fg:x="8375" fg:w="63"/><text x="90.5465%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (71 samples, 0.77%)</title><rect x="90.9757%" y="180" width="0.7655%" height="15" fill="rgb(242,79,21)" fg:x="8438" fg:w="71"/><text x="91.2257%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="94.0270%" y="196" width="0.1078%" height="15" fill="rgb(211,96,35)" fg:x="8721" fg:w="10"/><text x="94.2770%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (121 samples, 1.30%)</title><rect x="94.1348%" y="196" width="1.3046%" height="15" fill="rgb(253,215,40)" fg:x="8731" fg:w="121"/><text x="94.3848%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.16%)</title><rect x="95.2776%" y="212" width="0.1617%" height="15" fill="rgb(211,81,21)" fg:x="8837" fg:w="15"/><text x="95.5276%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (354 samples, 3.82%)</title><rect x="91.7412%" y="180" width="3.8167%" height="15" fill="rgb(208,190,38)" fg:x="8509" fg:w="354"/><text x="91.9912%" y="190.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:287) (26 samples, 0.28%)</title><rect x="95.5580%" y="180" width="0.2803%" height="15" fill="rgb(235,213,38)" fg:x="8863" fg:w="26"/><text x="95.8080%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (8,827 samples, 95.17%)</title><rect x="0.8086%" y="164" width="95.1698%" height="15" fill="rgb(237,122,38)" fg:x="75" fg:w="8827"/><text x="1.0586%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__hash__ (kappybara/pattern.py:187) (10 samples, 0.11%)</title><rect x="96.7547%" y="180" width="0.1078%" height="15" fill="rgb(244,218,35)" fg:x="8974" fg:w="10"/><text x="97.0047%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (89 samples, 0.96%)</title><rect x="95.9784%" y="164" width="0.9596%" height="15" fill="rgb(240,68,47)" fg:x="8902" fg:w="89"/><text x="96.2284%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (150 samples, 1.62%)</title><rect x="97.0027%" y="164" width="1.6173%" height="15" fill="rgb(210,16,53)" fg:x="8997" fg:w="150"/><text x="97.2527%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (9,078 samples, 97.88%)</title><rect x="0.7547%" y="148" width="97.8760%" height="15" fill="rgb(235,124,12)" fg:x="70" fg:w="9078"/><text x="1.0047%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>apply_update (kappybara/mixture.py:101) (9,147 samples, 98.62%)</title><rect x="0.7008%" y="116" width="98.6199%" height="15" fill="rgb(224,169,11)" fg:x="65" fg:w="9147"/><text x="0.9508%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (9,146 samples, 98.61%)</title><rect x="0.7116%" y="132" width="98.6092%" height="15" fill="rgb(250,166,2)" fg:x="66" fg:w="9146"/><text x="0.9616%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (64 samples, 0.69%)</title><rect x="98.6307%" y="148" width="0.6900%" height="15" fill="rgb(242,216,29)" fg:x="9148" fg:w="64"/><text x="98.8807%" y="158.50"></text></g><g><title>act (kappybara/system.py:66) (9,152 samples, 98.67%)</title><rect x="0.6792%" y="100" width="98.6739%" height="15" fill="rgb(230,116,27)" fg:x="63" fg:w="9152"/><text x="0.9292%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,211 samples, 99.31%)</title><rect x="0.0539%" y="68" width="99.3100%" height="15" fill="rgb(228,99,48)" fg:x="5" fg:w="9211"/><text x="0.3039%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:71) (9,195 samples, 99.14%)</title><rect x="0.2264%" y="84" width="99.1375%" height="15" fill="rgb(253,11,6)" fg:x="21" fg:w="9195"/><text x="0.4764%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (11 samples, 0.12%)</title><rect x="99.3639%" y="68" width="0.1186%" height="15" fill="rgb(247,143,39)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (11 samples, 0.12%)</title><rect x="99.3639%" y="84" width="0.1186%" height="15" fill="rgb(236,97,10)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (11 samples, 0.12%)</title><rect x="99.3639%" y="100" width="0.1186%" height="15" fill="rgb(233,208,19)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (11 samples, 0.12%)</title><rect x="99.3639%" y="116" width="0.1186%" height="15" fill="rgb(216,164,2)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (11 samples, 0.12%)</title><rect x="99.3639%" y="132" width="0.1186%" height="15" fill="rgb(220,129,5)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (11 samples, 0.12%)</title><rect x="99.3639%" y="148" width="0.1186%" height="15" fill="rgb(242,17,10)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (11 samples, 0.12%)</title><rect x="99.3639%" y="164" width="0.1186%" height="15" fill="rgb(242,107,0)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (11 samples, 0.12%)</title><rect x="99.3639%" y="180" width="0.1186%" height="15" fill="rgb(251,28,31)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (11 samples, 0.12%)</title><rect x="99.3639%" y="196" width="0.1186%" height="15" fill="rgb(233,223,10)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (11 samples, 0.12%)</title><rect x="99.3639%" y="212" width="0.1186%" height="15" fill="rgb(215,21,27)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (11 samples, 0.12%)</title><rect x="99.3639%" y="228" width="0.1186%" height="15" fill="rgb(232,23,21)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (11 samples, 0.12%)</title><rect x="99.3639%" y="244" width="0.1186%" height="15" fill="rgb(244,5,23)" fg:x="9216" fg:w="11"/><text x="99.6139%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (10 samples, 0.11%)</title><rect x="99.3747%" y="260" width="0.1078%" height="15" fill="rgb(226,81,46)" fg:x="9217" fg:w="10"/><text x="99.6247%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (10 samples, 0.11%)</title><rect x="99.3747%" y="276" width="0.1078%" height="15" fill="rgb(247,70,30)" fg:x="9217" fg:w="10"/><text x="99.6247%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (10 samples, 0.11%)</title><rect x="99.3747%" y="292" width="0.1078%" height="15" fill="rgb(212,68,19)" fg:x="9217" fg:w="10"/><text x="99.6247%" y="302.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (12 samples, 0.13%)</title><rect x="99.4825%" y="68" width="0.1294%" height="15" fill="rgb(240,187,13)" fg:x="9227" fg:w="12"/><text x="99.7325%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (15 samples, 0.16%)</title><rect x="99.6981%" y="68" width="0.1617%" height="15" fill="rgb(223,113,26)" fg:x="9247" fg:w="15"/><text x="99.9481%" y="78.50"></text></g><g><title>all (9,275 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="9275"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:113) (13 samples, 0.14%)</title><rect x="99.8598%" y="68" width="0.1402%" height="15" fill="rgb(241,108,4)" fg:x="9262" fg:w="13"/><text x="100.1098%" y="78.50"></text></g></svg></svg>