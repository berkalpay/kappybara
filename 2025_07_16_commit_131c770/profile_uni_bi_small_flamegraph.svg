<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 131c770</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="12009"><g><title>update (kappybara/system.py:70) (70 samples, 0.58%)</title><rect x="0.0416%" y="84" width="0.5829%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="70"/><text x="0.2916%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (70 samples, 0.58%)</title><rect x="0.0416%" y="100" width="0.5829%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="70"/><text x="0.2916%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (63 samples, 0.52%)</title><rect x="0.0999%" y="116" width="0.5246%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="63"/><text x="0.3499%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (58 samples, 0.48%)</title><rect x="0.1416%" y="132" width="0.4830%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="58"/><text x="0.3916%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (57 samples, 0.47%)</title><rect x="0.1499%" y="148" width="0.4746%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="57"/><text x="0.3999%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (55 samples, 0.46%)</title><rect x="0.1665%" y="164" width="0.4580%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="55"/><text x="0.4165%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (13 samples, 0.11%)</title><rect x="0.6828%" y="116" width="0.1083%" height="15" fill="rgb(207,160,47)" fg:x="82" fg:w="13"/><text x="0.9328%" y="126.50"></text></g><g><title>select (kappybara/rule.py:222) (18 samples, 0.15%)</title><rect x="0.8910%" y="116" width="0.1499%" height="15" fill="rgb(228,23,34)" fg:x="107" fg:w="18"/><text x="1.1410%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (49 samples, 0.41%)</title><rect x="0.6828%" y="100" width="0.4080%" height="15" fill="rgb(218,30,26)" fg:x="82" fg:w="49"/><text x="0.9328%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (81 samples, 0.67%)</title><rect x="1.5988%" y="212" width="0.6745%" height="15" fill="rgb(220,122,19)" fg:x="192" fg:w="81"/><text x="1.8488%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.17%)</title><rect x="10.0341%" y="228" width="0.1749%" height="15" fill="rgb(250,228,42)" fg:x="1205" fg:w="21"/><text x="10.2841%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (982 samples, 8.18%)</title><rect x="2.2733%" y="212" width="8.1772%" height="15" fill="rgb(240,193,28)" fg:x="273" fg:w="982"/><text x="2.5233%" y="222.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.24%)</title><rect x="10.2090%" y="228" width="0.2415%" height="15" fill="rgb(216,20,37)" fg:x="1226" fg:w="29"/><text x="10.4590%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (319 samples, 2.66%)</title><rect x="10.4505%" y="212" width="2.6563%" height="15" fill="rgb(206,188,39)" fg:x="1255" fg:w="319"/><text x="10.7005%" y="222.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.32%)</title><rect x="12.7821%" y="228" width="0.3248%" height="15" fill="rgb(217,207,13)" fg:x="1535" fg:w="39"/><text x="13.0321%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (86 samples, 0.72%)</title><rect x="13.1568%" y="212" width="0.7161%" height="15" fill="rgb(231,73,38)" fg:x="1580" fg:w="86"/><text x="13.4068%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (81 samples, 0.67%)</title><rect x="13.8729%" y="212" width="0.6745%" height="15" fill="rgb(225,20,46)" fg:x="1666" fg:w="81"/><text x="14.1229%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.19%)</title><rect x="17.0122%" y="228" width="0.1915%" height="15" fill="rgb(210,31,41)" fg:x="2043" fg:w="23"/><text x="17.2622%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (346 samples, 2.88%)</title><rect x="14.5474%" y="212" width="2.8812%" height="15" fill="rgb(221,200,47)" fg:x="1747" fg:w="346"/><text x="14.7974%" y="222.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.22%)</title><rect x="17.2038%" y="228" width="0.2248%" height="15" fill="rgb(226,26,5)" fg:x="2066" fg:w="27"/><text x="17.4538%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (257 samples, 2.14%)</title><rect x="17.4286%" y="212" width="2.1401%" height="15" fill="rgb(249,33,26)" fg:x="2093" fg:w="257"/><text x="17.6786%" y="222.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (14 samples, 0.12%)</title><rect x="21.4506%" y="228" width="0.1166%" height="15" fill="rgb(235,183,28)" fg:x="2576" fg:w="14"/><text x="21.7006%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (110 samples, 0.92%)</title><rect x="21.5672%" y="228" width="0.9160%" height="15" fill="rgb(221,5,38)" fg:x="2590" fg:w="110"/><text x="21.8172%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (128 samples, 1.07%)</title><rect x="24.1152%" y="244" width="1.0659%" height="15" fill="rgb(247,18,42)" fg:x="2896" fg:w="128"/><text x="24.3652%" y="254.50"></text></g><g><title>sites (kappybara/pattern.py:111) (114 samples, 0.95%)</title><rect x="26.7300%" y="260" width="0.9493%" height="15" fill="rgb(241,131,45)" fg:x="3210" fg:w="114"/><text x="26.9800%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (970 samples, 8.08%)</title><rect x="22.5331%" y="228" width="8.0773%" height="15" fill="rgb(249,31,29)" fg:x="2706" fg:w="970"/><text x="22.7831%" y="238.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (652 samples, 5.43%)</title><rect x="25.1811%" y="244" width="5.4293%" height="15" fill="rgb(225,111,53)" fg:x="3024" fg:w="652"/><text x="25.4311%" y="254.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (352 samples, 2.93%)</title><rect x="27.6792%" y="260" width="2.9311%" height="15" fill="rgb(238,160,17)" fg:x="3324" fg:w="352"/><text x="27.9292%" y="270.50">si..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (141 samples, 1.17%)</title><rect x="30.6104%" y="228" width="1.1741%" height="15" fill="rgb(214,148,48)" fg:x="3676" fg:w="141"/><text x="30.8604%" y="238.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (17 samples, 0.14%)</title><rect x="32.5839%" y="244" width="0.1416%" height="15" fill="rgb(232,36,49)" fg:x="3913" fg:w="17"/><text x="32.8339%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (194 samples, 1.62%)</title><rect x="31.8345%" y="228" width="1.6155%" height="15" fill="rgb(209,103,24)" fg:x="3823" fg:w="194"/><text x="32.0845%" y="238.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (87 samples, 0.72%)</title><rect x="32.7255%" y="244" width="0.7245%" height="15" fill="rgb(229,88,8)" fg:x="3930" fg:w="87"/><text x="32.9755%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (181 samples, 1.51%)</title><rect x="40.9193%" y="244" width="1.5072%" height="15" fill="rgb(213,181,19)" fg:x="4914" fg:w="181"/><text x="41.1693%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (20 samples, 0.17%)</title><rect x="42.4265%" y="244" width="0.1665%" height="15" fill="rgb(254,191,54)" fg:x="5095" fg:w="20"/><text x="42.6765%" y="254.50"></text></g><g><title>stated (kappybara/pattern.py:52) (28 samples, 0.23%)</title><rect x="43.0427%" y="260" width="0.2332%" height="15" fill="rgb(241,83,37)" fg:x="5169" fg:w="28"/><text x="43.2927%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (200 samples, 1.67%)</title><rect x="42.5931%" y="244" width="1.6654%" height="15" fill="rgb(233,36,39)" fg:x="5115" fg:w="200"/><text x="42.8431%" y="254.50"></text></g><g><title>stated (kappybara/pattern.py:54) (118 samples, 0.98%)</title><rect x="43.2759%" y="260" width="0.9826%" height="15" fill="rgb(226,3,54)" fg:x="5197" fg:w="118"/><text x="43.5259%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:56) (21 samples, 0.17%)</title><rect x="45.1328%" y="260" width="0.1749%" height="15" fill="rgb(245,192,40)" fg:x="5420" fg:w="21"/><text x="45.3828%" y="270.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (21 samples, 0.17%)</title><rect x="47.0231%" y="276" width="0.1749%" height="15" fill="rgb(238,167,29)" fg:x="5647" fg:w="21"/><text x="47.2731%" y="286.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.11%)</title><rect x="48.8300%" y="292" width="0.1083%" height="15" fill="rgb(232,182,51)" fg:x="5864" fg:w="13"/><text x="49.0800%" y="302.50"></text></g><g><title>bound (kappybara/pattern.py:59) (467 samples, 3.89%)</title><rect x="45.3077%" y="260" width="3.8888%" height="15" fill="rgb(231,60,39)" fg:x="5441" fg:w="467"/><text x="45.5577%" y="270.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (240 samples, 2.00%)</title><rect x="47.1979%" y="276" width="1.9985%" height="15" fill="rgb(208,69,12)" fg:x="5668" fg:w="240"/><text x="47.4479%" y="286.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.26%)</title><rect x="48.9383%" y="292" width="0.2581%" height="15" fill="rgb(235,93,37)" fg:x="5877" fg:w="31"/><text x="49.1883%" y="302.50"></text></g><g><title>bound (kappybara/pattern.py:60) (247 samples, 2.06%)</title><rect x="49.1964%" y="260" width="2.0568%" height="15" fill="rgb(213,116,39)" fg:x="5908" fg:w="247"/><text x="49.4464%" y="270.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (113 samples, 0.94%)</title><rect x="51.2532%" y="260" width="0.9410%" height="15" fill="rgb(222,207,29)" fg:x="6155" fg:w="113"/><text x="51.5032%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,002 samples, 8.34%)</title><rect x="44.2585%" y="244" width="8.3437%" height="15" fill="rgb(206,96,30)" fg:x="5315" fg:w="1002"/><text x="44.5085%" y="254.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (39 samples, 0.32%)</title><rect x="52.2775%" y="260" width="0.3248%" height="15" fill="rgb(218,138,4)" fg:x="6278" fg:w="39"/><text x="52.5275%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (21 samples, 0.17%)</title><rect x="52.6439%" y="244" width="0.1749%" height="15" fill="rgb(250,191,14)" fg:x="6322" fg:w="21"/><text x="52.8939%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (22 samples, 0.18%)</title><rect x="53.4599%" y="260" width="0.1832%" height="15" fill="rgb(239,60,40)" fg:x="6420" fg:w="22"/><text x="53.7099%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (249 samples, 2.07%)</title><rect x="52.8187%" y="244" width="2.0734%" height="15" fill="rgb(206,27,48)" fg:x="6343" fg:w="249"/><text x="53.0687%" y="254.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (150 samples, 1.25%)</title><rect x="53.6431%" y="260" width="1.2491%" height="15" fill="rgb(225,35,8)" fg:x="6442" fg:w="150"/><text x="53.8931%" y="270.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="54.7256%" y="276" width="0.1665%" height="15" fill="rgb(250,213,24)" fg:x="6572" fg:w="20"/><text x="54.9756%" y="286.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.16%)</title><rect x="56.1162%" y="260" width="0.1582%" height="15" fill="rgb(247,123,22)" fg:x="6739" fg:w="19"/><text x="56.3662%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (451 samples, 3.76%)</title><rect x="54.8922%" y="244" width="3.7555%" height="15" fill="rgb(231,138,38)" fg:x="6592" fg:w="451"/><text x="55.1422%" y="254.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (285 samples, 2.37%)</title><rect x="56.2745%" y="260" width="2.3732%" height="15" fill="rgb(231,145,46)" fg:x="6758" fg:w="285"/><text x="56.5245%" y="270.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.33%)</title><rect x="58.3146%" y="276" width="0.3331%" height="15" fill="rgb(251,118,11)" fg:x="7003" fg:w="40"/><text x="58.5646%" y="286.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (90 samples, 0.75%)</title><rect x="58.6477%" y="244" width="0.7494%" height="15" fill="rgb(217,147,25)" fg:x="7043" fg:w="90"/><text x="58.8977%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (176 samples, 1.47%)</title><rect x="59.4054%" y="244" width="1.4656%" height="15" fill="rgb(247,81,37)" fg:x="7134" fg:w="176"/><text x="59.6554%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (86 samples, 0.72%)</title><rect x="60.8710%" y="244" width="0.7161%" height="15" fill="rgb(209,12,38)" fg:x="7310" fg:w="86"/><text x="61.1210%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (18 samples, 0.15%)</title><rect x="61.5871%" y="244" width="0.1499%" height="15" fill="rgb(227,1,9)" fg:x="7396" fg:w="18"/><text x="61.8371%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,704 samples, 30.84%)</title><rect x="33.4499%" y="228" width="30.8435%" height="15" fill="rgb(248,47,43)" fg:x="4017" fg:w="3704"/><text x="33.6999%" y="238.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (307 samples, 2.56%)</title><rect x="61.7370%" y="244" width="2.5564%" height="15" fill="rgb(221,10,30)" fg:x="7414" fg:w="307"/><text x="61.9870%" y="254.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,424 samples, 45.17%)</title><rect x="19.5687%" y="212" width="45.1661%" height="15" fill="rgb(210,229,1)" fg:x="2350" fg:w="5424"/><text x="19.8187%" y="222.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (53 samples, 0.44%)</title><rect x="64.2934%" y="228" width="0.4413%" height="15" fill="rgb(222,148,37)" fg:x="7721" fg:w="53"/><text x="64.5434%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (60 samples, 0.50%)</title><rect x="66.1254%" y="228" width="0.4996%" height="15" fill="rgb(234,67,33)" fg:x="7941" fg:w="60"/><text x="66.3754%" y="238.50"></text></g><g><title>sites (kappybara/pattern.py:111) (55 samples, 0.46%)</title><rect x="67.6742%" y="244" width="0.4580%" height="15" fill="rgb(247,98,35)" fg:x="8127" fg:w="55"/><text x="67.9242%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (628 samples, 5.23%)</title><rect x="64.8181%" y="212" width="5.2294%" height="15" fill="rgb(247,138,52)" fg:x="7784" fg:w="628"/><text x="65.0681%" y="222.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (411 samples, 3.42%)</title><rect x="66.6250%" y="228" width="3.4224%" height="15" fill="rgb(213,79,30)" fg:x="8001" fg:w="411"/><text x="66.8750%" y="238.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (230 samples, 1.92%)</title><rect x="68.1322%" y="244" width="1.9152%" height="15" fill="rgb(246,177,23)" fg:x="8182" fg:w="230"/><text x="68.3822%" y="254.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:101) (22 samples, 0.18%)</title><rect x="70.6137%" y="228" width="0.1832%" height="15" fill="rgb(230,62,27)" fg:x="8480" fg:w="22"/><text x="70.8637%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (123 samples, 1.02%)</title><rect x="70.0475%" y="212" width="1.0242%" height="15" fill="rgb(216,154,8)" fg:x="8412" fg:w="123"/><text x="70.2975%" y="222.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (33 samples, 0.27%)</title><rect x="70.7969%" y="228" width="0.2748%" height="15" fill="rgb(244,35,45)" fg:x="8502" fg:w="33"/><text x="71.0469%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (91 samples, 0.76%)</title><rect x="71.0717%" y="212" width="0.7578%" height="15" fill="rgb(251,115,12)" fg:x="8535" fg:w="91"/><text x="71.3217%" y="222.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (51 samples, 0.42%)</title><rect x="71.4048%" y="228" width="0.4247%" height="15" fill="rgb(240,54,50)" fg:x="8575" fg:w="51"/><text x="71.6548%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (205 samples, 1.71%)</title><rect x="71.8295%" y="212" width="1.7071%" height="15" fill="rgb(233,84,52)" fg:x="8626" fg:w="205"/><text x="72.0795%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.24%)</title><rect x="73.2950%" y="228" width="0.2415%" height="15" fill="rgb(207,117,47)" fg:x="8802" fg:w="29"/><text x="73.5450%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (74 samples, 0.62%)</title><rect x="73.5365%" y="212" width="0.6162%" height="15" fill="rgb(249,43,39)" fg:x="8831" fg:w="74"/><text x="73.7865%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (83 samples, 0.69%)</title><rect x="74.1527%" y="212" width="0.6911%" height="15" fill="rgb(209,38,44)" fg:x="8905" fg:w="83"/><text x="74.4027%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (109 samples, 0.91%)</title><rect x="76.6675%" y="228" width="0.9077%" height="15" fill="rgb(236,212,23)" fg:x="9207" fg:w="109"/><text x="76.9175%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.12%)</title><rect x="77.4502%" y="244" width="0.1249%" height="15" fill="rgb(242,79,21)" fg:x="9301" fg:w="15"/><text x="77.7002%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (338 samples, 2.81%)</title><rect x="74.8439%" y="212" width="2.8146%" height="15" fill="rgb(211,96,35)" fg:x="8988" fg:w="338"/><text x="75.0939%" y="222.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:287) (47 samples, 0.39%)</title><rect x="77.6667%" y="212" width="0.3914%" height="15" fill="rgb(253,215,40)" fg:x="9327" fg:w="47"/><text x="77.9167%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,248 samples, 77.01%)</title><rect x="1.2074%" y="196" width="77.0089%" height="15" fill="rgb(211,81,21)" fg:x="145" fg:w="9248"/><text x="1.4574%" y="206.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (117 samples, 0.97%)</title><rect x="78.2163%" y="196" width="0.9743%" height="15" fill="rgb(208,190,38)" fg:x="9393" fg:w="117"/><text x="78.4663%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (16 samples, 0.13%)</title><rect x="79.0574%" y="212" width="0.1332%" height="15" fill="rgb(235,213,38)" fg:x="9494" fg:w="16"/><text x="79.3074%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (161 samples, 1.34%)</title><rect x="79.2239%" y="196" width="1.3407%" height="15" fill="rgb(237,122,38)" fg:x="9514" fg:w="161"/><text x="79.4739%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (9,540 samples, 79.44%)</title><rect x="1.1325%" y="180" width="79.4404%" height="15" fill="rgb(244,218,35)" fg:x="136" fg:w="9540"/><text x="1.3825%" y="190.50">track_component (kappybara/mixture.py:82)</text></g><g><title>track_component (kappybara/mixture.py:163) (9,628 samples, 80.17%)</title><rect x="1.1242%" y="164" width="80.1732%" height="15" fill="rgb(240,68,47)" fg:x="135" fg:w="9628"/><text x="1.3742%" y="174.50">track_component (kappybara/mixture.py:163)</text></g><g><title>track_component (kappybara/mixture.py:84) (87 samples, 0.72%)</title><rect x="80.5729%" y="180" width="0.7245%" height="15" fill="rgb(210,16,53)" fg:x="9676" fg:w="87"/><text x="80.8229%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:194) (27 samples, 0.22%)</title><rect x="81.3890%" y="180" width="0.2248%" height="15" fill="rgb(235,124,12)" fg:x="9774" fg:w="27"/><text x="81.6390%" y="190.50"></text></g><g><title>lookup (kappybara/indexed_set.py:169) (49 samples, 0.41%)</title><rect x="85.4026%" y="228" width="0.4080%" height="15" fill="rgb(224,169,11)" fg:x="10256" fg:w="49"/><text x="85.6526%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (141 samples, 1.17%)</title><rect x="85.8106%" y="228" width="1.1741%" height="15" fill="rgb(250,166,2)" fg:x="10305" fg:w="141"/><text x="86.0606%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:172) (15 samples, 0.12%)</title><rect x="86.9848%" y="228" width="0.1249%" height="15" fill="rgb(242,216,29)" fg:x="10446" fg:w="15"/><text x="87.2348%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:173) (44 samples, 0.37%)</title><rect x="87.1097%" y="228" width="0.3664%" height="15" fill="rgb(230,116,27)" fg:x="10461" fg:w="44"/><text x="87.3597%" y="238.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (765 samples, 6.37%)</title><rect x="81.6138%" y="180" width="6.3702%" height="15" fill="rgb(228,99,48)" fg:x="9801" fg:w="765"/><text x="81.8638%" y="190.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:66) (571 samples, 4.75%)</title><rect x="83.2292%" y="196" width="4.7548%" height="15" fill="rgb(253,11,6)" fg:x="9995" fg:w="571"/><text x="83.4792%" y="206.50">__call..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:167) (512 samples, 4.26%)</title><rect x="83.7205%" y="212" width="4.2635%" height="15" fill="rgb(247,143,39)" fg:x="10054" fg:w="512"/><text x="83.9705%" y="222.50">&lt;lamb..</text></g><g><title>lookup (kappybara/indexed_set.py:174) (61 samples, 0.51%)</title><rect x="87.4761%" y="228" width="0.5080%" height="15" fill="rgb(236,97,10)" fg:x="10505" fg:w="61"/><text x="87.7261%" y="238.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (161 samples, 1.34%)</title><rect x="89.8410%" y="196" width="1.3407%" height="15" fill="rgb(233,208,19)" fg:x="10789" fg:w="161"/><text x="90.0910%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (37 samples, 0.31%)</title><rect x="90.8735%" y="212" width="0.3081%" height="15" fill="rgb(216,164,2)" fg:x="10913" fg:w="37"/><text x="91.1235%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (141 samples, 1.17%)</title><rect x="91.1816%" y="196" width="1.1741%" height="15" fill="rgb(220,129,5)" fg:x="10950" fg:w="141"/><text x="91.4316%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:134) (62 samples, 0.52%)</title><rect x="92.3557%" y="196" width="0.5163%" height="15" fill="rgb(242,17,10)" fg:x="11091" fg:w="62"/><text x="92.6057%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (161 samples, 1.34%)</title><rect x="92.8720%" y="196" width="1.3407%" height="15" fill="rgb(242,107,0)" fg:x="11153" fg:w="161"/><text x="93.1220%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (20 samples, 0.17%)</title><rect x="94.0461%" y="212" width="0.1665%" height="15" fill="rgb(251,28,31)" fg:x="11294" fg:w="20"/><text x="94.2961%" y="222.50"></text></g><g><title>track_component (kappybara/mixture.py:165) (1,640 samples, 13.66%)</title><rect x="81.2974%" y="164" width="13.6564%" height="15" fill="rgb(233,223,10)" fg:x="9763" fg:w="1640"/><text x="81.5474%" y="174.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:198) (833 samples, 6.94%)</title><rect x="88.0173%" y="180" width="6.9365%" height="15" fill="rgb(215,21,27)" fg:x="10570" fg:w="833"/><text x="88.2673%" y="190.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:138) (89 samples, 0.74%)</title><rect x="94.2127%" y="196" width="0.7411%" height="15" fill="rgb(232,23,21)" fg:x="11314" fg:w="89"/><text x="94.4627%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (11,276 samples, 93.90%)</title><rect x="1.0992%" y="132" width="93.8962%" height="15" fill="rgb(244,5,23)" fg:x="132" fg:w="11276"/><text x="1.3492%" y="142.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:175) (11,274 samples, 93.88%)</title><rect x="1.1158%" y="148" width="93.8796%" height="15" fill="rgb(226,81,46)" fg:x="134" fg:w="11274"/><text x="1.3658%" y="158.50">_update_embeddings (kappybara/mixture.py:175)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (13 samples, 0.11%)</title><rect x="95.1120%" y="180" width="0.1083%" height="15" fill="rgb(247,70,30)" fg:x="11422" fg:w="13"/><text x="95.3620%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (37 samples, 0.31%)</title><rect x="95.1120%" y="164" width="0.3081%" height="15" fill="rgb(212,68,19)" fg:x="11422" fg:w="37"/><text x="95.3620%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (24 samples, 0.20%)</title><rect x="95.2203%" y="180" width="0.1999%" height="15" fill="rgb(240,187,13)" fg:x="11435" fg:w="24"/><text x="95.4703%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (44 samples, 0.37%)</title><rect x="95.4701%" y="180" width="0.3664%" height="15" fill="rgb(223,113,26)" fg:x="11465" fg:w="44"/><text x="95.7201%" y="190.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:66) (14 samples, 0.12%)</title><rect x="95.7199%" y="196" width="0.1166%" height="15" fill="rgb(206,192,2)" fg:x="11495" fg:w="14"/><text x="95.9699%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (24 samples, 0.20%)</title><rect x="96.0946%" y="196" width="0.1999%" height="15" fill="rgb(241,108,4)" fg:x="11540" fg:w="24"/><text x="96.3446%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (20 samples, 0.17%)</title><rect x="96.2944%" y="196" width="0.1665%" height="15" fill="rgb(247,173,49)" fg:x="11564" fg:w="20"/><text x="96.5444%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (36 samples, 0.30%)</title><rect x="96.5359%" y="196" width="0.2998%" height="15" fill="rgb(224,114,35)" fg:x="11593" fg:w="36"/><text x="96.7859%" y="206.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (193 samples, 1.61%)</title><rect x="95.4201%" y="164" width="1.6071%" height="15" fill="rgb(245,159,27)" fg:x="11459" fg:w="193"/><text x="95.6701%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:198) (141 samples, 1.17%)</title><rect x="95.8531%" y="180" width="1.1741%" height="15" fill="rgb(245,172,44)" fg:x="11511" fg:w="141"/><text x="96.1031%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:138) (23 samples, 0.19%)</title><rect x="96.8357%" y="196" width="0.1915%" height="15" fill="rgb(236,23,11)" fg:x="11629" fg:w="23"/><text x="97.0857%" y="206.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (86 samples, 0.72%)</title><rect x="97.0689%" y="164" width="0.7161%" height="15" fill="rgb(205,117,38)" fg:x="11657" fg:w="86"/><text x="97.3189%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (16 samples, 0.13%)</title><rect x="97.7850%" y="164" width="0.1332%" height="15" fill="rgb(237,72,25)" fg:x="11743" fg:w="16"/><text x="98.0350%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (66 samples, 0.55%)</title><rect x="98.6926%" y="196" width="0.5496%" height="15" fill="rgb(244,70,9)" fg:x="11852" fg:w="66"/><text x="98.9426%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:113) (49 samples, 0.41%)</title><rect x="98.8342%" y="212" width="0.4080%" height="15" fill="rgb(217,125,39)" fg:x="11869" fg:w="49"/><text x="99.0842%" y="222.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:220) (537 samples, 4.47%)</title><rect x="95.0787%" y="148" width="4.4716%" height="15" fill="rgb(235,36,10)" fg:x="11418" fg:w="537"/><text x="95.3287%" y="158.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (192 samples, 1.60%)</title><rect x="97.9515%" y="164" width="1.5988%" height="15" fill="rgb(251,123,47)" fg:x="11763" fg:w="192"/><text x="98.2015%" y="174.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (172 samples, 1.43%)</title><rect x="98.1181%" y="180" width="1.4323%" height="15" fill="rgb(221,13,13)" fg:x="11783" fg:w="172"/><text x="98.3681%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (28 samples, 0.23%)</title><rect x="99.3172%" y="196" width="0.2332%" height="15" fill="rgb(238,131,9)" fg:x="11927" fg:w="28"/><text x="99.5672%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:91) (546 samples, 4.55%)</title><rect x="95.0121%" y="132" width="4.5466%" height="15" fill="rgb(211,50,8)" fg:x="11410" fg:w="546"/><text x="95.2621%" y="142.50">apply..</text></g><g><title>act (kappybara/system.py:66) (11,829 samples, 98.50%)</title><rect x="1.0908%" y="100" width="98.5011%" height="15" fill="rgb(245,182,24)" fg:x="131" fg:w="11829"/><text x="1.3408%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>apply_update (kappybara/mixture.py:171) (11,828 samples, 98.49%)</title><rect x="1.0992%" y="116" width="98.4928%" height="15" fill="rgb(242,14,37)" fg:x="132" fg:w="11828"/><text x="1.3492%" y="126.50">apply_update (kappybara/mixture.py:171)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,956 samples, 99.56%)</title><rect x="0.0416%" y="68" width="99.5587%" height="15" fill="rgb(246,228,12)" fg:x="5" fg:w="11956"/><text x="0.2916%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:71) (11,886 samples, 98.98%)</title><rect x="0.6245%" y="84" width="98.9758%" height="15" fill="rgb(213,55,15)" fg:x="75" fg:w="11886"/><text x="0.8745%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>__iter__ (kappybara/pattern.py:99) (13 samples, 0.11%)</title><rect x="99.7335%" y="68" width="0.1083%" height="15" fill="rgb(209,9,3)" fg:x="11977" fg:w="13"/><text x="99.9835%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (13 samples, 0.11%)</title><rect x="99.8418%" y="68" width="0.1083%" height="15" fill="rgb(230,59,30)" fg:x="11990" fg:w="13"/><text x="100.0918%" y="78.50"></text></g><g><title>all (12,009 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="12009"/><text x="0.2500%" y="62.50"></text></g></svg></svg>