<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="458" onload="init(evt)" viewBox="0 0 1200 458" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="458" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 0905162</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="447.00"> </text><svg id="frames" x="10" width="1180" total_samples="2601"><g><title>update (kappybara/system.py:69) (6 samples, 0.23%)</title><rect x="0.1922%" y="84" width="0.2307%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="6"/><text x="0.4422%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (6 samples, 0.23%)</title><rect x="0.1922%" y="100" width="0.2307%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="6"/><text x="0.4422%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (6 samples, 0.23%)</title><rect x="0.1922%" y="116" width="0.2307%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="6"/><text x="0.4422%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (5 samples, 0.19%)</title><rect x="0.2307%" y="132" width="0.1922%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="5"/><text x="0.4807%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (5 samples, 0.19%)</title><rect x="0.2307%" y="148" width="0.1922%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="5"/><text x="0.4807%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (3 samples, 0.12%)</title><rect x="0.3076%" y="164" width="0.1153%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="3"/><text x="0.5576%" y="174.50"></text></g><g><title>act (kappybara/system.py:62) (3 samples, 0.12%)</title><rect x="0.4229%" y="100" width="0.1153%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="3"/><text x="0.6729%" y="110.50"></text></g><g><title>act (kappybara/system.py:63) (12 samples, 0.46%)</title><rect x="0.5383%" y="100" width="0.4614%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="12"/><text x="0.7883%" y="110.50"></text></g><g><title>select (kappybara/rule.py:90) (8 samples, 0.31%)</title><rect x="0.6920%" y="116" width="0.3076%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="8"/><text x="0.9420%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (20 samples, 0.77%)</title><rect x="1.5379%" y="180" width="0.7689%" height="15" fill="rgb(220,122,19)" fg:x="40" fg:w="20"/><text x="1.7879%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.35%)</title><rect x="12.1492%" y="196" width="0.3460%" height="15" fill="rgb(250,228,42)" fg:x="316" fg:w="9"/><text x="12.3992%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (281 samples, 10.80%)</title><rect x="2.3068%" y="180" width="10.8035%" height="15" fill="rgb(240,193,28)" fg:x="60" fg:w="281"/><text x="2.5568%" y="190.50">embeddings (kapp..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.62%)</title><rect x="12.4952%" y="196" width="0.6151%" height="15" fill="rgb(216,20,37)" fg:x="325" fg:w="16"/><text x="12.7452%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.23%)</title><rect x="15.8401%" y="196" width="0.2307%" height="15" fill="rgb(206,188,39)" fg:x="412" fg:w="6"/><text x="16.0901%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (84 samples, 3.23%)</title><rect x="13.1103%" y="180" width="3.2295%" height="15" fill="rgb(217,207,13)" fg:x="341" fg:w="84"/><text x="13.3603%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.27%)</title><rect x="16.0707%" y="196" width="0.2691%" height="15" fill="rgb(231,73,38)" fg:x="418" fg:w="7"/><text x="16.3207%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (28 samples, 1.08%)</title><rect x="16.3399%" y="180" width="1.0765%" height="15" fill="rgb(225,20,46)" fg:x="425" fg:w="28"/><text x="16.5899%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (18 samples, 0.69%)</title><rect x="17.4164%" y="180" width="0.6920%" height="15" fill="rgb(210,31,41)" fg:x="453" fg:w="18"/><text x="17.6664%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.27%)</title><rect x="21.4917%" y="196" width="0.2691%" height="15" fill="rgb(221,200,47)" fg:x="559" fg:w="7"/><text x="21.7417%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (107 samples, 4.11%)</title><rect x="18.1084%" y="180" width="4.1138%" height="15" fill="rgb(226,26,5)" fg:x="471" fg:w="107"/><text x="18.3584%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.46%)</title><rect x="21.7609%" y="196" width="0.4614%" height="15" fill="rgb(249,33,26)" fg:x="566" fg:w="12"/><text x="22.0109%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (83 samples, 3.19%)</title><rect x="22.2222%" y="180" width="3.1911%" height="15" fill="rgb(235,183,28)" fg:x="578" fg:w="83"/><text x="22.4722%" y="190.50">emb..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (4 samples, 0.15%)</title><rect x="27.5663%" y="196" width="0.1538%" height="15" fill="rgb(221,5,38)" fg:x="717" fg:w="4"/><text x="27.8163%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (30 samples, 1.15%)</title><rect x="27.7201%" y="196" width="1.1534%" height="15" fill="rgb(247,18,42)" fg:x="721" fg:w="30"/><text x="27.9701%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (35 samples, 1.35%)</title><rect x="30.4883%" y="212" width="1.3456%" height="15" fill="rgb(241,131,45)" fg:x="793" fg:w="35"/><text x="30.7383%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (32 samples, 1.23%)</title><rect x="33.8716%" y="228" width="1.2303%" height="15" fill="rgb(249,31,29)" fg:x="881" fg:w="32"/><text x="34.1216%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (254 samples, 9.77%)</title><rect x="28.8735%" y="196" width="9.7655%" height="15" fill="rgb(225,111,53)" fg:x="751" fg:w="254"/><text x="29.1235%" y="206.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (177 samples, 6.81%)</title><rect x="31.8339%" y="212" width="6.8051%" height="15" fill="rgb(238,160,17)" fg:x="828" fg:w="177"/><text x="32.0839%" y="222.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:113) (92 samples, 3.54%)</title><rect x="35.1019%" y="228" width="3.5371%" height="15" fill="rgb(214,148,48)" fg:x="913" fg:w="92"/><text x="35.3519%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (27 samples, 1.04%)</title><rect x="38.6390%" y="196" width="1.0381%" height="15" fill="rgb(232,36,49)" fg:x="1005" fg:w="27"/><text x="38.8890%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3 samples, 0.12%)</title><rect x="39.6770%" y="196" width="0.1153%" height="15" fill="rgb(209,103,24)" fg:x="1032" fg:w="3"/><text x="39.9270%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (6 samples, 0.23%)</title><rect x="40.8304%" y="212" width="0.2307%" height="15" fill="rgb(229,88,8)" fg:x="1062" fg:w="6"/><text x="41.0804%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (56 samples, 2.15%)</title><rect x="39.7924%" y="196" width="2.1530%" height="15" fill="rgb(213,181,19)" fg:x="1035" fg:w="56"/><text x="40.0424%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (23 samples, 0.88%)</title><rect x="41.0611%" y="212" width="0.8843%" height="15" fill="rgb(254,191,54)" fg:x="1068" fg:w="23"/><text x="41.3111%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (71 samples, 2.73%)</title><rect x="51.7109%" y="212" width="2.7297%" height="15" fill="rgb(241,83,37)" fg:x="1345" fg:w="71"/><text x="51.9609%" y="222.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:70) (40 samples, 1.54%)</title><rect x="54.4790%" y="212" width="1.5379%" height="15" fill="rgb(233,36,39)" fg:x="1417" fg:w="40"/><text x="54.7290%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (26 samples, 1.00%)</title><rect x="55.0173%" y="228" width="0.9996%" height="15" fill="rgb(226,3,54)" fg:x="1431" fg:w="26"/><text x="55.2673%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (5 samples, 0.19%)</title><rect x="56.9781%" y="228" width="0.1922%" height="15" fill="rgb(245,192,40)" fg:x="1482" fg:w="5"/><text x="57.2281%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:59) (134 samples, 5.15%)</title><rect x="57.1703%" y="228" width="5.1519%" height="15" fill="rgb(238,167,29)" fg:x="1487" fg:w="134"/><text x="57.4203%" y="238.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (61 samples, 2.35%)</title><rect x="59.9769%" y="244" width="2.3453%" height="15" fill="rgb(232,182,51)" fg:x="1560" fg:w="61"/><text x="60.2269%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.42%)</title><rect x="61.8993%" y="260" width="0.4229%" height="15" fill="rgb(231,60,39)" fg:x="1610" fg:w="11"/><text x="62.1493%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (79 samples, 3.04%)</title><rect x="62.3222%" y="228" width="3.0373%" height="15" fill="rgb(208,69,12)" fg:x="1621" fg:w="79"/><text x="62.5722%" y="238.50">bou..</text></g><g><title>bound (kappybara/pattern.py:61) (26 samples, 1.00%)</title><rect x="65.3595%" y="228" width="0.9996%" height="15" fill="rgb(235,93,37)" fg:x="1700" fg:w="26"/><text x="65.6095%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (3 samples, 0.12%)</title><rect x="66.3591%" y="228" width="0.1153%" height="15" fill="rgb(213,116,39)" fg:x="1726" fg:w="3"/><text x="66.6091%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (284 samples, 10.92%)</title><rect x="56.0169%" y="212" width="10.9189%" height="15" fill="rgb(222,207,29)" fg:x="1457" fg:w="284"/><text x="56.2669%" y="222.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:66) (12 samples, 0.46%)</title><rect x="66.4744%" y="228" width="0.4614%" height="15" fill="rgb(206,96,30)" fg:x="1729" fg:w="12"/><text x="66.7244%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (8 samples, 0.31%)</title><rect x="66.9742%" y="212" width="0.3076%" height="15" fill="rgb(218,138,4)" fg:x="1742" fg:w="8"/><text x="67.2242%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (89 samples, 3.42%)</title><rect x="67.2818%" y="212" width="3.4218%" height="15" fill="rgb(250,191,14)" fg:x="1750" fg:w="89"/><text x="67.5318%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (58 samples, 2.23%)</title><rect x="68.4737%" y="228" width="2.2299%" height="15" fill="rgb(239,60,40)" fg:x="1781" fg:w="58"/><text x="68.7237%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.19%)</title><rect x="70.5113%" y="244" width="0.1922%" height="15" fill="rgb(206,27,48)" fg:x="1834" fg:w="5"/><text x="70.7613%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (4 samples, 0.15%)</title><rect x="71.8954%" y="228" width="0.1538%" height="15" fill="rgb(225,35,8)" fg:x="1870" fg:w="4"/><text x="72.1454%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (4 samples, 0.15%)</title><rect x="74.4714%" y="244" width="0.1538%" height="15" fill="rgb(250,213,24)" fg:x="1937" fg:w="4"/><text x="74.7214%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (120 samples, 4.61%)</title><rect x="70.7036%" y="212" width="4.6136%" height="15" fill="rgb(247,123,22)" fg:x="1839" fg:w="120"/><text x="70.9536%" y="222.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (85 samples, 3.27%)</title><rect x="72.0492%" y="228" width="3.2680%" height="15" fill="rgb(231,138,38)" fg:x="1874" fg:w="85"/><text x="72.2992%" y="238.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.69%)</title><rect x="74.6251%" y="244" width="0.6920%" height="15" fill="rgb(231,145,46)" fg:x="1941" fg:w="18"/><text x="74.8751%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (23 samples, 0.88%)</title><rect x="75.3172%" y="212" width="0.8843%" height="15" fill="rgb(251,118,11)" fg:x="1959" fg:w="23"/><text x="75.5672%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (43 samples, 1.65%)</title><rect x="76.2015%" y="212" width="1.6532%" height="15" fill="rgb(217,147,25)" fg:x="1982" fg:w="43"/><text x="76.4515%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (22 samples, 0.85%)</title><rect x="77.8547%" y="212" width="0.8458%" height="15" fill="rgb(247,81,37)" fg:x="2025" fg:w="22"/><text x="78.1047%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (4 samples, 0.15%)</title><rect x="78.7005%" y="212" width="0.1538%" height="15" fill="rgb(209,12,38)" fg:x="2047" fg:w="4"/><text x="78.9505%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,024 samples, 39.37%)</title><rect x="41.9454%" y="196" width="39.3695%" height="15" fill="rgb(227,1,9)" fg:x="1091" fg:w="1024"/><text x="42.1954%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (64 samples, 2.46%)</title><rect x="78.8543%" y="212" width="2.4606%" height="15" fill="rgb(248,47,43)" fg:x="2051" fg:w="64"/><text x="79.1043%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (1,469 samples, 56.48%)</title><rect x="25.4133%" y="180" width="56.4783%" height="15" fill="rgb(221,10,30)" fg:x="661" fg:w="1469"/><text x="25.6633%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (15 samples, 0.58%)</title><rect x="81.3149%" y="196" width="0.5767%" height="15" fill="rgb(210,229,1)" fg:x="2115" fg:w="15"/><text x="81.5649%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (3 samples, 0.12%)</title><rect x="81.8916%" y="180" width="0.1153%" height="15" fill="rgb(222,148,37)" fg:x="2130" fg:w="3"/><text x="82.1416%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (15 samples, 0.58%)</title><rect x="83.4295%" y="196" width="0.5767%" height="15" fill="rgb(234,67,33)" fg:x="2170" fg:w="15"/><text x="83.6795%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (15 samples, 0.58%)</title><rect x="84.9289%" y="212" width="0.5767%" height="15" fill="rgb(247,98,35)" fg:x="2209" fg:w="15"/><text x="85.1789%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (139 samples, 5.34%)</title><rect x="82.0069%" y="180" width="5.3441%" height="15" fill="rgb(247,138,52)" fg:x="2133" fg:w="139"/><text x="82.2569%" y="190.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (87 samples, 3.34%)</title><rect x="84.0062%" y="196" width="3.3449%" height="15" fill="rgb(213,79,30)" fg:x="2185" fg:w="87"/><text x="84.2562%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (48 samples, 1.85%)</title><rect x="85.5056%" y="212" width="1.8454%" height="15" fill="rgb(246,177,23)" fg:x="2224" fg:w="48"/><text x="85.7556%" y="222.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:101) (3 samples, 0.12%)</title><rect x="87.8893%" y="196" width="0.1153%" height="15" fill="rgb(230,62,27)" fg:x="2286" fg:w="3"/><text x="88.1393%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (29 samples, 1.11%)</title><rect x="87.3510%" y="180" width="1.1150%" height="15" fill="rgb(216,154,8)" fg:x="2272" fg:w="29"/><text x="87.6010%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (12 samples, 0.46%)</title><rect x="88.0046%" y="196" width="0.4614%" height="15" fill="rgb(244,35,45)" fg:x="2289" fg:w="12"/><text x="88.2546%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (4 samples, 0.15%)</title><rect x="88.6582%" y="196" width="0.1538%" height="15" fill="rgb(251,115,12)" fg:x="2306" fg:w="4"/><text x="88.9082%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (19 samples, 0.73%)</title><rect x="88.4660%" y="180" width="0.7305%" height="15" fill="rgb(240,54,50)" fg:x="2301" fg:w="19"/><text x="88.7160%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (10 samples, 0.38%)</title><rect x="88.8120%" y="196" width="0.3845%" height="15" fill="rgb(233,84,52)" fg:x="2310" fg:w="10"/><text x="89.0620%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (42 samples, 1.61%)</title><rect x="89.1965%" y="180" width="1.6148%" height="15" fill="rgb(207,117,47)" fg:x="2320" fg:w="42"/><text x="89.4465%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.19%)</title><rect x="90.6190%" y="196" width="0.1922%" height="15" fill="rgb(249,43,39)" fg:x="2357" fg:w="5"/><text x="90.8690%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (13 samples, 0.50%)</title><rect x="90.8112%" y="180" width="0.4998%" height="15" fill="rgb(209,38,44)" fg:x="2362" fg:w="13"/><text x="91.0612%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (15 samples, 0.58%)</title><rect x="91.3110%" y="180" width="0.5767%" height="15" fill="rgb(236,212,23)" fg:x="2375" fg:w="15"/><text x="91.5610%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.19%)</title><rect x="91.6955%" y="196" width="0.1922%" height="15" fill="rgb(242,79,21)" fg:x="2385" fg:w="5"/><text x="91.9455%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="95.4633%" y="212" width="0.1153%" height="15" fill="rgb(211,96,35)" fg:x="2483" fg:w="3"/><text x="95.7133%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (42 samples, 1.61%)</title><rect x="94.2714%" y="196" width="1.6148%" height="15" fill="rgb(253,215,40)" fg:x="2452" fg:w="42"/><text x="94.5214%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.31%)</title><rect x="95.5786%" y="212" width="0.3076%" height="15" fill="rgb(211,81,21)" fg:x="2486" fg:w="8"/><text x="95.8286%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (106 samples, 4.08%)</title><rect x="91.8877%" y="180" width="4.0754%" height="15" fill="rgb(208,190,38)" fg:x="2390" fg:w="106"/><text x="92.1377%" y="190.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:287) (11 samples, 0.42%)</title><rect x="95.9631%" y="180" width="0.4229%" height="15" fill="rgb(235,213,38)" fg:x="2496" fg:w="11"/><text x="96.2131%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (4 samples, 0.15%)</title><rect x="96.3860%" y="180" width="0.1538%" height="15" fill="rgb(237,122,38)" fg:x="2507" fg:w="4"/><text x="96.6360%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (2,485 samples, 95.54%)</title><rect x="1.1150%" y="164" width="95.5402%" height="15" fill="rgb(244,218,35)" fg:x="29" fg:w="2485"/><text x="1.3650%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>embeddings (kappybara/pattern.py:290) (3 samples, 0.12%)</title><rect x="96.5398%" y="180" width="0.1153%" height="15" fill="rgb(240,68,47)" fg:x="2511" fg:w="3"/><text x="96.7898%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (22 samples, 0.85%)</title><rect x="96.6551%" y="164" width="0.8458%" height="15" fill="rgb(210,16,53)" fg:x="2514" fg:w="22"/><text x="96.9051%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (5 samples, 0.19%)</title><rect x="97.3087%" y="180" width="0.1922%" height="15" fill="rgb(235,124,12)" fg:x="2531" fg:w="5"/><text x="97.5587%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (2,533 samples, 97.39%)</title><rect x="1.0765%" y="148" width="97.3856%" height="15" fill="rgb(224,169,11)" fg:x="28" fg:w="2533"/><text x="1.3265%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (25 samples, 0.96%)</title><rect x="97.5010%" y="164" width="0.9612%" height="15" fill="rgb(250,166,2)" fg:x="2536" fg:w="25"/><text x="97.7510%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (4 samples, 0.15%)</title><rect x="98.3083%" y="180" width="0.1538%" height="15" fill="rgb(242,216,29)" fg:x="2557" fg:w="4"/><text x="98.5583%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (2,557 samples, 98.31%)</title><rect x="1.0381%" y="116" width="98.3083%" height="15" fill="rgb(230,116,27)" fg:x="27" fg:w="2557"/><text x="1.2881%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (2,556 samples, 98.27%)</title><rect x="1.0765%" y="132" width="98.2699%" height="15" fill="rgb(228,99,48)" fg:x="28" fg:w="2556"/><text x="1.3265%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (23 samples, 0.88%)</title><rect x="98.4621%" y="148" width="0.8843%" height="15" fill="rgb(253,11,6)" fg:x="2561" fg:w="23"/><text x="98.7121%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (2,580 samples, 99.19%)</title><rect x="0.1922%" y="68" width="99.1926%" height="15" fill="rgb(247,143,39)" fg:x="5" fg:w="2580"/><text x="0.4422%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (2,574 samples, 98.96%)</title><rect x="0.4229%" y="84" width="98.9619%" height="15" fill="rgb(236,97,10)" fg:x="11" fg:w="2574"/><text x="0.6729%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (2,559 samples, 98.39%)</title><rect x="0.9996%" y="100" width="98.3852%" height="15" fill="rgb(233,208,19)" fg:x="26" fg:w="2559"/><text x="1.2496%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>load_grammar (lark/load_grammar.py:1240) (4 samples, 0.15%)</title><rect x="99.4233%" y="340" width="0.1538%" height="15" fill="rgb(216,164,2)" fg:x="2586" fg:w="4"/><text x="99.6733%" y="350.50"></text></g><g><title>_parse_grammar (lark/load_grammar.py:966) (4 samples, 0.15%)</title><rect x="99.4233%" y="356" width="0.1538%" height="15" fill="rgb(220,129,5)" fg:x="2586" fg:w="4"/><text x="99.6733%" y="366.50"></text></g><g><title>_get_parser (lark/load_grammar.py:938) (4 samples, 0.15%)</title><rect x="99.4233%" y="372" width="0.1538%" height="15" fill="rgb(242,17,10)" fg:x="2586" fg:w="4"/><text x="99.6733%" y="382.50"></text></g><g><title>__init__ (lark/parser_frontends.py:61) (4 samples, 0.15%)</title><rect x="99.4233%" y="388" width="0.1538%" height="15" fill="rgb(242,107,0)" fg:x="2586" fg:w="4"/><text x="99.6733%" y="398.50"></text></g><g><title>create_lalr_parser (lark/parser_frontends.py:161) (4 samples, 0.15%)</title><rect x="99.4233%" y="404" width="0.1538%" height="15" fill="rgb(251,28,31)" fg:x="2586" fg:w="4"/><text x="99.6733%" y="414.50"></text></g><g><title>__init__ (lark/parsers/lalr_parser.py:20) (3 samples, 0.12%)</title><rect x="99.4617%" y="420" width="0.1153%" height="15" fill="rgb(233,223,10)" fg:x="2587" fg:w="3"/><text x="99.7117%" y="430.50"></text></g><g><title>__init__ (lark/lark.py:357) (5 samples, 0.19%)</title><rect x="99.4233%" y="308" width="0.1922%" height="15" fill="rgb(215,21,27)" fg:x="2586" fg:w="5"/><text x="99.6733%" y="318.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1415) (5 samples, 0.19%)</title><rect x="99.4233%" y="324" width="0.1922%" height="15" fill="rgb(232,23,21)" fg:x="2586" fg:w="5"/><text x="99.6733%" y="334.50"></text></g><g><title>__init__ (lark/lark.py:407) (3 samples, 0.12%)</title><rect x="99.6155%" y="308" width="0.1153%" height="15" fill="rgb(244,5,23)" fg:x="2591" fg:w="3"/><text x="99.8655%" y="318.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (9 samples, 0.35%)</title><rect x="99.4233%" y="260" width="0.3460%" height="15" fill="rgb(226,81,46)" fg:x="2586" fg:w="9"/><text x="99.6733%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (9 samples, 0.35%)</title><rect x="99.4233%" y="276" width="0.3460%" height="15" fill="rgb(247,70,30)" fg:x="2586" fg:w="9"/><text x="99.6733%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (9 samples, 0.35%)</title><rect x="99.4233%" y="292" width="0.3460%" height="15" fill="rgb(212,68,19)" fg:x="2586" fg:w="9"/><text x="99.6733%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (12 samples, 0.46%)</title><rect x="99.3849%" y="68" width="0.4614%" height="15" fill="rgb(240,187,13)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.46%)</title><rect x="99.3849%" y="84" width="0.4614%" height="15" fill="rgb(223,113,26)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.46%)</title><rect x="99.3849%" y="100" width="0.4614%" height="15" fill="rgb(206,192,2)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.46%)</title><rect x="99.3849%" y="116" width="0.4614%" height="15" fill="rgb(241,108,4)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.46%)</title><rect x="99.3849%" y="132" width="0.4614%" height="15" fill="rgb(247,173,49)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.46%)</title><rect x="99.3849%" y="148" width="0.4614%" height="15" fill="rgb(224,114,35)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (12 samples, 0.46%)</title><rect x="99.3849%" y="164" width="0.4614%" height="15" fill="rgb(245,159,27)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.46%)</title><rect x="99.3849%" y="180" width="0.4614%" height="15" fill="rgb(245,172,44)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.46%)</title><rect x="99.3849%" y="196" width="0.4614%" height="15" fill="rgb(236,23,11)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.46%)</title><rect x="99.3849%" y="212" width="0.4614%" height="15" fill="rgb(205,117,38)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.46%)</title><rect x="99.3849%" y="228" width="0.4614%" height="15" fill="rgb(237,72,25)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.46%)</title><rect x="99.3849%" y="244" width="0.4614%" height="15" fill="rgb(244,70,9)" fg:x="2585" fg:w="12"/><text x="99.6349%" y="254.50"></text></g><g><title>all (2,601 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="2601"/><text x="0.2500%" y="62.50"></text></g></svg></svg>