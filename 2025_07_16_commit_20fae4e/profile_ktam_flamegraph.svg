<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 20fae4e</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11926"><g><title>update (kappybara/system.py:69) (20 samples, 0.17%)</title><rect x="0.0755%" y="84" width="0.1677%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="20"/><text x="0.3255%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (20 samples, 0.17%)</title><rect x="0.0755%" y="100" width="0.1677%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="20"/><text x="0.3255%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (12 samples, 0.10%)</title><rect x="0.1425%" y="116" width="0.1006%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="12"/><text x="0.3925%" y="126.50"></text></g><g><title>select (kappybara/rule.py:104) (24 samples, 0.20%)</title><rect x="0.3186%" y="116" width="0.2012%" height="15" fill="rgb(248,212,6)" fg:x="38" fg:w="24"/><text x="0.5686%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (29 samples, 0.24%)</title><rect x="0.3186%" y="100" width="0.2432%" height="15" fill="rgb(208,68,35)" fg:x="38" fg:w="29"/><text x="0.5686%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (17 samples, 0.14%)</title><rect x="0.6540%" y="164" width="0.1425%" height="15" fill="rgb(232,128,0)" fg:x="78" fg:w="17"/><text x="0.9040%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (41 samples, 0.34%)</title><rect x="0.6205%" y="148" width="0.3438%" height="15" fill="rgb(207,160,47)" fg:x="74" fg:w="41"/><text x="0.8705%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (20 samples, 0.17%)</title><rect x="0.7966%" y="164" width="0.1677%" height="15" fill="rgb(228,23,34)" fg:x="95" fg:w="20"/><text x="1.0466%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (45 samples, 0.38%)</title><rect x="1.0397%" y="164" width="0.3773%" height="15" fill="rgb(218,30,26)" fg:x="124" fg:w="45"/><text x="1.2897%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (15 samples, 0.13%)</title><rect x="1.2913%" y="180" width="0.1258%" height="15" fill="rgb(220,122,19)" fg:x="154" fg:w="15"/><text x="1.5413%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (23 samples, 0.19%)</title><rect x="1.6686%" y="180" width="0.1929%" height="15" fill="rgb(250,228,42)" fg:x="199" fg:w="23"/><text x="1.9186%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (27 samples, 0.23%)</title><rect x="1.8615%" y="180" width="0.2264%" height="15" fill="rgb(240,193,28)" fg:x="222" fg:w="27"/><text x="2.1115%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (37 samples, 0.31%)</title><rect x="2.1550%" y="180" width="0.3102%" height="15" fill="rgb(216,20,37)" fg:x="257" fg:w="37"/><text x="2.4050%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (192 samples, 1.61%)</title><rect x="0.9643%" y="148" width="1.6099%" height="15" fill="rgb(206,188,39)" fg:x="115" fg:w="192"/><text x="1.2143%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (136 samples, 1.14%)</title><rect x="1.4338%" y="164" width="1.1404%" height="15" fill="rgb(217,207,13)" fg:x="171" fg:w="136"/><text x="1.6838%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (13 samples, 0.11%)</title><rect x="2.4652%" y="180" width="0.1090%" height="15" fill="rgb(231,73,38)" fg:x="294" fg:w="13"/><text x="2.7152%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (68 samples, 0.57%)</title><rect x="2.6581%" y="148" width="0.5702%" height="15" fill="rgb(225,20,46)" fg:x="317" fg:w="68"/><text x="2.9081%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="3.1192%" y="164" width="0.1090%" height="15" fill="rgb(210,31,41)" fg:x="372" fg:w="13"/><text x="3.3692%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (24 samples, 0.20%)</title><rect x="3.2282%" y="148" width="0.2012%" height="15" fill="rgb(221,200,47)" fg:x="385" fg:w="24"/><text x="3.4782%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (64 samples, 0.54%)</title><rect x="4.3518%" y="180" width="0.5366%" height="15" fill="rgb(226,26,5)" fg:x="519" fg:w="64"/><text x="4.6018%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (40 samples, 0.34%)</title><rect x="4.5531%" y="196" width="0.3354%" height="15" fill="rgb(249,33,26)" fg:x="543" fg:w="40"/><text x="4.8031%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (547 samples, 4.59%)</title><rect x="0.5702%" y="116" width="4.5866%" height="15" fill="rgb(235,183,28)" fg:x="68" fg:w="547"/><text x="0.8202%" y="126.50">apply..</text></g><g><title>_remove_edge (kappybara/mixture.py:191) (545 samples, 4.57%)</title><rect x="0.5870%" y="132" width="4.5698%" height="15" fill="rgb(221,5,38)" fg:x="70" fg:w="545"/><text x="0.8370%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (202 samples, 1.69%)</title><rect x="3.4630%" y="148" width="1.6938%" height="15" fill="rgb(247,18,42)" fg:x="413" fg:w="202"/><text x="3.7130%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (175 samples, 1.47%)</title><rect x="3.6894%" y="164" width="1.4674%" height="15" fill="rgb(241,131,45)" fg:x="440" fg:w="175"/><text x="3.9394%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (27 samples, 0.23%)</title><rect x="4.9304%" y="180" width="0.2264%" height="15" fill="rgb(249,31,29)" fg:x="588" fg:w="27"/><text x="5.1804%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (67 samples, 0.56%)</title><rect x="5.6431%" y="180" width="0.5618%" height="15" fill="rgb(225,111,53)" fg:x="673" fg:w="67"/><text x="5.8931%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.14%)</title><rect x="14.1791%" y="196" width="0.1425%" height="15" fill="rgb(238,160,17)" fg:x="1691" fg:w="17"/><text x="14.4291%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (1,001 samples, 8.39%)</title><rect x="6.2049%" y="180" width="8.3934%" height="15" fill="rgb(214,148,48)" fg:x="740" fg:w="1001"/><text x="6.4549%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="14.3217%" y="196" width="0.2767%" height="15" fill="rgb(232,36,49)" fg:x="1708" fg:w="33"/><text x="14.5717%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.13%)</title><rect x="17.4828%" y="196" width="0.1258%" height="15" fill="rgb(209,103,24)" fg:x="2085" fg:w="15"/><text x="17.7328%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (397 samples, 3.33%)</title><rect x="14.5984%" y="180" width="3.3289%" height="15" fill="rgb(229,88,8)" fg:x="1741" fg:w="397"/><text x="14.8484%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.32%)</title><rect x="17.6086%" y="196" width="0.3186%" height="15" fill="rgb(213,181,19)" fg:x="2100" fg:w="38"/><text x="17.8586%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (71 samples, 0.60%)</title><rect x="17.9440%" y="180" width="0.5953%" height="15" fill="rgb(254,191,54)" fg:x="2140" fg:w="71"/><text x="18.1940%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (54 samples, 0.45%)</title><rect x="18.5393%" y="180" width="0.4528%" height="15" fill="rgb(241,83,37)" fg:x="2211" fg:w="54"/><text x="18.7893%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (25 samples, 0.21%)</title><rect x="21.3651%" y="196" width="0.2096%" height="15" fill="rgb(233,36,39)" fg:x="2548" fg:w="25"/><text x="21.6151%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (356 samples, 2.99%)</title><rect x="18.9921%" y="180" width="2.9851%" height="15" fill="rgb(226,3,54)" fg:x="2265" fg:w="356"/><text x="19.2421%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.40%)</title><rect x="21.5747%" y="196" width="0.4025%" height="15" fill="rgb(245,192,40)" fg:x="2573" fg:w="48"/><text x="21.8247%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (261 samples, 2.19%)</title><rect x="21.9772%" y="180" width="2.1885%" height="15" fill="rgb(238,167,29)" fg:x="2621" fg:w="261"/><text x="22.2272%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (13 samples, 0.11%)</title><rect x="25.7002%" y="196" width="0.1090%" height="15" fill="rgb(232,182,51)" fg:x="3065" fg:w="13"/><text x="25.9502%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (99 samples, 0.83%)</title><rect x="25.8092%" y="196" width="0.8301%" height="15" fill="rgb(231,60,39)" fg:x="3078" fg:w="99"/><text x="26.0592%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (149 samples, 1.25%)</title><rect x="28.2911%" y="212" width="1.2494%" height="15" fill="rgb(208,69,12)" fg:x="3374" fg:w="149"/><text x="28.5411%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (86 samples, 0.72%)</title><rect x="31.3601%" y="228" width="0.7211%" height="15" fill="rgb(235,93,37)" fg:x="3740" fg:w="86"/><text x="31.6101%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,040 samples, 8.72%)</title><rect x="26.6896%" y="196" width="8.7204%" height="15" fill="rgb(213,116,39)" fg:x="3183" fg:w="1040"/><text x="26.9396%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (700 samples, 5.87%)</title><rect x="29.5405%" y="212" width="5.8695%" height="15" fill="rgb(222,207,29)" fg:x="3523" fg:w="700"/><text x="29.7905%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (397 samples, 3.33%)</title><rect x="32.0812%" y="228" width="3.3289%" height="15" fill="rgb(206,96,30)" fg:x="3826" fg:w="397"/><text x="32.3312%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (122 samples, 1.02%)</title><rect x="35.4100%" y="196" width="1.0230%" height="15" fill="rgb(218,138,4)" fg:x="4223" fg:w="122"/><text x="35.6600%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (13 samples, 0.11%)</title><rect x="36.4330%" y="196" width="0.1090%" height="15" fill="rgb(250,191,14)" fg:x="4345" fg:w="13"/><text x="36.6830%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (19 samples, 0.16%)</title><rect x="37.2883%" y="212" width="0.1593%" height="15" fill="rgb(239,60,40)" fg:x="4447" fg:w="19"/><text x="37.5383%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (192 samples, 1.61%)</title><rect x="36.5420%" y="196" width="1.6099%" height="15" fill="rgb(206,27,48)" fg:x="4358" fg:w="192"/><text x="36.7920%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (84 samples, 0.70%)</title><rect x="37.4476%" y="212" width="0.7043%" height="15" fill="rgb(225,35,8)" fg:x="4466" fg:w="84"/><text x="37.6976%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (189 samples, 1.58%)</title><rect x="45.7907%" y="212" width="1.5848%" height="15" fill="rgb(250,213,24)" fg:x="5461" fg:w="189"/><text x="46.0407%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (13 samples, 0.11%)</title><rect x="47.3755%" y="212" width="0.1090%" height="15" fill="rgb(247,123,22)" fg:x="5650" fg:w="13"/><text x="47.6255%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (173 samples, 1.45%)</title><rect x="47.4845%" y="212" width="1.4506%" height="15" fill="rgb(231,138,38)" fg:x="5663" fg:w="173"/><text x="47.7345%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (117 samples, 0.98%)</title><rect x="47.9540%" y="228" width="0.9810%" height="15" fill="rgb(231,145,46)" fg:x="5719" fg:w="117"/><text x="48.2040%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (14 samples, 0.12%)</title><rect x="49.7904%" y="228" width="0.1174%" height="15" fill="rgb(251,118,11)" fg:x="5938" fg:w="14"/><text x="50.0404%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.16%)</title><rect x="51.8531%" y="244" width="0.1593%" height="15" fill="rgb(217,147,25)" fg:x="6184" fg:w="19"/><text x="52.1031%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (483 samples, 4.05%)</title><rect x="49.9078%" y="228" width="4.0500%" height="15" fill="rgb(247,81,37)" fg:x="5952" fg:w="483"/><text x="50.1578%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (232 samples, 1.95%)</title><rect x="52.0124%" y="244" width="1.9453%" height="15" fill="rgb(209,12,38)" fg:x="6203" fg:w="232"/><text x="52.2624%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (45 samples, 0.38%)</title><rect x="53.5804%" y="260" width="0.3773%" height="15" fill="rgb(227,1,9)" fg:x="6390" fg:w="45"/><text x="53.8304%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (277 samples, 2.32%)</title><rect x="53.9577%" y="228" width="2.3227%" height="15" fill="rgb(248,47,43)" fg:x="6435" fg:w="277"/><text x="54.2077%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (81 samples, 0.68%)</title><rect x="56.2804%" y="228" width="0.6792%" height="15" fill="rgb(221,10,30)" fg:x="6712" fg:w="81"/><text x="56.5304%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.12%)</title><rect x="56.9596%" y="228" width="0.1174%" height="15" fill="rgb(210,229,1)" fg:x="6793" fg:w="14"/><text x="57.2096%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,017 samples, 8.53%)</title><rect x="48.9351%" y="212" width="8.5276%" height="15" fill="rgb(222,148,37)" fg:x="5836" fg:w="1017"/><text x="49.1851%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (46 samples, 0.39%)</title><rect x="57.0770%" y="228" width="0.3857%" height="15" fill="rgb(234,67,33)" fg:x="6807" fg:w="46"/><text x="57.3270%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (17 samples, 0.14%)</title><rect x="57.5130%" y="212" width="0.1425%" height="15" fill="rgb(247,98,35)" fg:x="6859" fg:w="17"/><text x="57.7630%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.11%)</title><rect x="58.7288%" y="228" width="0.1090%" height="15" fill="rgb(247,138,52)" fg:x="7004" fg:w="13"/><text x="58.9788%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (346 samples, 2.90%)</title><rect x="57.6555%" y="212" width="2.9012%" height="15" fill="rgb(213,79,30)" fg:x="6876" fg:w="346"/><text x="57.9055%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (205 samples, 1.72%)</title><rect x="58.8378%" y="228" width="1.7189%" height="15" fill="rgb(246,177,23)" fg:x="7017" fg:w="205"/><text x="59.0878%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.24%)</title><rect x="60.3136%" y="244" width="0.2432%" height="15" fill="rgb(230,62,27)" fg:x="7193" fg:w="29"/><text x="60.5636%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.11%)</title><rect x="61.6049%" y="228" width="0.1090%" height="15" fill="rgb(216,154,8)" fg:x="7347" fg:w="13"/><text x="61.8549%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.10%)</title><rect x="63.4580%" y="244" width="0.1006%" height="15" fill="rgb(244,35,45)" fg:x="7568" fg:w="12"/><text x="63.7080%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (436 samples, 3.66%)</title><rect x="60.5568%" y="212" width="3.6559%" height="15" fill="rgb(251,115,12)" fg:x="7222" fg:w="436"/><text x="60.8068%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (298 samples, 2.50%)</title><rect x="61.7139%" y="228" width="2.4987%" height="15" fill="rgb(240,54,50)" fg:x="7360" fg:w="298"/><text x="61.9639%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (78 samples, 0.65%)</title><rect x="63.5586%" y="244" width="0.6540%" height="15" fill="rgb(233,84,52)" fg:x="7580" fg:w="78"/><text x="63.8086%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (69 samples, 0.58%)</title><rect x="64.2126%" y="212" width="0.5786%" height="15" fill="rgb(207,117,47)" fg:x="7658" fg:w="69"/><text x="64.4626%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (184 samples, 1.54%)</title><rect x="64.7996%" y="212" width="1.5428%" height="15" fill="rgb(249,43,39)" fg:x="7728" fg:w="184"/><text x="65.0496%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (83 samples, 0.70%)</title><rect x="66.3424%" y="212" width="0.6960%" height="15" fill="rgb(209,38,44)" fg:x="7912" fg:w="83"/><text x="66.5924%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (20 samples, 0.17%)</title><rect x="67.0384%" y="212" width="0.1677%" height="15" fill="rgb(236,212,23)" fg:x="7995" fg:w="20"/><text x="67.2884%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,757 samples, 31.50%)</title><rect x="38.1519%" y="196" width="31.5026%" height="15" fill="rgb(242,79,21)" fg:x="4550" fg:w="3757"/><text x="38.4019%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (292 samples, 2.45%)</title><rect x="67.2061%" y="212" width="2.4484%" height="15" fill="rgb(211,96,35)" fg:x="8015" fg:w="292"/><text x="67.4561%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,471 samples, 45.87%)</title><rect x="24.1657%" y="180" width="45.8746%" height="15" fill="rgb(253,215,40)" fg:x="2882" fg:w="5471"/><text x="24.4157%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (46 samples, 0.39%)</title><rect x="69.6545%" y="196" width="0.3857%" height="15" fill="rgb(211,81,21)" fg:x="8307" fg:w="46"/><text x="69.9045%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (74 samples, 0.62%)</title><rect x="70.9710%" y="196" width="0.6205%" height="15" fill="rgb(208,190,38)" fg:x="8464" fg:w="74"/><text x="71.2210%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (49 samples, 0.41%)</title><rect x="72.5977%" y="212" width="0.4109%" height="15" fill="rgb(235,213,38)" fg:x="8658" fg:w="49"/><text x="72.8477%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (578 samples, 4.85%)</title><rect x="70.1157%" y="180" width="4.8466%" height="15" fill="rgb(237,122,38)" fg:x="8362" fg:w="578"/><text x="70.3657%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (402 samples, 3.37%)</title><rect x="71.5915%" y="196" width="3.3708%" height="15" fill="rgb(244,218,35)" fg:x="8538" fg:w="402"/><text x="71.8415%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (233 samples, 1.95%)</title><rect x="73.0086%" y="212" width="1.9537%" height="15" fill="rgb(240,68,47)" fg:x="8707" fg:w="233"/><text x="73.2586%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (88 samples, 0.74%)</title><rect x="74.9623%" y="180" width="0.7379%" height="15" fill="rgb(210,16,53)" fg:x="8940" fg:w="88"/><text x="75.2123%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (27 samples, 0.23%)</title><rect x="75.4738%" y="196" width="0.2264%" height="15" fill="rgb(235,124,12)" fg:x="9001" fg:w="27"/><text x="75.7238%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (23 samples, 0.19%)</title><rect x="76.0020%" y="196" width="0.1929%" height="15" fill="rgb(224,169,11)" fg:x="9064" fg:w="23"/><text x="76.2520%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (105 samples, 0.88%)</title><rect x="75.7002%" y="180" width="0.8804%" height="15" fill="rgb(250,166,2)" fg:x="9028" fg:w="105"/><text x="75.9502%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (46 samples, 0.39%)</title><rect x="76.1949%" y="196" width="0.3857%" height="15" fill="rgb(242,216,29)" fg:x="9087" fg:w="46"/><text x="76.4449%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.11%)</title><rect x="77.8383%" y="196" width="0.1090%" height="15" fill="rgb(230,116,27)" fg:x="9283" fg:w="13"/><text x="78.0883%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (188 samples, 1.58%)</title><rect x="76.5806%" y="180" width="1.5764%" height="15" fill="rgb(228,99,48)" fg:x="9133" fg:w="188"/><text x="76.8306%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="77.9473%" y="196" width="0.2096%" height="15" fill="rgb(253,11,6)" fg:x="9296" fg:w="25"/><text x="78.1973%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (70 samples, 0.59%)</title><rect x="78.1570%" y="180" width="0.5870%" height="15" fill="rgb(247,143,39)" fg:x="9321" fg:w="70"/><text x="78.4070%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (96 samples, 0.80%)</title><rect x="78.7439%" y="180" width="0.8050%" height="15" fill="rgb(236,97,10)" fg:x="9391" fg:w="96"/><text x="78.9939%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (143 samples, 1.20%)</title><rect x="81.2091%" y="196" width="1.1991%" height="15" fill="rgb(233,208,19)" fg:x="9685" fg:w="143"/><text x="81.4591%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.19%)</title><rect x="82.2153%" y="212" width="0.1929%" height="15" fill="rgb(216,164,2)" fg:x="9805" fg:w="23"/><text x="82.4653%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (347 samples, 2.91%)</title><rect x="79.5489%" y="180" width="2.9096%" height="15" fill="rgb(220,129,5)" fg:x="9487" fg:w="347"/><text x="79.7989%" y="190.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:287) (33 samples, 0.28%)</title><rect x="82.4669%" y="180" width="0.2767%" height="15" fill="rgb(242,17,10)" fg:x="9835" fg:w="33"/><text x="82.7169%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,257 samples, 77.62%)</title><rect x="5.2742%" y="164" width="77.6203%" height="15" fill="rgb(242,107,0)" fg:x="629" fg:w="9257"/><text x="5.5242%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>embeddings (kappybara/pattern.py:290) (13 samples, 0.11%)</title><rect x="82.7855%" y="180" width="0.1090%" height="15" fill="rgb(251,28,31)" fg:x="9873" fg:w="13"/><text x="83.0355%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (114 samples, 0.96%)</title><rect x="82.8945%" y="164" width="0.9559%" height="15" fill="rgb(233,223,10)" fg:x="9886" fg:w="114"/><text x="83.1445%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (29 samples, 0.24%)</title><rect x="83.6072%" y="180" width="0.2432%" height="15" fill="rgb(215,21,27)" fg:x="9971" fg:w="29"/><text x="83.8572%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (117 samples, 0.98%)</title><rect x="83.9091%" y="164" width="0.9810%" height="15" fill="rgb(232,23,21)" fg:x="10007" fg:w="117"/><text x="84.1591%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (20 samples, 0.17%)</title><rect x="84.7225%" y="180" width="0.1677%" height="15" fill="rgb(244,5,23)" fg:x="10104" fg:w="20"/><text x="84.9725%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,501 samples, 79.67%)</title><rect x="5.2490%" y="148" width="79.6663%" height="15" fill="rgb(226,81,46)" fg:x="626" fg:w="9501"/><text x="5.4990%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (23 samples, 0.19%)</title><rect x="84.9740%" y="164" width="0.1929%" height="15" fill="rgb(247,70,30)" fg:x="10134" fg:w="23"/><text x="85.2240%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (46 samples, 0.39%)</title><rect x="89.0240%" y="212" width="0.3857%" height="15" fill="rgb(212,68,19)" fg:x="10617" fg:w="46"/><text x="89.2740%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (133 samples, 1.12%)</title><rect x="89.4097%" y="212" width="1.1152%" height="15" fill="rgb(240,187,13)" fg:x="10663" fg:w="133"/><text x="89.6597%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.27%)</title><rect x="90.2566%" y="228" width="0.2683%" height="15" fill="rgb(223,113,26)" fg:x="10764" fg:w="32"/><text x="90.5066%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (33 samples, 0.28%)</title><rect x="90.6004%" y="212" width="0.2767%" height="15" fill="rgb(206,192,2)" fg:x="10805" fg:w="33"/><text x="90.8504%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (735 samples, 6.16%)</title><rect x="85.1669%" y="164" width="6.1630%" height="15" fill="rgb(241,108,4)" fg:x="10157" fg:w="735"/><text x="85.4169%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (545 samples, 4.57%)</title><rect x="86.7600%" y="180" width="4.5698%" height="15" fill="rgb(247,173,49)" fg:x="10347" fg:w="545"/><text x="87.0100%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (495 samples, 4.15%)</title><rect x="87.1793%" y="196" width="4.1506%" height="15" fill="rgb(224,114,35)" fg:x="10397" fg:w="495"/><text x="87.4293%" y="206.50">&lt;lamb..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (54 samples, 0.45%)</title><rect x="90.8771%" y="212" width="0.4528%" height="15" fill="rgb(245,159,27)" fg:x="10838" fg:w="54"/><text x="91.1271%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="93.0991%" y="180" width="0.1677%" height="15" fill="rgb(245,172,44)" fg:x="11103" fg:w="20"/><text x="93.3491%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (17 samples, 0.14%)</title><rect x="93.4597%" y="180" width="0.1425%" height="15" fill="rgb(236,23,11)" fg:x="11146" fg:w="17"/><text x="93.7097%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (144 samples, 1.21%)</title><rect x="93.6022%" y="180" width="1.2074%" height="15" fill="rgb(205,117,38)" fg:x="11163" fg:w="144"/><text x="93.8522%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (28 samples, 0.23%)</title><rect x="94.5749%" y="196" width="0.2348%" height="15" fill="rgb(237,72,25)" fg:x="11279" fg:w="28"/><text x="94.8249%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (138 samples, 1.16%)</title><rect x="94.8097%" y="180" width="1.1571%" height="15" fill="rgb(244,70,9)" fg:x="11307" fg:w="138"/><text x="95.0597%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.19%)</title><rect x="95.7739%" y="196" width="0.1929%" height="15" fill="rgb(217,125,39)" fg:x="11422" fg:w="23"/><text x="96.0239%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (53 samples, 0.44%)</title><rect x="95.9668%" y="180" width="0.4444%" height="15" fill="rgb(235,36,10)" fg:x="11445" fg:w="53"/><text x="96.2168%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (186 samples, 1.56%)</title><rect x="96.4112%" y="180" width="1.5596%" height="15" fill="rgb(251,123,47)" fg:x="11498" fg:w="186"/><text x="96.6612%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (25 samples, 0.21%)</title><rect x="97.7612%" y="196" width="0.2096%" height="15" fill="rgb(221,13,13)" fg:x="11659" fg:w="25"/><text x="98.0112%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,641 samples, 13.76%)</title><rect x="84.9153%" y="148" width="13.7599%" height="15" fill="rgb(238,131,9)" fg:x="10127" fg:w="1641"/><text x="85.1653%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (862 samples, 7.23%)</title><rect x="91.4473%" y="164" width="7.2279%" height="15" fill="rgb(211,50,8)" fg:x="10906" fg:w="862"/><text x="91.6973%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:70) (84 samples, 0.70%)</title><rect x="97.9708%" y="180" width="0.7043%" height="15" fill="rgb(245,182,24)" fg:x="11684" fg:w="84"/><text x="98.2208%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (11,819 samples, 99.10%)</title><rect x="0.5618%" y="100" width="99.1028%" height="15" fill="rgb(242,14,37)" fg:x="67" fg:w="11819"/><text x="0.8118%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,269 samples, 94.49%)</title><rect x="5.1736%" y="116" width="94.4910%" height="15" fill="rgb(246,228,12)" fg:x="617" fg:w="11269"/><text x="5.4236%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,264 samples, 94.45%)</title><rect x="5.2155%" y="132" width="94.4491%" height="15" fill="rgb(213,55,15)" fg:x="622" fg:w="11264"/><text x="5.4655%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (110 samples, 0.92%)</title><rect x="98.7422%" y="148" width="0.9224%" height="15" fill="rgb(209,9,3)" fg:x="11776" fg:w="110"/><text x="98.9922%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (11,879 samples, 99.61%)</title><rect x="0.0671%" y="68" width="99.6059%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="11879"/><text x="0.3171%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,858 samples, 99.43%)</title><rect x="0.2432%" y="84" width="99.4298%" height="15" fill="rgb(209,121,21)" fg:x="29" fg:w="11858"/><text x="0.4932%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>sites (kappybara/pattern.py:111) (14 samples, 0.12%)</title><rect x="99.8575%" y="68" width="0.1174%" height="15" fill="rgb(220,109,13)" fg:x="11909" fg:w="14"/><text x="100.1075%" y="78.50"></text></g><g><title>all (11,926 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(232,18,1)" fg:x="0" fg:w="11926"/><text x="0.2500%" y="62.50"></text></g></svg></svg>