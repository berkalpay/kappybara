<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 20fae4e</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11999"><g><title>update (kappybara/system.py:69) (56 samples, 0.47%)</title><rect x="0.0333%" y="84" width="0.4667%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="56"/><text x="0.2833%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (56 samples, 0.47%)</title><rect x="0.0333%" y="100" width="0.4667%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="56"/><text x="0.2833%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (51 samples, 0.43%)</title><rect x="0.0750%" y="116" width="0.4250%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="51"/><text x="0.3250%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (48 samples, 0.40%)</title><rect x="0.1000%" y="132" width="0.4000%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="48"/><text x="0.3500%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (48 samples, 0.40%)</title><rect x="0.1000%" y="148" width="0.4000%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="48"/><text x="0.3500%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (45 samples, 0.38%)</title><rect x="0.1250%" y="164" width="0.3750%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="45"/><text x="0.3750%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (18 samples, 0.15%)</title><rect x="0.5834%" y="116" width="0.1500%" height="15" fill="rgb(207,160,47)" fg:x="70" fg:w="18"/><text x="0.8334%" y="126.50"></text></g><g><title>select (kappybara/rule.py:218) (23 samples, 0.19%)</title><rect x="0.7917%" y="116" width="0.1917%" height="15" fill="rgb(228,23,34)" fg:x="95" fg:w="23"/><text x="1.0417%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (51 samples, 0.43%)</title><rect x="0.5834%" y="100" width="0.4250%" height="15" fill="rgb(218,30,26)" fg:x="70" fg:w="51"/><text x="0.8334%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (25 samples, 0.21%)</title><rect x="1.0918%" y="164" width="0.2084%" height="15" fill="rgb(220,122,19)" fg:x="131" fg:w="25"/><text x="1.3418%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (48 samples, 0.40%)</title><rect x="1.0918%" y="148" width="0.4000%" height="15" fill="rgb(250,228,42)" fg:x="131" fg:w="48"/><text x="1.3418%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (23 samples, 0.19%)</title><rect x="1.3001%" y="164" width="0.1917%" height="15" fill="rgb(240,193,28)" fg:x="156" fg:w="23"/><text x="1.5501%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (71 samples, 0.59%)</title><rect x="1.5335%" y="164" width="0.5917%" height="15" fill="rgb(216,20,37)" fg:x="184" fg:w="71"/><text x="1.7835%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (21 samples, 0.18%)</title><rect x="1.9502%" y="180" width="0.1750%" height="15" fill="rgb(206,188,39)" fg:x="234" fg:w="21"/><text x="2.2002%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (18 samples, 0.15%)</title><rect x="2.3502%" y="180" width="0.1500%" height="15" fill="rgb(217,207,13)" fg:x="282" fg:w="18"/><text x="2.6002%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (25 samples, 0.21%)</title><rect x="2.5002%" y="180" width="0.2084%" height="15" fill="rgb(231,73,38)" fg:x="300" fg:w="25"/><text x="2.7502%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (29 samples, 0.24%)</title><rect x="2.7836%" y="180" width="0.2417%" height="15" fill="rgb(225,20,46)" fg:x="334" fg:w="29"/><text x="3.0336%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (199 samples, 1.66%)</title><rect x="1.4918%" y="148" width="1.6585%" height="15" fill="rgb(210,31,41)" fg:x="179" fg:w="199"/><text x="1.7418%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (123 samples, 1.03%)</title><rect x="2.1252%" y="164" width="1.0251%" height="15" fill="rgb(221,200,47)" fg:x="255" fg:w="123"/><text x="2.3752%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (15 samples, 0.13%)</title><rect x="3.0253%" y="180" width="0.1250%" height="15" fill="rgb(226,26,5)" fg:x="363" fg:w="15"/><text x="3.2753%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (93 samples, 0.78%)</title><rect x="3.1836%" y="148" width="0.7751%" height="15" fill="rgb(249,33,26)" fg:x="382" fg:w="93"/><text x="3.4336%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.15%)</title><rect x="3.8087%" y="164" width="0.1500%" height="15" fill="rgb(235,183,28)" fg:x="457" fg:w="18"/><text x="4.0587%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (20 samples, 0.17%)</title><rect x="3.9587%" y="148" width="0.1667%" height="15" fill="rgb(221,5,38)" fg:x="475" fg:w="20"/><text x="4.2087%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (58 samples, 0.48%)</title><rect x="4.9504%" y="180" width="0.4834%" height="15" fill="rgb(247,18,42)" fg:x="594" fg:w="58"/><text x="5.2004%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (34 samples, 0.28%)</title><rect x="5.1504%" y="196" width="0.2834%" height="15" fill="rgb(241,131,45)" fg:x="618" fg:w="34"/><text x="5.4004%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (556 samples, 4.63%)</title><rect x="1.0334%" y="132" width="4.6337%" height="15" fill="rgb(249,31,29)" fg:x="124" fg:w="556"/><text x="1.2834%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (183 samples, 1.53%)</title><rect x="4.1420%" y="148" width="1.5251%" height="15" fill="rgb(225,111,53)" fg:x="497" fg:w="183"/><text x="4.3920%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (156 samples, 1.30%)</title><rect x="4.3670%" y="164" width="1.3001%" height="15" fill="rgb(238,160,17)" fg:x="524" fg:w="156"/><text x="4.6170%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (25 samples, 0.21%)</title><rect x="5.4588%" y="180" width="0.2084%" height="15" fill="rgb(214,148,48)" fg:x="655" fg:w="25"/><text x="5.7088%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (560 samples, 4.67%)</title><rect x="1.0084%" y="116" width="4.6671%" height="15" fill="rgb(232,36,49)" fg:x="121" fg:w="560"/><text x="1.2584%" y="126.50">apply..</text></g><g><title>embeddings (kappybara/pattern.py:261) (75 samples, 0.63%)</title><rect x="6.0922%" y="180" width="0.6251%" height="15" fill="rgb(209,103,24)" fg:x="731" fg:w="75"/><text x="6.3422%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.18%)</title><rect x="14.4345%" y="196" width="0.1750%" height="15" fill="rgb(229,88,8)" fg:x="1732" fg:w="21"/><text x="14.6845%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (994 samples, 8.28%)</title><rect x="6.7172%" y="180" width="8.2840%" height="15" fill="rgb(213,181,19)" fg:x="806" fg:w="994"/><text x="6.9672%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.39%)</title><rect x="14.6096%" y="196" width="0.3917%" height="15" fill="rgb(254,191,54)" fg:x="1753" fg:w="47"/><text x="14.8596%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.18%)</title><rect x="17.4265%" y="196" width="0.1833%" height="15" fill="rgb(241,83,37)" fg:x="2091" fg:w="22"/><text x="17.6765%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (342 samples, 2.85%)</title><rect x="15.0013%" y="180" width="2.8502%" height="15" fill="rgb(233,36,39)" fg:x="1800" fg:w="342"/><text x="15.2513%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.24%)</title><rect x="17.6098%" y="196" width="0.2417%" height="15" fill="rgb(226,3,54)" fg:x="2113" fg:w="29"/><text x="17.8598%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (92 samples, 0.77%)</title><rect x="17.8848%" y="180" width="0.7667%" height="15" fill="rgb(245,192,40)" fg:x="2146" fg:w="92"/><text x="18.1348%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (66 samples, 0.55%)</title><rect x="18.6516%" y="180" width="0.5500%" height="15" fill="rgb(238,167,29)" fg:x="2238" fg:w="66"/><text x="18.9016%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.18%)</title><rect x="21.3351%" y="196" width="0.1750%" height="15" fill="rgb(232,182,51)" fg:x="2560" fg:w="21"/><text x="21.5851%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (317 samples, 2.64%)</title><rect x="19.2016%" y="180" width="2.6419%" height="15" fill="rgb(231,60,39)" fg:x="2304" fg:w="317"/><text x="19.4516%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.33%)</title><rect x="21.5101%" y="196" width="0.3334%" height="15" fill="rgb(208,69,12)" fg:x="2581" fg:w="40"/><text x="21.7601%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (295 samples, 2.46%)</title><rect x="21.8435%" y="180" width="2.4585%" height="15" fill="rgb(235,93,37)" fg:x="2621" fg:w="295"/><text x="22.0935%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (19 samples, 0.16%)</title><rect x="25.8855%" y="196" width="0.1583%" height="15" fill="rgb(213,116,39)" fg:x="3106" fg:w="19"/><text x="26.1355%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (109 samples, 0.91%)</title><rect x="26.0438%" y="196" width="0.9084%" height="15" fill="rgb(222,207,29)" fg:x="3125" fg:w="109"/><text x="26.2938%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (141 samples, 1.18%)</title><rect x="28.4274%" y="212" width="1.1751%" height="15" fill="rgb(206,96,30)" fg:x="3411" fg:w="141"/><text x="28.6774%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (121 samples, 1.01%)</title><rect x="31.1026%" y="228" width="1.0084%" height="15" fill="rgb(218,138,4)" fg:x="3732" fg:w="121"/><text x="31.3526%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (985 samples, 8.21%)</title><rect x="26.9689%" y="196" width="8.2090%" height="15" fill="rgb(250,191,14)" fg:x="3236" fg:w="985"/><text x="27.2189%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (669 samples, 5.58%)</title><rect x="29.6025%" y="212" width="5.5755%" height="15" fill="rgb(239,60,40)" fg:x="3552" fg:w="669"/><text x="29.8525%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (368 samples, 3.07%)</title><rect x="32.1110%" y="228" width="3.0669%" height="15" fill="rgb(206,27,48)" fg:x="3853" fg:w="368"/><text x="32.3610%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (137 samples, 1.14%)</title><rect x="35.1779%" y="196" width="1.1418%" height="15" fill="rgb(225,35,8)" fg:x="4221" fg:w="137"/><text x="35.4279%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (20 samples, 0.17%)</title><rect x="36.3197%" y="196" width="0.1667%" height="15" fill="rgb(250,213,24)" fg:x="4358" fg:w="20"/><text x="36.5697%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (18 samples, 0.15%)</title><rect x="37.2698%" y="212" width="0.1500%" height="15" fill="rgb(247,123,22)" fg:x="4472" fg:w="18"/><text x="37.5198%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (188 samples, 1.57%)</title><rect x="36.4864%" y="196" width="1.5668%" height="15" fill="rgb(231,138,38)" fg:x="4378" fg:w="188"/><text x="36.7364%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (76 samples, 0.63%)</title><rect x="37.4198%" y="212" width="0.6334%" height="15" fill="rgb(231,145,46)" fg:x="4490" fg:w="76"/><text x="37.6698%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (222 samples, 1.85%)</title><rect x="46.1455%" y="212" width="1.8502%" height="15" fill="rgb(251,118,11)" fg:x="5537" fg:w="222"/><text x="46.3955%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (18 samples, 0.15%)</title><rect x="47.9957%" y="212" width="0.1500%" height="15" fill="rgb(217,147,25)" fg:x="5759" fg:w="18"/><text x="48.2457%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (17 samples, 0.14%)</title><rect x="48.6041%" y="228" width="0.1417%" height="15" fill="rgb(247,81,37)" fg:x="5832" fg:w="17"/><text x="48.8541%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (153 samples, 1.28%)</title><rect x="48.1457%" y="212" width="1.2751%" height="15" fill="rgb(209,12,38)" fg:x="5777" fg:w="153"/><text x="48.3957%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (81 samples, 0.68%)</title><rect x="48.7457%" y="228" width="0.6751%" height="15" fill="rgb(227,1,9)" fg:x="5849" fg:w="81"/><text x="48.9957%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (18 samples, 0.15%)</title><rect x="50.3625%" y="228" width="0.1500%" height="15" fill="rgb(248,47,43)" fg:x="6043" fg:w="18"/><text x="50.6125%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:59) (510 samples, 4.25%)</title><rect x="50.5125%" y="228" width="4.2504%" height="15" fill="rgb(221,10,30)" fg:x="6061" fg:w="510"/><text x="50.7625%" y="238.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (254 samples, 2.12%)</title><rect x="52.6461%" y="244" width="2.1168%" height="15" fill="rgb(210,229,1)" fg:x="6317" fg:w="254"/><text x="52.8961%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (46 samples, 0.38%)</title><rect x="54.3795%" y="260" width="0.3834%" height="15" fill="rgb(222,148,37)" fg:x="6525" fg:w="46"/><text x="54.6295%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (288 samples, 2.40%)</title><rect x="54.7629%" y="228" width="2.4002%" height="15" fill="rgb(234,67,33)" fg:x="6571" fg:w="288"/><text x="55.0129%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (99 samples, 0.83%)</title><rect x="57.1631%" y="228" width="0.8251%" height="15" fill="rgb(247,98,35)" fg:x="6859" fg:w="99"/><text x="57.4131%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (16 samples, 0.13%)</title><rect x="57.9882%" y="228" width="0.1333%" height="15" fill="rgb(247,138,52)" fg:x="6958" fg:w="16"/><text x="58.2382%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,087 samples, 9.06%)</title><rect x="49.4208%" y="212" width="9.0591%" height="15" fill="rgb(213,79,30)" fg:x="5930" fg:w="1087"/><text x="49.6708%" y="222.50">embeds_in (ka..</text></g><g><title>coupled (kappybara/pattern.py:66) (43 samples, 0.36%)</title><rect x="58.1215%" y="228" width="0.3584%" height="15" fill="rgb(246,177,23)" fg:x="6974" fg:w="43"/><text x="58.3715%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (31 samples, 0.26%)</title><rect x="58.5215%" y="212" width="0.2584%" height="15" fill="rgb(230,62,27)" fg:x="7022" fg:w="31"/><text x="58.7715%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.10%)</title><rect x="59.7383%" y="228" width="0.1000%" height="15" fill="rgb(216,154,8)" fg:x="7168" fg:w="12"/><text x="59.9883%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.18%)</title><rect x="61.0884%" y="244" width="0.1833%" height="15" fill="rgb(244,35,45)" fg:x="7330" fg:w="22"/><text x="61.3384%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (320 samples, 2.67%)</title><rect x="58.7799%" y="212" width="2.6669%" height="15" fill="rgb(251,115,12)" fg:x="7053" fg:w="320"/><text x="59.0299%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (193 samples, 1.61%)</title><rect x="59.8383%" y="228" width="1.6085%" height="15" fill="rgb(240,54,50)" fg:x="7180" fg:w="193"/><text x="60.0883%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.18%)</title><rect x="61.2718%" y="244" width="0.1750%" height="15" fill="rgb(233,84,52)" fg:x="7352" fg:w="21"/><text x="61.5218%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.18%)</title><rect x="64.2720%" y="244" width="0.1833%" height="15" fill="rgb(207,117,47)" fg:x="7712" fg:w="22"/><text x="64.5220%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (419 samples, 3.49%)</title><rect x="61.4468%" y="212" width="3.4920%" height="15" fill="rgb(249,43,39)" fg:x="7373" fg:w="419"/><text x="61.6968%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (279 samples, 2.33%)</title><rect x="62.6136%" y="228" width="2.3252%" height="15" fill="rgb(209,38,44)" fg:x="7513" fg:w="279"/><text x="62.8636%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (58 samples, 0.48%)</title><rect x="64.4554%" y="244" width="0.4834%" height="15" fill="rgb(236,212,23)" fg:x="7734" fg:w="58"/><text x="64.7054%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (86 samples, 0.72%)</title><rect x="64.9387%" y="212" width="0.7167%" height="15" fill="rgb(242,79,21)" fg:x="7792" fg:w="86"/><text x="65.1887%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (193 samples, 1.61%)</title><rect x="65.6638%" y="212" width="1.6085%" height="15" fill="rgb(211,96,35)" fg:x="7879" fg:w="193"/><text x="65.9138%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (78 samples, 0.65%)</title><rect x="67.2723%" y="212" width="0.6501%" height="15" fill="rgb(253,215,40)" fg:x="8072" fg:w="78"/><text x="67.5223%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (18 samples, 0.15%)</title><rect x="67.9223%" y="212" width="0.1500%" height="15" fill="rgb(211,81,21)" fg:x="8150" fg:w="18"/><text x="68.1723%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,894 samples, 32.45%)</title><rect x="38.0532%" y="196" width="32.4527%" height="15" fill="rgb(208,190,38)" fg:x="4566" fg:w="3894"/><text x="38.3032%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (292 samples, 2.43%)</title><rect x="68.0723%" y="212" width="2.4335%" height="15" fill="rgb(235,213,38)" fg:x="8168" fg:w="292"/><text x="68.3223%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,599 samples, 46.66%)</title><rect x="24.3020%" y="180" width="46.6622%" height="15" fill="rgb(237,122,38)" fg:x="2916" fg:w="5599"/><text x="24.5520%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (55 samples, 0.46%)</title><rect x="70.5059%" y="196" width="0.4584%" height="15" fill="rgb(244,218,35)" fg:x="8460" fg:w="55"/><text x="70.7559%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (82 samples, 0.68%)</title><rect x="72.0060%" y="196" width="0.6834%" height="15" fill="rgb(240,68,47)" fg:x="8640" fg:w="82"/><text x="72.2560%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (55 samples, 0.46%)</title><rect x="73.5978%" y="212" width="0.4584%" height="15" fill="rgb(210,16,53)" fg:x="8831" fg:w="55"/><text x="73.8478%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (599 samples, 4.99%)</title><rect x="71.0476%" y="180" width="4.9921%" height="15" fill="rgb(235,124,12)" fg:x="8525" fg:w="599"/><text x="71.2976%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (402 samples, 3.35%)</title><rect x="72.6894%" y="196" width="3.3503%" height="15" fill="rgb(224,169,11)" fg:x="8722" fg:w="402"/><text x="72.9394%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (238 samples, 1.98%)</title><rect x="74.0562%" y="212" width="1.9835%" height="15" fill="rgb(250,166,2)" fg:x="8886" fg:w="238"/><text x="74.3062%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (110 samples, 0.92%)</title><rect x="76.0397%" y="180" width="0.9167%" height="15" fill="rgb(242,216,29)" fg:x="9124" fg:w="110"/><text x="76.2897%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (41 samples, 0.34%)</title><rect x="76.6147%" y="196" width="0.3417%" height="15" fill="rgb(230,116,27)" fg:x="9193" fg:w="41"/><text x="76.8647%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (16 samples, 0.13%)</title><rect x="77.1481%" y="196" width="0.1333%" height="15" fill="rgb(228,99,48)" fg:x="9257" fg:w="16"/><text x="77.3981%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (81 samples, 0.68%)</title><rect x="76.9564%" y="180" width="0.6751%" height="15" fill="rgb(253,11,6)" fg:x="9234" fg:w="81"/><text x="77.2064%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (42 samples, 0.35%)</title><rect x="77.2814%" y="196" width="0.3500%" height="15" fill="rgb(247,143,39)" fg:x="9273" fg:w="42"/><text x="77.5314%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (194 samples, 1.62%)</title><rect x="77.6315%" y="180" width="1.6168%" height="15" fill="rgb(236,97,10)" fg:x="9315" fg:w="194"/><text x="77.8815%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.26%)</title><rect x="78.9899%" y="196" width="0.2584%" height="15" fill="rgb(233,208,19)" fg:x="9478" fg:w="31"/><text x="79.2399%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (63 samples, 0.53%)</title><rect x="79.2483%" y="180" width="0.5250%" height="15" fill="rgb(216,164,2)" fg:x="9509" fg:w="63"/><text x="79.4983%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (86 samples, 0.72%)</title><rect x="79.7733%" y="180" width="0.7167%" height="15" fill="rgb(220,129,5)" fg:x="9572" fg:w="86"/><text x="80.0233%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (128 samples, 1.07%)</title><rect x="82.3819%" y="196" width="1.0668%" height="15" fill="rgb(242,17,10)" fg:x="9885" fg:w="128"/><text x="82.6319%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.15%)</title><rect x="83.2986%" y="212" width="0.1500%" height="15" fill="rgb(242,107,0)" fg:x="9995" fg:w="18"/><text x="83.5486%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (369 samples, 3.08%)</title><rect x="80.4900%" y="180" width="3.0753%" height="15" fill="rgb(251,28,31)" fg:x="9658" fg:w="369"/><text x="80.7400%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="83.4570%" y="196" width="0.1083%" height="15" fill="rgb(233,223,10)" fg:x="10014" fg:w="13"/><text x="83.7070%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (25 samples, 0.21%)</title><rect x="83.5820%" y="180" width="0.2084%" height="15" fill="rgb(215,21,27)" fg:x="10029" fg:w="25"/><text x="83.8320%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (15 samples, 0.13%)</title><rect x="83.7903%" y="180" width="0.1250%" height="15" fill="rgb(232,23,21)" fg:x="10054" fg:w="15"/><text x="84.0403%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,386 samples, 78.22%)</title><rect x="5.7838%" y="164" width="78.2232%" height="15" fill="rgb(244,5,23)" fg:x="694" fg:w="9386"/><text x="6.0338%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (93 samples, 0.78%)</title><rect x="84.0070%" y="164" width="0.7751%" height="15" fill="rgb(226,81,46)" fg:x="10080" fg:w="93"/><text x="84.2570%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (21 samples, 0.18%)</title><rect x="84.6071%" y="180" width="0.1750%" height="15" fill="rgb(247,70,30)" fg:x="10152" fg:w="21"/><text x="84.8571%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (153 samples, 1.28%)</title><rect x="84.8154%" y="164" width="1.2751%" height="15" fill="rgb(212,68,19)" fg:x="10177" fg:w="153"/><text x="85.0654%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (17 samples, 0.14%)</title><rect x="85.9488%" y="180" width="0.1417%" height="15" fill="rgb(240,187,13)" fg:x="10313" fg:w="17"/><text x="86.1988%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,646 samples, 80.39%)</title><rect x="5.7171%" y="148" width="80.3900%" height="15" fill="rgb(223,113,26)" fg:x="686" fg:w="9646"/><text x="5.9671%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (16 samples, 0.13%)</title><rect x="86.1488%" y="164" width="0.1333%" height="15" fill="rgb(206,192,2)" fg:x="10337" fg:w="16"/><text x="86.3988%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (38 samples, 0.32%)</title><rect x="89.8158%" y="212" width="0.3167%" height="15" fill="rgb(241,108,4)" fg:x="10777" fg:w="38"/><text x="90.0658%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (154 samples, 1.28%)</title><rect x="90.1325%" y="212" width="1.2834%" height="15" fill="rgb(247,173,49)" fg:x="10815" fg:w="154"/><text x="90.3825%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="91.2493%" y="228" width="0.1667%" height="15" fill="rgb(224,114,35)" fg:x="10949" fg:w="20"/><text x="91.4993%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (19 samples, 0.16%)</title><rect x="91.4910%" y="212" width="0.1583%" height="15" fill="rgb(245,159,27)" fg:x="10978" fg:w="19"/><text x="91.7410%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (706 samples, 5.88%)</title><rect x="86.2822%" y="164" width="5.8838%" height="15" fill="rgb(245,172,44)" fg:x="10353" fg:w="706"/><text x="86.5322%" y="174.50">create_..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (517 samples, 4.31%)</title><rect x="87.8573%" y="180" width="4.3087%" height="15" fill="rgb(236,23,11)" fg:x="10542" fg:w="517"/><text x="88.1073%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (465 samples, 3.88%)</title><rect x="88.2907%" y="196" width="3.8753%" height="15" fill="rgb(205,117,38)" fg:x="10594" fg:w="465"/><text x="88.5407%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (62 samples, 0.52%)</title><rect x="91.6493%" y="212" width="0.5167%" height="15" fill="rgb(237,72,25)" fg:x="10997" fg:w="62"/><text x="91.8993%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.20%)</title><rect x="93.3578%" y="180" width="0.2000%" height="15" fill="rgb(244,70,9)" fg:x="11202" fg:w="24"/><text x="93.6078%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (13 samples, 0.11%)</title><rect x="94.6329%" y="196" width="0.1083%" height="15" fill="rgb(217,125,39)" fg:x="11355" fg:w="13"/><text x="94.8829%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (136 samples, 1.13%)</title><rect x="93.8078%" y="180" width="1.1334%" height="15" fill="rgb(235,36,10)" fg:x="11256" fg:w="136"/><text x="94.0578%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (24 samples, 0.20%)</title><rect x="94.7412%" y="196" width="0.2000%" height="15" fill="rgb(251,123,47)" fg:x="11368" fg:w="24"/><text x="94.9912%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (142 samples, 1.18%)</title><rect x="94.9412%" y="180" width="1.1834%" height="15" fill="rgb(221,13,13)" fg:x="11392" fg:w="142"/><text x="95.1912%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (25 samples, 0.21%)</title><rect x="95.9163%" y="196" width="0.2084%" height="15" fill="rgb(238,131,9)" fg:x="11509" fg:w="25"/><text x="96.1663%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (58 samples, 0.48%)</title><rect x="96.1247%" y="180" width="0.4834%" height="15" fill="rgb(211,50,8)" fg:x="11534" fg:w="58"/><text x="96.3747%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (189 samples, 1.58%)</title><rect x="96.6081%" y="180" width="1.5751%" height="15" fill="rgb(245,182,24)" fg:x="11592" fg:w="189"/><text x="96.8581%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (26 samples, 0.22%)</title><rect x="97.9665%" y="196" width="0.2167%" height="15" fill="rgb(242,14,37)" fg:x="11755" fg:w="26"/><text x="98.2165%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,528 samples, 12.73%)</title><rect x="86.1072%" y="148" width="12.7344%" height="15" fill="rgb(246,228,12)" fg:x="10332" fg:w="1528"/><text x="86.3572%" y="158.50">track_component (ka..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (794 samples, 6.62%)</title><rect x="92.2244%" y="164" width="6.6172%" height="15" fill="rgb(213,55,15)" fg:x="11066" fg:w="794"/><text x="92.4744%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:70) (79 samples, 0.66%)</title><rect x="98.1832%" y="180" width="0.6584%" height="15" fill="rgb(209,9,3)" fg:x="11781" fg:w="79"/><text x="98.4332%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (11,835 samples, 98.63%)</title><rect x="1.0084%" y="100" width="98.6332%" height="15" fill="rgb(230,59,30)" fg:x="121" fg:w="11835"/><text x="1.2584%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,271 samples, 93.93%)</title><rect x="5.7088%" y="116" width="93.9328%" height="15" fill="rgb(209,121,21)" fg:x="685" fg:w="11271"/><text x="5.9588%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,270 samples, 93.92%)</title><rect x="5.7171%" y="132" width="93.9245%" height="15" fill="rgb(220,109,13)" fg:x="686" fg:w="11270"/><text x="5.9671%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (90 samples, 0.75%)</title><rect x="98.8916%" y="148" width="0.7501%" height="15" fill="rgb(232,18,1)" fg:x="11866" fg:w="90"/><text x="99.1416%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,954 samples, 99.62%)</title><rect x="0.0250%" y="68" width="99.6250%" height="15" fill="rgb(215,41,42)" fg:x="3" fg:w="11954"/><text x="0.2750%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,897 samples, 99.15%)</title><rect x="0.5000%" y="84" width="99.1499%" height="15" fill="rgb(224,123,36)" fg:x="60" fg:w="11897"/><text x="0.7500%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>sites (kappybara/pattern.py:111) (13 samples, 0.11%)</title><rect x="99.8417%" y="68" width="0.1083%" height="15" fill="rgb(240,125,3)" fg:x="11980" fg:w="13"/><text x="100.0917%" y="78.50"></text></g><g><title>all (11,999 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="11999"/><text x="0.2500%" y="62.50"></text></g></svg></svg>