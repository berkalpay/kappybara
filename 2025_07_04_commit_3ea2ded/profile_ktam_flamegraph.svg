<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="778" onload="init(evt)" viewBox="0 0 1200 778" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="778" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 3ea2ded</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="767.00"> </text><svg id="frames" x="10" width="1180" total_samples="2455"><g><title>&lt;module&gt; (profile_ktam.py:1) (3 samples, 0.12%)</title><rect x="0.0000%" y="68" width="0.1222%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="0.0000%" y="84" width="0.1222%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="0.0000%" y="100" width="0.1222%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="0.0000%" y="116" width="0.1222%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="0.0000%" y="132" width="0.1222%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="0.0000%" y="148" width="0.1222%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="158.50"></text></g><g><title>act (kappybara/system.py:62) (3 samples, 0.12%)</title><rect x="0.4481%" y="100" width="0.1222%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="3"/><text x="0.6981%" y="110.50"></text></g><g><title>select (kappybara/rule.py:80) (3 samples, 0.12%)</title><rect x="0.5703%" y="116" width="0.1222%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="3"/><text x="0.8203%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (7 samples, 0.29%)</title><rect x="0.5703%" y="100" width="0.2851%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="7"/><text x="0.8203%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (3 samples, 0.12%)</title><rect x="0.7332%" y="116" width="0.1222%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="3"/><text x="0.9832%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (3 samples, 0.12%)</title><rect x="1.0183%" y="148" width="0.1222%" height="15" fill="rgb(250,228,42)" fg:x="25" fg:w="3"/><text x="1.2683%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (13 samples, 0.53%)</title><rect x="1.1405%" y="148" width="0.5295%" height="15" fill="rgb(240,193,28)" fg:x="28" fg:w="13"/><text x="1.3905%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (3 samples, 0.12%)</title><rect x="1.5479%" y="164" width="0.1222%" height="15" fill="rgb(216,20,37)" fg:x="38" fg:w="3"/><text x="1.7979%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (14 samples, 0.57%)</title><rect x="2.9328%" y="180" width="0.5703%" height="15" fill="rgb(206,188,39)" fg:x="72" fg:w="14"/><text x="3.1828%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (8 samples, 0.33%)</title><rect x="3.1772%" y="196" width="0.3259%" height="15" fill="rgb(217,207,13)" fg:x="78" fg:w="8"/><text x="3.4272%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (72 samples, 2.93%)</title><rect x="0.8961%" y="132" width="2.9328%" height="15" fill="rgb(231,73,38)" fg:x="22" fg:w="72"/><text x="1.1461%" y="142.50">_r..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (50 samples, 2.04%)</title><rect x="1.7923%" y="148" width="2.0367%" height="15" fill="rgb(225,20,46)" fg:x="44" fg:w="50"/><text x="2.0423%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (41 samples, 1.67%)</title><rect x="2.1589%" y="164" width="1.6701%" height="15" fill="rgb(210,31,41)" fg:x="53" fg:w="41"/><text x="2.4089%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (7 samples, 0.29%)</title><rect x="3.5438%" y="180" width="0.2851%" height="15" fill="rgb(221,200,47)" fg:x="87" fg:w="7"/><text x="3.7938%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (83 samples, 3.38%)</title><rect x="0.8554%" y="116" width="3.3809%" height="15" fill="rgb(226,26,5)" fg:x="21" fg:w="83"/><text x="1.1054%" y="126.50">app..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (10 samples, 0.41%)</title><rect x="3.8289%" y="132" width="0.4073%" height="15" fill="rgb(249,33,26)" fg:x="94" fg:w="10"/><text x="4.0789%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (7 samples, 0.29%)</title><rect x="3.9511%" y="148" width="0.2851%" height="15" fill="rgb(235,183,28)" fg:x="97" fg:w="7"/><text x="4.2011%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (8 samples, 0.33%)</title><rect x="4.5621%" y="148" width="0.3259%" height="15" fill="rgb(221,5,38)" fg:x="112" fg:w="8"/><text x="4.8121%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.20%)</title><rect x="8.5540%" y="164" width="0.2037%" height="15" fill="rgb(247,18,42)" fg:x="210" fg:w="5"/><text x="8.8040%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (101 samples, 4.11%)</title><rect x="4.8880%" y="148" width="4.1141%" height="15" fill="rgb(241,131,45)" fg:x="120" fg:w="101"/><text x="5.1380%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.24%)</title><rect x="8.7576%" y="164" width="0.2444%" height="15" fill="rgb(249,31,29)" fg:x="215" fg:w="6"/><text x="9.0076%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.24%)</title><rect x="11.8126%" y="164" width="0.2444%" height="15" fill="rgb(225,111,53)" fg:x="290" fg:w="6"/><text x="12.0626%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (83 samples, 3.38%)</title><rect x="9.0020%" y="148" width="3.3809%" height="15" fill="rgb(238,160,17)" fg:x="221" fg:w="83"/><text x="9.2520%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.33%)</title><rect x="12.0570%" y="164" width="0.3259%" height="15" fill="rgb(214,148,48)" fg:x="296" fg:w="8"/><text x="12.3070%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (19 samples, 0.77%)</title><rect x="12.3829%" y="148" width="0.7739%" height="15" fill="rgb(232,36,49)" fg:x="304" fg:w="19"/><text x="12.6329%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (21 samples, 0.86%)</title><rect x="13.1568%" y="148" width="0.8554%" height="15" fill="rgb(209,103,24)" fg:x="323" fg:w="21"/><text x="13.4068%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.33%)</title><rect x="16.0081%" y="164" width="0.3259%" height="15" fill="rgb(229,88,8)" fg:x="393" fg:w="8"/><text x="16.2581%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (70 samples, 2.85%)</title><rect x="14.0122%" y="148" width="2.8513%" height="15" fill="rgb(213,181,19)" fg:x="344" fg:w="70"/><text x="14.2622%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.53%)</title><rect x="16.3340%" y="164" width="0.5295%" height="15" fill="rgb(254,191,54)" fg:x="401" fg:w="13"/><text x="16.5840%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (70 samples, 2.85%)</title><rect x="16.8635%" y="148" width="2.8513%" height="15" fill="rgb(241,83,37)" fg:x="414" fg:w="70"/><text x="17.1135%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (3 samples, 0.12%)</title><rect x="21.6701%" y="164" width="0.1222%" height="15" fill="rgb(233,36,39)" fg:x="532" fg:w="3"/><text x="21.9201%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (24 samples, 0.98%)</title><rect x="21.7923%" y="164" width="0.9776%" height="15" fill="rgb(226,3,54)" fg:x="535" fg:w="24"/><text x="22.0423%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (30 samples, 1.22%)</title><rect x="25.0102%" y="180" width="1.2220%" height="15" fill="rgb(245,192,40)" fg:x="614" fg:w="30"/><text x="25.2602%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (32 samples, 1.30%)</title><rect x="28.1059%" y="196" width="1.3035%" height="15" fill="rgb(238,167,29)" fg:x="690" fg:w="32"/><text x="28.3559%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (274 samples, 11.16%)</title><rect x="22.8513%" y="164" width="11.1609%" height="15" fill="rgb(232,182,51)" fg:x="561" fg:w="274"/><text x="23.1013%" y="174.50">embeds_in (kappy..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (191 samples, 7.78%)</title><rect x="26.2322%" y="180" width="7.7800%" height="15" fill="rgb(231,60,39)" fg:x="644" fg:w="191"/><text x="26.4822%" y="190.50">__iter__ (k..</text></g><g><title>sites (kappybara/pattern.py:111) (113 samples, 4.60%)</title><rect x="29.4094%" y="196" width="4.6029%" height="15" fill="rgb(208,69,12)" fg:x="722" fg:w="113"/><text x="29.6594%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (38 samples, 1.55%)</title><rect x="34.0122%" y="164" width="1.5479%" height="15" fill="rgb(235,93,37)" fg:x="835" fg:w="38"/><text x="34.2622%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (3 samples, 0.12%)</title><rect x="35.5601%" y="164" width="0.1222%" height="15" fill="rgb(213,116,39)" fg:x="873" fg:w="3"/><text x="35.8101%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (26 samples, 1.06%)</title><rect x="36.7413%" y="180" width="1.0591%" height="15" fill="rgb(222,207,29)" fg:x="902" fg:w="26"/><text x="36.9913%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (58 samples, 2.36%)</title><rect x="35.6823%" y="164" width="2.3625%" height="15" fill="rgb(206,96,30)" fg:x="876" fg:w="58"/><text x="35.9323%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (6 samples, 0.24%)</title><rect x="37.8004%" y="180" width="0.2444%" height="15" fill="rgb(218,138,4)" fg:x="928" fg:w="6"/><text x="38.0504%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (53 samples, 2.16%)</title><rect x="48.1874%" y="180" width="2.1589%" height="15" fill="rgb(250,191,14)" fg:x="1183" fg:w="53"/><text x="48.4374%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (4 samples, 0.16%)</title><rect x="50.3462%" y="180" width="0.1629%" height="15" fill="rgb(239,60,40)" fg:x="1236" fg:w="4"/><text x="50.5962%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (4 samples, 0.16%)</title><rect x="50.9572%" y="196" width="0.1629%" height="15" fill="rgb(206,27,48)" fg:x="1251" fg:w="4"/><text x="51.2072%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (47 samples, 1.91%)</title><rect x="50.5092%" y="180" width="1.9145%" height="15" fill="rgb(225,35,8)" fg:x="1240" fg:w="47"/><text x="50.7592%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (32 samples, 1.30%)</title><rect x="51.1202%" y="196" width="1.3035%" height="15" fill="rgb(250,213,24)" fg:x="1255" fg:w="32"/><text x="51.3702%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (3 samples, 0.12%)</title><rect x="53.3605%" y="196" width="0.1222%" height="15" fill="rgb(247,123,22)" fg:x="1310" fg:w="3"/><text x="53.6105%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.20%)</title><rect x="56.4969%" y="212" width="0.2037%" height="15" fill="rgb(231,138,38)" fg:x="1387" fg:w="5"/><text x="56.7469%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="58.6965%" y="228" width="0.1222%" height="15" fill="rgb(231,145,46)" fg:x="1441" fg:w="3"/><text x="58.9465%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (142 samples, 5.78%)</title><rect x="53.4827%" y="196" width="5.7841%" height="15" fill="rgb(251,118,11)" fg:x="1313" fg:w="142"/><text x="53.7327%" y="206.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (63 samples, 2.57%)</title><rect x="56.7006%" y="212" width="2.5662%" height="15" fill="rgb(217,147,25)" fg:x="1392" fg:w="63"/><text x="56.9506%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.45%)</title><rect x="58.8187%" y="228" width="0.4481%" height="15" fill="rgb(247,81,37)" fg:x="1444" fg:w="11"/><text x="59.0687%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (56 samples, 2.28%)</title><rect x="59.2668%" y="196" width="2.2811%" height="15" fill="rgb(209,12,38)" fg:x="1455" fg:w="56"/><text x="59.5168%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (21 samples, 0.86%)</title><rect x="61.5479%" y="196" width="0.8554%" height="15" fill="rgb(227,1,9)" fg:x="1511" fg:w="21"/><text x="61.7979%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (5 samples, 0.20%)</title><rect x="62.4033%" y="196" width="0.2037%" height="15" fill="rgb(248,47,43)" fg:x="1532" fg:w="5"/><text x="62.6533%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (260 samples, 10.59%)</title><rect x="52.4236%" y="180" width="10.5906%" height="15" fill="rgb(221,10,30)" fg:x="1287" fg:w="260"/><text x="52.6736%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (10 samples, 0.41%)</title><rect x="62.6069%" y="196" width="0.4073%" height="15" fill="rgb(210,229,1)" fg:x="1537" fg:w="10"/><text x="62.8569%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (6 samples, 0.24%)</title><rect x="63.0143%" y="180" width="0.2444%" height="15" fill="rgb(222,148,37)" fg:x="1547" fg:w="6"/><text x="63.2643%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.20%)</title><rect x="64.6436%" y="196" width="0.2037%" height="15" fill="rgb(234,67,33)" fg:x="1587" fg:w="5"/><text x="64.8936%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (88 samples, 3.58%)</title><rect x="63.2587%" y="180" width="3.5845%" height="15" fill="rgb(247,98,35)" fg:x="1553" fg:w="88"/><text x="63.5087%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (49 samples, 2.00%)</title><rect x="64.8473%" y="196" width="1.9959%" height="15" fill="rgb(247,138,52)" fg:x="1592" fg:w="49"/><text x="65.0973%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.29%)</title><rect x="66.5580%" y="212" width="0.2851%" height="15" fill="rgb(213,79,30)" fg:x="1634" fg:w="7"/><text x="66.8080%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (107 samples, 4.36%)</title><rect x="66.8432%" y="180" width="4.3585%" height="15" fill="rgb(246,177,23)" fg:x="1641" fg:w="107"/><text x="67.0932%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (76 samples, 3.10%)</title><rect x="68.1059%" y="196" width="3.0957%" height="15" fill="rgb(230,62,27)" fg:x="1672" fg:w="76"/><text x="68.3559%" y="206.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.86%)</title><rect x="70.3462%" y="212" width="0.8554%" height="15" fill="rgb(216,154,8)" fg:x="1727" fg:w="21"/><text x="70.5962%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (26 samples, 1.06%)</title><rect x="71.2016%" y="180" width="1.0591%" height="15" fill="rgb(244,35,45)" fg:x="1748" fg:w="26"/><text x="71.4516%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (44 samples, 1.79%)</title><rect x="72.2607%" y="180" width="1.7923%" height="15" fill="rgb(251,115,12)" fg:x="1774" fg:w="44"/><text x="72.5107%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (24 samples, 0.98%)</title><rect x="74.0530%" y="180" width="0.9776%" height="15" fill="rgb(240,54,50)" fg:x="1818" fg:w="24"/><text x="74.3030%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (3 samples, 0.12%)</title><rect x="75.0305%" y="180" width="0.1222%" height="15" fill="rgb(233,84,52)" fg:x="1842" fg:w="3"/><text x="75.2805%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,001 samples, 40.77%)</title><rect x="38.0448%" y="164" width="40.7739%" height="15" fill="rgb(207,117,47)" fg:x="934" fg:w="1001"/><text x="38.2948%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (90 samples, 3.67%)</title><rect x="75.1527%" y="180" width="3.6660%" height="15" fill="rgb(249,43,39)" fg:x="1845" fg:w="90"/><text x="75.4027%" y="190.50">site..</text></g><g><title>embeddings (kappybara/pattern.py:267) (1,459 samples, 59.43%)</title><rect x="19.7149%" y="148" width="59.4297%" height="15" fill="rgb(209,38,44)" fg:x="484" fg:w="1459"/><text x="19.9649%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (8 samples, 0.33%)</title><rect x="78.8187%" y="164" width="0.3259%" height="15" fill="rgb(236,212,23)" fg:x="1935" fg:w="8"/><text x="79.0687%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (23 samples, 0.94%)</title><rect x="80.5703%" y="164" width="0.9369%" height="15" fill="rgb(242,79,21)" fg:x="1978" fg:w="23"/><text x="80.8203%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (11 samples, 0.45%)</title><rect x="82.8921%" y="180" width="0.4481%" height="15" fill="rgb(211,96,35)" fg:x="2035" fg:w="11"/><text x="83.1421%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (164 samples, 6.68%)</title><rect x="79.2261%" y="148" width="6.6802%" height="15" fill="rgb(253,215,40)" fg:x="1945" fg:w="164"/><text x="79.4761%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (108 samples, 4.40%)</title><rect x="81.5071%" y="164" width="4.3992%" height="15" fill="rgb(211,81,21)" fg:x="2001" fg:w="108"/><text x="81.7571%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (63 samples, 2.57%)</title><rect x="83.3401%" y="180" width="2.5662%" height="15" fill="rgb(208,190,38)" fg:x="2046" fg:w="63"/><text x="83.5901%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (8 samples, 0.33%)</title><rect x="86.4358%" y="164" width="0.3259%" height="15" fill="rgb(235,213,38)" fg:x="2122" fg:w="8"/><text x="86.6858%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (22 samples, 0.90%)</title><rect x="85.9063%" y="148" width="0.8961%" height="15" fill="rgb(237,122,38)" fg:x="2109" fg:w="22"/><text x="86.1563%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (17 samples, 0.69%)</title><rect x="86.8024%" y="148" width="0.6925%" height="15" fill="rgb(244,218,35)" fg:x="2131" fg:w="17"/><text x="87.0524%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (7 samples, 0.29%)</title><rect x="87.2098%" y="164" width="0.2851%" height="15" fill="rgb(240,68,47)" fg:x="2141" fg:w="7"/><text x="87.4598%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (48 samples, 1.96%)</title><rect x="87.4949%" y="148" width="1.9552%" height="15" fill="rgb(210,16,53)" fg:x="2148" fg:w="48"/><text x="87.7449%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.53%)</title><rect x="88.9206%" y="164" width="0.5295%" height="15" fill="rgb(235,124,12)" fg:x="2183" fg:w="13"/><text x="89.1706%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (18 samples, 0.73%)</title><rect x="89.4501%" y="148" width="0.7332%" height="15" fill="rgb(224,169,11)" fg:x="2196" fg:w="18"/><text x="89.7001%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (4 samples, 0.16%)</title><rect x="90.0204%" y="164" width="0.1629%" height="15" fill="rgb(250,166,2)" fg:x="2210" fg:w="4"/><text x="90.2704%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (11 samples, 0.45%)</title><rect x="90.1833%" y="148" width="0.4481%" height="15" fill="rgb(242,216,29)" fg:x="2214" fg:w="11"/><text x="90.4333%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (3 samples, 0.12%)</title><rect x="92.3014%" y="164" width="0.1222%" height="15" fill="rgb(230,116,27)" fg:x="2266" fg:w="3"/><text x="92.5514%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (33 samples, 1.34%)</title><rect x="92.4236%" y="164" width="1.3442%" height="15" fill="rgb(228,99,48)" fg:x="2269" fg:w="33"/><text x="92.6736%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (4 samples, 0.16%)</title><rect x="93.6049%" y="180" width="0.1629%" height="15" fill="rgb(253,11,6)" fg:x="2298" fg:w="4"/><text x="93.8549%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (79 samples, 3.22%)</title><rect x="90.6314%" y="148" width="3.2179%" height="15" fill="rgb(247,143,39)" fg:x="2225" fg:w="79"/><text x="90.8814%" y="158.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:282) (5 samples, 0.20%)</title><rect x="93.8493%" y="148" width="0.2037%" height="15" fill="rgb(236,97,10)" fg:x="2304" fg:w="5"/><text x="94.0993%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (2,209 samples, 89.98%)</title><rect x="4.2363%" y="132" width="89.9796%" height="15" fill="rgb(233,208,19)" fg:x="104" fg:w="2209"/><text x="4.4863%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (18 samples, 0.73%)</title><rect x="94.2159%" y="132" width="0.7332%" height="15" fill="rgb(216,164,2)" fg:x="2313" fg:w="18"/><text x="94.4659%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (3 samples, 0.12%)</title><rect x="94.9491%" y="132" width="0.1222%" height="15" fill="rgb(220,129,5)" fg:x="2331" fg:w="3"/><text x="95.1991%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="97.7189%" y="148" width="0.1222%" height="15" fill="rgb(242,17,10)" fg:x="2399" fg:w="3"/><text x="97.9689%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (73 samples, 2.97%)</title><rect x="95.0713%" y="132" width="2.9735%" height="15" fill="rgb(242,107,0)" fg:x="2334" fg:w="73"/><text x="95.3213%" y="142.50">_up..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.20%)</title><rect x="97.8411%" y="148" width="0.2037%" height="15" fill="rgb(251,28,31)" fg:x="2402" fg:w="5"/><text x="98.0911%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (2,328 samples, 94.83%)</title><rect x="4.2363%" y="116" width="94.8269%" height="15" fill="rgb(233,223,10)" fg:x="104" fg:w="2328"/><text x="4.4863%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (25 samples, 1.02%)</title><rect x="98.0448%" y="132" width="1.0183%" height="15" fill="rgb(215,21,27)" fg:x="2407" fg:w="25"/><text x="98.2948%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.24%)</title><rect x="98.8187%" y="148" width="0.2444%" height="15" fill="rgb(232,23,21)" fg:x="2426" fg:w="6"/><text x="99.0687%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (2,412 samples, 98.25%)</title><rect x="0.8554%" y="100" width="98.2485%" height="15" fill="rgb(244,5,23)" fg:x="21" fg:w="2412"/><text x="1.1054%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (2,426 samples, 98.82%)</title><rect x="0.3259%" y="68" width="98.8187%" height="15" fill="rgb(226,81,46)" fg:x="8" fg:w="2426"/><text x="0.5759%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (2,423 samples, 98.70%)</title><rect x="0.4481%" y="84" width="98.6965%" height="15" fill="rgb(247,70,30)" fg:x="11" fg:w="2423"/><text x="0.6981%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>load_grammar (lark/load_grammar.py:1240) (4 samples, 0.16%)</title><rect x="99.1446%" y="340" width="0.1629%" height="15" fill="rgb(212,68,19)" fg:x="2434" fg:w="4"/><text x="99.3946%" y="350.50"></text></g><g><title>_parse_grammar (lark/load_grammar.py:966) (4 samples, 0.16%)</title><rect x="99.1446%" y="356" width="0.1629%" height="15" fill="rgb(240,187,13)" fg:x="2434" fg:w="4"/><text x="99.3946%" y="366.50"></text></g><g><title>parse (lark/parser_frontends.py:104) (3 samples, 0.12%)</title><rect x="99.1853%" y="372" width="0.1222%" height="15" fill="rgb(223,113,26)" fg:x="2435" fg:w="3"/><text x="99.4353%" y="382.50"></text></g><g><title>parse (lark/parsers/lalr_parser.py:42) (3 samples, 0.12%)</title><rect x="99.1853%" y="388" width="0.1222%" height="15" fill="rgb(206,192,2)" fg:x="2435" fg:w="3"/><text x="99.4353%" y="398.50"></text></g><g><title>parse (lark/parsers/lalr_parser.py:88) (3 samples, 0.12%)</title><rect x="99.1853%" y="404" width="0.1222%" height="15" fill="rgb(241,108,4)" fg:x="2435" fg:w="3"/><text x="99.4353%" y="414.50"></text></g><g><title>__init__ (lark/lark.py:357) (6 samples, 0.24%)</title><rect x="99.1446%" y="308" width="0.2444%" height="15" fill="rgb(247,173,49)" fg:x="2434" fg:w="6"/><text x="99.3946%" y="318.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1415) (6 samples, 0.24%)</title><rect x="99.1446%" y="324" width="0.2444%" height="15" fill="rgb(224,114,35)" fg:x="2434" fg:w="6"/><text x="99.3946%" y="334.50"></text></g><g><title>__init__ (lark/lark.py:407) (3 samples, 0.12%)</title><rect x="99.3890%" y="308" width="0.1222%" height="15" fill="rgb(245,159,27)" fg:x="2440" fg:w="3"/><text x="99.6390%" y="318.50"></text></g><g><title>compile (lark/load_grammar.py:738) (3 samples, 0.12%)</title><rect x="99.3890%" y="324" width="0.1222%" height="15" fill="rgb(245,172,44)" fg:x="2440" fg:w="3"/><text x="99.6390%" y="334.50"></text></g><g><title>transform (lark/visitors.py:264) (3 samples, 0.12%)</title><rect x="99.3890%" y="340" width="0.1222%" height="15" fill="rgb(236,23,11)" fg:x="2440" fg:w="3"/><text x="99.6390%" y="350.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (10 samples, 0.41%)</title><rect x="99.1446%" y="260" width="0.4073%" height="15" fill="rgb(205,117,38)" fg:x="2434" fg:w="10"/><text x="99.3946%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (10 samples, 0.41%)</title><rect x="99.1446%" y="276" width="0.4073%" height="15" fill="rgb(237,72,25)" fg:x="2434" fg:w="10"/><text x="99.3946%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (10 samples, 0.41%)</title><rect x="99.1446%" y="292" width="0.4073%" height="15" fill="rgb(244,70,9)" fg:x="2434" fg:w="10"/><text x="99.3946%" y="302.50"></text></g><g><title>&lt;module&gt; (lark/__init__.py:1) (6 samples, 0.24%)</title><rect x="99.5519%" y="356" width="0.2444%" height="15" fill="rgb(217,125,39)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.24%)</title><rect x="99.5519%" y="372" width="0.2444%" height="15" fill="rgb(235,36,10)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.24%)</title><rect x="99.5519%" y="388" width="0.2444%" height="15" fill="rgb(251,123,47)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.24%)</title><rect x="99.5519%" y="404" width="0.2444%" height="15" fill="rgb(221,13,13)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.24%)</title><rect x="99.5519%" y="420" width="0.2444%" height="15" fill="rgb(238,131,9)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.24%)</title><rect x="99.5519%" y="436" width="0.2444%" height="15" fill="rgb(211,50,8)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="446.50"></text></g><g><title>&lt;module&gt; (lark/exceptions.py:1) (6 samples, 0.24%)</title><rect x="99.5519%" y="452" width="0.2444%" height="15" fill="rgb(245,182,24)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.24%)</title><rect x="99.5519%" y="468" width="0.2444%" height="15" fill="rgb(242,14,37)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.24%)</title><rect x="99.5519%" y="484" width="0.2444%" height="15" fill="rgb(246,228,12)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.24%)</title><rect x="99.5519%" y="500" width="0.2444%" height="15" fill="rgb(213,55,15)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.24%)</title><rect x="99.5519%" y="516" width="0.2444%" height="15" fill="rgb(209,9,3)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.24%)</title><rect x="99.5519%" y="532" width="0.2444%" height="15" fill="rgb(230,59,30)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="542.50"></text></g><g><title>&lt;module&gt; (lark/utils.py:9) (6 samples, 0.24%)</title><rect x="99.5519%" y="548" width="0.2444%" height="15" fill="rgb(209,121,21)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="558.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.24%)</title><rect x="99.5519%" y="564" width="0.2444%" height="15" fill="rgb(220,109,13)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="574.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.24%)</title><rect x="99.5519%" y="580" width="0.2444%" height="15" fill="rgb(232,18,1)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.24%)</title><rect x="99.5519%" y="596" width="0.2444%" height="15" fill="rgb(215,41,42)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="606.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.24%)</title><rect x="99.5519%" y="612" width="0.2444%" height="15" fill="rgb(224,123,36)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.24%)</title><rect x="99.5519%" y="628" width="0.2444%" height="15" fill="rgb(240,125,3)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="638.50"></text></g><g><title>&lt;module&gt; (logging/__init__.py:26) (6 samples, 0.24%)</title><rect x="99.5519%" y="644" width="0.2444%" height="15" fill="rgb(205,98,50)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.24%)</title><rect x="99.5519%" y="660" width="0.2444%" height="15" fill="rgb(205,185,37)" fg:x="2444" fg:w="6"/><text x="99.8019%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (5 samples, 0.20%)</title><rect x="99.5927%" y="676" width="0.2037%" height="15" fill="rgb(238,207,15)" fg:x="2445" fg:w="5"/><text x="99.8427%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (5 samples, 0.20%)</title><rect x="99.5927%" y="692" width="0.2037%" height="15" fill="rgb(213,199,42)" fg:x="2445" fg:w="5"/><text x="99.8427%" y="702.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:995) (5 samples, 0.20%)</title><rect x="99.5927%" y="708" width="0.2037%" height="15" fill="rgb(235,201,11)" fg:x="2445" fg:w="5"/><text x="99.8427%" y="718.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:1128) (5 samples, 0.20%)</title><rect x="99.5927%" y="724" width="0.2037%" height="15" fill="rgb(207,46,11)" fg:x="2445" fg:w="5"/><text x="99.8427%" y="734.50"></text></g><g><title>_compile_bytecode (&lt;frozen importlib._bootstrap_external&gt;:757) (5 samples, 0.20%)</title><rect x="99.5927%" y="740" width="0.2037%" height="15" fill="rgb(241,35,35)" fg:x="2445" fg:w="5"/><text x="99.8427%" y="750.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (17 samples, 0.69%)</title><rect x="99.1446%" y="68" width="0.6925%" height="15" fill="rgb(243,32,47)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (17 samples, 0.69%)</title><rect x="99.1446%" y="84" width="0.6925%" height="15" fill="rgb(247,202,23)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (17 samples, 0.69%)</title><rect x="99.1446%" y="100" width="0.6925%" height="15" fill="rgb(219,102,11)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (17 samples, 0.69%)</title><rect x="99.1446%" y="116" width="0.6925%" height="15" fill="rgb(243,110,44)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (17 samples, 0.69%)</title><rect x="99.1446%" y="132" width="0.6925%" height="15" fill="rgb(222,74,54)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.69%)</title><rect x="99.1446%" y="148" width="0.6925%" height="15" fill="rgb(216,99,12)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (17 samples, 0.69%)</title><rect x="99.1446%" y="164" width="0.6925%" height="15" fill="rgb(226,22,26)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (17 samples, 0.69%)</title><rect x="99.1446%" y="180" width="0.6925%" height="15" fill="rgb(217,163,10)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (17 samples, 0.69%)</title><rect x="99.1446%" y="196" width="0.6925%" height="15" fill="rgb(213,25,53)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (17 samples, 0.69%)</title><rect x="99.1446%" y="212" width="0.6925%" height="15" fill="rgb(252,105,26)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (17 samples, 0.69%)</title><rect x="99.1446%" y="228" width="0.6925%" height="15" fill="rgb(220,39,43)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.69%)</title><rect x="99.1446%" y="244" width="0.6925%" height="15" fill="rgb(229,68,48)" fg:x="2434" fg:w="17"/><text x="99.3946%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (7 samples, 0.29%)</title><rect x="99.5519%" y="260" width="0.2851%" height="15" fill="rgb(252,8,32)" fg:x="2444" fg:w="7"/><text x="99.8019%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (7 samples, 0.29%)</title><rect x="99.5519%" y="276" width="0.2851%" height="15" fill="rgb(223,20,43)" fg:x="2444" fg:w="7"/><text x="99.8019%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (7 samples, 0.29%)</title><rect x="99.5519%" y="292" width="0.2851%" height="15" fill="rgb(229,81,49)" fg:x="2444" fg:w="7"/><text x="99.8019%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (7 samples, 0.29%)</title><rect x="99.5519%" y="308" width="0.2851%" height="15" fill="rgb(236,28,36)" fg:x="2444" fg:w="7"/><text x="99.8019%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (7 samples, 0.29%)</title><rect x="99.5519%" y="324" width="0.2851%" height="15" fill="rgb(249,185,26)" fg:x="2444" fg:w="7"/><text x="99.8019%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (7 samples, 0.29%)</title><rect x="99.5519%" y="340" width="0.2851%" height="15" fill="rgb(249,174,33)" fg:x="2444" fg:w="7"/><text x="99.8019%" y="350.50"></text></g><g><title>all (2,455 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="2455"/><text x="0.2500%" y="62.50"></text></g></svg></svg>