<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 3ea2ded</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="8887"><g><title>n_embeddings (kappybara/rule.py:170) (40 samples, 0.45%)</title><rect x="0.1575%" y="180" width="0.4501%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="40"/><text x="0.4075%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (22 samples, 0.25%)</title><rect x="0.3601%" y="196" width="0.2476%" height="15" fill="rgb(217,0,24)" fg:x="32" fg:w="22"/><text x="0.6101%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (12 samples, 0.14%)</title><rect x="0.4726%" y="212" width="0.1350%" height="15" fill="rgb(221,193,54)" fg:x="42" fg:w="12"/><text x="0.7226%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (18 samples, 0.20%)</title><rect x="0.7427%" y="180" width="0.2025%" height="15" fill="rgb(248,212,6)" fg:x="66" fg:w="18"/><text x="0.9927%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (11 samples, 0.12%)</title><rect x="0.8214%" y="196" width="0.1238%" height="15" fill="rgb(208,68,35)" fg:x="73" fg:w="11"/><text x="1.0714%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (14 samples, 0.16%)</title><rect x="0.9452%" y="180" width="0.1575%" height="15" fill="rgb(232,128,0)" fg:x="84" fg:w="14"/><text x="1.1952%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (11 samples, 0.12%)</title><rect x="1.1027%" y="180" width="0.1238%" height="15" fill="rgb(207,160,47)" fg:x="98" fg:w="11"/><text x="1.3527%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (111 samples, 1.25%)</title><rect x="0.1013%" y="84" width="1.2490%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="111"/><text x="0.3513%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (111 samples, 1.25%)</title><rect x="0.1013%" y="100" width="1.2490%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="111"/><text x="0.3513%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (111 samples, 1.25%)</title><rect x="0.1013%" y="116" width="1.2490%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="111"/><text x="0.3513%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (111 samples, 1.25%)</title><rect x="0.1013%" y="132" width="1.2490%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="111"/><text x="0.3513%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (111 samples, 1.25%)</title><rect x="0.1013%" y="148" width="1.2490%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="111"/><text x="0.3513%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (109 samples, 1.23%)</title><rect x="0.1238%" y="164" width="1.2265%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="109"/><text x="0.3738%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (10 samples, 0.11%)</title><rect x="1.4403%" y="116" width="0.1125%" height="15" fill="rgb(206,188,39)" fg:x="128" fg:w="10"/><text x="1.6903%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (24 samples, 0.27%)</title><rect x="1.4291%" y="100" width="0.2701%" height="15" fill="rgb(217,207,13)" fg:x="127" fg:w="24"/><text x="1.6791%" y="110.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (16 samples, 0.18%)</title><rect x="1.8904%" y="148" width="0.1800%" height="15" fill="rgb(231,73,38)" fg:x="168" fg:w="16"/><text x="2.1404%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (9 samples, 0.10%)</title><rect x="2.3630%" y="180" width="0.1013%" height="15" fill="rgb(225,20,46)" fg:x="210" fg:w="9"/><text x="2.6130%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (71 samples, 0.80%)</title><rect x="1.7216%" y="132" width="0.7989%" height="15" fill="rgb(210,31,41)" fg:x="153" fg:w="71"/><text x="1.9716%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (34 samples, 0.38%)</title><rect x="2.1380%" y="148" width="0.3826%" height="15" fill="rgb(221,200,47)" fg:x="190" fg:w="34"/><text x="2.3880%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (23 samples, 0.26%)</title><rect x="2.2617%" y="164" width="0.2588%" height="15" fill="rgb(226,26,5)" fg:x="201" fg:w="23"/><text x="2.5117%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (16 samples, 0.18%)</title><rect x="2.5205%" y="132" width="0.1800%" height="15" fill="rgb(249,33,26)" fg:x="224" fg:w="16"/><text x="2.7705%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (14 samples, 0.16%)</title><rect x="2.5430%" y="148" width="0.1575%" height="15" fill="rgb(235,183,28)" fg:x="226" fg:w="14"/><text x="2.7930%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (24 samples, 0.27%)</title><rect x="4.6697%" y="148" width="0.2701%" height="15" fill="rgb(221,5,38)" fg:x="415" fg:w="24"/><text x="4.9197%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (31 samples, 0.35%)</title><rect x="9.0244%" y="164" width="0.3488%" height="15" fill="rgb(247,18,42)" fg:x="802" fg:w="31"/><text x="9.2744%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (675 samples, 7.60%)</title><rect x="2.7118%" y="132" width="7.5954%" height="15" fill="rgb(241,131,45)" fg:x="241" fg:w="675"/><text x="2.9618%" y="142.50">_remove_ed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (477 samples, 5.37%)</title><rect x="4.9398%" y="148" width="5.3674%" height="15" fill="rgb(249,31,29)" fg:x="439" fg:w="477"/><text x="5.1898%" y="158.50">__eq__ ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (83 samples, 0.93%)</title><rect x="9.3732%" y="164" width="0.9339%" height="15" fill="rgb(225,111,53)" fg:x="833" fg:w="83"/><text x="9.6232%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (766 samples, 8.62%)</title><rect x="1.6991%" y="116" width="8.6193%" height="15" fill="rgb(238,160,17)" fg:x="151" fg:w="766"/><text x="1.9491%" y="126.50">apply_update..</text></g><g><title>embeddings (kappybara/pattern.py:256) (35 samples, 0.39%)</title><rect x="10.8586%" y="148" width="0.3938%" height="15" fill="rgb(214,148,48)" fg:x="965" fg:w="35"/><text x="11.1086%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.15%)</title><rect x="15.2695%" y="164" width="0.1463%" height="15" fill="rgb(232,36,49)" fg:x="1357" fg:w="13"/><text x="15.5195%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (401 samples, 4.51%)</title><rect x="11.2524%" y="148" width="4.5122%" height="15" fill="rgb(209,103,24)" fg:x="1000" fg:w="401"/><text x="11.5024%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.35%)</title><rect x="15.4158%" y="164" width="0.3488%" height="15" fill="rgb(229,88,8)" fg:x="1370" fg:w="31"/><text x="15.6658%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (309 samples, 3.48%)</title><rect x="15.7646%" y="148" width="3.4770%" height="15" fill="rgb(213,181,19)" fg:x="1401" fg:w="309"/><text x="16.0146%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.29%)</title><rect x="18.9490%" y="164" width="0.2926%" height="15" fill="rgb(254,191,54)" fg:x="1684" fg:w="26"/><text x="19.1990%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (80 samples, 0.90%)</title><rect x="19.2528%" y="148" width="0.9002%" height="15" fill="rgb(241,83,37)" fg:x="1711" fg:w="80"/><text x="19.5028%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (90 samples, 1.01%)</title><rect x="20.1530%" y="148" width="1.0127%" height="15" fill="rgb(233,36,39)" fg:x="1791" fg:w="90"/><text x="20.4030%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.16%)</title><rect x="23.4050%" y="164" width="0.1575%" height="15" fill="rgb(226,3,54)" fg:x="2080" fg:w="14"/><text x="23.6550%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (251 samples, 2.82%)</title><rect x="21.1657%" y="148" width="2.8244%" height="15" fill="rgb(245,192,40)" fg:x="1881" fg:w="251"/><text x="21.4157%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.43%)</title><rect x="23.5625%" y="164" width="0.4276%" height="15" fill="rgb(238,167,29)" fg:x="2094" fg:w="38"/><text x="23.8125%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (237 samples, 2.67%)</title><rect x="23.9901%" y="148" width="2.6668%" height="15" fill="rgb(232,182,51)" fg:x="2132" fg:w="237"/><text x="24.2401%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (10 samples, 0.11%)</title><rect x="28.5023%" y="164" width="0.1125%" height="15" fill="rgb(231,60,39)" fg:x="2533" fg:w="10"/><text x="28.7523%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (79 samples, 0.89%)</title><rect x="28.6148%" y="164" width="0.8889%" height="15" fill="rgb(208,69,12)" fg:x="2543" fg:w="79"/><text x="28.8648%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (90 samples, 1.01%)</title><rect x="31.6192%" y="180" width="1.0127%" height="15" fill="rgb(235,93,37)" fg:x="2810" fg:w="90"/><text x="31.8692%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (105 samples, 1.18%)</title><rect x="34.3536%" y="196" width="1.1815%" height="15" fill="rgb(213,116,39)" fg:x="3053" fg:w="105"/><text x="34.6036%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (890 samples, 10.01%)</title><rect x="29.5600%" y="164" width="10.0146%" height="15" fill="rgb(222,207,29)" fg:x="2627" fg:w="890"/><text x="29.8100%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (617 samples, 6.94%)</title><rect x="32.6319%" y="180" width="6.9427%" height="15" fill="rgb(206,96,30)" fg:x="2900" fg:w="617"/><text x="32.8819%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (359 samples, 4.04%)</title><rect x="35.5351%" y="196" width="4.0396%" height="15" fill="rgb(218,138,4)" fg:x="3158" fg:w="359"/><text x="35.7851%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (98 samples, 1.10%)</title><rect x="39.5747%" y="164" width="1.1027%" height="15" fill="rgb(250,191,14)" fg:x="3517" fg:w="98"/><text x="39.8247%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (64 samples, 0.72%)</title><rect x="41.8139%" y="180" width="0.7202%" height="15" fill="rgb(239,60,40)" fg:x="3716" fg:w="64"/><text x="42.0639%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (180 samples, 2.03%)</title><rect x="40.7337%" y="164" width="2.0254%" height="15" fill="rgb(206,27,48)" fg:x="3620" fg:w="180"/><text x="40.9837%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (20 samples, 0.23%)</title><rect x="42.5340%" y="180" width="0.2250%" height="15" fill="rgb(225,35,8)" fg:x="3780" fg:w="20"/><text x="42.7840%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (201 samples, 2.26%)</title><rect x="51.6822%" y="180" width="2.2617%" height="15" fill="rgb(250,213,24)" fg:x="4593" fg:w="201"/><text x="51.9322%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (11 samples, 0.12%)</title><rect x="53.9440%" y="180" width="0.1238%" height="15" fill="rgb(247,123,22)" fg:x="4794" fg:w="11"/><text x="54.1940%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (9 samples, 0.10%)</title><rect x="54.7429%" y="196" width="0.1013%" height="15" fill="rgb(231,138,38)" fg:x="4865" fg:w="9"/><text x="54.9929%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (179 samples, 2.01%)</title><rect x="54.0677%" y="180" width="2.0142%" height="15" fill="rgb(231,145,46)" fg:x="4805" fg:w="179"/><text x="54.3177%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (110 samples, 1.24%)</title><rect x="54.8442%" y="196" width="1.2378%" height="15" fill="rgb(251,118,11)" fg:x="4874" fg:w="110"/><text x="55.0942%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (16 samples, 0.18%)</title><rect x="57.0834%" y="196" width="0.1800%" height="15" fill="rgb(217,147,25)" fg:x="5073" fg:w="16"/><text x="57.3334%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.19%)</title><rect x="59.3001%" y="212" width="0.1913%" height="15" fill="rgb(247,81,37)" fg:x="5270" fg:w="17"/><text x="59.5501%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="61.1567%" y="228" width="0.1238%" height="15" fill="rgb(209,12,38)" fg:x="5435" fg:w="11"/><text x="61.4067%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (402 samples, 4.52%)</title><rect x="57.2634%" y="196" width="4.5235%" height="15" fill="rgb(227,1,9)" fg:x="5089" fg:w="402"/><text x="57.5134%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (204 samples, 2.30%)</title><rect x="59.4914%" y="212" width="2.2955%" height="15" fill="rgb(248,47,43)" fg:x="5287" fg:w="204"/><text x="59.7414%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (45 samples, 0.51%)</title><rect x="61.2805%" y="228" width="0.5064%" height="15" fill="rgb(221,10,30)" fg:x="5446" fg:w="45"/><text x="61.5305%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (222 samples, 2.50%)</title><rect x="61.7869%" y="196" width="2.4980%" height="15" fill="rgb(210,229,1)" fg:x="5491" fg:w="222"/><text x="62.0369%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (80 samples, 0.90%)</title><rect x="64.2849%" y="196" width="0.9002%" height="15" fill="rgb(222,148,37)" fg:x="5713" fg:w="80"/><text x="64.5349%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (10 samples, 0.11%)</title><rect x="65.1851%" y="196" width="0.1125%" height="15" fill="rgb(234,67,33)" fg:x="5793" fg:w="10"/><text x="65.4351%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (860 samples, 9.68%)</title><rect x="56.0819%" y="180" width="9.6771%" height="15" fill="rgb(247,98,35)" fg:x="4984" fg:w="860"/><text x="56.3319%" y="190.50">embeds_in (kap..</text></g><g><title>coupled (kappybara/pattern.py:64) (41 samples, 0.46%)</title><rect x="65.2976%" y="196" width="0.4613%" height="15" fill="rgb(247,138,52)" fg:x="5803" fg:w="41"/><text x="65.5476%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (15 samples, 0.17%)</title><rect x="65.8265%" y="180" width="0.1688%" height="15" fill="rgb(213,79,30)" fg:x="5850" fg:w="15"/><text x="66.0765%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.17%)</title><rect x="66.8054%" y="196" width="0.1688%" height="15" fill="rgb(246,177,23)" fg:x="5937" fg:w="15"/><text x="67.0554%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (257 samples, 2.89%)</title><rect x="65.9953%" y="180" width="2.8919%" height="15" fill="rgb(230,62,27)" fg:x="5865" fg:w="257"/><text x="66.2453%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (170 samples, 1.91%)</title><rect x="66.9742%" y="196" width="1.9129%" height="15" fill="rgb(216,154,8)" fg:x="5952" fg:w="170"/><text x="67.2242%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.26%)</title><rect x="68.6283%" y="212" width="0.2588%" height="15" fill="rgb(244,35,45)" fg:x="6099" fg:w="23"/><text x="68.8783%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (295 samples, 3.32%)</title><rect x="68.8871%" y="180" width="3.3195%" height="15" fill="rgb(251,115,12)" fg:x="6122" fg:w="295"/><text x="69.1371%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (206 samples, 2.32%)</title><rect x="69.8886%" y="196" width="2.3180%" height="15" fill="rgb(240,54,50)" fg:x="6211" fg:w="206"/><text x="70.1386%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (55 samples, 0.62%)</title><rect x="71.5877%" y="212" width="0.6189%" height="15" fill="rgb(233,84,52)" fg:x="6362" fg:w="55"/><text x="71.8377%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (68 samples, 0.77%)</title><rect x="72.2066%" y="180" width="0.7652%" height="15" fill="rgb(207,117,47)" fg:x="6417" fg:w="68"/><text x="72.4566%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (127 samples, 1.43%)</title><rect x="72.9718%" y="180" width="1.4291%" height="15" fill="rgb(249,43,39)" fg:x="6485" fg:w="127"/><text x="73.2218%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (59 samples, 0.66%)</title><rect x="74.4008%" y="180" width="0.6639%" height="15" fill="rgb(209,38,44)" fg:x="6612" fg:w="59"/><text x="74.6508%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (19 samples, 0.21%)</title><rect x="75.0647%" y="180" width="0.2138%" height="15" fill="rgb(236,212,23)" fg:x="6671" fg:w="19"/><text x="75.3147%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,168 samples, 35.65%)</title><rect x="42.7591%" y="164" width="35.6476%" height="15" fill="rgb(242,79,21)" fg:x="3800" fg:w="3168"/><text x="43.0091%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (278 samples, 3.13%)</title><rect x="75.2785%" y="180" width="3.1282%" height="15" fill="rgb(211,96,35)" fg:x="6690" fg:w="278"/><text x="75.5285%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,634 samples, 52.14%)</title><rect x="26.6569%" y="148" width="52.1436%" height="15" fill="rgb(253,215,40)" fg:x="2369" fg:w="4634"/><text x="26.9069%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (35 samples, 0.39%)</title><rect x="78.4067%" y="164" width="0.3938%" height="15" fill="rgb(211,81,21)" fg:x="6968" fg:w="35"/><text x="78.6567%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (66 samples, 0.74%)</title><rect x="79.9707%" y="164" width="0.7427%" height="15" fill="rgb(208,190,38)" fg:x="7107" fg:w="66"/><text x="80.2207%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (54 samples, 0.61%)</title><rect x="81.7824%" y="180" width="0.6076%" height="15" fill="rgb(235,213,38)" fg:x="7268" fg:w="54"/><text x="82.0324%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (563 samples, 6.34%)</title><rect x="78.9130%" y="148" width="6.3351%" height="15" fill="rgb(237,122,38)" fg:x="7013" fg:w="563"/><text x="79.1630%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (403 samples, 4.53%)</title><rect x="80.7134%" y="164" width="4.5347%" height="15" fill="rgb(244,218,35)" fg:x="7173" fg:w="403"/><text x="80.9634%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (254 samples, 2.86%)</title><rect x="82.3900%" y="180" width="2.8581%" height="15" fill="rgb(240,68,47)" fg:x="7322" fg:w="254"/><text x="82.6400%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (38 samples, 0.43%)</title><rect x="85.8220%" y="164" width="0.4276%" height="15" fill="rgb(210,16,53)" fg:x="7627" fg:w="38"/><text x="86.0720%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (94 samples, 1.06%)</title><rect x="85.2481%" y="148" width="1.0577%" height="15" fill="rgb(235,124,12)" fg:x="7576" fg:w="94"/><text x="85.4981%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (13 samples, 0.15%)</title><rect x="86.6209%" y="164" width="0.1463%" height="15" fill="rgb(224,169,11)" fg:x="7698" fg:w="13"/><text x="86.8709%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (84 samples, 0.95%)</title><rect x="86.3058%" y="148" width="0.9452%" height="15" fill="rgb(250,166,2)" fg:x="7670" fg:w="84"/><text x="86.5558%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (43 samples, 0.48%)</title><rect x="86.7672%" y="164" width="0.4839%" height="15" fill="rgb(242,216,29)" fg:x="7711" fg:w="43"/><text x="87.0172%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (99 samples, 1.11%)</title><rect x="87.2510%" y="148" width="1.1140%" height="15" fill="rgb(230,116,27)" fg:x="7754" fg:w="99"/><text x="87.5010%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="88.2413%" y="164" width="0.1238%" height="15" fill="rgb(228,99,48)" fg:x="7842" fg:w="11"/><text x="88.4913%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (43 samples, 0.48%)</title><rect x="88.3650%" y="148" width="0.4839%" height="15" fill="rgb(253,11,6)" fg:x="7853" fg:w="43"/><text x="88.6150%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (63 samples, 0.71%)</title><rect x="88.8489%" y="148" width="0.7089%" height="15" fill="rgb(247,143,39)" fg:x="7896" fg:w="63"/><text x="89.0989%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.14%)</title><rect x="89.4228%" y="164" width="0.1350%" height="15" fill="rgb(236,97,10)" fg:x="7947" fg:w="12"/><text x="89.6728%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (85 samples, 0.96%)</title><rect x="91.3357%" y="164" width="0.9565%" height="15" fill="rgb(233,208,19)" fg:x="8117" fg:w="85"/><text x="91.5857%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.16%)</title><rect x="92.1346%" y="180" width="0.1575%" height="15" fill="rgb(216,164,2)" fg:x="8188" fg:w="14"/><text x="92.3846%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (252 samples, 2.84%)</title><rect x="89.5578%" y="148" width="2.8356%" height="15" fill="rgb(220,129,5)" fg:x="7959" fg:w="252"/><text x="89.8078%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (13 samples, 0.15%)</title><rect x="92.3934%" y="148" width="0.1463%" height="15" fill="rgb(242,17,10)" fg:x="8211" fg:w="13"/><text x="92.6434%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (33 samples, 0.37%)</title><rect x="92.6522%" y="148" width="0.3713%" height="15" fill="rgb(242,107,0)" fg:x="8234" fg:w="33"/><text x="92.9022%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (11 samples, 0.12%)</title><rect x="93.0235%" y="148" width="0.1238%" height="15" fill="rgb(251,28,31)" fg:x="8267" fg:w="11"/><text x="93.2735%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,353 samples, 82.74%)</title><rect x="10.4872%" y="132" width="82.7388%" height="15" fill="rgb(233,223,10)" fg:x="932" fg:w="7353"/><text x="10.7372%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (75 samples, 0.84%)</title><rect x="93.2261%" y="132" width="0.8439%" height="15" fill="rgb(215,21,27)" fg:x="8285" fg:w="75"/><text x="93.4761%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (14 samples, 0.16%)</title><rect x="94.0700%" y="132" width="0.1575%" height="15" fill="rgb(232,23,21)" fg:x="8360" fg:w="14"/><text x="94.3200%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (9 samples, 0.10%)</title><rect x="94.2275%" y="132" width="0.1013%" height="15" fill="rgb(244,5,23)" fg:x="8374" fg:w="9"/><text x="94.4775%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.24%)</title><rect x="97.2432%" y="148" width="0.2363%" height="15" fill="rgb(226,81,46)" fg:x="8642" fg:w="21"/><text x="97.4932%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (341 samples, 3.84%)</title><rect x="94.3288%" y="132" width="3.8371%" height="15" fill="rgb(247,70,30)" fg:x="8383" fg:w="341"/><text x="94.5788%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (61 samples, 0.69%)</title><rect x="97.4795%" y="148" width="0.6864%" height="15" fill="rgb(212,68,19)" fg:x="8663" fg:w="61"/><text x="97.7295%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,847 samples, 99.55%)</title><rect x="0.1013%" y="68" width="99.5499%" height="15" fill="rgb(240,187,13)" fg:x="9" fg:w="8847"/><text x="0.3513%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,736 samples, 98.30%)</title><rect x="1.3503%" y="84" width="98.3009%" height="15" fill="rgb(223,113,26)" fg:x="120" fg:w="8736"/><text x="1.6003%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,705 samples, 97.95%)</title><rect x="1.6991%" y="100" width="97.9521%" height="15" fill="rgb(206,192,2)" fg:x="151" fg:w="8705"/><text x="1.9491%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (7,934 samples, 89.28%)</title><rect x="10.3747%" y="116" width="89.2765%" height="15" fill="rgb(241,108,4)" fg:x="922" fg:w="7934"/><text x="10.6247%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (132 samples, 1.49%)</title><rect x="98.1659%" y="132" width="1.4853%" height="15" fill="rgb(247,173,49)" fg:x="8724" fg:w="132"/><text x="98.4159%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.23%)</title><rect x="99.4261%" y="148" width="0.2250%" height="15" fill="rgb(224,114,35)" fg:x="8836" fg:w="20"/><text x="99.6761%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:109) (12 samples, 0.14%)</title><rect x="99.8087%" y="68" width="0.1350%" height="15" fill="rgb(245,159,27)" fg:x="8870" fg:w="12"/><text x="100.0587%" y="78.50"></text></g><g><title>all (8,887 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="8887"/><text x="0.2500%" y="62.50"></text></g></svg></svg>