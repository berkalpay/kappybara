<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit cc14862</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="7765"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (8 samples, 0.10%)</title><rect x="0.0258%" y="68" width="0.1030%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="8"/><text x="0.2758%" y="78.50"></text></g><g><title>select (kappybara/rule.py:104) (8 samples, 0.10%)</title><rect x="0.2704%" y="116" width="0.1030%" height="15" fill="rgb(217,0,24)" fg:x="21" fg:w="8"/><text x="0.5204%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (9 samples, 0.12%)</title><rect x="0.2704%" y="100" width="0.1159%" height="15" fill="rgb(221,193,54)" fg:x="21" fg:w="9"/><text x="0.5204%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (39 samples, 0.50%)</title><rect x="0.9530%" y="180" width="0.5023%" height="15" fill="rgb(248,212,6)" fg:x="74" fg:w="39"/><text x="1.2030%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.17%)</title><rect x="7.7785%" y="196" width="0.1674%" height="15" fill="rgb(208,68,35)" fg:x="604" fg:w="13"/><text x="8.0285%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (523 samples, 6.74%)</title><rect x="1.4552%" y="180" width="6.7354%" height="15" fill="rgb(232,128,0)" fg:x="113" fg:w="523"/><text x="1.7052%" y="190.50">embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.24%)</title><rect x="7.9459%" y="196" width="0.2447%" height="15" fill="rgb(207,160,47)" fg:x="617" fg:w="19"/><text x="8.1959%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.23%)</title><rect x="10.3542%" y="196" width="0.2318%" height="15" fill="rgb(228,23,34)" fg:x="804" fg:w="18"/><text x="10.6042%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (201 samples, 2.59%)</title><rect x="8.1906%" y="180" width="2.5885%" height="15" fill="rgb(218,30,26)" fg:x="636" fg:w="201"/><text x="8.4406%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.19%)</title><rect x="10.5860%" y="196" width="0.1932%" height="15" fill="rgb(220,122,19)" fg:x="822" fg:w="15"/><text x="10.8360%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (47 samples, 0.61%)</title><rect x="10.8049%" y="180" width="0.6053%" height="15" fill="rgb(250,228,42)" fg:x="839" fg:w="47"/><text x="11.0549%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (35 samples, 0.45%)</title><rect x="11.4102%" y="180" width="0.4507%" height="15" fill="rgb(240,193,28)" fg:x="886" fg:w="35"/><text x="11.6602%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (148 samples, 1.91%)</title><rect x="11.8609%" y="180" width="1.9060%" height="15" fill="rgb(216,20,37)" fg:x="921" fg:w="148"/><text x="12.1109%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.19%)</title><rect x="13.5737%" y="196" width="0.1932%" height="15" fill="rgb(206,188,39)" fg:x="1054" fg:w="15"/><text x="13.8237%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (140 samples, 1.80%)</title><rect x="13.7669%" y="180" width="1.8030%" height="15" fill="rgb(217,207,13)" fg:x="1069" fg:w="140"/><text x="14.0169%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (14 samples, 0.18%)</title><rect x="17.1539%" y="196" width="0.1803%" height="15" fill="rgb(231,73,38)" fg:x="1332" fg:w="14"/><text x="17.4039%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (47 samples, 0.61%)</title><rect x="17.3342%" y="196" width="0.6053%" height="15" fill="rgb(225,20,46)" fg:x="1346" fg:w="47"/><text x="17.5842%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (56 samples, 0.72%)</title><rect x="19.2015%" y="212" width="0.7212%" height="15" fill="rgb(210,31,41)" fg:x="1491" fg:w="56"/><text x="19.4515%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (47 samples, 0.61%)</title><rect x="21.1719%" y="228" width="0.6053%" height="15" fill="rgb(221,200,47)" fg:x="1644" fg:w="47"/><text x="21.4219%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (507 samples, 6.53%)</title><rect x="17.9652%" y="196" width="6.5293%" height="15" fill="rgb(226,26,5)" fg:x="1395" fg:w="507"/><text x="18.2152%" y="206.50">embeds_in..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (355 samples, 4.57%)</title><rect x="19.9227%" y="212" width="4.5718%" height="15" fill="rgb(249,33,26)" fg:x="1547" fg:w="355"/><text x="20.1727%" y="222.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (211 samples, 2.72%)</title><rect x="21.7772%" y="228" width="2.7173%" height="15" fill="rgb(235,183,28)" fg:x="1691" fg:w="211"/><text x="22.0272%" y="238.50">si..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (57 samples, 0.73%)</title><rect x="24.4945%" y="196" width="0.7341%" height="15" fill="rgb(221,5,38)" fg:x="1902" fg:w="57"/><text x="24.7445%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (54 samples, 0.70%)</title><rect x="25.8339%" y="212" width="0.6954%" height="15" fill="rgb(247,18,42)" fg:x="2006" fg:w="54"/><text x="26.0839%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (143 samples, 1.84%)</title><rect x="25.2543%" y="196" width="1.8416%" height="15" fill="rgb(241,131,45)" fg:x="1961" fg:w="143"/><text x="25.5043%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (44 samples, 0.57%)</title><rect x="26.5293%" y="212" width="0.5666%" height="15" fill="rgb(249,31,29)" fg:x="2060" fg:w="44"/><text x="26.7793%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (87 samples, 1.12%)</title><rect x="32.1185%" y="212" width="1.1204%" height="15" fill="rgb(225,111,53)" fg:x="2494" fg:w="87"/><text x="32.3685%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (10 samples, 0.13%)</title><rect x="33.2389%" y="212" width="0.1288%" height="15" fill="rgb(238,160,17)" fg:x="2581" fg:w="10"/><text x="33.4889%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (10 samples, 0.13%)</title><rect x="33.7798%" y="228" width="0.1288%" height="15" fill="rgb(214,148,48)" fg:x="2623" fg:w="10"/><text x="34.0298%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (102 samples, 1.31%)</title><rect x="33.3677%" y="212" width="1.3136%" height="15" fill="rgb(232,36,49)" fg:x="2591" fg:w="102"/><text x="33.6177%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (60 samples, 0.77%)</title><rect x="33.9086%" y="228" width="0.7727%" height="15" fill="rgb(209,103,24)" fg:x="2633" fg:w="60"/><text x="34.1586%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (15 samples, 0.19%)</title><rect x="35.5312%" y="228" width="0.1932%" height="15" fill="rgb(229,88,8)" fg:x="2759" fg:w="15"/><text x="35.7812%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:59) (242 samples, 3.12%)</title><rect x="35.7244%" y="228" width="3.1165%" height="15" fill="rgb(213,181,19)" fg:x="2774" fg:w="242"/><text x="35.9744%" y="238.50">bou..</text></g><g><title>__eq__ (kappybara/utils.py:33) (132 samples, 1.70%)</title><rect x="37.1410%" y="244" width="1.6999%" height="15" fill="rgb(254,191,54)" fg:x="2884" fg:w="132"/><text x="37.3910%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.19%)</title><rect x="38.6478%" y="260" width="0.1932%" height="15" fill="rgb(241,83,37)" fg:x="3001" fg:w="15"/><text x="38.8978%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (137 samples, 1.76%)</title><rect x="38.8410%" y="228" width="1.7643%" height="15" fill="rgb(233,36,39)" fg:x="3016" fg:w="137"/><text x="39.0910%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:61) (51 samples, 0.66%)</title><rect x="40.6053%" y="228" width="0.6568%" height="15" fill="rgb(226,3,54)" fg:x="3153" fg:w="51"/><text x="40.8553%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (13 samples, 0.17%)</title><rect x="41.2621%" y="228" width="0.1674%" height="15" fill="rgb(245,192,40)" fg:x="3204" fg:w="13"/><text x="41.5121%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (551 samples, 7.10%)</title><rect x="34.6813%" y="212" width="7.0959%" height="15" fill="rgb(238,167,29)" fg:x="2693" fg:w="551"/><text x="34.9313%" y="222.50">embeds_in ..</text></g><g><title>coupled (kappybara/pattern.py:66) (27 samples, 0.35%)</title><rect x="41.4295%" y="228" width="0.3477%" height="15" fill="rgb(232,182,51)" fg:x="3217" fg:w="27"/><text x="41.6795%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (85 samples, 1.09%)</title><rect x="41.9060%" y="212" width="1.0947%" height="15" fill="rgb(231,60,39)" fg:x="3254" fg:w="85"/><text x="42.1560%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (51 samples, 0.66%)</title><rect x="42.3439%" y="228" width="0.6568%" height="15" fill="rgb(208,69,12)" fg:x="3288" fg:w="51"/><text x="42.5939%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.10%)</title><rect x="42.8976%" y="244" width="0.1030%" height="15" fill="rgb(235,93,37)" fg:x="3331" fg:w="8"/><text x="43.1476%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (61 samples, 0.79%)</title><rect x="43.0006%" y="212" width="0.7856%" height="15" fill="rgb(213,116,39)" fg:x="3339" fg:w="61"/><text x="43.2506%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (30 samples, 0.39%)</title><rect x="43.3999%" y="228" width="0.3863%" height="15" fill="rgb(222,207,29)" fg:x="3370" fg:w="30"/><text x="43.6499%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (29 samples, 0.37%)</title><rect x="43.7862%" y="212" width="0.3735%" height="15" fill="rgb(206,96,30)" fg:x="3400" fg:w="29"/><text x="44.0362%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (57 samples, 0.73%)</title><rect x="44.1726%" y="212" width="0.7341%" height="15" fill="rgb(218,138,4)" fg:x="3430" fg:w="57"/><text x="44.4226%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (20 samples, 0.26%)</title><rect x="44.9066%" y="212" width="0.2576%" height="15" fill="rgb(250,191,14)" fg:x="3487" fg:w="20"/><text x="45.1566%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,557 samples, 20.05%)</title><rect x="27.0959%" y="196" width="20.0515%" height="15" fill="rgb(239,60,40)" fg:x="2104" fg:w="1557"/><text x="27.3459%" y="206.50">embeds_in (kappybara/pattern.py..</text></g><g><title>sites (kappybara/pattern.py:113) (147 samples, 1.89%)</title><rect x="45.2543%" y="212" width="1.8931%" height="15" fill="rgb(206,27,48)" fg:x="3514" fg:w="147"/><text x="45.5043%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,482 samples, 31.96%)</title><rect x="15.5699%" y="180" width="31.9639%" height="15" fill="rgb(225,35,8)" fg:x="1209" fg:w="2482"/><text x="15.8199%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (30 samples, 0.39%)</title><rect x="47.1475%" y="196" width="0.3863%" height="15" fill="rgb(250,213,24)" fg:x="3661" fg:w="30"/><text x="47.3975%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (25 samples, 0.32%)</title><rect x="48.6413%" y="196" width="0.3220%" height="15" fill="rgb(247,123,22)" fg:x="3777" fg:w="25"/><text x="48.8913%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (18 samples, 0.23%)</title><rect x="50.0064%" y="212" width="0.2318%" height="15" fill="rgb(231,138,38)" fg:x="3883" fg:w="18"/><text x="50.2564%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (331 samples, 4.26%)</title><rect x="47.5724%" y="180" width="4.2627%" height="15" fill="rgb(231,145,46)" fg:x="3694" fg:w="331"/><text x="47.8224%" y="190.50">embed..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (223 samples, 2.87%)</title><rect x="48.9633%" y="196" width="2.8719%" height="15" fill="rgb(251,118,11)" fg:x="3802" fg:w="223"/><text x="49.2133%" y="206.50">__..</text></g><g><title>sites (kappybara/pattern.py:113) (124 samples, 1.60%)</title><rect x="50.2382%" y="212" width="1.5969%" height="15" fill="rgb(217,147,25)" fg:x="3901" fg:w="124"/><text x="50.4882%" y="222.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (12 samples, 0.15%)</title><rect x="52.3117%" y="196" width="0.1545%" height="15" fill="rgb(247,81,37)" fg:x="4062" fg:w="12"/><text x="52.5617%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (72 samples, 0.93%)</title><rect x="51.8352%" y="180" width="0.9272%" height="15" fill="rgb(209,12,38)" fg:x="4025" fg:w="72"/><text x="52.0852%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (23 samples, 0.30%)</title><rect x="52.4662%" y="196" width="0.2962%" height="15" fill="rgb(227,1,9)" fg:x="4074" fg:w="23"/><text x="52.7162%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (10 samples, 0.13%)</title><rect x="53.0715%" y="196" width="0.1288%" height="15" fill="rgb(248,47,43)" fg:x="4121" fg:w="10"/><text x="53.3215%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (55 samples, 0.71%)</title><rect x="52.7624%" y="180" width="0.7083%" height="15" fill="rgb(221,10,30)" fg:x="4097" fg:w="55"/><text x="53.0124%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (21 samples, 0.27%)</title><rect x="53.2003%" y="196" width="0.2704%" height="15" fill="rgb(210,229,1)" fg:x="4131" fg:w="21"/><text x="53.4503%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (55 samples, 0.71%)</title><rect x="53.4707%" y="180" width="0.7083%" height="15" fill="rgb(222,148,37)" fg:x="4152" fg:w="55"/><text x="53.7207%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (21 samples, 0.27%)</title><rect x="54.1790%" y="180" width="0.2704%" height="15" fill="rgb(234,67,33)" fg:x="4207" fg:w="21"/><text x="54.4290%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (37 samples, 0.48%)</title><rect x="54.4495%" y="180" width="0.4765%" height="15" fill="rgb(247,98,35)" fg:x="4228" fg:w="37"/><text x="54.6995%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (31 samples, 0.40%)</title><rect x="55.9433%" y="196" width="0.3992%" height="15" fill="rgb(247,138,52)" fg:x="4344" fg:w="31"/><text x="56.1933%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (114 samples, 1.47%)</title><rect x="54.9259%" y="180" width="1.4681%" height="15" fill="rgb(213,79,30)" fg:x="4265" fg:w="114"/><text x="55.1759%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (32 samples, 0.41%)</title><rect x="56.3941%" y="180" width="0.4121%" height="15" fill="rgb(246,177,23)" fg:x="4379" fg:w="32"/><text x="56.6441%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (22 samples, 0.28%)</title><rect x="56.8062%" y="180" width="0.2833%" height="15" fill="rgb(230,62,27)" fg:x="4411" fg:w="22"/><text x="57.0562%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:117) (4,399 samples, 56.65%)</title><rect x="0.5151%" y="164" width="56.6516%" height="15" fill="rgb(216,154,8)" fg:x="40" fg:w="4399"/><text x="0.7651%" y="174.50">__init__ (kappybara/indexed_set.py:117)</text></g><g><title>__hash__ (kappybara/pattern.py:187) (12 samples, 0.15%)</title><rect x="58.0811%" y="180" width="0.1545%" height="15" fill="rgb(244,35,45)" fg:x="4510" fg:w="12"/><text x="58.3311%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (89 samples, 1.15%)</title><rect x="57.1668%" y="164" width="1.1462%" height="15" fill="rgb(251,115,12)" fg:x="4439" fg:w="89"/><text x="57.4168%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (4,600 samples, 59.24%)</title><rect x="0.4894%" y="148" width="59.2402%" height="15" fill="rgb(240,54,50)" fg:x="38" fg:w="4600"/><text x="0.7394%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>__init__ (kappybara/indexed_set.py:122) (110 samples, 1.42%)</title><rect x="58.3129%" y="164" width="1.4166%" height="15" fill="rgb(233,84,52)" fg:x="4528" fg:w="110"/><text x="58.5629%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (9 samples, 0.12%)</title><rect x="59.6137%" y="180" width="0.1159%" height="15" fill="rgb(207,117,47)" fg:x="4629" fg:w="9"/><text x="59.8637%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:192) (17 samples, 0.22%)</title><rect x="59.7296%" y="164" width="0.2189%" height="15" fill="rgb(249,43,39)" fg:x="4638" fg:w="17"/><text x="59.9796%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:167) (24 samples, 0.31%)</title><rect x="65.2801%" y="212" width="0.3091%" height="15" fill="rgb(209,38,44)" fg:x="5069" fg:w="24"/><text x="65.5301%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:168) (111 samples, 1.43%)</title><rect x="65.5892%" y="212" width="1.4295%" height="15" fill="rgb(236,212,23)" fg:x="5093" fg:w="111"/><text x="65.8392%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.18%)</title><rect x="66.8384%" y="228" width="0.1803%" height="15" fill="rgb(242,79,21)" fg:x="5190" fg:w="14"/><text x="67.0884%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (11 samples, 0.14%)</title><rect x="67.0187%" y="212" width="0.1417%" height="15" fill="rgb(211,96,35)" fg:x="5204" fg:w="11"/><text x="67.2687%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:171) (21 samples, 0.27%)</title><rect x="67.1603%" y="212" width="0.2704%" height="15" fill="rgb(253,215,40)" fg:x="5215" fg:w="21"/><text x="67.4103%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (628 samples, 8.09%)</title><rect x="59.9485%" y="164" width="8.0876%" height="15" fill="rgb(211,81,21)" fg:x="4655" fg:w="628"/><text x="60.1985%" y="174.50">create_inde..</text></g><g><title>__call__ (kappybara/indexed_set.py:64) (449 samples, 5.78%)</title><rect x="62.2537%" y="180" width="5.7824%" height="15" fill="rgb(208,190,38)" fg:x="4834" fg:w="449"/><text x="62.5037%" y="190.50">__call_..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (399 samples, 5.14%)</title><rect x="62.8976%" y="196" width="5.1384%" height="15" fill="rgb(235,213,38)" fg:x="4884" fg:w="399"/><text x="63.1476%" y="206.50">&lt;lambd..</text></g><g><title>lookup (kappybara/indexed_set.py:172) (47 samples, 0.61%)</title><rect x="67.4308%" y="212" width="0.6053%" height="15" fill="rgb(237,122,38)" fg:x="5236" fg:w="47"/><text x="67.6808%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (111 samples, 1.43%)</title><rect x="72.7238%" y="180" width="1.4295%" height="15" fill="rgb(244,218,35)" fg:x="5647" fg:w="111"/><text x="72.9738%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.24%)</title><rect x="74.1533%" y="180" width="0.2447%" height="15" fill="rgb(240,68,47)" fg:x="5758" fg:w="19"/><text x="74.4033%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:116) (245 samples, 3.16%)</title><rect x="74.3979%" y="180" width="3.1552%" height="15" fill="rgb(210,16,53)" fg:x="5777" fg:w="245"/><text x="74.6479%" y="190.50">__i..</text></g><g><title>__init__ (kappybara/indexed_set.py:117) (49 samples, 0.63%)</title><rect x="77.5531%" y="180" width="0.6310%" height="15" fill="rgb(235,124,12)" fg:x="6022" fg:w="49"/><text x="77.8031%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (422 samples, 5.43%)</title><rect x="78.1842%" y="180" width="5.4346%" height="15" fill="rgb(224,169,11)" fg:x="6071" fg:w="422"/><text x="78.4342%" y="190.50">__init_..</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (104 samples, 1.34%)</title><rect x="83.6188%" y="180" width="1.3393%" height="15" fill="rgb(250,166,2)" fg:x="6493" fg:w="104"/><text x="83.8688%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (351 samples, 4.52%)</title><rect x="84.9581%" y="180" width="4.5203%" height="15" fill="rgb(242,216,29)" fg:x="6597" fg:w="351"/><text x="85.2081%" y="190.50">__ini..</text></g><g><title>__init__ (kappybara/indexed_set.py:124) (34 samples, 0.44%)</title><rect x="89.4784%" y="180" width="0.4379%" height="15" fill="rgb(230,116,27)" fg:x="6948" fg:w="34"/><text x="89.7284%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:125) (23 samples, 0.30%)</title><rect x="89.9163%" y="180" width="0.2962%" height="15" fill="rgb(228,99,48)" fg:x="6982" fg:w="23"/><text x="90.1663%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:127) (13 samples, 0.17%)</title><rect x="90.2125%" y="180" width="0.1674%" height="15" fill="rgb(253,11,6)" fg:x="7005" fg:w="13"/><text x="90.4625%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (123 samples, 1.58%)</title><rect x="90.3799%" y="180" width="1.5840%" height="15" fill="rgb(247,143,39)" fg:x="7018" fg:w="123"/><text x="90.6299%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (29 samples, 0.37%)</title><rect x="91.5905%" y="196" width="0.3735%" height="15" fill="rgb(236,97,10)" fg:x="7112" fg:w="29"/><text x="91.8405%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (118 samples, 1.52%)</title><rect x="91.9639%" y="180" width="1.5196%" height="15" fill="rgb(233,208,19)" fg:x="7141" fg:w="118"/><text x="92.2139%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (54 samples, 0.70%)</title><rect x="93.4836%" y="180" width="0.6954%" height="15" fill="rgb(216,164,2)" fg:x="7259" fg:w="54"/><text x="93.7336%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (134 samples, 1.73%)</title><rect x="94.1790%" y="180" width="1.7257%" height="15" fill="rgb(220,129,5)" fg:x="7313" fg:w="134"/><text x="94.4290%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (17 samples, 0.22%)</title><rect x="95.6858%" y="196" width="0.2189%" height="15" fill="rgb(242,17,10)" fg:x="7430" fg:w="17"/><text x="95.9358%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (2,860 samples, 36.83%)</title><rect x="59.7296%" y="148" width="36.8319%" height="15" fill="rgb(242,107,0)" fg:x="4638" fg:w="2860"/><text x="59.9796%" y="158.50">track_component (kappybara/mixture.py:94)</text></g><g><title>create_index (kappybara/indexed_set.py:196) (2,208 samples, 28.44%)</title><rect x="68.1262%" y="164" width="28.4353%" height="15" fill="rgb(251,28,31)" fg:x="5290" fg:w="2208"/><text x="68.3762%" y="174.50">create_index (kappybara/indexed_set.py:196)</text></g><g><title>add (kappybara/indexed_set.py:136) (51 samples, 0.66%)</title><rect x="95.9047%" y="180" width="0.6568%" height="15" fill="rgb(233,223,10)" fg:x="7447" fg:w="51"/><text x="96.1547%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (7,738 samples, 99.65%)</title><rect x="0.1288%" y="68" width="99.6523%" height="15" fill="rgb(215,21,27)" fg:x="10" fg:w="7738"/><text x="0.3788%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (7,732 samples, 99.58%)</title><rect x="0.2061%" y="84" width="99.5750%" height="15" fill="rgb(232,23,21)" fg:x="16" fg:w="7732"/><text x="0.4561%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (7,718 samples, 99.39%)</title><rect x="0.3863%" y="100" width="99.3947%" height="15" fill="rgb(244,5,23)" fg:x="30" fg:w="7718"/><text x="0.6363%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (7,710 samples, 99.29%)</title><rect x="0.4894%" y="116" width="99.2917%" height="15" fill="rgb(226,81,46)" fg:x="38" fg:w="7710"/><text x="0.7394%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (7,710 samples, 99.29%)</title><rect x="0.4894%" y="132" width="99.2917%" height="15" fill="rgb(247,70,30)" fg:x="38" fg:w="7710"/><text x="0.7394%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (249 samples, 3.21%)</title><rect x="96.5744%" y="148" width="3.2067%" height="15" fill="rgb(212,68,19)" fg:x="7499" fg:w="249"/><text x="96.8244%" y="158.50">tra..</text></g><g><title>all (7,765 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="7765"/><text x="0.2500%" y="62.50"></text></g></svg></svg>