<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit cc14862</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11754"><g><title>n_embeddings (kappybara/rule.py:185) (13 samples, 0.11%)</title><rect x="0.2382%" y="180" width="0.1106%" height="15" fill="rgb(227,0,7)" fg:x="28" fg:w="13"/><text x="0.4882%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (49 samples, 0.42%)</title><rect x="0.1276%" y="84" width="0.4169%" height="15" fill="rgb(217,0,24)" fg:x="15" fg:w="49"/><text x="0.3776%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (49 samples, 0.42%)</title><rect x="0.1276%" y="100" width="0.4169%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="49"/><text x="0.3776%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (48 samples, 0.41%)</title><rect x="0.1361%" y="116" width="0.4084%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="48"/><text x="0.3861%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (45 samples, 0.38%)</title><rect x="0.1616%" y="132" width="0.3828%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="45"/><text x="0.4116%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (44 samples, 0.37%)</title><rect x="0.1702%" y="148" width="0.3743%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="44"/><text x="0.4202%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (42 samples, 0.36%)</title><rect x="0.1872%" y="164" width="0.3573%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="42"/><text x="0.4372%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (14 samples, 0.12%)</title><rect x="0.6466%" y="116" width="0.1191%" height="15" fill="rgb(228,23,34)" fg:x="76" fg:w="14"/><text x="0.8966%" y="126.50"></text></g><g><title>select (kappybara/rule.py:218) (21 samples, 0.18%)</title><rect x="0.8593%" y="116" width="0.1787%" height="15" fill="rgb(218,30,26)" fg:x="101" fg:w="21"/><text x="1.1093%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (48 samples, 0.41%)</title><rect x="0.6466%" y="100" width="0.4084%" height="15" fill="rgb(220,122,19)" fg:x="76" fg:w="48"/><text x="0.8966%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (16 samples, 0.14%)</title><rect x="1.1400%" y="164" width="0.1361%" height="15" fill="rgb(250,228,42)" fg:x="134" fg:w="16"/><text x="1.3900%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (46 samples, 0.39%)</title><rect x="1.1145%" y="148" width="0.3914%" height="15" fill="rgb(240,193,28)" fg:x="131" fg:w="46"/><text x="1.3645%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (27 samples, 0.23%)</title><rect x="1.2762%" y="164" width="0.2297%" height="15" fill="rgb(216,20,37)" fg:x="150" fg:w="27"/><text x="1.5262%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (58 samples, 0.49%)</title><rect x="1.5654%" y="164" width="0.4934%" height="15" fill="rgb(206,188,39)" fg:x="184" fg:w="58"/><text x="1.8154%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:64) (20 samples, 0.17%)</title><rect x="1.8887%" y="180" width="0.1702%" height="15" fill="rgb(217,207,13)" fg:x="222" fg:w="20"/><text x="2.1387%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (15 samples, 0.13%)</title><rect x="2.3481%" y="180" width="0.1276%" height="15" fill="rgb(231,73,38)" fg:x="276" fg:w="15"/><text x="2.5981%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (22 samples, 0.19%)</title><rect x="2.4758%" y="180" width="0.1872%" height="15" fill="rgb(225,20,46)" fg:x="291" fg:w="22"/><text x="2.7258%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (16 samples, 0.14%)</title><rect x="2.6629%" y="180" width="0.1361%" height="15" fill="rgb(210,31,41)" fg:x="313" fg:w="16"/><text x="2.9129%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (31 samples, 0.26%)</title><rect x="2.7990%" y="180" width="0.2637%" height="15" fill="rgb(221,200,47)" fg:x="329" fg:w="31"/><text x="3.0490%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (204 samples, 1.74%)</title><rect x="1.5059%" y="148" width="1.7356%" height="15" fill="rgb(226,26,5)" fg:x="177" fg:w="204"/><text x="1.7559%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:196) (139 samples, 1.18%)</title><rect x="2.0589%" y="164" width="1.1826%" height="15" fill="rgb(249,33,26)" fg:x="242" fg:w="139"/><text x="2.3089%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:136) (21 samples, 0.18%)</title><rect x="3.0628%" y="180" width="0.1787%" height="15" fill="rgb(235,183,28)" fg:x="360" fg:w="21"/><text x="3.3128%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (72 samples, 0.61%)</title><rect x="3.2925%" y="148" width="0.6126%" height="15" fill="rgb(221,5,38)" fg:x="387" fg:w="72"/><text x="3.5425%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (23 samples, 0.20%)</title><rect x="3.9051%" y="148" width="0.1957%" height="15" fill="rgb(247,18,42)" fg:x="459" fg:w="23"/><text x="4.1551%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (90 samples, 0.77%)</title><rect x="4.9260%" y="180" width="0.7657%" height="15" fill="rgb(241,131,45)" fg:x="579" fg:w="90"/><text x="5.1760%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (54 samples, 0.46%)</title><rect x="5.2323%" y="196" width="0.4594%" height="15" fill="rgb(249,31,29)" fg:x="615" fg:w="54"/><text x="5.4823%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (569 samples, 4.84%)</title><rect x="1.0975%" y="132" width="4.8409%" height="15" fill="rgb(225,111,53)" fg:x="129" fg:w="569"/><text x="1.3475%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (211 samples, 1.80%)</title><rect x="4.1433%" y="148" width="1.7951%" height="15" fill="rgb(238,160,17)" fg:x="487" fg:w="211"/><text x="4.3933%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:122) (185 samples, 1.57%)</title><rect x="4.3645%" y="164" width="1.5739%" height="15" fill="rgb(214,148,48)" fg:x="513" fg:w="185"/><text x="4.6145%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (23 samples, 0.20%)</title><rect x="5.7427%" y="180" width="0.1957%" height="15" fill="rgb(232,36,49)" fg:x="675" fg:w="23"/><text x="5.9927%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (573 samples, 4.87%)</title><rect x="1.0805%" y="116" width="4.8749%" height="15" fill="rgb(209,103,24)" fg:x="127" fg:w="573"/><text x="1.3305%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:261) (80 samples, 0.68%)</title><rect x="6.4999%" y="180" width="0.6806%" height="15" fill="rgb(229,88,8)" fg:x="764" fg:w="80"/><text x="6.7499%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (963 samples, 8.19%)</title><rect x="7.1805%" y="180" width="8.1930%" height="15" fill="rgb(213,181,19)" fg:x="844" fg:w="963"/><text x="7.4305%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.20%)</title><rect x="15.1778%" y="196" width="0.1957%" height="15" fill="rgb(254,191,54)" fg:x="1784" fg:w="23"/><text x="15.4278%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.17%)</title><rect x="17.8833%" y="196" width="0.1702%" height="15" fill="rgb(241,83,37)" fg:x="2102" fg:w="20"/><text x="18.1333%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (341 samples, 2.90%)</title><rect x="15.3735%" y="180" width="2.9011%" height="15" fill="rgb(233,36,39)" fg:x="1807" fg:w="341"/><text x="15.6235%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.22%)</title><rect x="18.0534%" y="196" width="0.2212%" height="15" fill="rgb(226,3,54)" fg:x="2122" fg:w="26"/><text x="18.3034%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (102 samples, 0.87%)</title><rect x="18.3257%" y="180" width="0.8678%" height="15" fill="rgb(245,192,40)" fg:x="2154" fg:w="102"/><text x="18.5757%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (55 samples, 0.47%)</title><rect x="19.1935%" y="180" width="0.4679%" height="15" fill="rgb(238,167,29)" fg:x="2256" fg:w="55"/><text x="19.4435%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.13%)</title><rect x="22.1712%" y="196" width="0.1276%" height="15" fill="rgb(232,182,51)" fg:x="2606" fg:w="15"/><text x="22.4212%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (335 samples, 2.85%)</title><rect x="19.6614%" y="180" width="2.8501%" height="15" fill="rgb(231,60,39)" fg:x="2311" fg:w="335"/><text x="19.9114%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="22.2988%" y="196" width="0.2127%" height="15" fill="rgb(208,69,12)" fg:x="2621" fg:w="25"/><text x="22.5488%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (284 samples, 2.42%)</title><rect x="22.5115%" y="180" width="2.4162%" height="15" fill="rgb(235,93,37)" fg:x="2646" fg:w="284"/><text x="22.7615%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (24 samples, 0.20%)</title><rect x="26.6377%" y="196" width="0.2042%" height="15" fill="rgb(213,116,39)" fg:x="3131" fg:w="24"/><text x="26.8877%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (101 samples, 0.86%)</title><rect x="26.8419%" y="196" width="0.8593%" height="15" fill="rgb(222,207,29)" fg:x="3155" fg:w="101"/><text x="27.0919%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (109 samples, 0.93%)</title><rect x="29.4028%" y="212" width="0.9273%" height="15" fill="rgb(206,96,30)" fg:x="3456" fg:w="109"/><text x="29.6528%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (91 samples, 0.77%)</title><rect x="31.8445%" y="228" width="0.7742%" height="15" fill="rgb(218,138,4)" fg:x="3743" fg:w="91"/><text x="32.0945%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (930 samples, 7.91%)</title><rect x="27.7182%" y="196" width="7.9122%" height="15" fill="rgb(250,191,14)" fg:x="3258" fg:w="930"/><text x="27.9682%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (623 samples, 5.30%)</title><rect x="30.3301%" y="212" width="5.3003%" height="15" fill="rgb(239,60,40)" fg:x="3565" fg:w="623"/><text x="30.5801%" y="222.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:113) (354 samples, 3.01%)</title><rect x="32.6187%" y="228" width="3.0117%" height="15" fill="rgb(206,27,48)" fg:x="3834" fg:w="354"/><text x="32.8687%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (137 samples, 1.17%)</title><rect x="35.6304%" y="196" width="1.1656%" height="15" fill="rgb(225,35,8)" fg:x="4188" fg:w="137"/><text x="35.8804%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (27 samples, 0.23%)</title><rect x="37.6212%" y="212" width="0.2297%" height="15" fill="rgb(250,213,24)" fg:x="4422" fg:w="27"/><text x="37.8712%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (196 samples, 1.67%)</title><rect x="36.8385%" y="196" width="1.6675%" height="15" fill="rgb(247,123,22)" fg:x="4330" fg:w="196"/><text x="37.0885%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (77 samples, 0.66%)</title><rect x="37.8509%" y="212" width="0.6551%" height="15" fill="rgb(231,138,38)" fg:x="4449" fg:w="77"/><text x="38.1009%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (201 samples, 1.71%)</title><rect x="46.7245%" y="212" width="1.7101%" height="15" fill="rgb(231,145,46)" fg:x="5492" fg:w="201"/><text x="46.9745%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (16 samples, 0.14%)</title><rect x="48.9535%" y="228" width="0.1361%" height="15" fill="rgb(251,118,11)" fg:x="5754" fg:w="16"/><text x="49.2035%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (175 samples, 1.49%)</title><rect x="48.5026%" y="212" width="1.4889%" height="15" fill="rgb(217,147,25)" fg:x="5701" fg:w="175"/><text x="48.7526%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (106 samples, 0.90%)</title><rect x="49.0897%" y="228" width="0.9018%" height="15" fill="rgb(247,81,37)" fg:x="5770" fg:w="106"/><text x="49.3397%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (19 samples, 0.16%)</title><rect x="51.1060%" y="228" width="0.1616%" height="15" fill="rgb(209,12,38)" fg:x="6007" fg:w="19"/><text x="51.3560%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (20 samples, 0.17%)</title><rect x="52.7735%" y="244" width="0.1702%" height="15" fill="rgb(227,1,9)" fg:x="6203" fg:w="20"/><text x="53.0235%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (424 samples, 3.61%)</title><rect x="51.2677%" y="228" width="3.6073%" height="15" fill="rgb(248,47,43)" fg:x="6026" fg:w="424"/><text x="51.5177%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (227 samples, 1.93%)</title><rect x="52.9437%" y="244" width="1.9313%" height="15" fill="rgb(221,10,30)" fg:x="6223" fg:w="227"/><text x="53.1937%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="54.5942%" y="260" width="0.2808%" height="15" fill="rgb(210,229,1)" fg:x="6417" fg:w="33"/><text x="54.8442%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (247 samples, 2.10%)</title><rect x="54.8749%" y="228" width="2.1014%" height="15" fill="rgb(222,148,37)" fg:x="6450" fg:w="247"/><text x="55.1249%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (108 samples, 0.92%)</title><rect x="56.9763%" y="228" width="0.9188%" height="15" fill="rgb(234,67,33)" fg:x="6697" fg:w="108"/><text x="57.2263%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (18 samples, 0.15%)</title><rect x="57.8952%" y="228" width="0.1531%" height="15" fill="rgb(247,98,35)" fg:x="6805" fg:w="18"/><text x="58.1452%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (984 samples, 8.37%)</title><rect x="49.9915%" y="212" width="8.3716%" height="15" fill="rgb(247,138,52)" fg:x="5876" fg:w="984"/><text x="50.2415%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (37 samples, 0.31%)</title><rect x="58.0483%" y="228" width="0.3148%" height="15" fill="rgb(213,79,30)" fg:x="6823" fg:w="37"/><text x="58.2983%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (19 samples, 0.16%)</title><rect x="58.3971%" y="212" width="0.1616%" height="15" fill="rgb(246,177,23)" fg:x="6864" fg:w="19"/><text x="58.6471%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.14%)</title><rect x="59.2990%" y="228" width="0.1361%" height="15" fill="rgb(230,62,27)" fg:x="6970" fg:w="16"/><text x="59.5490%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.10%)</title><rect x="60.4220%" y="244" width="0.1021%" height="15" fill="rgb(216,154,8)" fg:x="7102" fg:w="12"/><text x="60.6720%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (251 samples, 2.14%)</title><rect x="58.5588%" y="212" width="2.1354%" height="15" fill="rgb(244,35,45)" fg:x="6883" fg:w="251"/><text x="58.8088%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (148 samples, 1.26%)</title><rect x="59.4351%" y="228" width="1.2591%" height="15" fill="rgb(251,115,12)" fg:x="6986" fg:w="148"/><text x="59.6851%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="60.5241%" y="244" width="0.1702%" height="15" fill="rgb(240,54,50)" fg:x="7114" fg:w="20"/><text x="60.7741%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (407 samples, 3.46%)</title><rect x="60.6942%" y="212" width="3.4627%" height="15" fill="rgb(233,84,52)" fg:x="7134" fg:w="407"/><text x="60.9442%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (262 samples, 2.23%)</title><rect x="61.9279%" y="228" width="2.2290%" height="15" fill="rgb(207,117,47)" fg:x="7279" fg:w="262"/><text x="62.1779%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.35%)</title><rect x="63.8081%" y="244" width="0.3488%" height="15" fill="rgb(249,43,39)" fg:x="7500" fg:w="41"/><text x="64.0581%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (71 samples, 0.60%)</title><rect x="64.1569%" y="212" width="0.6040%" height="15" fill="rgb(209,38,44)" fg:x="7541" fg:w="71"/><text x="64.4069%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (190 samples, 1.62%)</title><rect x="64.7694%" y="212" width="1.6165%" height="15" fill="rgb(236,212,23)" fg:x="7613" fg:w="190"/><text x="65.0194%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (85 samples, 0.72%)</title><rect x="66.3859%" y="212" width="0.7232%" height="15" fill="rgb(242,79,21)" fg:x="7803" fg:w="85"/><text x="66.6359%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (18 samples, 0.15%)</title><rect x="67.1091%" y="212" width="0.1531%" height="15" fill="rgb(211,96,35)" fg:x="7888" fg:w="18"/><text x="67.3591%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,691 samples, 31.40%)</title><rect x="38.5060%" y="196" width="31.4021%" height="15" fill="rgb(253,215,40)" fg:x="4526" fg:w="3691"/><text x="38.7560%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (311 samples, 2.65%)</title><rect x="67.2622%" y="212" width="2.6459%" height="15" fill="rgb(211,81,21)" fg:x="7906" fg:w="311"/><text x="67.5122%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,325 samples, 45.30%)</title><rect x="24.9277%" y="180" width="45.3037%" height="15" fill="rgb(208,190,38)" fg:x="2930" fg:w="5325"/><text x="25.1777%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (38 samples, 0.32%)</title><rect x="69.9081%" y="196" width="0.3233%" height="15" fill="rgb(235,213,38)" fg:x="8217" fg:w="38"/><text x="70.1581%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (55 samples, 0.47%)</title><rect x="71.5841%" y="196" width="0.4679%" height="15" fill="rgb(237,122,38)" fg:x="8414" fg:w="55"/><text x="71.8341%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (43 samples, 0.37%)</title><rect x="73.0134%" y="212" width="0.3658%" height="15" fill="rgb(244,218,35)" fg:x="8582" fg:w="43"/><text x="73.2634%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (586 samples, 4.99%)</title><rect x="70.3250%" y="180" width="4.9855%" height="15" fill="rgb(240,68,47)" fg:x="8266" fg:w="586"/><text x="70.5750%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (383 samples, 3.26%)</title><rect x="72.0521%" y="196" width="3.2585%" height="15" fill="rgb(210,16,53)" fg:x="8469" fg:w="383"/><text x="72.3021%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (227 samples, 1.93%)</title><rect x="73.3793%" y="212" width="1.9313%" height="15" fill="rgb(235,124,12)" fg:x="8625" fg:w="227"/><text x="73.6293%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (112 samples, 0.95%)</title><rect x="75.3105%" y="180" width="0.9529%" height="15" fill="rgb(224,169,11)" fg:x="8852" fg:w="112"/><text x="75.5605%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (33 samples, 0.28%)</title><rect x="75.9826%" y="196" width="0.2808%" height="15" fill="rgb(250,166,2)" fg:x="8931" fg:w="33"/><text x="76.2326%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.12%)</title><rect x="76.5186%" y="196" width="0.1191%" height="15" fill="rgb(242,216,29)" fg:x="8994" fg:w="14"/><text x="76.7686%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (82 samples, 0.70%)</title><rect x="76.2634%" y="180" width="0.6976%" height="15" fill="rgb(230,116,27)" fg:x="8964" fg:w="82"/><text x="76.5134%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (38 samples, 0.32%)</title><rect x="76.6377%" y="196" width="0.3233%" height="15" fill="rgb(228,99,48)" fg:x="9008" fg:w="38"/><text x="76.8877%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (179 samples, 1.52%)</title><rect x="76.9610%" y="180" width="1.5229%" height="15" fill="rgb(253,11,6)" fg:x="9046" fg:w="179"/><text x="77.2110%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.18%)</title><rect x="78.3053%" y="196" width="0.1787%" height="15" fill="rgb(247,143,39)" fg:x="9204" fg:w="21"/><text x="78.5553%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (63 samples, 0.54%)</title><rect x="78.4839%" y="180" width="0.5360%" height="15" fill="rgb(236,97,10)" fg:x="9225" fg:w="63"/><text x="78.7339%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (90 samples, 0.77%)</title><rect x="79.0199%" y="180" width="0.7657%" height="15" fill="rgb(233,208,19)" fg:x="9288" fg:w="90"/><text x="79.2699%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (107 samples, 0.91%)</title><rect x="81.5722%" y="196" width="0.9103%" height="15" fill="rgb(216,164,2)" fg:x="9588" fg:w="107"/><text x="81.8222%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="82.3549%" y="212" width="0.1276%" height="15" fill="rgb(220,129,5)" fg:x="9680" fg:w="15"/><text x="82.6049%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (326 samples, 2.77%)</title><rect x="79.7856%" y="180" width="2.7735%" height="15" fill="rgb(242,17,10)" fg:x="9378" fg:w="326"/><text x="80.0356%" y="190.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:287) (34 samples, 0.29%)</title><rect x="82.5676%" y="180" width="0.2893%" height="15" fill="rgb(242,107,0)" fg:x="9705" fg:w="34"/><text x="82.8176%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:117) (9,038 samples, 76.89%)</title><rect x="6.1256%" y="164" width="76.8930%" height="15" fill="rgb(251,28,31)" fg:x="720" fg:w="9038"/><text x="6.3756%" y="174.50">__init__ (kappybara/indexed_set.py:117)</text></g><g><title>__init__ (kappybara/indexed_set.py:119) (106 samples, 0.90%)</title><rect x="83.0185%" y="164" width="0.9018%" height="15" fill="rgb(233,223,10)" fg:x="9758" fg:w="106"/><text x="83.2685%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.10%)</title><rect x="83.8183%" y="180" width="0.1021%" height="15" fill="rgb(215,21,27)" fg:x="9852" fg:w="12"/><text x="84.0683%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (152 samples, 1.29%)</title><rect x="83.9289%" y="164" width="1.2932%" height="15" fill="rgb(232,23,21)" fg:x="9865" fg:w="152"/><text x="84.1789%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.12%)</title><rect x="85.1029%" y="180" width="0.1191%" height="15" fill="rgb(244,5,23)" fg:x="10003" fg:w="14"/><text x="85.3529%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,306 samples, 79.17%)</title><rect x="6.0830%" y="148" width="79.1730%" height="15" fill="rgb(226,81,46)" fg:x="715" fg:w="9306"/><text x="6.3330%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:192) (23 samples, 0.20%)</title><rect x="85.3582%" y="164" width="0.1957%" height="15" fill="rgb(247,70,30)" fg:x="10033" fg:w="23"/><text x="85.6082%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:166) (12 samples, 0.10%)</title><rect x="89.4164%" y="212" width="0.1021%" height="15" fill="rgb(212,68,19)" fg:x="10510" fg:w="12"/><text x="89.6664%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:167) (26 samples, 0.22%)</title><rect x="89.5185%" y="212" width="0.2212%" height="15" fill="rgb(240,187,13)" fg:x="10522" fg:w="26"/><text x="89.7685%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:168) (127 samples, 1.08%)</title><rect x="89.7397%" y="212" width="1.0805%" height="15" fill="rgb(223,113,26)" fg:x="10548" fg:w="127"/><text x="89.9897%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="90.6925%" y="228" width="0.1276%" height="15" fill="rgb(206,192,2)" fg:x="10660" fg:w="15"/><text x="90.9425%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:171) (24 samples, 0.20%)</title><rect x="90.8967%" y="212" width="0.2042%" height="15" fill="rgb(241,108,4)" fg:x="10684" fg:w="24"/><text x="91.1467%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (710 samples, 6.04%)</title><rect x="85.5539%" y="164" width="6.0405%" height="15" fill="rgb(247,173,49)" fg:x="10056" fg:w="710"/><text x="85.8039%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:64) (499 samples, 4.25%)</title><rect x="87.3490%" y="180" width="4.2454%" height="15" fill="rgb(224,114,35)" fg:x="10267" fg:w="499"/><text x="87.5990%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (455 samples, 3.87%)</title><rect x="87.7233%" y="196" width="3.8710%" height="15" fill="rgb(245,159,27)" fg:x="10311" fg:w="455"/><text x="87.9733%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:172) (58 samples, 0.49%)</title><rect x="91.1009%" y="212" width="0.4934%" height="15" fill="rgb(245,172,44)" fg:x="10708" fg:w="58"/><text x="91.3509%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="92.8790%" y="180" width="0.2127%" height="15" fill="rgb(236,23,11)" fg:x="10917" fg:w="25"/><text x="93.1290%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:127) (12 samples, 0.10%)</title><rect x="93.2959%" y="180" width="0.1021%" height="15" fill="rgb(205,117,38)" fg:x="10966" fg:w="12"/><text x="93.5459%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (162 samples, 1.38%)</title><rect x="93.3980%" y="180" width="1.3783%" height="15" fill="rgb(237,72,25)" fg:x="10978" fg:w="162"/><text x="93.6480%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (37 samples, 0.31%)</title><rect x="94.4615%" y="196" width="0.3148%" height="15" fill="rgb(244,70,9)" fg:x="11103" fg:w="37"/><text x="94.7115%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (159 samples, 1.35%)</title><rect x="94.7762%" y="180" width="1.3527%" height="15" fill="rgb(217,125,39)" fg:x="11140" fg:w="159"/><text x="95.0262%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (46 samples, 0.39%)</title><rect x="96.1290%" y="180" width="0.3914%" height="15" fill="rgb(235,36,10)" fg:x="11299" fg:w="46"/><text x="96.3790%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (173 samples, 1.47%)</title><rect x="96.5203%" y="180" width="1.4718%" height="15" fill="rgb(251,123,47)" fg:x="11345" fg:w="173"/><text x="96.7703%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (17 samples, 0.14%)</title><rect x="97.8475%" y="196" width="0.1446%" height="15" fill="rgb(221,13,13)" fg:x="11501" fg:w="17"/><text x="98.0975%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,577 samples, 13.42%)</title><rect x="85.2561%" y="148" width="13.4167%" height="15" fill="rgb(238,131,9)" fg:x="10021" fg:w="1577"/><text x="85.5061%" y="158.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:196) (827 samples, 7.04%)</title><rect x="91.6369%" y="164" width="7.0359%" height="15" fill="rgb(211,50,8)" fg:x="10771" fg:w="827"/><text x="91.8869%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:136) (80 samples, 0.68%)</title><rect x="97.9922%" y="180" width="0.6806%" height="15" fill="rgb(245,182,24)" fg:x="11518" fg:w="80"/><text x="98.2422%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:96) (17 samples, 0.14%)</title><rect x="98.6813%" y="148" width="0.1446%" height="15" fill="rgb(242,14,37)" fg:x="11599" fg:w="17"/><text x="98.9313%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (11,580 samples, 98.52%)</title><rect x="1.0550%" y="100" width="98.5197%" height="15" fill="rgb(246,228,12)" fg:x="124" fg:w="11580"/><text x="1.3050%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (10,994 samples, 93.53%)</title><rect x="6.0405%" y="116" width="93.5341%" height="15" fill="rgb(213,55,15)" fg:x="710" fg:w="10994"/><text x="6.2905%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (10,993 samples, 93.53%)</title><rect x="6.0490%" y="132" width="93.5256%" height="15" fill="rgb(209,9,3)" fg:x="711" fg:w="10993"/><text x="6.2990%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (88 samples, 0.75%)</title><rect x="98.8259%" y="148" width="0.7487%" height="15" fill="rgb(230,59,30)" fg:x="11616" fg:w="88"/><text x="99.0759%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,691 samples, 99.46%)</title><rect x="0.1276%" y="68" width="99.4640%" height="15" fill="rgb(209,121,21)" fg:x="15" fg:w="11691"/><text x="0.3776%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,642 samples, 99.05%)</title><rect x="0.5445%" y="84" width="99.0471%" height="15" fill="rgb(220,109,13)" fg:x="64" fg:w="11642"/><text x="0.7945%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (13 samples, 0.11%)</title><rect x="99.5916%" y="68" width="0.1106%" height="15" fill="rgb(232,18,1)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.11%)</title><rect x="99.5916%" y="84" width="0.1106%" height="15" fill="rgb(215,41,42)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.11%)</title><rect x="99.5916%" y="100" width="0.1106%" height="15" fill="rgb(224,123,36)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.11%)</title><rect x="99.5916%" y="116" width="0.1106%" height="15" fill="rgb(240,125,3)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.11%)</title><rect x="99.5916%" y="132" width="0.1106%" height="15" fill="rgb(205,98,50)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.11%)</title><rect x="99.5916%" y="148" width="0.1106%" height="15" fill="rgb(205,185,37)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (13 samples, 0.11%)</title><rect x="99.5916%" y="164" width="0.1106%" height="15" fill="rgb(238,207,15)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.11%)</title><rect x="99.5916%" y="180" width="0.1106%" height="15" fill="rgb(213,199,42)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.11%)</title><rect x="99.5916%" y="196" width="0.1106%" height="15" fill="rgb(235,201,11)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.11%)</title><rect x="99.5916%" y="212" width="0.1106%" height="15" fill="rgb(207,46,11)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.11%)</title><rect x="99.5916%" y="228" width="0.1106%" height="15" fill="rgb(241,35,35)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.11%)</title><rect x="99.5916%" y="244" width="0.1106%" height="15" fill="rgb(243,32,47)" fg:x="11706" fg:w="13"/><text x="99.8416%" y="254.50"></text></g><g><title>all (11,754 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="11754"/><text x="0.2500%" y="62.50"></text></g></svg></svg>