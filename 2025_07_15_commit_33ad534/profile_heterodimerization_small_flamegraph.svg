<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="346" onload="init(evt)" viewBox="0 0 1200 346" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="346" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 33ad534</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="335.00"> </text><svg id="frames" x="10" width="1180" total_samples="4796"><g><title>__init__ (lark/lark.py:357) (5 samples, 0.10%)</title><rect x="0.0000%" y="308" width="0.1043%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="318.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (6 samples, 0.13%)</title><rect x="0.0000%" y="68" width="0.1251%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.13%)</title><rect x="0.0000%" y="84" width="0.1251%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.13%)</title><rect x="0.0000%" y="100" width="0.1251%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.13%)</title><rect x="0.0000%" y="116" width="0.1251%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.13%)</title><rect x="0.0000%" y="132" width="0.1251%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.13%)</title><rect x="0.0000%" y="148" width="0.1251%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (6 samples, 0.13%)</title><rect x="0.0000%" y="164" width="0.1251%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.13%)</title><rect x="0.0000%" y="180" width="0.1251%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.13%)</title><rect x="0.0000%" y="196" width="0.1251%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.13%)</title><rect x="0.0000%" y="212" width="0.1251%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.13%)</title><rect x="0.0000%" y="228" width="0.1251%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.13%)</title><rect x="0.0000%" y="244" width="0.1251%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="6"/><text x="0.2500%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (6 samples, 0.13%)</title><rect x="0.0000%" y="260" width="0.1251%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="6"/><text x="0.2500%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (6 samples, 0.13%)</title><rect x="0.0000%" y="276" width="0.1251%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="6"/><text x="0.2500%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (6 samples, 0.13%)</title><rect x="0.0000%" y="292" width="0.1251%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="6"/><text x="0.2500%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (5 samples, 0.10%)</title><rect x="0.1251%" y="68" width="0.1043%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="5"/><text x="0.3751%" y="78.50"></text></g><g><title>update (kappybara/system.py:69) (12 samples, 0.25%)</title><rect x="0.2294%" y="84" width="0.2502%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="12"/><text x="0.4794%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (12 samples, 0.25%)</title><rect x="0.2294%" y="100" width="0.2502%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="12"/><text x="0.4794%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (9 samples, 0.19%)</title><rect x="0.2919%" y="116" width="0.1877%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="9"/><text x="0.5419%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (8 samples, 0.17%)</title><rect x="0.3128%" y="132" width="0.1668%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="8"/><text x="0.5628%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (8 samples, 0.17%)</title><rect x="0.3128%" y="148" width="0.1668%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="8"/><text x="0.5628%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (7 samples, 0.15%)</title><rect x="0.3336%" y="164" width="0.1460%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="7"/><text x="0.5836%" y="174.50"></text></g><g><title>select (kappybara/rule.py:103) (6 samples, 0.13%)</title><rect x="0.5213%" y="116" width="0.1251%" height="15" fill="rgb(247,18,42)" fg:x="25" fg:w="6"/><text x="0.7713%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (8 samples, 0.17%)</title><rect x="0.5213%" y="100" width="0.1668%" height="15" fill="rgb(241,131,45)" fg:x="25" fg:w="8"/><text x="0.7713%" y="110.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (77 samples, 1.61%)</title><rect x="0.7506%" y="132" width="1.6055%" height="15" fill="rgb(249,31,29)" fg:x="36" fg:w="77"/><text x="1.0006%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (22 samples, 0.46%)</title><rect x="2.7314%" y="148" width="0.4587%" height="15" fill="rgb(225,111,53)" fg:x="131" fg:w="22"/><text x="2.9814%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.23%)</title><rect x="7.6939%" y="164" width="0.2294%" height="15" fill="rgb(238,160,17)" fg:x="369" fg:w="11"/><text x="7.9439%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (250 samples, 5.21%)</title><rect x="3.1902%" y="148" width="5.2127%" height="15" fill="rgb(214,148,48)" fg:x="153" fg:w="250"/><text x="3.4402%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.48%)</title><rect x="7.9233%" y="164" width="0.4796%" height="15" fill="rgb(232,36,49)" fg:x="380" fg:w="23"/><text x="8.1733%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.19%)</title><rect x="11.5721%" y="164" width="0.1877%" height="15" fill="rgb(209,103,24)" fg:x="555" fg:w="9"/><text x="11.8221%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (171 samples, 3.57%)</title><rect x="8.4028%" y="148" width="3.5655%" height="15" fill="rgb(229,88,8)" fg:x="403" fg:w="171"/><text x="8.6528%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.21%)</title><rect x="11.7598%" y="164" width="0.2085%" height="15" fill="rgb(213,181,19)" fg:x="564" fg:w="10"/><text x="12.0098%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (36 samples, 0.75%)</title><rect x="11.9892%" y="148" width="0.7506%" height="15" fill="rgb(254,191,54)" fg:x="575" fg:w="36"/><text x="12.2392%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (41 samples, 0.85%)</title><rect x="12.7398%" y="148" width="0.8549%" height="15" fill="rgb(241,83,37)" fg:x="611" fg:w="41"/><text x="12.9898%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.19%)</title><rect x="15.7631%" y="164" width="0.1877%" height="15" fill="rgb(233,36,39)" fg:x="756" fg:w="9"/><text x="16.0131%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (124 samples, 2.59%)</title><rect x="13.5947%" y="148" width="2.5855%" height="15" fill="rgb(226,3,54)" fg:x="652" fg:w="124"/><text x="13.8447%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.23%)</title><rect x="15.9508%" y="164" width="0.2294%" height="15" fill="rgb(245,192,40)" fg:x="765" fg:w="11"/><text x="16.2008%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (121 samples, 2.52%)</title><rect x="16.1802%" y="148" width="2.5229%" height="15" fill="rgb(238,167,29)" fg:x="776" fg:w="121"/><text x="16.4302%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (6 samples, 0.13%)</title><rect x="20.6422%" y="164" width="0.1251%" height="15" fill="rgb(232,182,51)" fg:x="990" fg:w="6"/><text x="20.8922%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (44 samples, 0.92%)</title><rect x="20.7673%" y="164" width="0.9174%" height="15" fill="rgb(231,60,39)" fg:x="996" fg:w="44"/><text x="21.0173%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (59 samples, 1.23%)</title><rect x="23.9366%" y="180" width="1.2302%" height="15" fill="rgb(208,69,12)" fg:x="1148" fg:w="59"/><text x="24.1866%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (58 samples, 1.21%)</title><rect x="26.7306%" y="196" width="1.2093%" height="15" fill="rgb(235,93,37)" fg:x="1282" fg:w="58"/><text x="26.9806%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (500 samples, 10.43%)</title><rect x="21.7681%" y="164" width="10.4254%" height="15" fill="rgb(213,116,39)" fg:x="1044" fg:w="500"/><text x="22.0181%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (337 samples, 7.03%)</title><rect x="25.1668%" y="180" width="7.0267%" height="15" fill="rgb(222,207,29)" fg:x="1207" fg:w="337"/><text x="25.4168%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (204 samples, 4.25%)</title><rect x="27.9399%" y="196" width="4.2535%" height="15" fill="rgb(206,96,30)" fg:x="1340" fg:w="204"/><text x="28.1899%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (92 samples, 1.92%)</title><rect x="32.1935%" y="164" width="1.9183%" height="15" fill="rgb(218,138,4)" fg:x="1544" fg:w="92"/><text x="32.4435%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (32 samples, 0.67%)</title><rect x="35.4671%" y="180" width="0.6672%" height="15" fill="rgb(250,191,14)" fg:x="1701" fg:w="32"/><text x="35.7171%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (130 samples, 2.71%)</title><rect x="34.1952%" y="164" width="2.7106%" height="15" fill="rgb(239,60,40)" fg:x="1640" fg:w="130"/><text x="34.4452%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (37 samples, 0.77%)</title><rect x="36.1343%" y="180" width="0.7715%" height="15" fill="rgb(206,27,48)" fg:x="1733" fg:w="37"/><text x="36.3843%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (100 samples, 2.09%)</title><rect x="46.2886%" y="180" width="2.0851%" height="15" fill="rgb(225,35,8)" fg:x="2220" fg:w="100"/><text x="46.5386%" y="190.50">_..</text></g><g><title>stated (kappybara/pattern.py:50) (5 samples, 0.10%)</title><rect x="48.9366%" y="196" width="0.1043%" height="15" fill="rgb(250,213,24)" fg:x="2347" fg:w="5"/><text x="49.1866%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (82 samples, 1.71%)</title><rect x="48.4570%" y="180" width="1.7098%" height="15" fill="rgb(247,123,22)" fg:x="2324" fg:w="82"/><text x="48.7070%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (54 samples, 1.13%)</title><rect x="49.0409%" y="196" width="1.1259%" height="15" fill="rgb(231,138,38)" fg:x="2352" fg:w="54"/><text x="49.2909%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (5 samples, 0.10%)</title><rect x="51.1259%" y="196" width="0.1043%" height="15" fill="rgb(231,145,46)" fg:x="2452" fg:w="5"/><text x="51.3759%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.27%)</title><rect x="53.2527%" y="212" width="0.2711%" height="15" fill="rgb(251,118,11)" fg:x="2554" fg:w="13"/><text x="53.5027%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.15%)</title><rect x="55.4003%" y="228" width="0.1460%" height="15" fill="rgb(217,147,25)" fg:x="2657" fg:w="7"/><text x="55.6503%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (229 samples, 4.77%)</title><rect x="51.2302%" y="196" width="4.7748%" height="15" fill="rgb(247,81,37)" fg:x="2457" fg:w="229"/><text x="51.4802%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (119 samples, 2.48%)</title><rect x="53.5238%" y="212" width="2.4812%" height="15" fill="rgb(209,12,38)" fg:x="2567" fg:w="119"/><text x="53.7738%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.46%)</title><rect x="55.5463%" y="228" width="0.4587%" height="15" fill="rgb(227,1,9)" fg:x="2664" fg:w="22"/><text x="55.7963%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (127 samples, 2.65%)</title><rect x="56.0050%" y="196" width="2.6480%" height="15" fill="rgb(248,47,43)" fg:x="2686" fg:w="127"/><text x="56.2550%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (45 samples, 0.94%)</title><rect x="58.6530%" y="196" width="0.9383%" height="15" fill="rgb(221,10,30)" fg:x="2813" fg:w="45"/><text x="58.9030%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (6 samples, 0.13%)</title><rect x="59.5913%" y="196" width="0.1251%" height="15" fill="rgb(210,229,1)" fg:x="2858" fg:w="6"/><text x="59.8413%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (502 samples, 10.47%)</title><rect x="50.1668%" y="180" width="10.4671%" height="15" fill="rgb(222,148,37)" fg:x="2406" fg:w="502"/><text x="50.4168%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (44 samples, 0.92%)</title><rect x="59.7164%" y="196" width="0.9174%" height="15" fill="rgb(234,67,33)" fg:x="2864" fg:w="44"/><text x="59.9664%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (8 samples, 0.17%)</title><rect x="60.7173%" y="180" width="0.1668%" height="15" fill="rgb(247,98,35)" fg:x="2912" fg:w="8"/><text x="60.9673%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (80 samples, 1.67%)</title><rect x="60.8841%" y="180" width="1.6681%" height="15" fill="rgb(247,138,52)" fg:x="2920" fg:w="80"/><text x="61.1341%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (49 samples, 1.02%)</title><rect x="61.5304%" y="196" width="1.0217%" height="15" fill="rgb(213,79,30)" fg:x="2951" fg:w="49"/><text x="61.7804%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.17%)</title><rect x="62.3853%" y="212" width="0.1668%" height="15" fill="rgb(246,177,23)" fg:x="2992" fg:w="8"/><text x="62.6353%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (79 samples, 1.65%)</title><rect x="62.5521%" y="180" width="1.6472%" height="15" fill="rgb(230,62,27)" fg:x="3000" fg:w="79"/><text x="62.8021%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (44 samples, 0.92%)</title><rect x="63.2819%" y="196" width="0.9174%" height="15" fill="rgb(216,154,8)" fg:x="3035" fg:w="44"/><text x="63.5319%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.23%)</title><rect x="63.9700%" y="212" width="0.2294%" height="15" fill="rgb(244,35,45)" fg:x="3068" fg:w="11"/><text x="64.2200%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (15 samples, 0.31%)</title><rect x="64.1993%" y="180" width="0.3128%" height="15" fill="rgb(251,115,12)" fg:x="3079" fg:w="15"/><text x="64.4493%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (47 samples, 0.98%)</title><rect x="64.5121%" y="180" width="0.9800%" height="15" fill="rgb(240,54,50)" fg:x="3094" fg:w="47"/><text x="64.7621%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (20 samples, 0.42%)</title><rect x="65.4921%" y="180" width="0.4170%" height="15" fill="rgb(233,84,52)" fg:x="3141" fg:w="20"/><text x="65.7421%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (7 samples, 0.15%)</title><rect x="65.9091%" y="180" width="0.1460%" height="15" fill="rgb(207,117,47)" fg:x="3161" fg:w="7"/><text x="66.1591%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,530 samples, 31.90%)</title><rect x="36.9058%" y="164" width="31.9016%" height="15" fill="rgb(249,43,39)" fg:x="1770" fg:w="1530"/><text x="37.1558%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (132 samples, 2.75%)</title><rect x="66.0550%" y="180" width="2.7523%" height="15" fill="rgb(209,38,44)" fg:x="3168" fg:w="132"/><text x="66.3050%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,429 samples, 50.65%)</title><rect x="18.7031%" y="148" width="50.6464%" height="15" fill="rgb(236,212,23)" fg:x="897" fg:w="2429"/><text x="18.9531%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (26 samples, 0.54%)</title><rect x="68.8073%" y="164" width="0.5421%" height="15" fill="rgb(242,79,21)" fg:x="3300" fg:w="26"/><text x="69.0573%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (34 samples, 0.71%)</title><rect x="70.7048%" y="164" width="0.7089%" height="15" fill="rgb(211,96,35)" fg:x="3391" fg:w="34"/><text x="70.9548%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (36 samples, 0.75%)</title><rect x="72.3311%" y="180" width="0.7506%" height="15" fill="rgb(253,215,40)" fg:x="3469" fg:w="36"/><text x="72.5811%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (270 samples, 5.63%)</title><rect x="69.4746%" y="148" width="5.6297%" height="15" fill="rgb(211,81,21)" fg:x="3332" fg:w="270"/><text x="69.7246%" y="158.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (177 samples, 3.69%)</title><rect x="71.4137%" y="164" width="3.6906%" height="15" fill="rgb(208,190,38)" fg:x="3425" fg:w="177"/><text x="71.6637%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (97 samples, 2.02%)</title><rect x="73.0817%" y="180" width="2.0225%" height="15" fill="rgb(235,213,38)" fg:x="3505" fg:w="97"/><text x="73.3317%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (17 samples, 0.35%)</title><rect x="75.5421%" y="164" width="0.3545%" height="15" fill="rgb(237,122,38)" fg:x="3623" fg:w="17"/><text x="75.7921%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (42 samples, 0.88%)</title><rect x="75.1043%" y="148" width="0.8757%" height="15" fill="rgb(244,218,35)" fg:x="3602" fg:w="42"/><text x="75.3543%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (7 samples, 0.15%)</title><rect x="76.2093%" y="164" width="0.1460%" height="15" fill="rgb(240,68,47)" fg:x="3655" fg:w="7"/><text x="76.4593%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (57 samples, 1.19%)</title><rect x="75.9800%" y="148" width="1.1885%" height="15" fill="rgb(210,16,53)" fg:x="3644" fg:w="57"/><text x="76.2300%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (39 samples, 0.81%)</title><rect x="76.3553%" y="164" width="0.8132%" height="15" fill="rgb(235,124,12)" fg:x="3662" fg:w="39"/><text x="76.6053%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (34 samples, 0.71%)</title><rect x="77.1685%" y="148" width="0.7089%" height="15" fill="rgb(224,169,11)" fg:x="3701" fg:w="34"/><text x="77.4185%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.10%)</title><rect x="77.7731%" y="164" width="0.1043%" height="15" fill="rgb(250,166,2)" fg:x="3730" fg:w="5"/><text x="78.0231%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (17 samples, 0.35%)</title><rect x="77.8774%" y="148" width="0.3545%" height="15" fill="rgb(242,216,29)" fg:x="3735" fg:w="17"/><text x="78.1274%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (15 samples, 0.31%)</title><rect x="78.2319%" y="148" width="0.3128%" height="15" fill="rgb(230,116,27)" fg:x="3752" fg:w="15"/><text x="78.4819%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (31 samples, 0.65%)</title><rect x="79.8165%" y="164" width="0.6464%" height="15" fill="rgb(228,99,48)" fg:x="3828" fg:w="31"/><text x="80.0665%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.15%)</title><rect x="80.3169%" y="180" width="0.1460%" height="15" fill="rgb(253,11,6)" fg:x="3852" fg:w="7"/><text x="80.5669%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (96 samples, 2.00%)</title><rect x="78.5446%" y="148" width="2.0017%" height="15" fill="rgb(247,143,39)" fg:x="3767" fg:w="96"/><text x="78.7946%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (31 samples, 0.65%)</title><rect x="80.6297%" y="148" width="0.6464%" height="15" fill="rgb(236,97,10)" fg:x="3867" fg:w="31"/><text x="80.8797%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (54 samples, 1.13%)</title><rect x="81.2761%" y="148" width="1.1259%" height="15" fill="rgb(233,208,19)" fg:x="3898" fg:w="54"/><text x="81.5261%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,845 samples, 80.17%)</title><rect x="2.3561%" y="132" width="80.1710%" height="15" fill="rgb(216,164,2)" fg:x="113" fg:w="3845"/><text x="2.6061%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (6 samples, 0.13%)</title><rect x="82.4020%" y="148" width="0.1251%" height="15" fill="rgb(220,129,5)" fg:x="3952" fg:w="6"/><text x="82.6520%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (43 samples, 0.90%)</title><rect x="82.5271%" y="132" width="0.8966%" height="15" fill="rgb(242,17,10)" fg:x="3958" fg:w="43"/><text x="82.7771%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (5 samples, 0.10%)</title><rect x="83.4237%" y="132" width="0.1043%" height="15" fill="rgb(242,107,0)" fg:x="4001" fg:w="5"/><text x="83.6737%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (7 samples, 0.15%)</title><rect x="83.5279%" y="132" width="0.1460%" height="15" fill="rgb(251,28,31)" fg:x="4006" fg:w="7"/><text x="83.7779%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (158 samples, 3.29%)</title><rect x="90.6589%" y="148" width="3.2944%" height="15" fill="rgb(233,223,10)" fg:x="4348" fg:w="158"/><text x="90.9089%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.17%)</title><rect x="93.9533%" y="148" width="0.1668%" height="15" fill="rgb(215,21,27)" fg:x="4506" fg:w="8"/><text x="94.2033%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (547 samples, 11.41%)</title><rect x="83.6739%" y="132" width="11.4053%" height="15" fill="rgb(232,23,21)" fg:x="4013" fg:w="547"/><text x="83.9239%" y="142.50">_update_embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (46 samples, 0.96%)</title><rect x="94.1201%" y="148" width="0.9591%" height="15" fill="rgb(244,5,23)" fg:x="4514" fg:w="46"/><text x="94.3701%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (38 samples, 0.79%)</title><rect x="98.6239%" y="148" width="0.7923%" height="15" fill="rgb(226,81,46)" fg:x="4730" fg:w="38"/><text x="98.8739%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,772 samples, 99.50%)</title><rect x="0.2294%" y="68" width="99.4996%" height="15" fill="rgb(247,70,30)" fg:x="11" fg:w="4772"/><text x="0.4794%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,760 samples, 99.25%)</title><rect x="0.4796%" y="84" width="99.2494%" height="15" fill="rgb(212,68,19)" fg:x="23" fg:w="4760"/><text x="0.7296%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,750 samples, 99.04%)</title><rect x="0.6881%" y="100" width="99.0409%" height="15" fill="rgb(240,187,13)" fg:x="33" fg:w="4750"/><text x="0.9381%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,747 samples, 98.98%)</title><rect x="0.7506%" y="116" width="98.9783%" height="15" fill="rgb(223,113,26)" fg:x="36" fg:w="4747"/><text x="1.0006%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (223 samples, 4.65%)</title><rect x="95.0792%" y="132" width="4.6497%" height="15" fill="rgb(206,192,2)" fg:x="4560" fg:w="223"/><text x="95.3292%" y="142.50">_upda..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.31%)</title><rect x="99.4162%" y="148" width="0.3128%" height="15" fill="rgb(241,108,4)" fg:x="4768" fg:w="15"/><text x="99.6662%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:109) (5 samples, 0.10%)</title><rect x="99.8332%" y="68" width="0.1043%" height="15" fill="rgb(247,173,49)" fg:x="4788" fg:w="5"/><text x="100.0832%" y="78.50"></text></g><g><title>all (4,796 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="4796"/><text x="0.2500%" y="62.50"></text></g></svg></svg>