<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 33ad534</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="9322"><g><title>update (kappybara/system.py:69) (21 samples, 0.23%)</title><rect x="0.1287%" y="84" width="0.2253%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="21"/><text x="0.3787%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (21 samples, 0.23%)</title><rect x="0.1287%" y="100" width="0.2253%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="21"/><text x="0.3787%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (16 samples, 0.17%)</title><rect x="0.1824%" y="116" width="0.1716%" height="15" fill="rgb(221,193,54)" fg:x="17" fg:w="16"/><text x="0.4324%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (15 samples, 0.16%)</title><rect x="0.1931%" y="132" width="0.1609%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="15"/><text x="0.4431%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (14 samples, 0.15%)</title><rect x="0.2038%" y="148" width="0.1502%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="14"/><text x="0.4538%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (12 samples, 0.13%)</title><rect x="0.2253%" y="164" width="0.1287%" height="15" fill="rgb(232,128,0)" fg:x="21" fg:w="12"/><text x="0.4753%" y="174.50"></text></g><g><title>select (kappybara/rule.py:103) (22 samples, 0.24%)</title><rect x="0.4505%" y="116" width="0.2360%" height="15" fill="rgb(207,160,47)" fg:x="42" fg:w="22"/><text x="0.7005%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (27 samples, 0.29%)</title><rect x="0.4398%" y="100" width="0.2896%" height="15" fill="rgb(228,23,34)" fg:x="41" fg:w="27"/><text x="0.6898%" y="110.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (29 samples, 0.31%)</title><rect x="0.8582%" y="148" width="0.3111%" height="15" fill="rgb(218,30,26)" fg:x="80" fg:w="29"/><text x="1.1082%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (76 samples, 0.82%)</title><rect x="1.2658%" y="148" width="0.8153%" height="15" fill="rgb(220,122,19)" fg:x="118" fg:w="76"/><text x="1.5158%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="1.9631%" y="164" width="0.1180%" height="15" fill="rgb(250,228,42)" fg:x="183" fg:w="11"/><text x="2.2131%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (14 samples, 0.15%)</title><rect x="2.0811%" y="148" width="0.1502%" height="15" fill="rgb(240,193,28)" fg:x="194" fg:w="14"/><text x="2.3311%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (81 samples, 0.87%)</title><rect x="3.2504%" y="180" width="0.8689%" height="15" fill="rgb(216,20,37)" fg:x="303" fg:w="81"/><text x="3.5004%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (49 samples, 0.53%)</title><rect x="3.5936%" y="196" width="0.5256%" height="15" fill="rgb(206,188,39)" fg:x="335" fg:w="49"/><text x="3.8436%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (10 samples, 0.11%)</title><rect x="4.1193%" y="180" width="0.1073%" height="15" fill="rgb(217,207,13)" fg:x="384" fg:w="10"/><text x="4.3693%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (344 samples, 3.69%)</title><rect x="0.7938%" y="132" width="3.6902%" height="15" fill="rgb(231,73,38)" fg:x="74" fg:w="344"/><text x="1.0438%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (206 samples, 2.21%)</title><rect x="2.2742%" y="148" width="2.2098%" height="15" fill="rgb(225,20,46)" fg:x="212" fg:w="206"/><text x="2.5242%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (180 samples, 1.93%)</title><rect x="2.5531%" y="164" width="1.9309%" height="15" fill="rgb(210,31,41)" fg:x="238" fg:w="180"/><text x="2.8031%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (24 samples, 0.26%)</title><rect x="4.2266%" y="180" width="0.2575%" height="15" fill="rgb(221,200,47)" fg:x="394" fg:w="24"/><text x="4.4766%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (375 samples, 4.02%)</title><rect x="0.7509%" y="116" width="4.0227%" height="15" fill="rgb(226,26,5)" fg:x="70" fg:w="375"/><text x="1.0009%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (27 samples, 0.29%)</title><rect x="4.4840%" y="132" width="0.2896%" height="15" fill="rgb(249,33,26)" fg:x="418" fg:w="27"/><text x="4.7340%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (20 samples, 0.21%)</title><rect x="4.5591%" y="148" width="0.2145%" height="15" fill="rgb(235,183,28)" fg:x="425" fg:w="20"/><text x="4.8091%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (30 samples, 0.32%)</title><rect x="5.4709%" y="148" width="0.3218%" height="15" fill="rgb(221,5,38)" fg:x="510" fg:w="30"/><text x="5.7209%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.19%)</title><rect x="9.4079%" y="164" width="0.1931%" height="15" fill="rgb(247,18,42)" fg:x="877" fg:w="18"/><text x="9.6579%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (394 samples, 4.23%)</title><rect x="5.7927%" y="148" width="4.2266%" height="15" fill="rgb(241,131,45)" fg:x="540" fg:w="394"/><text x="6.0427%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.42%)</title><rect x="9.6009%" y="164" width="0.4184%" height="15" fill="rgb(249,31,29)" fg:x="895" fg:w="39"/><text x="9.8509%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.17%)</title><rect x="13.0337%" y="164" width="0.1716%" height="15" fill="rgb(225,111,53)" fg:x="1215" fg:w="16"/><text x="13.2837%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (323 samples, 3.46%)</title><rect x="10.0193%" y="148" width="3.4649%" height="15" fill="rgb(238,160,17)" fg:x="934" fg:w="323"/><text x="10.2693%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.28%)</title><rect x="13.2053%" y="164" width="0.2789%" height="15" fill="rgb(214,148,48)" fg:x="1231" fg:w="26"/><text x="13.4553%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (84 samples, 0.90%)</title><rect x="13.5057%" y="148" width="0.9011%" height="15" fill="rgb(232,36,49)" fg:x="1259" fg:w="84"/><text x="13.7557%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (81 samples, 0.87%)</title><rect x="14.4068%" y="148" width="0.8689%" height="15" fill="rgb(209,103,24)" fg:x="1343" fg:w="81"/><text x="14.6568%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (28 samples, 0.30%)</title><rect x="17.6142%" y="164" width="0.3004%" height="15" fill="rgb(229,88,8)" fg:x="1642" fg:w="28"/><text x="17.8642%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (294 samples, 3.15%)</title><rect x="15.2757%" y="148" width="3.1538%" height="15" fill="rgb(213,181,19)" fg:x="1424" fg:w="294"/><text x="15.5257%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.51%)</title><rect x="17.9146%" y="164" width="0.5149%" height="15" fill="rgb(254,191,54)" fg:x="1670" fg:w="48"/><text x="18.1646%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (235 samples, 2.52%)</title><rect x="18.4295%" y="148" width="2.5209%" height="15" fill="rgb(241,83,37)" fg:x="1718" fg:w="235"/><text x="18.6795%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (12 samples, 0.13%)</title><rect x="22.9135%" y="164" width="0.1287%" height="15" fill="rgb(233,36,39)" fg:x="2136" fg:w="12"/><text x="23.1635%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (89 samples, 0.95%)</title><rect x="23.0423%" y="164" width="0.9547%" height="15" fill="rgb(226,3,54)" fg:x="2148" fg:w="89"/><text x="23.2923%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (138 samples, 1.48%)</title><rect x="25.9708%" y="180" width="1.4804%" height="15" fill="rgb(245,192,40)" fg:x="2421" fg:w="138"/><text x="26.2208%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (101 samples, 1.08%)</title><rect x="29.4250%" y="196" width="1.0835%" height="15" fill="rgb(238,167,29)" fg:x="2743" fg:w="101"/><text x="29.6750%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (968 samples, 10.38%)</title><rect x="24.0399%" y="164" width="10.3840%" height="15" fill="rgb(232,182,51)" fg:x="2241" fg:w="968"/><text x="24.2899%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (650 samples, 6.97%)</title><rect x="27.4512%" y="180" width="6.9728%" height="15" fill="rgb(231,60,39)" fg:x="2559" fg:w="650"/><text x="27.7012%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (365 samples, 3.92%)</title><rect x="30.5085%" y="196" width="3.9155%" height="15" fill="rgb(208,69,12)" fg:x="2844" fg:w="365"/><text x="30.7585%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (133 samples, 1.43%)</title><rect x="34.4239%" y="164" width="1.4267%" height="15" fill="rgb(235,93,37)" fg:x="3209" fg:w="133"/><text x="34.6739%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (81 samples, 0.87%)</title><rect x="36.9127%" y="180" width="0.8689%" height="15" fill="rgb(213,116,39)" fg:x="3441" fg:w="81"/><text x="37.1627%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (198 samples, 2.12%)</title><rect x="35.9043%" y="164" width="2.1240%" height="15" fill="rgb(222,207,29)" fg:x="3347" fg:w="198"/><text x="36.1543%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (23 samples, 0.25%)</title><rect x="37.7816%" y="180" width="0.2467%" height="15" fill="rgb(206,96,30)" fg:x="3522" fg:w="23"/><text x="38.0316%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (209 samples, 2.24%)</title><rect x="48.7664%" y="180" width="2.2420%" height="15" fill="rgb(218,138,4)" fg:x="4546" fg:w="209"/><text x="49.0164%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (11 samples, 0.12%)</title><rect x="51.0084%" y="180" width="0.1180%" height="15" fill="rgb(250,191,14)" fg:x="4755" fg:w="11"/><text x="51.2584%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (10 samples, 0.11%)</title><rect x="51.5555%" y="196" width="0.1073%" height="15" fill="rgb(239,60,40)" fg:x="4806" fg:w="10"/><text x="51.8055%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (158 samples, 1.69%)</title><rect x="51.1264%" y="180" width="1.6949%" height="15" fill="rgb(206,27,48)" fg:x="4766" fg:w="158"/><text x="51.3764%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (108 samples, 1.16%)</title><rect x="51.6627%" y="196" width="1.1585%" height="15" fill="rgb(225,35,8)" fg:x="4816" fg:w="108"/><text x="51.9127%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (12 samples, 0.13%)</title><rect x="53.8618%" y="196" width="0.1287%" height="15" fill="rgb(250,213,24)" fg:x="5021" fg:w="12"/><text x="54.1118%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.18%)</title><rect x="56.2648%" y="212" width="0.1824%" height="15" fill="rgb(247,123,22)" fg:x="5245" fg:w="17"/><text x="56.5148%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (494 samples, 5.30%)</title><rect x="53.9906%" y="196" width="5.2993%" height="15" fill="rgb(231,138,38)" fg:x="5033" fg:w="494"/><text x="54.2406%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (265 samples, 2.84%)</title><rect x="56.4471%" y="212" width="2.8427%" height="15" fill="rgb(231,145,46)" fg:x="5262" fg:w="265"/><text x="56.6971%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (58 samples, 0.62%)</title><rect x="58.6677%" y="228" width="0.6222%" height="15" fill="rgb(251,118,11)" fg:x="5469" fg:w="58"/><text x="58.9177%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (243 samples, 2.61%)</title><rect x="59.2899%" y="196" width="2.6067%" height="15" fill="rgb(217,147,25)" fg:x="5527" fg:w="243"/><text x="59.5399%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (112 samples, 1.20%)</title><rect x="61.8966%" y="196" width="1.2015%" height="15" fill="rgb(247,81,37)" fg:x="5770" fg:w="112"/><text x="62.1466%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (14 samples, 0.15%)</title><rect x="63.0980%" y="196" width="0.1502%" height="15" fill="rgb(209,12,38)" fg:x="5882" fg:w="14"/><text x="63.3480%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,017 samples, 10.91%)</title><rect x="52.8213%" y="180" width="10.9097%" height="15" fill="rgb(227,1,9)" fg:x="4924" fg:w="1017"/><text x="53.0713%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (45 samples, 0.48%)</title><rect x="63.2482%" y="196" width="0.4827%" height="15" fill="rgb(248,47,43)" fg:x="5896" fg:w="45"/><text x="63.4982%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (13 samples, 0.14%)</title><rect x="63.8061%" y="180" width="0.1395%" height="15" fill="rgb(221,10,30)" fg:x="5948" fg:w="13"/><text x="64.0561%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.13%)</title><rect x="64.9753%" y="196" width="0.1287%" height="15" fill="rgb(210,229,1)" fg:x="6057" fg:w="12"/><text x="65.2253%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (296 samples, 3.18%)</title><rect x="63.9455%" y="180" width="3.1753%" height="15" fill="rgb(222,148,37)" fg:x="5961" fg:w="296"/><text x="64.1955%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (188 samples, 2.02%)</title><rect x="65.1041%" y="196" width="2.0167%" height="15" fill="rgb(234,67,33)" fg:x="6069" fg:w="188"/><text x="65.3541%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.32%)</title><rect x="66.7990%" y="212" width="0.3218%" height="15" fill="rgb(247,98,35)" fg:x="6227" fg:w="30"/><text x="67.0490%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.16%)</title><rect x="68.2257%" y="196" width="0.1609%" height="15" fill="rgb(247,138,52)" fg:x="6360" fg:w="15"/><text x="68.4757%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="70.5750%" y="212" width="0.1073%" height="15" fill="rgb(213,79,30)" fg:x="6579" fg:w="10"/><text x="70.8250%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (389 samples, 4.17%)</title><rect x="67.1208%" y="180" width="4.1729%" height="15" fill="rgb(246,177,23)" fg:x="6257" fg:w="389"/><text x="67.3708%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (271 samples, 2.91%)</title><rect x="68.3866%" y="196" width="2.9071%" height="15" fill="rgb(230,62,27)" fg:x="6375" fg:w="271"/><text x="68.6366%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (57 samples, 0.61%)</title><rect x="70.6823%" y="212" width="0.6115%" height="15" fill="rgb(216,154,8)" fg:x="6589" fg:w="57"/><text x="70.9323%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (82 samples, 0.88%)</title><rect x="71.2937%" y="180" width="0.8796%" height="15" fill="rgb(244,35,45)" fg:x="6646" fg:w="82"/><text x="71.5437%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (202 samples, 2.17%)</title><rect x="72.2055%" y="180" width="2.1669%" height="15" fill="rgb(251,115,12)" fg:x="6731" fg:w="202"/><text x="72.4555%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (82 samples, 0.88%)</title><rect x="74.3725%" y="180" width="0.8796%" height="15" fill="rgb(240,54,50)" fg:x="6933" fg:w="82"/><text x="74.6225%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (20 samples, 0.21%)</title><rect x="75.2521%" y="180" width="0.2145%" height="15" fill="rgb(233,84,52)" fg:x="7015" fg:w="20"/><text x="75.5021%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,793 samples, 40.69%)</title><rect x="38.0283%" y="164" width="40.6887%" height="15" fill="rgb(207,117,47)" fg:x="3545" fg:w="3793"/><text x="38.2783%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (303 samples, 3.25%)</title><rect x="75.4666%" y="180" width="3.2504%" height="15" fill="rgb(249,43,39)" fg:x="7035" fg:w="303"/><text x="75.7166%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,434 samples, 58.29%)</title><rect x="20.9504%" y="148" width="58.2922%" height="15" fill="rgb(209,38,44)" fg:x="1953" fg:w="5434"/><text x="21.2004%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (49 samples, 0.53%)</title><rect x="78.7170%" y="164" width="0.5256%" height="15" fill="rgb(236,212,23)" fg:x="7338" fg:w="49"/><text x="78.9670%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (55 samples, 0.59%)</title><rect x="80.6479%" y="164" width="0.5900%" height="15" fill="rgb(242,79,21)" fg:x="7518" fg:w="55"/><text x="80.8979%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (58 samples, 0.62%)</title><rect x="82.6003%" y="180" width="0.6222%" height="15" fill="rgb(211,96,35)" fg:x="7700" fg:w="58"/><text x="82.8503%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (561 samples, 6.02%)</title><rect x="79.3928%" y="148" width="6.0180%" height="15" fill="rgb(253,215,40)" fg:x="7401" fg:w="561"/><text x="79.6428%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (389 samples, 4.17%)</title><rect x="81.2379%" y="164" width="4.1729%" height="15" fill="rgb(211,81,21)" fg:x="7573" fg:w="389"/><text x="81.4879%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (204 samples, 2.19%)</title><rect x="83.2225%" y="180" width="2.1884%" height="15" fill="rgb(208,190,38)" fg:x="7758" fg:w="204"/><text x="83.4725%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (41 samples, 0.44%)</title><rect x="85.9579%" y="164" width="0.4398%" height="15" fill="rgb(235,213,38)" fg:x="8013" fg:w="41"/><text x="86.2079%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (97 samples, 1.04%)</title><rect x="85.4109%" y="148" width="1.0405%" height="15" fill="rgb(237,122,38)" fg:x="7962" fg:w="97"/><text x="85.6609%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (15 samples, 0.16%)</title><rect x="86.7303%" y="164" width="0.1609%" height="15" fill="rgb(244,218,35)" fg:x="8085" fg:w="15"/><text x="86.9803%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (85 samples, 0.91%)</title><rect x="86.4514%" y="148" width="0.9118%" height="15" fill="rgb(240,68,47)" fg:x="8059" fg:w="85"/><text x="86.7014%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (44 samples, 0.47%)</title><rect x="86.8912%" y="164" width="0.4720%" height="15" fill="rgb(210,16,53)" fg:x="8100" fg:w="44"/><text x="87.1412%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="88.9080%" y="164" width="0.1073%" height="15" fill="rgb(235,124,12)" fg:x="8288" fg:w="10"/><text x="89.1580%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (176 samples, 1.89%)</title><rect x="87.3632%" y="148" width="1.8880%" height="15" fill="rgb(224,169,11)" fg:x="8144" fg:w="176"/><text x="87.6132%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.24%)</title><rect x="89.0152%" y="164" width="0.2360%" height="15" fill="rgb(250,166,2)" fg:x="8298" fg:w="22"/><text x="89.2652%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (58 samples, 0.62%)</title><rect x="89.2512%" y="148" width="0.6222%" height="15" fill="rgb(242,216,29)" fg:x="8320" fg:w="58"/><text x="89.5012%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.11%)</title><rect x="89.7661%" y="164" width="0.1073%" height="15" fill="rgb(230,116,27)" fg:x="8368" fg:w="10"/><text x="90.0161%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (78 samples, 0.84%)</title><rect x="89.8734%" y="148" width="0.8367%" height="15" fill="rgb(228,99,48)" fg:x="8378" fg:w="78"/><text x="90.1234%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="90.5921%" y="164" width="0.1180%" height="15" fill="rgb(253,11,6)" fg:x="8445" fg:w="11"/><text x="90.8421%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (151 samples, 1.62%)</title><rect x="92.7698%" y="164" width="1.6198%" height="15" fill="rgb(247,143,39)" fg:x="8648" fg:w="151"/><text x="93.0198%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.21%)</title><rect x="94.1751%" y="180" width="0.2145%" height="15" fill="rgb(236,97,10)" fg:x="8779" fg:w="20"/><text x="94.4251%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (365 samples, 3.92%)</title><rect x="90.7101%" y="148" width="3.9155%" height="15" fill="rgb(233,208,19)" fg:x="8456" fg:w="365"/><text x="90.9601%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.16%)</title><rect x="94.4647%" y="164" width="0.1609%" height="15" fill="rgb(216,164,2)" fg:x="8806" fg:w="15"/><text x="94.7147%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (46 samples, 0.49%)</title><rect x="94.6256%" y="148" width="0.4935%" height="15" fill="rgb(220,129,5)" fg:x="8821" fg:w="46"/><text x="94.8756%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,421 samples, 90.33%)</title><rect x="4.9346%" y="132" width="90.3347%" height="15" fill="rgb(242,17,10)" fg:x="460" fg:w="8421"/><text x="5.1846%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (44 samples, 0.47%)</title><rect x="95.2693%" y="132" width="0.4720%" height="15" fill="rgb(242,107,0)" fg:x="8881" fg:w="44"/><text x="95.5193%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (11 samples, 0.12%)</title><rect x="95.8271%" y="132" width="0.1180%" height="15" fill="rgb(251,28,31)" fg:x="8933" fg:w="11"/><text x="96.0771%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.16%)</title><rect x="97.9725%" y="148" width="0.1609%" height="15" fill="rgb(233,223,10)" fg:x="9133" fg:w="15"/><text x="98.2225%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (248 samples, 2.66%)</title><rect x="95.9451%" y="132" width="2.6604%" height="15" fill="rgb(215,21,27)" fg:x="8944" fg:w="248"/><text x="96.1951%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (44 samples, 0.47%)</title><rect x="98.1334%" y="148" width="0.4720%" height="15" fill="rgb(232,23,21)" fg:x="9148" fg:w="44"/><text x="98.3834%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (8,832 samples, 94.74%)</title><rect x="4.8273%" y="116" width="94.7436%" height="15" fill="rgb(244,5,23)" fg:x="450" fg:w="8832"/><text x="5.0773%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (90 samples, 0.97%)</title><rect x="98.6054%" y="132" width="0.9655%" height="15" fill="rgb(226,81,46)" fg:x="9192" fg:w="90"/><text x="98.8554%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.15%)</title><rect x="99.4207%" y="148" width="0.1502%" height="15" fill="rgb(247,70,30)" fg:x="9268" fg:w="14"/><text x="99.6707%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,215 samples, 98.85%)</title><rect x="0.7295%" y="100" width="98.8522%" height="15" fill="rgb(212,68,19)" fg:x="68" fg:w="9215"/><text x="0.9795%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,272 samples, 99.46%)</title><rect x="0.1287%" y="68" width="99.4636%" height="15" fill="rgb(240,187,13)" fg:x="12" fg:w="9272"/><text x="0.3787%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,251 samples, 99.24%)</title><rect x="0.3540%" y="84" width="99.2384%" height="15" fill="rgb(223,113,26)" fg:x="33" fg:w="9251"/><text x="0.6040%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:96) (11 samples, 0.12%)</title><rect x="99.6782%" y="68" width="0.1180%" height="15" fill="rgb(206,192,2)" fg:x="9292" fg:w="11"/><text x="99.9282%" y="78.50"></text></g><g><title>all (9,322 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="9322"/><text x="0.2500%" y="62.50"></text></g></svg></svg>