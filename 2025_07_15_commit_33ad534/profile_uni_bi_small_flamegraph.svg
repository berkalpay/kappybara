<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 33ad534</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="9296"><g><title>update (kappybara/system.py:69) (47 samples, 0.51%)</title><rect x="0.0861%" y="84" width="0.5056%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="47"/><text x="0.3361%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (47 samples, 0.51%)</title><rect x="0.0861%" y="100" width="0.5056%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="47"/><text x="0.3361%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (42 samples, 0.45%)</title><rect x="0.1398%" y="116" width="0.4518%" height="15" fill="rgb(221,193,54)" fg:x="13" fg:w="42"/><text x="0.3898%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (36 samples, 0.39%)</title><rect x="0.2044%" y="132" width="0.3873%" height="15" fill="rgb(248,212,6)" fg:x="19" fg:w="36"/><text x="0.4544%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (36 samples, 0.39%)</title><rect x="0.2044%" y="148" width="0.3873%" height="15" fill="rgb(208,68,35)" fg:x="19" fg:w="36"/><text x="0.4544%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (33 samples, 0.35%)</title><rect x="0.2367%" y="164" width="0.3550%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="33"/><text x="0.4867%" y="174.50"></text></g><g><title>select (kappybara/rule.py:103) (10 samples, 0.11%)</title><rect x="0.6777%" y="116" width="0.1076%" height="15" fill="rgb(207,160,47)" fg:x="63" fg:w="10"/><text x="0.9277%" y="126.50"></text></g><g><title>select (kappybara/rule.py:217) (22 samples, 0.24%)</title><rect x="0.8391%" y="116" width="0.2367%" height="15" fill="rgb(228,23,34)" fg:x="78" fg:w="22"/><text x="1.0891%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (40 samples, 0.43%)</title><rect x="0.6777%" y="100" width="0.4303%" height="15" fill="rgb(218,30,26)" fg:x="63" fg:w="40"/><text x="0.9277%" y="110.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (21 samples, 0.23%)</title><rect x="1.2586%" y="148" width="0.2259%" height="15" fill="rgb(220,122,19)" fg:x="117" fg:w="21"/><text x="1.5086%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (93 samples, 1.00%)</title><rect x="1.5491%" y="148" width="1.0004%" height="15" fill="rgb(250,228,42)" fg:x="144" fg:w="93"/><text x="1.7991%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="2.4204%" y="164" width="0.1291%" height="15" fill="rgb(240,193,28)" fg:x="225" fg:w="12"/><text x="2.6704%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (13 samples, 0.14%)</title><rect x="2.5495%" y="148" width="0.1398%" height="15" fill="rgb(216,20,37)" fg:x="237" fg:w="13"/><text x="2.7995%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (64 samples, 0.69%)</title><rect x="3.7651%" y="180" width="0.6885%" height="15" fill="rgb(206,188,39)" fg:x="350" fg:w="64"/><text x="4.0151%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (37 samples, 0.40%)</title><rect x="4.0555%" y="196" width="0.3980%" height="15" fill="rgb(217,207,13)" fg:x="377" fg:w="37"/><text x="4.3055%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (339 samples, 3.65%)</title><rect x="1.1833%" y="132" width="3.6467%" height="15" fill="rgb(231,73,38)" fg:x="110" fg:w="339"/><text x="1.4333%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (197 samples, 2.12%)</title><rect x="2.7108%" y="148" width="2.1192%" height="15" fill="rgb(225,20,46)" fg:x="252" fg:w="197"/><text x="2.9608%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (173 samples, 1.86%)</title><rect x="2.9690%" y="164" width="1.8610%" height="15" fill="rgb(210,31,41)" fg:x="276" fg:w="173"/><text x="3.2190%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (30 samples, 0.32%)</title><rect x="4.5073%" y="180" width="0.3227%" height="15" fill="rgb(221,200,47)" fg:x="419" fg:w="30"/><text x="4.7573%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (364 samples, 3.92%)</title><rect x="1.1080%" y="116" width="3.9157%" height="15" fill="rgb(226,26,5)" fg:x="103" fg:w="364"/><text x="1.3580%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (18 samples, 0.19%)</title><rect x="4.8300%" y="132" width="0.1936%" height="15" fill="rgb(249,33,26)" fg:x="449" fg:w="18"/><text x="5.0800%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (17 samples, 0.18%)</title><rect x="4.8408%" y="148" width="0.1829%" height="15" fill="rgb(235,183,28)" fg:x="450" fg:w="17"/><text x="5.0908%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (42 samples, 0.45%)</title><rect x="5.7336%" y="148" width="0.4518%" height="15" fill="rgb(221,5,38)" fg:x="533" fg:w="42"/><text x="5.9836%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="9.9935%" y="164" width="0.1291%" height="15" fill="rgb(247,18,42)" fg:x="929" fg:w="12"/><text x="10.2435%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (407 samples, 4.38%)</title><rect x="6.1855%" y="148" width="4.3782%" height="15" fill="rgb(241,131,45)" fg:x="575" fg:w="407"/><text x="6.4355%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.44%)</title><rect x="10.1226%" y="164" width="0.4410%" height="15" fill="rgb(249,31,29)" fg:x="941" fg:w="41"/><text x="10.3726%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.19%)</title><rect x="13.5112%" y="164" width="0.1936%" height="15" fill="rgb(225,111,53)" fg:x="1256" fg:w="18"/><text x="13.7612%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (315 samples, 3.39%)</title><rect x="10.5637%" y="148" width="3.3886%" height="15" fill="rgb(238,160,17)" fg:x="982" fg:w="315"/><text x="10.8137%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.25%)</title><rect x="13.7048%" y="164" width="0.2474%" height="15" fill="rgb(214,148,48)" fg:x="1274" fg:w="23"/><text x="13.9548%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (81 samples, 0.87%)</title><rect x="13.9522%" y="148" width="0.8713%" height="15" fill="rgb(232,36,49)" fg:x="1297" fg:w="81"/><text x="14.2022%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (68 samples, 0.73%)</title><rect x="14.8236%" y="148" width="0.7315%" height="15" fill="rgb(209,103,24)" fg:x="1378" fg:w="68"/><text x="15.0736%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (25 samples, 0.27%)</title><rect x="17.9970%" y="164" width="0.2689%" height="15" fill="rgb(229,88,8)" fg:x="1673" fg:w="25"/><text x="18.2470%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (289 samples, 3.11%)</title><rect x="15.5551%" y="148" width="3.1089%" height="15" fill="rgb(213,181,19)" fg:x="1446" fg:w="289"/><text x="15.8051%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.40%)</title><rect x="18.2659%" y="164" width="0.3980%" height="15" fill="rgb(254,191,54)" fg:x="1698" fg:w="37"/><text x="18.5159%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (248 samples, 2.67%)</title><rect x="18.6639%" y="148" width="2.6678%" height="15" fill="rgb(241,83,37)" fg:x="1735" fg:w="248"/><text x="18.9139%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (20 samples, 0.22%)</title><rect x="23.2358%" y="164" width="0.2151%" height="15" fill="rgb(233,36,39)" fg:x="2160" fg:w="20"/><text x="23.4858%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (85 samples, 0.91%)</title><rect x="23.4509%" y="164" width="0.9144%" height="15" fill="rgb(226,3,54)" fg:x="2180" fg:w="85"/><text x="23.7009%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (117 samples, 1.26%)</title><rect x="26.4845%" y="180" width="1.2586%" height="15" fill="rgb(245,192,40)" fg:x="2462" fg:w="117"/><text x="26.7345%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (103 samples, 1.11%)</title><rect x="29.7870%" y="196" width="1.1080%" height="15" fill="rgb(238,167,29)" fg:x="2769" fg:w="103"/><text x="30.0370%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (944 samples, 10.15%)</title><rect x="24.4514%" y="164" width="10.1549%" height="15" fill="rgb(232,182,51)" fg:x="2273" fg:w="944"/><text x="24.7014%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (638 samples, 6.86%)</title><rect x="27.7431%" y="180" width="6.8632%" height="15" fill="rgb(231,60,39)" fg:x="2579" fg:w="638"/><text x="27.9931%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (345 samples, 3.71%)</title><rect x="30.8950%" y="196" width="3.7113%" height="15" fill="rgb(208,69,12)" fg:x="2872" fg:w="345"/><text x="31.1450%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (128 samples, 1.38%)</title><rect x="34.6063%" y="164" width="1.3769%" height="15" fill="rgb(235,93,37)" fg:x="3217" fg:w="128"/><text x="34.8563%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (79 samples, 0.85%)</title><rect x="37.1450%" y="180" width="0.8498%" height="15" fill="rgb(213,116,39)" fg:x="3453" fg:w="79"/><text x="37.3950%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (201 samples, 2.16%)</title><rect x="36.0370%" y="164" width="2.1622%" height="15" fill="rgb(222,207,29)" fg:x="3350" fg:w="201"/><text x="36.2870%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.20%)</title><rect x="37.9948%" y="180" width="0.2044%" height="15" fill="rgb(206,96,30)" fg:x="3532" fg:w="19"/><text x="38.2448%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (232 samples, 2.50%)</title><rect x="48.7844%" y="180" width="2.4957%" height="15" fill="rgb(218,138,4)" fg:x="4535" fg:w="232"/><text x="49.0344%" y="190.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (18 samples, 0.19%)</title><rect x="51.2801%" y="180" width="0.1936%" height="15" fill="rgb(250,191,14)" fg:x="4767" fg:w="18"/><text x="51.5301%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (17 samples, 0.18%)</title><rect x="51.8180%" y="196" width="0.1829%" height="15" fill="rgb(239,60,40)" fg:x="4817" fg:w="17"/><text x="52.0680%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (158 samples, 1.70%)</title><rect x="51.4738%" y="180" width="1.6997%" height="15" fill="rgb(206,27,48)" fg:x="4785" fg:w="158"/><text x="51.7238%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (109 samples, 1.17%)</title><rect x="52.0009%" y="196" width="1.1725%" height="15" fill="rgb(225,35,8)" fg:x="4834" fg:w="109"/><text x="52.2509%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (20 samples, 0.22%)</title><rect x="54.0663%" y="196" width="0.2151%" height="15" fill="rgb(250,213,24)" fg:x="5026" fg:w="20"/><text x="54.3163%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (23 samples, 0.25%)</title><rect x="56.7556%" y="212" width="0.2474%" height="15" fill="rgb(247,123,22)" fg:x="5276" fg:w="23"/><text x="57.0056%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (511 samples, 5.50%)</title><rect x="54.2814%" y="196" width="5.4970%" height="15" fill="rgb(231,138,38)" fg:x="5046" fg:w="511"/><text x="54.5314%" y="206.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (258 samples, 2.78%)</title><rect x="57.0030%" y="212" width="2.7754%" height="15" fill="rgb(231,145,46)" fg:x="5299" fg:w="258"/><text x="57.2530%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (55 samples, 0.59%)</title><rect x="59.1867%" y="228" width="0.5917%" height="15" fill="rgb(251,118,11)" fg:x="5502" fg:w="55"/><text x="59.4367%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (252 samples, 2.71%)</title><rect x="59.7784%" y="196" width="2.7108%" height="15" fill="rgb(217,147,25)" fg:x="5557" fg:w="252"/><text x="60.0284%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (114 samples, 1.23%)</title><rect x="62.4892%" y="196" width="1.2263%" height="15" fill="rgb(247,81,37)" fg:x="5809" fg:w="114"/><text x="62.7392%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (11 samples, 0.12%)</title><rect x="63.7156%" y="196" width="0.1183%" height="15" fill="rgb(209,12,38)" fg:x="5923" fg:w="11"/><text x="63.9656%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,028 samples, 11.06%)</title><rect x="53.1734%" y="180" width="11.0585%" height="15" fill="rgb(227,1,9)" fg:x="4943" fg:w="1028"/><text x="53.4234%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (37 samples, 0.40%)</title><rect x="63.8339%" y="196" width="0.3980%" height="15" fill="rgb(248,47,43)" fg:x="5934" fg:w="37"/><text x="64.0839%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (23 samples, 0.25%)</title><rect x="64.2857%" y="180" width="0.2474%" height="15" fill="rgb(221,10,30)" fg:x="5976" fg:w="23"/><text x="64.5357%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.13%)</title><rect x="65.5120%" y="196" width="0.1291%" height="15" fill="rgb(210,229,1)" fg:x="6090" fg:w="12"/><text x="65.7620%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (296 samples, 3.18%)</title><rect x="64.5331%" y="180" width="3.1842%" height="15" fill="rgb(222,148,37)" fg:x="5999" fg:w="296"/><text x="64.7831%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (193 samples, 2.08%)</title><rect x="65.6411%" y="196" width="2.0762%" height="15" fill="rgb(234,67,33)" fg:x="6102" fg:w="193"/><text x="65.8911%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.25%)</title><rect x="67.4699%" y="212" width="0.2474%" height="15" fill="rgb(247,98,35)" fg:x="6272" fg:w="23"/><text x="67.7199%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="70.5787%" y="212" width="0.1076%" height="15" fill="rgb(247,138,52)" fg:x="6561" fg:w="10"/><text x="70.8287%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (336 samples, 3.61%)</title><rect x="67.7173%" y="180" width="3.6145%" height="15" fill="rgb(213,79,30)" fg:x="6295" fg:w="336"/><text x="67.9673%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (240 samples, 2.58%)</title><rect x="68.7500%" y="196" width="2.5818%" height="15" fill="rgb(246,177,23)" fg:x="6391" fg:w="240"/><text x="69.0000%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (60 samples, 0.65%)</title><rect x="70.6863%" y="212" width="0.6454%" height="15" fill="rgb(230,62,27)" fg:x="6571" fg:w="60"/><text x="70.9363%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (91 samples, 0.98%)</title><rect x="71.3318%" y="180" width="0.9789%" height="15" fill="rgb(216,154,8)" fg:x="6631" fg:w="91"/><text x="71.5818%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (189 samples, 2.03%)</title><rect x="72.3107%" y="180" width="2.0331%" height="15" fill="rgb(244,35,45)" fg:x="6722" fg:w="189"/><text x="72.5607%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (85 samples, 0.91%)</title><rect x="74.3438%" y="180" width="0.9144%" height="15" fill="rgb(251,115,12)" fg:x="6911" fg:w="85"/><text x="74.5938%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (21 samples, 0.23%)</title><rect x="75.2582%" y="180" width="0.2259%" height="15" fill="rgb(240,54,50)" fg:x="6996" fg:w="21"/><text x="75.5082%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,755 samples, 40.39%)</title><rect x="38.1992%" y="164" width="40.3937%" height="15" fill="rgb(233,84,52)" fg:x="3551" fg:w="3755"/><text x="38.4492%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (289 samples, 3.11%)</title><rect x="75.4841%" y="180" width="3.1089%" height="15" fill="rgb(207,117,47)" fg:x="7017" fg:w="289"/><text x="75.7341%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,376 samples, 57.83%)</title><rect x="21.3318%" y="148" width="57.8313%" height="15" fill="rgb(249,43,39)" fg:x="1983" fg:w="5376"/><text x="21.5818%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (53 samples, 0.57%)</title><rect x="78.5929%" y="164" width="0.5701%" height="15" fill="rgb(209,38,44)" fg:x="7306" fg:w="53"/><text x="78.8429%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (13 samples, 0.14%)</title><rect x="79.1631%" y="148" width="0.1398%" height="15" fill="rgb(236,212,23)" fg:x="7359" fg:w="13"/><text x="79.4131%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (70 samples, 0.75%)</title><rect x="80.5293%" y="164" width="0.7530%" height="15" fill="rgb(242,79,21)" fg:x="7486" fg:w="70"/><text x="80.7793%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (58 samples, 0.62%)</title><rect x="82.4010%" y="180" width="0.6239%" height="15" fill="rgb(211,96,35)" fg:x="7660" fg:w="58"/><text x="82.6510%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (545 samples, 5.86%)</title><rect x="79.3460%" y="148" width="5.8627%" height="15" fill="rgb(253,215,40)" fg:x="7376" fg:w="545"/><text x="79.5960%" y="158.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (365 samples, 3.93%)</title><rect x="81.2823%" y="164" width="3.9264%" height="15" fill="rgb(211,81,21)" fg:x="7556" fg:w="365"/><text x="81.5323%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (203 samples, 2.18%)</title><rect x="83.0250%" y="180" width="2.1837%" height="15" fill="rgb(208,190,38)" fg:x="7718" fg:w="203"/><text x="83.2750%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (35 samples, 0.38%)</title><rect x="85.7143%" y="164" width="0.3765%" height="15" fill="rgb(235,213,38)" fg:x="7968" fg:w="35"/><text x="85.9643%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (92 samples, 0.99%)</title><rect x="85.2087%" y="148" width="0.9897%" height="15" fill="rgb(237,122,38)" fg:x="7921" fg:w="92"/><text x="85.4587%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (10 samples, 0.11%)</title><rect x="86.0908%" y="164" width="0.1076%" height="15" fill="rgb(244,218,35)" fg:x="8003" fg:w="10"/><text x="86.3408%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (22 samples, 0.24%)</title><rect x="86.7040%" y="164" width="0.2367%" height="15" fill="rgb(240,68,47)" fg:x="8060" fg:w="22"/><text x="86.9540%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (105 samples, 1.13%)</title><rect x="86.1984%" y="148" width="1.1295%" height="15" fill="rgb(210,16,53)" fg:x="8013" fg:w="105"/><text x="86.4484%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (36 samples, 0.39%)</title><rect x="86.9406%" y="164" width="0.3873%" height="15" fill="rgb(235,124,12)" fg:x="8082" fg:w="36"/><text x="87.1906%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="88.7156%" y="164" width="0.1183%" height="15" fill="rgb(224,169,11)" fg:x="8247" fg:w="11"/><text x="88.9656%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (163 samples, 1.75%)</title><rect x="87.3279%" y="148" width="1.7534%" height="15" fill="rgb(250,166,2)" fg:x="8118" fg:w="163"/><text x="87.5779%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.25%)</title><rect x="88.8339%" y="164" width="0.2474%" height="15" fill="rgb(242,216,29)" fg:x="8258" fg:w="23"/><text x="89.0839%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (75 samples, 0.81%)</title><rect x="89.0813%" y="148" width="0.8068%" height="15" fill="rgb(230,116,27)" fg:x="8281" fg:w="75"/><text x="89.3313%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (103 samples, 1.11%)</title><rect x="89.8881%" y="148" width="1.1080%" height="15" fill="rgb(228,99,48)" fg:x="8356" fg:w="103"/><text x="90.1381%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.14%)</title><rect x="90.8563%" y="164" width="0.1398%" height="15" fill="rgb(253,11,6)" fg:x="8446" fg:w="13"/><text x="91.1063%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (131 samples, 1.41%)</title><rect x="93.1046%" y="164" width="1.4092%" height="15" fill="rgb(247,143,39)" fg:x="8655" fg:w="131"/><text x="93.3546%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.22%)</title><rect x="94.2986%" y="180" width="0.2151%" height="15" fill="rgb(236,97,10)" fg:x="8766" fg:w="20"/><text x="94.5486%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (336 samples, 3.61%)</title><rect x="90.9961%" y="148" width="3.6145%" height="15" fill="rgb(233,208,19)" fg:x="8459" fg:w="336"/><text x="91.2461%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (43 samples, 0.46%)</title><rect x="94.6106%" y="148" width="0.4626%" height="15" fill="rgb(216,164,2)" fg:x="8795" fg:w="43"/><text x="94.8606%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (11 samples, 0.12%)</title><rect x="95.0731%" y="148" width="0.1183%" height="15" fill="rgb(220,129,5)" fg:x="8838" fg:w="11"/><text x="95.3231%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,378 samples, 90.12%)</title><rect x="5.1312%" y="132" width="90.1248%" height="15" fill="rgb(242,17,10)" fg:x="477" fg:w="8378"/><text x="5.3812%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (38 samples, 0.41%)</title><rect x="95.2560%" y="132" width="0.4088%" height="15" fill="rgb(242,107,0)" fg:x="8855" fg:w="38"/><text x="95.5060%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (10 samples, 0.11%)</title><rect x="95.7616%" y="132" width="0.1076%" height="15" fill="rgb(251,28,31)" fg:x="8902" fg:w="10"/><text x="96.0116%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="97.9346%" y="148" width="0.1398%" height="15" fill="rgb(233,223,10)" fg:x="9104" fg:w="13"/><text x="98.1846%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (243 samples, 2.61%)</title><rect x="95.8692%" y="132" width="2.6140%" height="15" fill="rgb(215,21,27)" fg:x="8912" fg:w="243"/><text x="96.1192%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.41%)</title><rect x="98.0744%" y="148" width="0.4088%" height="15" fill="rgb(232,23,21)" fg:x="9117" fg:w="38"/><text x="98.3244%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,238 samples, 99.38%)</title><rect x="0.0753%" y="68" width="99.3761%" height="15" fill="rgb(244,5,23)" fg:x="7" fg:w="9238"/><text x="0.3253%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,190 samples, 98.86%)</title><rect x="0.5917%" y="84" width="98.8597%" height="15" fill="rgb(226,81,46)" fg:x="55" fg:w="9190"/><text x="0.8417%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (9,142 samples, 98.34%)</title><rect x="1.1080%" y="100" width="98.3434%" height="15" fill="rgb(247,70,30)" fg:x="103" fg:w="9142"/><text x="1.3580%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,773 samples, 94.37%)</title><rect x="5.0775%" y="116" width="94.3739%" height="15" fill="rgb(212,68,19)" fg:x="472" fg:w="8773"/><text x="5.3275%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (90 samples, 0.97%)</title><rect x="98.4832%" y="132" width="0.9682%" height="15" fill="rgb(240,187,13)" fg:x="9155" fg:w="90"/><text x="98.7332%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="99.3223%" y="148" width="0.1291%" height="15" fill="rgb(223,113,26)" fg:x="9233" fg:w="12"/><text x="99.5723%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (11 samples, 0.12%)</title><rect x="99.4514%" y="260" width="0.1183%" height="15" fill="rgb(206,192,2)" fg:x="9245" fg:w="11"/><text x="99.7014%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (11 samples, 0.12%)</title><rect x="99.4514%" y="276" width="0.1183%" height="15" fill="rgb(241,108,4)" fg:x="9245" fg:w="11"/><text x="99.7014%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (11 samples, 0.12%)</title><rect x="99.4514%" y="292" width="0.1183%" height="15" fill="rgb(247,173,49)" fg:x="9245" fg:w="11"/><text x="99.7014%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (15 samples, 0.16%)</title><rect x="99.4514%" y="68" width="0.1614%" height="15" fill="rgb(224,114,35)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.16%)</title><rect x="99.4514%" y="84" width="0.1614%" height="15" fill="rgb(245,159,27)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.16%)</title><rect x="99.4514%" y="100" width="0.1614%" height="15" fill="rgb(245,172,44)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.16%)</title><rect x="99.4514%" y="116" width="0.1614%" height="15" fill="rgb(236,23,11)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.16%)</title><rect x="99.4514%" y="132" width="0.1614%" height="15" fill="rgb(205,117,38)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.16%)</title><rect x="99.4514%" y="148" width="0.1614%" height="15" fill="rgb(237,72,25)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (15 samples, 0.16%)</title><rect x="99.4514%" y="164" width="0.1614%" height="15" fill="rgb(244,70,9)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.16%)</title><rect x="99.4514%" y="180" width="0.1614%" height="15" fill="rgb(217,125,39)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.16%)</title><rect x="99.4514%" y="196" width="0.1614%" height="15" fill="rgb(235,36,10)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.16%)</title><rect x="99.4514%" y="212" width="0.1614%" height="15" fill="rgb(251,123,47)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.16%)</title><rect x="99.4514%" y="228" width="0.1614%" height="15" fill="rgb(221,13,13)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.16%)</title><rect x="99.4514%" y="244" width="0.1614%" height="15" fill="rgb(238,131,9)" fg:x="9245" fg:w="15"/><text x="99.7014%" y="254.50"></text></g><g><title>sites (kappybara/pattern.py:109) (16 samples, 0.17%)</title><rect x="99.7526%" y="68" width="0.1721%" height="15" fill="rgb(211,50,8)" fg:x="9273" fg:w="16"/><text x="100.0026%" y="78.50"></text></g><g><title>all (9,296 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="9296"/><text x="0.2500%" y="62.50"></text></g></svg></svg>