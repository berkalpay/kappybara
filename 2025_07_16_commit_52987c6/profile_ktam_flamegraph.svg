<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 52987c6</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="12209"><g><title>update (kappybara/system.py:69) (15 samples, 0.12%)</title><rect x="0.0410%" y="84" width="0.1229%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="15"/><text x="0.2910%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (15 samples, 0.12%)</title><rect x="0.0410%" y="100" width="0.1229%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="15"/><text x="0.2910%" y="110.50"></text></g><g><title>select (kappybara/rule.py:104) (24 samples, 0.20%)</title><rect x="0.2375%" y="116" width="0.1966%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="24"/><text x="0.4875%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (31 samples, 0.25%)</title><rect x="0.2130%" y="100" width="0.2539%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="31"/><text x="0.4630%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (14 samples, 0.11%)</title><rect x="0.6061%" y="164" width="0.1147%" height="15" fill="rgb(208,68,35)" fg:x="74" fg:w="14"/><text x="0.8561%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (42 samples, 0.34%)</title><rect x="0.5979%" y="148" width="0.3440%" height="15" fill="rgb(232,128,0)" fg:x="73" fg:w="42"/><text x="0.8479%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (27 samples, 0.22%)</title><rect x="0.7208%" y="164" width="0.2211%" height="15" fill="rgb(207,160,47)" fg:x="88" fg:w="27"/><text x="0.9708%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (57 samples, 0.47%)</title><rect x="0.9665%" y="164" width="0.4669%" height="15" fill="rgb(228,23,34)" fg:x="118" fg:w="57"/><text x="1.2165%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (30 samples, 0.25%)</title><rect x="1.7528%" y="180" width="0.2457%" height="15" fill="rgb(218,30,26)" fg:x="214" fg:w="30"/><text x="2.0028%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (22 samples, 0.18%)</title><rect x="1.9985%" y="180" width="0.1802%" height="15" fill="rgb(220,122,19)" fg:x="244" fg:w="22"/><text x="2.2485%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (14 samples, 0.11%)</title><rect x="2.1787%" y="180" width="0.1147%" height="15" fill="rgb(250,228,42)" fg:x="266" fg:w="14"/><text x="2.4287%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (33 samples, 0.27%)</title><rect x="2.2934%" y="180" width="0.2703%" height="15" fill="rgb(240,193,28)" fg:x="280" fg:w="33"/><text x="2.5434%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (222 samples, 1.82%)</title><rect x="0.9419%" y="148" width="1.8183%" height="15" fill="rgb(216,20,37)" fg:x="115" fg:w="222"/><text x="1.1919%" y="158.50">_..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (160 samples, 1.31%)</title><rect x="1.4498%" y="164" width="1.3105%" height="15" fill="rgb(206,188,39)" fg:x="177" fg:w="160"/><text x="1.6998%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (24 samples, 0.20%)</title><rect x="2.5637%" y="180" width="0.1966%" height="15" fill="rgb(217,207,13)" fg:x="313" fg:w="24"/><text x="2.8137%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (89 samples, 0.73%)</title><rect x="2.8012%" y="148" width="0.7290%" height="15" fill="rgb(231,73,38)" fg:x="342" fg:w="89"/><text x="3.0512%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (15 samples, 0.12%)</title><rect x="3.5302%" y="148" width="0.1229%" height="15" fill="rgb(225,20,46)" fg:x="431" fg:w="15"/><text x="3.7802%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (95 samples, 0.78%)</title><rect x="4.5786%" y="180" width="0.7781%" height="15" fill="rgb(210,31,41)" fg:x="559" fg:w="95"/><text x="4.8286%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (50 samples, 0.41%)</title><rect x="4.9472%" y="196" width="0.4095%" height="15" fill="rgb(221,200,47)" fg:x="604" fg:w="50"/><text x="5.1972%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (625 samples, 5.12%)</title><rect x="0.4751%" y="116" width="5.1192%" height="15" fill="rgb(226,26,5)" fg:x="58" fg:w="625"/><text x="0.7251%" y="126.50">apply_..</text></g><g><title>_remove_edge (kappybara/mixture.py:191) (612 samples, 5.01%)</title><rect x="0.5815%" y="132" width="5.0127%" height="15" fill="rgb(249,33,26)" fg:x="71" fg:w="612"/><text x="0.8315%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (229 samples, 1.88%)</title><rect x="3.7186%" y="148" width="1.8757%" height="15" fill="rgb(235,183,28)" fg:x="454" fg:w="229"/><text x="3.9686%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:122) (201 samples, 1.65%)</title><rect x="3.9479%" y="164" width="1.6463%" height="15" fill="rgb(221,5,38)" fg:x="482" fg:w="201"/><text x="4.1979%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (25 samples, 0.20%)</title><rect x="5.3895%" y="180" width="0.2048%" height="15" fill="rgb(247,18,42)" fg:x="658" fg:w="25"/><text x="5.6395%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (75 samples, 0.61%)</title><rect x="6.0283%" y="180" width="0.6143%" height="15" fill="rgb(241,131,45)" fg:x="736" fg:w="75"/><text x="6.2783%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.16%)</title><rect x="14.1289%" y="196" width="0.1556%" height="15" fill="rgb(249,31,29)" fg:x="1725" fg:w="19"/><text x="14.3789%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (970 samples, 7.94%)</title><rect x="6.6426%" y="180" width="7.9450%" height="15" fill="rgb(225,111,53)" fg:x="811" fg:w="970"/><text x="6.8926%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.30%)</title><rect x="14.2845%" y="196" width="0.3031%" height="15" fill="rgb(238,160,17)" fg:x="1744" fg:w="37"/><text x="14.5345%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.11%)</title><rect x="17.5035%" y="196" width="0.1147%" height="15" fill="rgb(214,148,48)" fg:x="2137" fg:w="14"/><text x="17.7535%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (404 samples, 3.31%)</title><rect x="14.5876%" y="180" width="3.3090%" height="15" fill="rgb(232,36,49)" fg:x="1781" fg:w="404"/><text x="14.8376%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.28%)</title><rect x="17.6182%" y="196" width="0.2785%" height="15" fill="rgb(209,103,24)" fg:x="2151" fg:w="34"/><text x="17.8682%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (92 samples, 0.75%)</title><rect x="17.9294%" y="180" width="0.7535%" height="15" fill="rgb(229,88,8)" fg:x="2189" fg:w="92"/><text x="18.1794%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (72 samples, 0.59%)</title><rect x="18.6829%" y="180" width="0.5897%" height="15" fill="rgb(213,181,19)" fg:x="2281" fg:w="72"/><text x="18.9329%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (27 samples, 0.22%)</title><rect x="21.7708%" y="196" width="0.2211%" height="15" fill="rgb(254,191,54)" fg:x="2658" fg:w="27"/><text x="22.0208%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (361 samples, 2.96%)</title><rect x="19.2727%" y="180" width="2.9568%" height="15" fill="rgb(241,83,37)" fg:x="2353" fg:w="361"/><text x="19.5227%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.24%)</title><rect x="21.9920%" y="196" width="0.2375%" height="15" fill="rgb(233,36,39)" fg:x="2685" fg:w="29"/><text x="22.2420%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (261 samples, 2.14%)</title><rect x="22.2295%" y="180" width="2.1378%" height="15" fill="rgb(226,3,54)" fg:x="2714" fg:w="261"/><text x="22.4795%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (14 samples, 0.11%)</title><rect x="26.1610%" y="196" width="0.1147%" height="15" fill="rgb(245,192,40)" fg:x="3194" fg:w="14"/><text x="26.4110%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (99 samples, 0.81%)</title><rect x="26.2757%" y="196" width="0.8109%" height="15" fill="rgb(238,167,29)" fg:x="3208" fg:w="99"/><text x="26.5257%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (132 samples, 1.08%)</title><rect x="28.8558%" y="212" width="1.0812%" height="15" fill="rgb(232,182,51)" fg:x="3523" fg:w="132"/><text x="29.1058%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (103 samples, 0.84%)</title><rect x="31.4604%" y="228" width="0.8436%" height="15" fill="rgb(231,60,39)" fg:x="3841" fg:w="103"/><text x="31.7104%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,045 samples, 8.56%)</title><rect x="27.1521%" y="196" width="8.5593%" height="15" fill="rgb(208,69,12)" fg:x="3315" fg:w="1045"/><text x="27.4021%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (705 samples, 5.77%)</title><rect x="29.9369%" y="212" width="5.7744%" height="15" fill="rgb(235,93,37)" fg:x="3655" fg:w="705"/><text x="30.1869%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (416 samples, 3.41%)</title><rect x="32.3040%" y="228" width="3.4073%" height="15" fill="rgb(213,116,39)" fg:x="3944" fg:w="416"/><text x="32.5540%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (141 samples, 1.15%)</title><rect x="35.7114%" y="196" width="1.1549%" height="15" fill="rgb(222,207,29)" fg:x="4360" fg:w="141"/><text x="35.9614%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (15 samples, 0.12%)</title><rect x="37.7590%" y="212" width="0.1229%" height="15" fill="rgb(206,96,30)" fg:x="4610" fg:w="15"/><text x="38.0090%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (195 samples, 1.60%)</title><rect x="36.9318%" y="196" width="1.5972%" height="15" fill="rgb(218,138,4)" fg:x="4509" fg:w="195"/><text x="37.1818%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (79 samples, 0.65%)</title><rect x="37.8819%" y="212" width="0.6471%" height="15" fill="rgb(250,191,14)" fg:x="4625" fg:w="79"/><text x="38.1319%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (238 samples, 1.95%)</title><rect x="46.0890%" y="212" width="1.9494%" height="15" fill="rgb(239,60,40)" fg:x="5627" fg:w="238"/><text x="46.3390%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (17 samples, 0.14%)</title><rect x="48.0383%" y="212" width="0.1392%" height="15" fill="rgb(206,27,48)" fg:x="5865" fg:w="17"/><text x="48.2883%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (15 samples, 0.12%)</title><rect x="48.6772%" y="228" width="0.1229%" height="15" fill="rgb(225,35,8)" fg:x="5943" fg:w="15"/><text x="48.9272%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (205 samples, 1.68%)</title><rect x="48.1776%" y="212" width="1.6791%" height="15" fill="rgb(250,213,24)" fg:x="5882" fg:w="205"/><text x="48.4276%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (129 samples, 1.06%)</title><rect x="48.8001%" y="228" width="1.0566%" height="15" fill="rgb(247,123,22)" fg:x="5958" fg:w="129"/><text x="49.0501%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (23 samples, 0.19%)</title><rect x="50.7494%" y="228" width="0.1884%" height="15" fill="rgb(231,138,38)" fg:x="6196" fg:w="23"/><text x="50.9994%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.14%)</title><rect x="52.6087%" y="244" width="0.1392%" height="15" fill="rgb(231,145,46)" fg:x="6423" fg:w="17"/><text x="52.8587%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (478 samples, 3.92%)</title><rect x="50.9378%" y="228" width="3.9151%" height="15" fill="rgb(251,118,11)" fg:x="6219" fg:w="478"/><text x="51.1878%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (257 samples, 2.11%)</title><rect x="52.7480%" y="244" width="2.1050%" height="15" fill="rgb(217,147,25)" fg:x="6440" fg:w="257"/><text x="52.9980%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.25%)</title><rect x="54.6073%" y="260" width="0.2457%" height="15" fill="rgb(247,81,37)" fg:x="6667" fg:w="30"/><text x="54.8573%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (272 samples, 2.23%)</title><rect x="54.8530%" y="228" width="2.2279%" height="15" fill="rgb(209,12,38)" fg:x="6697" fg:w="272"/><text x="55.1030%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (121 samples, 0.99%)</title><rect x="57.0808%" y="228" width="0.9911%" height="15" fill="rgb(227,1,9)" fg:x="6969" fg:w="121"/><text x="57.3308%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (16 samples, 0.13%)</title><rect x="58.0719%" y="228" width="0.1311%" height="15" fill="rgb(248,47,43)" fg:x="7090" fg:w="16"/><text x="58.3219%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,046 samples, 8.57%)</title><rect x="49.8567%" y="212" width="8.5675%" height="15" fill="rgb(221,10,30)" fg:x="6087" fg:w="1046"/><text x="50.1067%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (27 samples, 0.22%)</title><rect x="58.2030%" y="228" width="0.2211%" height="15" fill="rgb(210,229,1)" fg:x="7106" fg:w="27"/><text x="58.4530%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (18 samples, 0.15%)</title><rect x="58.5060%" y="212" width="0.1474%" height="15" fill="rgb(222,148,37)" fg:x="7143" fg:w="18"/><text x="58.7560%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.16%)</title><rect x="59.3251%" y="228" width="0.1556%" height="15" fill="rgb(234,67,33)" fg:x="7243" fg:w="19"/><text x="59.5751%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (271 samples, 2.22%)</title><rect x="58.6535%" y="212" width="2.2197%" height="15" fill="rgb(247,98,35)" fg:x="7161" fg:w="271"/><text x="58.9035%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (170 samples, 1.39%)</title><rect x="59.4807%" y="228" width="1.3924%" height="15" fill="rgb(247,138,52)" fg:x="7262" fg:w="170"/><text x="59.7307%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.29%)</title><rect x="60.5865%" y="244" width="0.2867%" height="15" fill="rgb(213,79,30)" fg:x="7397" fg:w="35"/><text x="60.8365%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.11%)</title><rect x="62.0853%" y="228" width="0.1065%" height="15" fill="rgb(246,177,23)" fg:x="7580" fg:w="13"/><text x="62.3353%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.11%)</title><rect x="63.9201%" y="244" width="0.1065%" height="15" fill="rgb(230,62,27)" fg:x="7804" fg:w="13"/><text x="64.1701%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (444 samples, 3.64%)</title><rect x="60.8731%" y="212" width="3.6367%" height="15" fill="rgb(216,154,8)" fg:x="7432" fg:w="444"/><text x="61.1231%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (283 samples, 2.32%)</title><rect x="62.1918%" y="228" width="2.3180%" height="15" fill="rgb(244,35,45)" fg:x="7593" fg:w="283"/><text x="62.4418%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (59 samples, 0.48%)</title><rect x="64.0265%" y="244" width="0.4833%" height="15" fill="rgb(251,115,12)" fg:x="7817" fg:w="59"/><text x="64.2765%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (68 samples, 0.56%)</title><rect x="64.5098%" y="212" width="0.5570%" height="15" fill="rgb(240,54,50)" fg:x="7876" fg:w="68"/><text x="64.7598%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (152 samples, 1.24%)</title><rect x="65.0668%" y="212" width="1.2450%" height="15" fill="rgb(233,84,52)" fg:x="7944" fg:w="152"/><text x="65.3168%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (73 samples, 0.60%)</title><rect x="66.3117%" y="212" width="0.5979%" height="15" fill="rgb(207,117,47)" fg:x="8096" fg:w="73"/><text x="66.5617%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (23 samples, 0.19%)</title><rect x="66.9097%" y="212" width="0.1884%" height="15" fill="rgb(249,43,39)" fg:x="8169" fg:w="23"/><text x="67.1597%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,816 samples, 31.26%)</title><rect x="38.5290%" y="196" width="31.2556%" height="15" fill="rgb(209,38,44)" fg:x="4704" fg:w="3816"/><text x="38.7790%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (328 samples, 2.69%)</title><rect x="67.0980%" y="212" width="2.6865%" height="15" fill="rgb(236,212,23)" fg:x="8192" fg:w="328"/><text x="67.3480%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,607 samples, 45.93%)</title><rect x="24.3673%" y="180" width="45.9251%" height="15" fill="rgb(242,79,21)" fg:x="2975" fg:w="5607"/><text x="24.6173%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (62 samples, 0.51%)</title><rect x="69.7846%" y="196" width="0.5078%" height="15" fill="rgb(211,96,35)" fg:x="8520" fg:w="62"/><text x="70.0346%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (13 samples, 0.11%)</title><rect x="70.2924%" y="180" width="0.1065%" height="15" fill="rgb(253,215,40)" fg:x="8582" fg:w="13"/><text x="70.5424%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (78 samples, 0.64%)</title><rect x="71.5702%" y="196" width="0.6389%" height="15" fill="rgb(211,81,21)" fg:x="8738" fg:w="78"/><text x="71.8202%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (45 samples, 0.37%)</title><rect x="73.2001%" y="212" width="0.3686%" height="15" fill="rgb(208,190,38)" fg:x="8937" fg:w="45"/><text x="73.4501%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (621 samples, 5.09%)</title><rect x="70.4316%" y="180" width="5.0864%" height="15" fill="rgb(235,213,38)" fg:x="8599" fg:w="621"/><text x="70.6816%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (404 samples, 3.31%)</title><rect x="72.2090%" y="196" width="3.3090%" height="15" fill="rgb(237,122,38)" fg:x="8816" fg:w="404"/><text x="72.4590%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (238 samples, 1.95%)</title><rect x="73.5687%" y="212" width="1.9494%" height="15" fill="rgb(244,218,35)" fg:x="8982" fg:w="238"/><text x="73.8187%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (118 samples, 0.97%)</title><rect x="75.5181%" y="180" width="0.9665%" height="15" fill="rgb(240,68,47)" fg:x="9220" fg:w="118"/><text x="75.7681%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (52 samples, 0.43%)</title><rect x="76.0586%" y="196" width="0.4259%" height="15" fill="rgb(210,16,53)" fg:x="9286" fg:w="52"/><text x="76.3086%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (88 samples, 0.72%)</title><rect x="76.4846%" y="180" width="0.7208%" height="15" fill="rgb(235,124,12)" fg:x="9338" fg:w="88"/><text x="76.7346%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (56 samples, 0.46%)</title><rect x="76.7467%" y="196" width="0.4587%" height="15" fill="rgb(224,169,11)" fg:x="9370" fg:w="56"/><text x="76.9967%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (204 samples, 1.67%)</title><rect x="77.2053%" y="180" width="1.6709%" height="15" fill="rgb(250,166,2)" fg:x="9426" fg:w="204"/><text x="77.4553%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.19%)</title><rect x="78.6879%" y="196" width="0.1884%" height="15" fill="rgb(242,216,29)" fg:x="9607" fg:w="23"/><text x="78.9379%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (59 samples, 0.48%)</title><rect x="78.8762%" y="180" width="0.4833%" height="15" fill="rgb(230,116,27)" fg:x="9630" fg:w="59"/><text x="79.1262%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (99 samples, 0.81%)</title><rect x="79.3595%" y="180" width="0.8109%" height="15" fill="rgb(228,99,48)" fg:x="9689" fg:w="99"/><text x="79.6095%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.13%)</title><rect x="82.9962%" y="212" width="0.1311%" height="15" fill="rgb(253,11,6)" fg:x="10133" fg:w="16"/><text x="83.2462%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (140 samples, 1.15%)</title><rect x="82.1197%" y="196" width="1.1467%" height="15" fill="rgb(247,143,39)" fg:x="10026" fg:w="140"/><text x="82.3697%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.14%)</title><rect x="83.1272%" y="212" width="0.1392%" height="15" fill="rgb(236,97,10)" fg:x="10149" fg:w="17"/><text x="83.3772%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (389 samples, 3.19%)</title><rect x="80.1704%" y="180" width="3.1862%" height="15" fill="rgb(233,208,19)" fg:x="9788" fg:w="389"/><text x="80.4204%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (30 samples, 0.25%)</title><rect x="83.3565%" y="180" width="0.2457%" height="15" fill="rgb(216,164,2)" fg:x="10177" fg:w="30"/><text x="83.6065%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,528 samples, 78.04%)</title><rect x="5.7171%" y="164" width="78.0408%" height="15" fill="rgb(220,129,5)" fg:x="698" fg:w="9528"/><text x="5.9671%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__hash__ (kappybara/pattern.py:187) (13 samples, 0.11%)</title><rect x="84.4213%" y="180" width="0.1065%" height="15" fill="rgb(242,17,10)" fg:x="10307" fg:w="13"/><text x="84.6713%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (102 samples, 0.84%)</title><rect x="83.7579%" y="164" width="0.8354%" height="15" fill="rgb(242,107,0)" fg:x="10226" fg:w="102"/><text x="84.0079%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (144 samples, 1.18%)</title><rect x="84.6425%" y="164" width="1.1795%" height="15" fill="rgb(251,28,31)" fg:x="10334" fg:w="144"/><text x="84.8925%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,790 samples, 80.19%)</title><rect x="5.6843%" y="148" width="80.1867%" height="15" fill="rgb(233,223,10)" fg:x="694" fg:w="9790"/><text x="5.9343%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (19 samples, 0.16%)</title><rect x="85.9612%" y="164" width="0.1556%" height="15" fill="rgb(215,21,27)" fg:x="10495" fg:w="19"/><text x="86.2112%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (27 samples, 0.22%)</title><rect x="89.8763%" y="212" width="0.2211%" height="15" fill="rgb(232,23,21)" fg:x="10973" fg:w="27"/><text x="90.1263%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (138 samples, 1.13%)</title><rect x="90.0975%" y="212" width="1.1303%" height="15" fill="rgb(244,5,23)" fg:x="11000" fg:w="138"/><text x="90.3475%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (24 samples, 0.20%)</title><rect x="91.3261%" y="212" width="0.1966%" height="15" fill="rgb(226,81,46)" fg:x="11150" fg:w="24"/><text x="91.5761%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (708 samples, 5.80%)</title><rect x="86.1168%" y="164" width="5.7990%" height="15" fill="rgb(247,70,30)" fg:x="10514" fg:w="708"/><text x="86.3668%" y="174.50">create_..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (506 samples, 4.14%)</title><rect x="87.7713%" y="180" width="4.1445%" height="15" fill="rgb(212,68,19)" fg:x="10716" fg:w="506"/><text x="88.0213%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (452 samples, 3.70%)</title><rect x="88.2136%" y="196" width="3.7022%" height="15" fill="rgb(240,187,13)" fg:x="10770" fg:w="452"/><text x="88.4636%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (48 samples, 0.39%)</title><rect x="91.5226%" y="212" width="0.3932%" height="15" fill="rgb(223,113,26)" fg:x="11174" fg:w="48"/><text x="91.7726%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.12%)</title><rect x="93.3574%" y="180" width="0.1229%" height="15" fill="rgb(206,192,2)" fg:x="11398" fg:w="15"/><text x="93.6074%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.16%)</title><rect x="93.4802%" y="180" width="0.1556%" height="15" fill="rgb(241,108,4)" fg:x="11413" fg:w="19"/><text x="93.7302%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (147 samples, 1.20%)</title><rect x="93.8570%" y="180" width="1.2040%" height="15" fill="rgb(247,173,49)" fg:x="11459" fg:w="147"/><text x="94.1070%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (36 samples, 0.29%)</title><rect x="94.7662%" y="196" width="0.2949%" height="15" fill="rgb(224,114,35)" fg:x="11570" fg:w="36"/><text x="95.0162%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (145 samples, 1.19%)</title><rect x="95.0610%" y="180" width="1.1876%" height="15" fill="rgb(245,159,27)" fg:x="11606" fg:w="145"/><text x="95.3110%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (45 samples, 0.37%)</title><rect x="96.2487%" y="180" width="0.3686%" height="15" fill="rgb(245,172,44)" fg:x="11751" fg:w="45"/><text x="96.4987%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (194 samples, 1.59%)</title><rect x="96.6172%" y="180" width="1.5890%" height="15" fill="rgb(236,23,11)" fg:x="11796" fg:w="194"/><text x="96.8672%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (26 samples, 0.21%)</title><rect x="97.9933%" y="196" width="0.2130%" height="15" fill="rgb(205,117,38)" fg:x="11964" fg:w="26"/><text x="98.2433%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,578 samples, 12.92%)</title><rect x="85.8711%" y="148" width="12.9249%" height="15" fill="rgb(237,72,25)" fg:x="10484" fg:w="1578"/><text x="86.1211%" y="158.50">track_component (ka..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (833 samples, 6.82%)</title><rect x="91.9731%" y="164" width="6.8228%" height="15" fill="rgb(244,70,9)" fg:x="11229" fg:w="833"/><text x="92.2231%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:70) (72 samples, 0.59%)</title><rect x="98.2062%" y="180" width="0.5897%" height="15" fill="rgb(217,125,39)" fg:x="11990" fg:w="72"/><text x="98.4562%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (12,154 samples, 99.55%)</title><rect x="0.0410%" y="68" width="99.5495%" height="15" fill="rgb(235,36,10)" fg:x="5" fg:w="12154"/><text x="0.2910%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (12,139 samples, 99.43%)</title><rect x="0.1638%" y="84" width="99.4267%" height="15" fill="rgb(251,123,47)" fg:x="20" fg:w="12139"/><text x="0.4138%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (12,102 samples, 99.12%)</title><rect x="0.4669%" y="100" width="99.1236%" height="15" fill="rgb(221,13,13)" fg:x="57" fg:w="12102"/><text x="0.7169%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,471 samples, 93.96%)</title><rect x="5.6352%" y="116" width="93.9553%" height="15" fill="rgb(238,131,9)" fg:x="688" fg:w="11471"/><text x="5.8852%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,469 samples, 93.94%)</title><rect x="5.6516%" y="132" width="93.9389%" height="15" fill="rgb(211,50,8)" fg:x="690" fg:w="11469"/><text x="5.9016%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (86 samples, 0.70%)</title><rect x="98.8861%" y="148" width="0.7044%" height="15" fill="rgb(245,182,24)" fg:x="12073" fg:w="86"/><text x="99.1361%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (13 samples, 0.11%)</title><rect x="99.6724%" y="68" width="0.1065%" height="15" fill="rgb(242,14,37)" fg:x="12169" fg:w="13"/><text x="99.9224%" y="78.50"></text></g><g><title>all (12,209 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="12209"/><text x="0.2500%" y="62.50"></text></g></svg></svg>