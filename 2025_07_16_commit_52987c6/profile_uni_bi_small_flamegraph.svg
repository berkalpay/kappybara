<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 52987c6</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="12102"><g><title>n_embeddings (kappybara/rule.py:185) (14 samples, 0.12%)</title><rect x="0.1901%" y="180" width="0.1157%" height="15" fill="rgb(227,0,7)" fg:x="23" fg:w="14"/><text x="0.4401%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (60 samples, 0.50%)</title><rect x="0.0578%" y="84" width="0.4958%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="60"/><text x="0.3078%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (60 samples, 0.50%)</title><rect x="0.0578%" y="100" width="0.4958%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="60"/><text x="0.3078%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (55 samples, 0.45%)</title><rect x="0.0992%" y="116" width="0.4545%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="55"/><text x="0.3492%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (53 samples, 0.44%)</title><rect x="0.1157%" y="132" width="0.4379%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="53"/><text x="0.3657%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (53 samples, 0.44%)</title><rect x="0.1157%" y="148" width="0.4379%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="53"/><text x="0.3657%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (52 samples, 0.43%)</title><rect x="0.1239%" y="164" width="0.4297%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="52"/><text x="0.3739%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (15 samples, 0.12%)</title><rect x="0.6197%" y="116" width="0.1239%" height="15" fill="rgb(228,23,34)" fg:x="75" fg:w="15"/><text x="0.8697%" y="126.50"></text></g><g><title>select (kappybara/rule.py:218) (19 samples, 0.16%)</title><rect x="0.7850%" y="116" width="0.1570%" height="15" fill="rgb(218,30,26)" fg:x="95" fg:w="19"/><text x="1.0350%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (44 samples, 0.36%)</title><rect x="0.6032%" y="100" width="0.3636%" height="15" fill="rgb(220,122,19)" fg:x="73" fg:w="44"/><text x="0.8532%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (25 samples, 0.21%)</title><rect x="1.0246%" y="164" width="0.2066%" height="15" fill="rgb(250,228,42)" fg:x="124" fg:w="25"/><text x="1.2746%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (49 samples, 0.40%)</title><rect x="1.0164%" y="148" width="0.4049%" height="15" fill="rgb(240,193,28)" fg:x="123" fg:w="49"/><text x="1.2664%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (23 samples, 0.19%)</title><rect x="1.2312%" y="164" width="0.1901%" height="15" fill="rgb(216,20,37)" fg:x="149" fg:w="23"/><text x="1.4812%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (54 samples, 0.45%)</title><rect x="1.4791%" y="164" width="0.4462%" height="15" fill="rgb(206,188,39)" fg:x="179" fg:w="54"/><text x="1.7291%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (27 samples, 0.22%)</title><rect x="2.1319%" y="180" width="0.2231%" height="15" fill="rgb(217,207,13)" fg:x="258" fg:w="27"/><text x="2.3819%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (29 samples, 0.24%)</title><rect x="2.3550%" y="180" width="0.2396%" height="15" fill="rgb(231,73,38)" fg:x="285" fg:w="29"/><text x="2.6050%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (33 samples, 0.27%)</title><rect x="2.6772%" y="180" width="0.2727%" height="15" fill="rgb(225,20,46)" fg:x="324" fg:w="33"/><text x="2.9272%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (203 samples, 1.68%)</title><rect x="1.4213%" y="148" width="1.6774%" height="15" fill="rgb(210,31,41)" fg:x="172" fg:w="203"/><text x="1.6713%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (142 samples, 1.17%)</title><rect x="1.9253%" y="164" width="1.1734%" height="15" fill="rgb(221,200,47)" fg:x="233" fg:w="142"/><text x="2.1753%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (18 samples, 0.15%)</title><rect x="2.9499%" y="180" width="0.1487%" height="15" fill="rgb(226,26,5)" fg:x="357" fg:w="18"/><text x="3.1999%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (88 samples, 0.73%)</title><rect x="3.1482%" y="148" width="0.7272%" height="15" fill="rgb(249,33,26)" fg:x="381" fg:w="88"/><text x="3.3982%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (73 samples, 0.60%)</title><rect x="4.7926%" y="180" width="0.6032%" height="15" fill="rgb(235,183,28)" fg:x="580" fg:w="73"/><text x="5.0426%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (42 samples, 0.35%)</title><rect x="5.0488%" y="196" width="0.3471%" height="15" fill="rgb(221,5,38)" fg:x="611" fg:w="42"/><text x="5.2988%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (562 samples, 4.64%)</title><rect x="0.9916%" y="132" width="4.6439%" height="15" fill="rgb(247,18,42)" fg:x="120" fg:w="562"/><text x="1.2416%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (198 samples, 1.64%)</title><rect x="3.9993%" y="148" width="1.6361%" height="15" fill="rgb(241,131,45)" fg:x="484" fg:w="198"/><text x="4.2493%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (166 samples, 1.37%)</title><rect x="4.2638%" y="164" width="1.3717%" height="15" fill="rgb(249,31,29)" fg:x="516" fg:w="166"/><text x="4.5138%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (26 samples, 0.21%)</title><rect x="5.4206%" y="180" width="0.2148%" height="15" fill="rgb(225,111,53)" fg:x="656" fg:w="26"/><text x="5.6706%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (566 samples, 4.68%)</title><rect x="0.9668%" y="116" width="4.6769%" height="15" fill="rgb(238,160,17)" fg:x="117" fg:w="566"/><text x="1.2168%" y="126.50">apply..</text></g><g><title>embeddings (kappybara/pattern.py:261) (91 samples, 0.75%)</title><rect x="6.0651%" y="180" width="0.7519%" height="15" fill="rgb(214,148,48)" fg:x="734" fg:w="91"/><text x="6.3151%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (24 samples, 0.20%)</title><rect x="14.2208%" y="196" width="0.1983%" height="15" fill="rgb(232,36,49)" fg:x="1721" fg:w="24"/><text x="14.4708%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (952 samples, 7.87%)</title><rect x="6.8171%" y="180" width="7.8665%" height="15" fill="rgb(209,103,24)" fg:x="825" fg:w="952"/><text x="7.0671%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.26%)</title><rect x="14.4191%" y="196" width="0.2644%" height="15" fill="rgb(229,88,8)" fg:x="1745" fg:w="32"/><text x="14.6691%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (369 samples, 3.05%)</title><rect x="14.6835%" y="180" width="3.0491%" height="15" fill="rgb(213,181,19)" fg:x="1777" fg:w="369"/><text x="14.9335%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.24%)</title><rect x="17.4930%" y="196" width="0.2396%" height="15" fill="rgb(254,191,54)" fg:x="2117" fg:w="29"/><text x="17.7430%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (91 samples, 0.75%)</title><rect x="17.7326%" y="180" width="0.7519%" height="15" fill="rgb(241,83,37)" fg:x="2146" fg:w="91"/><text x="17.9826%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (74 samples, 0.61%)</title><rect x="18.4845%" y="180" width="0.6115%" height="15" fill="rgb(233,36,39)" fg:x="2237" fg:w="74"/><text x="18.7345%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.17%)</title><rect x="21.4593%" y="196" width="0.1653%" height="15" fill="rgb(226,3,54)" fg:x="2597" fg:w="20"/><text x="21.7093%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (337 samples, 2.78%)</title><rect x="19.0960%" y="180" width="2.7847%" height="15" fill="rgb(245,192,40)" fg:x="2311" fg:w="337"/><text x="19.3460%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.26%)</title><rect x="21.6245%" y="196" width="0.2562%" height="15" fill="rgb(238,167,29)" fg:x="2617" fg:w="31"/><text x="21.8745%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (270 samples, 2.23%)</title><rect x="21.8807%" y="180" width="2.2310%" height="15" fill="rgb(232,182,51)" fg:x="2648" fg:w="270"/><text x="22.1307%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (13 samples, 0.11%)</title><rect x="25.7478%" y="196" width="0.1074%" height="15" fill="rgb(231,60,39)" fg:x="3116" fg:w="13"/><text x="25.9978%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (92 samples, 0.76%)</title><rect x="25.8552%" y="196" width="0.7602%" height="15" fill="rgb(208,69,12)" fg:x="3129" fg:w="92"/><text x="26.1052%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (143 samples, 1.18%)</title><rect x="28.4664%" y="212" width="1.1816%" height="15" fill="rgb(235,93,37)" fg:x="3445" fg:w="143"/><text x="28.7164%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (91 samples, 0.75%)</title><rect x="31.1932%" y="228" width="0.7519%" height="15" fill="rgb(213,116,39)" fg:x="3775" fg:w="91"/><text x="31.4432%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,052 samples, 8.69%)</title><rect x="26.6402%" y="196" width="8.6928%" height="15" fill="rgb(222,207,29)" fg:x="3224" fg:w="1052"/><text x="26.8902%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (688 samples, 5.69%)</title><rect x="29.6480%" y="212" width="5.6850%" height="15" fill="rgb(206,96,30)" fg:x="3588" fg:w="688"/><text x="29.8980%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (410 samples, 3.39%)</title><rect x="31.9451%" y="228" width="3.3879%" height="15" fill="rgb(218,138,4)" fg:x="3866" fg:w="410"/><text x="32.1951%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (98 samples, 0.81%)</title><rect x="35.3330%" y="196" width="0.8098%" height="15" fill="rgb(250,191,14)" fg:x="4276" fg:w="98"/><text x="35.5830%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (171 samples, 1.41%)</title><rect x="36.2006%" y="196" width="1.4130%" height="15" fill="rgb(239,60,40)" fg:x="4381" fg:w="171"/><text x="36.4506%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (78 samples, 0.64%)</title><rect x="36.9691%" y="212" width="0.6445%" height="15" fill="rgb(206,27,48)" fg:x="4474" fg:w="78"/><text x="37.2191%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (201 samples, 1.66%)</title><rect x="45.6536%" y="212" width="1.6609%" height="15" fill="rgb(225,35,8)" fg:x="5525" fg:w="201"/><text x="45.9036%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (27 samples, 0.22%)</title><rect x="47.7359%" y="228" width="0.2231%" height="15" fill="rgb(250,213,24)" fg:x="5777" fg:w="27"/><text x="47.9859%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (167 samples, 1.38%)</title><rect x="47.3641%" y="212" width="1.3799%" height="15" fill="rgb(247,123,22)" fg:x="5732" fg:w="167"/><text x="47.6141%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (95 samples, 0.78%)</title><rect x="47.9590%" y="228" width="0.7850%" height="15" fill="rgb(231,138,38)" fg:x="5804" fg:w="95"/><text x="48.2090%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (28 samples, 0.23%)</title><rect x="49.7356%" y="228" width="0.2314%" height="15" fill="rgb(231,145,46)" fg:x="6019" fg:w="28"/><text x="49.9856%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.16%)</title><rect x="51.7353%" y="244" width="0.1570%" height="15" fill="rgb(251,118,11)" fg:x="6261" fg:w="19"/><text x="51.9853%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.12%)</title><rect x="53.8176%" y="260" width="0.1157%" height="15" fill="rgb(217,147,25)" fg:x="6513" fg:w="14"/><text x="54.0676%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (513 samples, 4.24%)</title><rect x="49.9669%" y="228" width="4.2390%" height="15" fill="rgb(247,81,37)" fg:x="6047" fg:w="513"/><text x="50.2169%" y="238.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (280 samples, 2.31%)</title><rect x="51.8922%" y="244" width="2.3137%" height="15" fill="rgb(209,12,38)" fg:x="6280" fg:w="280"/><text x="52.1422%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.27%)</title><rect x="53.9332%" y="260" width="0.2727%" height="15" fill="rgb(227,1,9)" fg:x="6527" fg:w="33"/><text x="54.1832%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (301 samples, 2.49%)</title><rect x="54.2059%" y="228" width="2.4872%" height="15" fill="rgb(248,47,43)" fg:x="6560" fg:w="301"/><text x="54.4559%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (109 samples, 0.90%)</title><rect x="56.6931%" y="228" width="0.9007%" height="15" fill="rgb(221,10,30)" fg:x="6861" fg:w="109"/><text x="56.9431%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,120 samples, 9.25%)</title><rect x="48.7440%" y="212" width="9.2547%" height="15" fill="rgb(210,229,1)" fg:x="5899" fg:w="1120"/><text x="48.9940%" y="222.50">embeds_in (ka..</text></g><g><title>coupled (kappybara/pattern.py:66) (38 samples, 0.31%)</title><rect x="57.6847%" y="228" width="0.3140%" height="15" fill="rgb(222,148,37)" fg:x="6981" fg:w="38"/><text x="57.9347%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (23 samples, 0.19%)</title><rect x="58.0813%" y="212" width="0.1901%" height="15" fill="rgb(234,67,33)" fg:x="7029" fg:w="23"/><text x="58.3313%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (22 samples, 0.18%)</title><rect x="58.9407%" y="228" width="0.1818%" height="15" fill="rgb(247,98,35)" fg:x="7133" fg:w="22"/><text x="59.1907%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (289 samples, 2.39%)</title><rect x="58.2714%" y="212" width="2.3880%" height="15" fill="rgb(247,138,52)" fg:x="7052" fg:w="289"/><text x="58.5214%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (186 samples, 1.54%)</title><rect x="59.1225%" y="228" width="1.5369%" height="15" fill="rgb(213,79,30)" fg:x="7155" fg:w="186"/><text x="59.3725%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.17%)</title><rect x="60.4859%" y="244" width="0.1735%" height="15" fill="rgb(246,177,23)" fg:x="7320" fg:w="21"/><text x="60.7359%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.14%)</title><rect x="63.8903%" y="244" width="0.1405%" height="15" fill="rgb(230,62,27)" fg:x="7732" fg:w="17"/><text x="64.1403%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (439 samples, 3.63%)</title><rect x="60.6594%" y="212" width="3.6275%" height="15" fill="rgb(216,154,8)" fg:x="7341" fg:w="439"/><text x="60.9094%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (274 samples, 2.26%)</title><rect x="62.0228%" y="228" width="2.2641%" height="15" fill="rgb(244,35,45)" fg:x="7506" fg:w="274"/><text x="62.2728%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.26%)</title><rect x="64.0307%" y="244" width="0.2562%" height="15" fill="rgb(251,115,12)" fg:x="7749" fg:w="31"/><text x="64.2807%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (70 samples, 0.58%)</title><rect x="64.2869%" y="212" width="0.5784%" height="15" fill="rgb(240,54,50)" fg:x="7780" fg:w="70"/><text x="64.5369%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (171 samples, 1.41%)</title><rect x="64.8818%" y="212" width="1.4130%" height="15" fill="rgb(233,84,52)" fg:x="7852" fg:w="171"/><text x="65.1318%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (80 samples, 0.66%)</title><rect x="66.2948%" y="212" width="0.6610%" height="15" fill="rgb(207,117,47)" fg:x="8023" fg:w="80"/><text x="66.5448%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (16 samples, 0.13%)</title><rect x="66.9559%" y="212" width="0.1322%" height="15" fill="rgb(249,43,39)" fg:x="8103" fg:w="16"/><text x="67.2059%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,841 samples, 31.74%)</title><rect x="37.6136%" y="196" width="31.7386%" height="15" fill="rgb(209,38,44)" fg:x="4552" fg:w="3841"/><text x="37.8636%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (274 samples, 2.26%)</title><rect x="67.0881%" y="212" width="2.2641%" height="15" fill="rgb(236,212,23)" fg:x="8119" fg:w="274"/><text x="67.3381%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,536 samples, 45.74%)</title><rect x="24.1117%" y="180" width="45.7445%" height="15" fill="rgb(242,79,21)" fg:x="2918" fg:w="5536"/><text x="24.3617%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (61 samples, 0.50%)</title><rect x="69.3522%" y="196" width="0.5040%" height="15" fill="rgb(211,96,35)" fg:x="8393" fg:w="61"/><text x="69.6022%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (59 samples, 0.49%)</title><rect x="71.1287%" y="196" width="0.4875%" height="15" fill="rgb(253,215,40)" fg:x="8608" fg:w="59"/><text x="71.3787%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (52 samples, 0.43%)</title><rect x="72.6657%" y="212" width="0.4297%" height="15" fill="rgb(211,81,21)" fg:x="8794" fg:w="52"/><text x="72.9157%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (637 samples, 5.26%)</title><rect x="69.9471%" y="180" width="5.2636%" height="15" fill="rgb(208,190,38)" fg:x="8465" fg:w="637"/><text x="70.1971%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (435 samples, 3.59%)</title><rect x="71.6163%" y="196" width="3.5944%" height="15" fill="rgb(235,213,38)" fg:x="8667" fg:w="435"/><text x="71.8663%" y="206.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (256 samples, 2.12%)</title><rect x="73.0954%" y="212" width="2.1154%" height="15" fill="rgb(237,122,38)" fg:x="8846" fg:w="256"/><text x="73.3454%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (118 samples, 0.98%)</title><rect x="75.2107%" y="180" width="0.9750%" height="15" fill="rgb(244,218,35)" fg:x="9102" fg:w="118"/><text x="75.4607%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (40 samples, 0.33%)</title><rect x="75.8552%" y="196" width="0.3305%" height="15" fill="rgb(240,68,47)" fg:x="9180" fg:w="40"/><text x="76.1052%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (79 samples, 0.65%)</title><rect x="76.1858%" y="180" width="0.6528%" height="15" fill="rgb(210,16,53)" fg:x="9220" fg:w="79"/><text x="76.4358%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (38 samples, 0.31%)</title><rect x="76.5245%" y="196" width="0.3140%" height="15" fill="rgb(235,124,12)" fg:x="9261" fg:w="38"/><text x="76.7745%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (185 samples, 1.53%)</title><rect x="76.8385%" y="180" width="1.5287%" height="15" fill="rgb(224,169,11)" fg:x="9299" fg:w="185"/><text x="77.0885%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.16%)</title><rect x="78.2102%" y="196" width="0.1570%" height="15" fill="rgb(250,166,2)" fg:x="9465" fg:w="19"/><text x="78.4602%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (76 samples, 0.63%)</title><rect x="78.3672%" y="180" width="0.6280%" height="15" fill="rgb(242,216,29)" fg:x="9484" fg:w="76"/><text x="78.6172%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (92 samples, 0.76%)</title><rect x="78.9952%" y="180" width="0.7602%" height="15" fill="rgb(230,116,27)" fg:x="9560" fg:w="92"/><text x="79.2452%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (120 samples, 0.99%)</title><rect x="81.7633%" y="196" width="0.9916%" height="15" fill="rgb(228,99,48)" fg:x="9895" fg:w="120"/><text x="82.0133%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.12%)</title><rect x="82.6392%" y="212" width="0.1157%" height="15" fill="rgb(253,11,6)" fg:x="10001" fg:w="14"/><text x="82.8892%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (384 samples, 3.17%)</title><rect x="79.7554%" y="180" width="3.1730%" height="15" fill="rgb(247,143,39)" fg:x="9652" fg:w="384"/><text x="80.0054%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (37 samples, 0.31%)</title><rect x="82.9367%" y="180" width="0.3057%" height="15" fill="rgb(236,97,10)" fg:x="10037" fg:w="37"/><text x="83.1867%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,385 samples, 77.55%)</title><rect x="5.8007%" y="164" width="77.5492%" height="15" fill="rgb(233,208,19)" fg:x="702" fg:w="9385"/><text x="6.0507%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (88 samples, 0.73%)</title><rect x="83.3499%" y="164" width="0.7272%" height="15" fill="rgb(216,164,2)" fg:x="10087" fg:w="88"/><text x="83.5999%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (13 samples, 0.11%)</title><rect x="83.9696%" y="180" width="0.1074%" height="15" fill="rgb(220,129,5)" fg:x="10162" fg:w="13"/><text x="84.2196%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (128 samples, 1.06%)</title><rect x="84.1183%" y="164" width="1.0577%" height="15" fill="rgb(242,17,10)" fg:x="10180" fg:w="128"/><text x="84.3683%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,618 samples, 79.47%)</title><rect x="5.7263%" y="148" width="79.4745%" height="15" fill="rgb(242,107,0)" fg:x="693" fg:w="9618"/><text x="5.9763%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (21 samples, 0.17%)</title><rect x="85.3000%" y="164" width="0.1735%" height="15" fill="rgb(251,28,31)" fg:x="10323" fg:w="21"/><text x="85.5500%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (46 samples, 0.38%)</title><rect x="89.2993%" y="212" width="0.3801%" height="15" fill="rgb(233,223,10)" fg:x="10807" fg:w="46"/><text x="89.5493%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (130 samples, 1.07%)</title><rect x="89.6794%" y="212" width="1.0742%" height="15" fill="rgb(215,21,27)" fg:x="10853" fg:w="130"/><text x="89.9294%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.12%)</title><rect x="90.6379%" y="228" width="0.1157%" height="15" fill="rgb(232,23,21)" fg:x="10969" fg:w="14"/><text x="90.8879%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:104) (17 samples, 0.14%)</title><rect x="90.7536%" y="212" width="0.1405%" height="15" fill="rgb(244,5,23)" fg:x="10983" fg:w="17"/><text x="91.0036%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (34 samples, 0.28%)</title><rect x="90.8941%" y="212" width="0.2809%" height="15" fill="rgb(226,81,46)" fg:x="11000" fg:w="34"/><text x="91.1441%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (742 samples, 6.13%)</title><rect x="85.4735%" y="164" width="6.1312%" height="15" fill="rgb(247,70,30)" fg:x="10344" fg:w="742"/><text x="85.7235%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (557 samples, 4.60%)</title><rect x="87.0021%" y="180" width="4.6025%" height="15" fill="rgb(212,68,19)" fg:x="10529" fg:w="557"/><text x="87.2521%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (490 samples, 4.05%)</title><rect x="87.5558%" y="196" width="4.0489%" height="15" fill="rgb(240,187,13)" fg:x="10596" fg:w="490"/><text x="87.8058%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (52 samples, 0.43%)</title><rect x="91.1750%" y="212" width="0.4297%" height="15" fill="rgb(223,113,26)" fg:x="11034" fg:w="52"/><text x="91.4250%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="93.1003%" y="180" width="0.1074%" height="15" fill="rgb(206,192,2)" fg:x="11267" fg:w="13"/><text x="93.3503%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (127 samples, 1.05%)</title><rect x="93.5135%" y="180" width="1.0494%" height="15" fill="rgb(241,108,4)" fg:x="11317" fg:w="127"/><text x="93.7635%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (19 samples, 0.16%)</title><rect x="94.4059%" y="196" width="0.1570%" height="15" fill="rgb(247,173,49)" fg:x="11425" fg:w="19"/><text x="94.6559%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (169 samples, 1.40%)</title><rect x="94.5629%" y="180" width="1.3965%" height="15" fill="rgb(224,114,35)" fg:x="11444" fg:w="169"/><text x="94.8129%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (18 samples, 0.15%)</title><rect x="95.8106%" y="196" width="0.1487%" height="15" fill="rgb(245,159,27)" fg:x="11595" fg:w="18"/><text x="96.0606%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (44 samples, 0.36%)</title><rect x="95.9593%" y="180" width="0.3636%" height="15" fill="rgb(245,172,44)" fg:x="11613" fg:w="44"/><text x="96.2093%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (18 samples, 0.15%)</title><rect x="97.6037%" y="196" width="0.1487%" height="15" fill="rgb(236,23,11)" fg:x="11812" fg:w="18"/><text x="97.8537%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (190 samples, 1.57%)</title><rect x="96.3229%" y="180" width="1.5700%" height="15" fill="rgb(205,117,38)" fg:x="11657" fg:w="190"/><text x="96.5729%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (17 samples, 0.14%)</title><rect x="97.7524%" y="196" width="0.1405%" height="15" fill="rgb(237,72,25)" fg:x="11830" fg:w="17"/><text x="98.0024%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,618 samples, 13.37%)</title><rect x="85.2008%" y="148" width="13.3697%" height="15" fill="rgb(244,70,9)" fg:x="10311" fg:w="1618"/><text x="85.4508%" y="158.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (839 samples, 6.93%)</title><rect x="91.6377%" y="164" width="6.9327%" height="15" fill="rgb(217,125,39)" fg:x="11090" fg:w="839"/><text x="91.8877%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:70) (82 samples, 0.68%)</title><rect x="97.8929%" y="180" width="0.6776%" height="15" fill="rgb(235,36,10)" fg:x="11847" fg:w="82"/><text x="98.1429%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (11,918 samples, 98.48%)</title><rect x="0.9668%" y="100" width="98.4796%" height="15" fill="rgb(251,123,47)" fg:x="117" fg:w="11918"/><text x="1.2168%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,348 samples, 93.77%)</title><rect x="5.6767%" y="116" width="93.7696%" height="15" fill="rgb(221,13,13)" fg:x="687" fg:w="11348"/><text x="5.9267%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,347 samples, 93.76%)</title><rect x="5.6850%" y="132" width="93.7614%" height="15" fill="rgb(238,131,9)" fg:x="688" fg:w="11347"/><text x="5.9350%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (98 samples, 0.81%)</title><rect x="98.6366%" y="148" width="0.8098%" height="15" fill="rgb(211,50,8)" fg:x="11937" fg:w="98"/><text x="98.8866%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (12,030 samples, 99.41%)</title><rect x="0.0578%" y="68" width="99.4051%" height="15" fill="rgb(245,182,24)" fg:x="7" fg:w="12030"/><text x="0.3078%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,970 samples, 98.91%)</title><rect x="0.5536%" y="84" width="98.9093%" height="15" fill="rgb(242,14,37)" fg:x="67" fg:w="11970"/><text x="0.8036%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (13 samples, 0.11%)</title><rect x="99.4712%" y="260" width="0.1074%" height="15" fill="rgb(246,228,12)" fg:x="12038" fg:w="13"/><text x="99.7212%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (13 samples, 0.11%)</title><rect x="99.4712%" y="276" width="0.1074%" height="15" fill="rgb(213,55,15)" fg:x="12038" fg:w="13"/><text x="99.7212%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (13 samples, 0.11%)</title><rect x="99.4712%" y="292" width="0.1074%" height="15" fill="rgb(209,9,3)" fg:x="12038" fg:w="13"/><text x="99.7212%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (17 samples, 0.14%)</title><rect x="99.4629%" y="68" width="0.1405%" height="15" fill="rgb(230,59,30)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (17 samples, 0.14%)</title><rect x="99.4629%" y="84" width="0.1405%" height="15" fill="rgb(209,121,21)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (17 samples, 0.14%)</title><rect x="99.4629%" y="100" width="0.1405%" height="15" fill="rgb(220,109,13)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (17 samples, 0.14%)</title><rect x="99.4629%" y="116" width="0.1405%" height="15" fill="rgb(232,18,1)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (17 samples, 0.14%)</title><rect x="99.4629%" y="132" width="0.1405%" height="15" fill="rgb(215,41,42)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.14%)</title><rect x="99.4629%" y="148" width="0.1405%" height="15" fill="rgb(224,123,36)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (17 samples, 0.14%)</title><rect x="99.4629%" y="164" width="0.1405%" height="15" fill="rgb(240,125,3)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (17 samples, 0.14%)</title><rect x="99.4629%" y="180" width="0.1405%" height="15" fill="rgb(205,98,50)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (17 samples, 0.14%)</title><rect x="99.4629%" y="196" width="0.1405%" height="15" fill="rgb(205,185,37)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (17 samples, 0.14%)</title><rect x="99.4629%" y="212" width="0.1405%" height="15" fill="rgb(238,207,15)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (17 samples, 0.14%)</title><rect x="99.4629%" y="228" width="0.1405%" height="15" fill="rgb(213,199,42)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.14%)</title><rect x="99.4629%" y="244" width="0.1405%" height="15" fill="rgb(235,201,11)" fg:x="12037" fg:w="17"/><text x="99.7129%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (17 samples, 0.14%)</title><rect x="99.6034%" y="68" width="0.1405%" height="15" fill="rgb(207,46,11)" fg:x="12054" fg:w="17"/><text x="99.8534%" y="78.50"></text></g><g><title>all (12,102 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="12102"/><text x="0.2500%" y="62.50"></text></g></svg></svg>