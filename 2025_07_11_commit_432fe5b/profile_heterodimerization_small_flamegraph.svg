<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 432fe5b</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="8098"><g><title>&lt;module&gt; (kappybara/grammar.py:35) (9 samples, 0.11%)</title><rect x="0.0494%" y="260" width="0.1111%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="9"/><text x="0.2994%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (9 samples, 0.11%)</title><rect x="0.0494%" y="276" width="0.1111%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="9"/><text x="0.2994%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (9 samples, 0.11%)</title><rect x="0.0494%" y="292" width="0.1111%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="9"/><text x="0.2994%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (14 samples, 0.17%)</title><rect x="0.0000%" y="68" width="0.1729%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="14"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.17%)</title><rect x="0.0000%" y="84" width="0.1729%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="14"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.17%)</title><rect x="0.0000%" y="100" width="0.1729%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="14"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.17%)</title><rect x="0.0000%" y="116" width="0.1729%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="14"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.17%)</title><rect x="0.0000%" y="132" width="0.1729%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="14"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.17%)</title><rect x="0.0000%" y="148" width="0.1729%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="14"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.12%)</title><rect x="0.0494%" y="164" width="0.1235%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="10"/><text x="0.2994%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.12%)</title><rect x="0.0494%" y="180" width="0.1235%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="10"/><text x="0.2994%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.12%)</title><rect x="0.0494%" y="196" width="0.1235%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="10"/><text x="0.2994%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.12%)</title><rect x="0.0494%" y="212" width="0.1235%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="10"/><text x="0.2994%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.12%)</title><rect x="0.0494%" y="228" width="0.1235%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="10"/><text x="0.2994%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.12%)</title><rect x="0.0494%" y="244" width="0.1235%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="10"/><text x="0.2994%" y="254.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (10 samples, 0.12%)</title><rect x="0.1729%" y="68" width="0.1235%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="10"/><text x="0.4229%" y="78.50"></text></g><g><title>act (kappybara/system.py:63) (11 samples, 0.14%)</title><rect x="0.3828%" y="100" width="0.1358%" height="15" fill="rgb(225,20,46)" fg:x="31" fg:w="11"/><text x="0.6328%" y="110.50"></text></g><g><title>select (kappybara/rule.py:90) (10 samples, 0.12%)</title><rect x="0.3952%" y="116" width="0.1235%" height="15" fill="rgb(210,31,41)" fg:x="32" fg:w="10"/><text x="0.6452%" y="126.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (9 samples, 0.11%)</title><rect x="0.5186%" y="116" width="0.1111%" height="15" fill="rgb(221,200,47)" fg:x="42" fg:w="9"/><text x="0.7686%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (42 samples, 0.52%)</title><rect x="1.0249%" y="180" width="0.5186%" height="15" fill="rgb(226,26,5)" fg:x="83" fg:w="42"/><text x="1.2749%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.20%)</title><rect x="8.0143%" y="196" width="0.1976%" height="15" fill="rgb(249,33,26)" fg:x="649" fg:w="16"/><text x="8.2643%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (561 samples, 6.93%)</title><rect x="1.5436%" y="180" width="6.9276%" height="15" fill="rgb(235,183,28)" fg:x="125" fg:w="561"/><text x="1.7936%" y="190.50">embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.26%)</title><rect x="8.2119%" y="196" width="0.2593%" height="15" fill="rgb(221,5,38)" fg:x="665" fg:w="21"/><text x="8.4619%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (195 samples, 2.41%)</title><rect x="8.4712%" y="180" width="2.4080%" height="15" fill="rgb(247,18,42)" fg:x="686" fg:w="195"/><text x="8.7212%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.22%)</title><rect x="10.6570%" y="196" width="0.2223%" height="15" fill="rgb(241,131,45)" fg:x="863" fg:w="18"/><text x="10.9070%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (43 samples, 0.53%)</title><rect x="10.8792%" y="180" width="0.5310%" height="15" fill="rgb(249,31,29)" fg:x="881" fg:w="43"/><text x="11.1292%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (32 samples, 0.40%)</title><rect x="11.4102%" y="180" width="0.3952%" height="15" fill="rgb(225,111,53)" fg:x="924" fg:w="32"/><text x="11.6602%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.16%)</title><rect x="13.3613%" y="196" width="0.1605%" height="15" fill="rgb(238,160,17)" fg:x="1082" fg:w="13"/><text x="13.6113%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (147 samples, 1.82%)</title><rect x="11.8054%" y="180" width="1.8153%" height="15" fill="rgb(214,148,48)" fg:x="956" fg:w="147"/><text x="12.0554%" y="190.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:271) (150 samples, 1.85%)</title><rect x="13.6206%" y="180" width="1.8523%" height="15" fill="rgb(232,36,49)" fg:x="1103" fg:w="150"/><text x="13.8706%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (9 samples, 0.11%)</title><rect x="16.9054%" y="196" width="0.1111%" height="15" fill="rgb(209,103,24)" fg:x="1369" fg:w="9"/><text x="17.1554%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (40 samples, 0.49%)</title><rect x="17.0165%" y="196" width="0.4939%" height="15" fill="rgb(229,88,8)" fg:x="1378" fg:w="40"/><text x="17.2665%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (60 samples, 0.74%)</title><rect x="18.7083%" y="212" width="0.7409%" height="15" fill="rgb(213,181,19)" fg:x="1515" fg:w="60"/><text x="18.9583%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (51 samples, 0.63%)</title><rect x="20.7335%" y="228" width="0.6298%" height="15" fill="rgb(254,191,54)" fg:x="1679" fg:w="51"/><text x="20.9835%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (555 samples, 6.85%)</title><rect x="17.5228%" y="196" width="6.8535%" height="15" fill="rgb(241,83,37)" fg:x="1419" fg:w="555"/><text x="17.7728%" y="206.50">embeds_in..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (399 samples, 4.93%)</title><rect x="19.4492%" y="212" width="4.9271%" height="15" fill="rgb(233,36,39)" fg:x="1575" fg:w="399"/><text x="19.6992%" y="222.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:113) (244 samples, 3.01%)</title><rect x="21.3633%" y="228" width="3.0131%" height="15" fill="rgb(226,3,54)" fg:x="1730" fg:w="244"/><text x="21.6133%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (74 samples, 0.91%)</title><rect x="24.3764%" y="196" width="0.9138%" height="15" fill="rgb(245,192,40)" fg:x="1974" fg:w="74"/><text x="24.6264%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (43 samples, 0.53%)</title><rect x="26.0435%" y="212" width="0.5310%" height="15" fill="rgb(238,167,29)" fg:x="2109" fg:w="43"/><text x="26.2935%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (130 samples, 1.61%)</title><rect x="25.3643%" y="196" width="1.6053%" height="15" fill="rgb(232,182,51)" fg:x="2054" fg:w="130"/><text x="25.6143%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (32 samples, 0.40%)</title><rect x="26.5745%" y="212" width="0.3952%" height="15" fill="rgb(231,60,39)" fg:x="2152" fg:w="32"/><text x="26.8245%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (106 samples, 1.31%)</title><rect x="32.2672%" y="212" width="1.3090%" height="15" fill="rgb(208,69,12)" fg:x="2613" fg:w="106"/><text x="32.5172%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (11 samples, 0.14%)</title><rect x="33.8355%" y="228" width="0.1358%" height="15" fill="rgb(235,93,37)" fg:x="2740" fg:w="11"/><text x="34.0855%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (85 samples, 1.05%)</title><rect x="33.6256%" y="212" width="1.0496%" height="15" fill="rgb(213,116,39)" fg:x="2723" fg:w="85"/><text x="33.8756%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (57 samples, 0.70%)</title><rect x="33.9714%" y="228" width="0.7039%" height="15" fill="rgb(222,207,29)" fg:x="2751" fg:w="57"/><text x="34.2214%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (11 samples, 0.14%)</title><rect x="35.5149%" y="228" width="0.1358%" height="15" fill="rgb(206,96,30)" fg:x="2876" fg:w="11"/><text x="35.7649%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:59) (262 samples, 3.24%)</title><rect x="35.6508%" y="228" width="3.2354%" height="15" fill="rgb(218,138,4)" fg:x="2887" fg:w="262"/><text x="35.9008%" y="238.50">bou..</text></g><g><title>__eq__ (kappybara/utils.py:33) (135 samples, 1.67%)</title><rect x="37.2191%" y="244" width="1.6671%" height="15" fill="rgb(250,191,14)" fg:x="3014" fg:w="135"/><text x="37.4691%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.22%)</title><rect x="38.6639%" y="260" width="0.2223%" height="15" fill="rgb(239,60,40)" fg:x="3131" fg:w="18"/><text x="38.9139%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (146 samples, 1.80%)</title><rect x="38.8861%" y="228" width="1.8029%" height="15" fill="rgb(206,27,48)" fg:x="3149" fg:w="146"/><text x="39.1361%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (53 samples, 0.65%)</title><rect x="40.6891%" y="228" width="0.6545%" height="15" fill="rgb(225,35,8)" fg:x="3295" fg:w="53"/><text x="40.9391%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (578 samples, 7.14%)</title><rect x="34.6752%" y="212" width="7.1376%" height="15" fill="rgb(250,213,24)" fg:x="2808" fg:w="578"/><text x="34.9252%" y="222.50">embeds_in ..</text></g><g><title>coupled (kappybara/pattern.py:66) (32 samples, 0.40%)</title><rect x="41.4176%" y="228" width="0.3952%" height="15" fill="rgb(247,123,22)" fg:x="3354" fg:w="32"/><text x="41.6676%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (11 samples, 0.14%)</title><rect x="41.8498%" y="212" width="0.1358%" height="15" fill="rgb(231,138,38)" fg:x="3389" fg:w="11"/><text x="42.0998%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (63 samples, 0.78%)</title><rect x="41.9857%" y="212" width="0.7780%" height="15" fill="rgb(231,145,46)" fg:x="3400" fg:w="63"/><text x="42.2357%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (31 samples, 0.38%)</title><rect x="42.3808%" y="228" width="0.3828%" height="15" fill="rgb(251,118,11)" fg:x="3432" fg:w="31"/><text x="42.6308%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (72 samples, 0.89%)</title><rect x="42.7636%" y="212" width="0.8891%" height="15" fill="rgb(217,147,25)" fg:x="3463" fg:w="72"/><text x="43.0136%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (43 samples, 0.53%)</title><rect x="43.1218%" y="228" width="0.5310%" height="15" fill="rgb(247,81,37)" fg:x="3492" fg:w="43"/><text x="43.3718%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (16 samples, 0.20%)</title><rect x="43.6528%" y="212" width="0.1976%" height="15" fill="rgb(209,12,38)" fg:x="3535" fg:w="16"/><text x="43.9028%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (52 samples, 0.64%)</title><rect x="43.8503%" y="212" width="0.6421%" height="15" fill="rgb(227,1,9)" fg:x="3551" fg:w="52"/><text x="44.1003%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (13 samples, 0.16%)</title><rect x="44.4925%" y="212" width="0.1605%" height="15" fill="rgb(248,47,43)" fg:x="3603" fg:w="13"/><text x="44.7425%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,556 samples, 19.21%)</title><rect x="26.9696%" y="196" width="19.2146%" height="15" fill="rgb(221,10,30)" fg:x="2184" fg:w="1556"/><text x="27.2196%" y="206.50">embeds_in (kappybara/pattern.p..</text></g><g><title>sites (kappybara/pattern.py:113) (121 samples, 1.49%)</title><rect x="44.6900%" y="212" width="1.4942%" height="15" fill="rgb(210,229,1)" fg:x="3619" fg:w="121"/><text x="44.9400%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (2,524 samples, 31.17%)</title><rect x="15.4730%" y="180" width="31.1682%" height="15" fill="rgb(222,148,37)" fg:x="1253" fg:w="2524"/><text x="15.7230%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (37 samples, 0.46%)</title><rect x="46.1842%" y="196" width="0.4569%" height="15" fill="rgb(234,67,33)" fg:x="3740" fg:w="37"/><text x="46.4342%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (37 samples, 0.46%)</title><rect x="47.4809%" y="196" width="0.4569%" height="15" fill="rgb(247,98,35)" fg:x="3845" fg:w="37"/><text x="47.7309%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (22 samples, 0.27%)</title><rect x="48.6169%" y="212" width="0.2717%" height="15" fill="rgb(247,138,52)" fg:x="3937" fg:w="22"/><text x="48.8669%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (283 samples, 3.49%)</title><rect x="46.6905%" y="180" width="3.4947%" height="15" fill="rgb(213,79,30)" fg:x="3781" fg:w="283"/><text x="46.9405%" y="190.50">emb..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (182 samples, 2.25%)</title><rect x="47.9378%" y="196" width="2.2475%" height="15" fill="rgb(246,177,23)" fg:x="3882" fg:w="182"/><text x="48.1878%" y="206.50">_..</text></g><g><title>sites (kappybara/pattern.py:113) (105 samples, 1.30%)</title><rect x="48.8886%" y="212" width="1.2966%" height="15" fill="rgb(230,62,27)" fg:x="3959" fg:w="105"/><text x="49.1386%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (50 samples, 0.62%)</title><rect x="50.1852%" y="180" width="0.6174%" height="15" fill="rgb(216,154,8)" fg:x="4064" fg:w="50"/><text x="50.4352%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (20 samples, 0.25%)</title><rect x="50.5557%" y="196" width="0.2470%" height="15" fill="rgb(244,35,45)" fg:x="4094" fg:w="20"/><text x="50.8057%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (10 samples, 0.12%)</title><rect x="50.9509%" y="196" width="0.1235%" height="15" fill="rgb(251,115,12)" fg:x="4126" fg:w="10"/><text x="51.2009%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (49 samples, 0.61%)</title><rect x="50.8027%" y="180" width="0.6051%" height="15" fill="rgb(240,54,50)" fg:x="4114" fg:w="49"/><text x="51.0527%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (27 samples, 0.33%)</title><rect x="51.0743%" y="196" width="0.3334%" height="15" fill="rgb(233,84,52)" fg:x="4136" fg:w="27"/><text x="51.3243%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (73 samples, 0.90%)</title><rect x="51.4078%" y="180" width="0.9015%" height="15" fill="rgb(207,117,47)" fg:x="4163" fg:w="73"/><text x="51.6578%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (14 samples, 0.17%)</title><rect x="52.3092%" y="180" width="0.1729%" height="15" fill="rgb(249,43,39)" fg:x="4236" fg:w="14"/><text x="52.5592%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (31 samples, 0.38%)</title><rect x="52.4821%" y="180" width="0.3828%" height="15" fill="rgb(209,38,44)" fg:x="4250" fg:w="31"/><text x="52.7321%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (42 samples, 0.52%)</title><rect x="53.7540%" y="196" width="0.5186%" height="15" fill="rgb(236,212,23)" fg:x="4353" fg:w="42"/><text x="54.0040%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (118 samples, 1.46%)</title><rect x="52.8649%" y="180" width="1.4571%" height="15" fill="rgb(242,79,21)" fg:x="4281" fg:w="118"/><text x="53.1149%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (26 samples, 0.32%)</title><rect x="54.3344%" y="180" width="0.3211%" height="15" fill="rgb(211,96,35)" fg:x="4400" fg:w="26"/><text x="54.5844%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (29 samples, 0.36%)</title><rect x="54.6555%" y="180" width="0.3581%" height="15" fill="rgb(253,215,40)" fg:x="4426" fg:w="29"/><text x="54.9055%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (4,403 samples, 54.37%)</title><rect x="0.7409%" y="164" width="54.3714%" height="15" fill="rgb(211,81,21)" fg:x="60" fg:w="4403"/><text x="0.9909%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__hash__ (kappybara/pattern.py:187) (11 samples, 0.14%)</title><rect x="55.9274%" y="180" width="0.1358%" height="15" fill="rgb(208,190,38)" fg:x="4529" fg:w="11"/><text x="56.1774%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (89 samples, 1.10%)</title><rect x="55.1124%" y="164" width="1.0990%" height="15" fill="rgb(235,213,38)" fg:x="4463" fg:w="89"/><text x="55.3624%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.15%)</title><rect x="56.0632%" y="180" width="0.1482%" height="15" fill="rgb(237,122,38)" fg:x="4540" fg:w="12"/><text x="56.3132%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (4,622 samples, 57.08%)</title><rect x="0.6915%" y="148" width="57.0758%" height="15" fill="rgb(244,218,35)" fg:x="56" fg:w="4622"/><text x="0.9415%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (126 samples, 1.56%)</title><rect x="56.2114%" y="164" width="1.5559%" height="15" fill="rgb(240,68,47)" fg:x="4552" fg:w="126"/><text x="56.4614%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (16 samples, 0.20%)</title><rect x="57.5698%" y="180" width="0.1976%" height="15" fill="rgb(210,16,53)" fg:x="4662" fg:w="16"/><text x="57.8198%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:126) (20 samples, 0.25%)</title><rect x="57.7673%" y="164" width="0.2470%" height="15" fill="rgb(235,124,12)" fg:x="4678" fg:w="20"/><text x="58.0173%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:100) (10 samples, 0.12%)</title><rect x="63.1020%" y="212" width="0.1235%" height="15" fill="rgb(224,169,11)" fg:x="5110" fg:w="10"/><text x="63.3520%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (43 samples, 0.53%)</title><rect x="63.2255%" y="212" width="0.5310%" height="15" fill="rgb(250,166,2)" fg:x="5120" fg:w="43"/><text x="63.4755%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (107 samples, 1.32%)</title><rect x="63.7565%" y="212" width="1.3213%" height="15" fill="rgb(242,216,29)" fg:x="5163" fg:w="107"/><text x="64.0065%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.20%)</title><rect x="64.8802%" y="228" width="0.1976%" height="15" fill="rgb(230,116,27)" fg:x="5254" fg:w="16"/><text x="65.1302%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (19 samples, 0.23%)</title><rect x="65.1766%" y="212" width="0.2346%" height="15" fill="rgb(228,99,48)" fg:x="5278" fg:w="19"/><text x="65.4266%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (654 samples, 8.08%)</title><rect x="58.0143%" y="164" width="8.0761%" height="15" fill="rgb(253,11,6)" fg:x="4698" fg:w="654"/><text x="58.2643%" y="174.50">create_inde..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (488 samples, 6.03%)</title><rect x="60.0642%" y="180" width="6.0262%" height="15" fill="rgb(247,143,39)" fg:x="4864" fg:w="488"/><text x="60.3142%" y="190.50">__call__..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (416 samples, 5.14%)</title><rect x="60.9533%" y="196" width="5.1371%" height="15" fill="rgb(236,97,10)" fg:x="4936" fg:w="416"/><text x="61.2033%" y="206.50">&lt;lambd..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (55 samples, 0.68%)</title><rect x="65.4112%" y="212" width="0.6792%" height="15" fill="rgb(233,208,19)" fg:x="5297" fg:w="55"/><text x="65.6612%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:128) (9 samples, 0.11%)</title><rect x="66.0904%" y="164" width="0.1111%" height="15" fill="rgb(216,164,2)" fg:x="5352" fg:w="9"/><text x="66.3404%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (121 samples, 1.49%)</title><rect x="71.1287%" y="180" width="1.4942%" height="15" fill="rgb(220,129,5)" fg:x="5760" fg:w="121"/><text x="71.3787%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.27%)</title><rect x="72.6229%" y="180" width="0.2717%" height="15" fill="rgb(242,17,10)" fg:x="5881" fg:w="22"/><text x="72.8729%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:50) (255 samples, 3.15%)</title><rect x="72.8945%" y="180" width="3.1489%" height="15" fill="rgb(242,107,0)" fg:x="5903" fg:w="255"/><text x="73.1445%" y="190.50">__i..</text></g><g><title>__init__ (kappybara/indexed_set.py:51) (64 samples, 0.79%)</title><rect x="76.0435%" y="180" width="0.7903%" height="15" fill="rgb(251,28,31)" fg:x="6158" fg:w="64"/><text x="76.2935%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (497 samples, 6.14%)</title><rect x="76.8338%" y="180" width="6.1373%" height="15" fill="rgb(233,223,10)" fg:x="6222" fg:w="497"/><text x="77.0838%" y="190.50">__init__..</text></g><g><title>__init__ (kappybara/indexed_set.py:55) (119 samples, 1.47%)</title><rect x="82.9711%" y="180" width="1.4695%" height="15" fill="rgb(215,21,27)" fg:x="6719" fg:w="119"/><text x="83.2211%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (346 samples, 4.27%)</title><rect x="84.4406%" y="180" width="4.2727%" height="15" fill="rgb(232,23,21)" fg:x="6838" fg:w="346"/><text x="84.6906%" y="190.50">__ini..</text></g><g><title>__init__ (kappybara/indexed_set.py:58) (53 samples, 0.65%)</title><rect x="88.7133%" y="180" width="0.6545%" height="15" fill="rgb(244,5,23)" fg:x="7184" fg:w="53"/><text x="88.9633%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:59) (27 samples, 0.33%)</title><rect x="89.3677%" y="180" width="0.3334%" height="15" fill="rgb(226,81,46)" fg:x="7237" fg:w="27"/><text x="89.6177%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (12 samples, 0.15%)</title><rect x="89.7012%" y="180" width="0.1482%" height="15" fill="rgb(247,70,30)" fg:x="7264" fg:w="12"/><text x="89.9512%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (142 samples, 1.75%)</title><rect x="89.8493%" y="180" width="1.7535%" height="15" fill="rgb(212,68,19)" fg:x="7276" fg:w="142"/><text x="90.0993%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (34 samples, 0.42%)</title><rect x="91.1830%" y="196" width="0.4199%" height="15" fill="rgb(240,187,13)" fg:x="7384" fg:w="34"/><text x="91.4330%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (108 samples, 1.33%)</title><rect x="91.6029%" y="180" width="1.3337%" height="15" fill="rgb(223,113,26)" fg:x="7418" fg:w="108"/><text x="91.8529%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.17%)</title><rect x="92.7636%" y="196" width="0.1729%" height="15" fill="rgb(206,192,2)" fg:x="7512" fg:w="14"/><text x="93.0136%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (64 samples, 0.79%)</title><rect x="92.9365%" y="180" width="0.7903%" height="15" fill="rgb(241,108,4)" fg:x="7526" fg:w="64"/><text x="93.1865%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (152 samples, 1.88%)</title><rect x="93.7268%" y="180" width="1.8770%" height="15" fill="rgb(247,173,49)" fg:x="7590" fg:w="152"/><text x="93.9768%" y="190.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (15 samples, 0.19%)</title><rect x="95.4186%" y="196" width="0.1852%" height="15" fill="rgb(224,114,35)" fg:x="7727" fg:w="15"/><text x="95.6686%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (3,132 samples, 38.68%)</title><rect x="57.7673%" y="148" width="38.6762%" height="15" fill="rgb(245,159,27)" fg:x="4678" fg:w="3132"/><text x="58.0173%" y="158.50">track_component (kappybara/mixture.py:94)</text></g><g><title>create_index (kappybara/indexed_set.py:130) (2,446 samples, 30.20%)</title><rect x="66.2386%" y="164" width="30.2050%" height="15" fill="rgb(245,172,44)" fg:x="5364" fg:w="2446"/><text x="66.4886%" y="174.50">create_index (kappybara/indexed_set.py:130)</text></g><g><title>add (kappybara/indexed_set.py:70) (68 samples, 0.84%)</title><rect x="95.6039%" y="180" width="0.8397%" height="15" fill="rgb(236,23,11)" fg:x="7742" fg:w="68"/><text x="95.8539%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (8,052 samples, 99.43%)</title><rect x="0.2964%" y="68" width="99.4320%" height="15" fill="rgb(205,117,38)" fg:x="24" fg:w="8052"/><text x="0.5464%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (8,047 samples, 99.37%)</title><rect x="0.3581%" y="84" width="99.3702%" height="15" fill="rgb(237,72,25)" fg:x="29" fg:w="8047"/><text x="0.6081%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,034 samples, 99.21%)</title><rect x="0.5186%" y="100" width="99.2097%" height="15" fill="rgb(244,70,9)" fg:x="42" fg:w="8034"/><text x="0.7686%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (8,022 samples, 99.06%)</title><rect x="0.6668%" y="116" width="99.0615%" height="15" fill="rgb(217,125,39)" fg:x="54" fg:w="8022"/><text x="0.9168%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (8,020 samples, 99.04%)</title><rect x="0.6915%" y="132" width="99.0368%" height="15" fill="rgb(235,36,10)" fg:x="56" fg:w="8020"/><text x="0.9415%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (265 samples, 3.27%)</title><rect x="96.4559%" y="148" width="3.2724%" height="15" fill="rgb(251,123,47)" fg:x="7811" fg:w="265"/><text x="96.7059%" y="158.50">tra..</text></g><g><title>__iter__ (kappybara/pattern.py:98) (11 samples, 0.14%)</title><rect x="99.7283%" y="68" width="0.1358%" height="15" fill="rgb(221,13,13)" fg:x="8076" fg:w="11"/><text x="99.9783%" y="78.50"></text></g><g><title>all (8,098 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="8098"/><text x="0.2500%" y="62.50"></text></g></svg></svg>