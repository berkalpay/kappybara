<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 432fe5b</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="12192"><g><title>update (kappybara/system.py:69) (42 samples, 0.34%)</title><rect x="0.0656%" y="84" width="0.3445%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="42"/><text x="0.3156%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (42 samples, 0.34%)</title><rect x="0.0656%" y="100" width="0.3445%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="42"/><text x="0.3156%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (39 samples, 0.32%)</title><rect x="0.0902%" y="116" width="0.3199%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="39"/><text x="0.3402%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (37 samples, 0.30%)</title><rect x="0.1066%" y="132" width="0.3035%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="37"/><text x="0.3566%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (37 samples, 0.30%)</title><rect x="0.1066%" y="148" width="0.3035%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="37"/><text x="0.3566%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (35 samples, 0.29%)</title><rect x="0.1230%" y="164" width="0.2871%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="35"/><text x="0.3730%" y="174.50"></text></g><g><title>select (kappybara/rule.py:204) (21 samples, 0.17%)</title><rect x="0.5577%" y="116" width="0.1722%" height="15" fill="rgb(207,160,47)" fg:x="68" fg:w="21"/><text x="0.8077%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (50 samples, 0.41%)</title><rect x="0.4593%" y="100" width="0.4101%" height="15" fill="rgb(228,23,34)" fg:x="56" fg:w="50"/><text x="0.7093%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (20 samples, 0.16%)</title><rect x="0.9678%" y="164" width="0.1640%" height="15" fill="rgb(218,30,26)" fg:x="118" fg:w="20"/><text x="1.2178%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (51 samples, 0.42%)</title><rect x="0.9596%" y="148" width="0.4183%" height="15" fill="rgb(220,122,19)" fg:x="117" fg:w="51"/><text x="1.2096%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (29 samples, 0.24%)</title><rect x="1.1401%" y="164" width="0.2379%" height="15" fill="rgb(250,228,42)" fg:x="139" fg:w="29"/><text x="1.3901%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (60 samples, 0.49%)</title><rect x="1.4272%" y="164" width="0.4921%" height="15" fill="rgb(240,193,28)" fg:x="174" fg:w="60"/><text x="1.6772%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (17 samples, 0.14%)</title><rect x="1.7799%" y="180" width="0.1394%" height="15" fill="rgb(216,20,37)" fg:x="217" fg:w="17"/><text x="2.0299%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (28 samples, 0.23%)</title><rect x="2.1654%" y="180" width="0.2297%" height="15" fill="rgb(206,188,39)" fg:x="264" fg:w="28"/><text x="2.4154%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (22 samples, 0.18%)</title><rect x="2.3950%" y="180" width="0.1804%" height="15" fill="rgb(217,207,13)" fg:x="292" fg:w="22"/><text x="2.6450%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (44 samples, 0.36%)</title><rect x="2.6247%" y="180" width="0.3609%" height="15" fill="rgb(231,73,38)" fg:x="320" fg:w="44"/><text x="2.8747%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (212 samples, 1.74%)</title><rect x="1.3780%" y="148" width="1.7388%" height="15" fill="rgb(225,20,46)" fg:x="168" fg:w="212"/><text x="1.6280%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (145 samples, 1.19%)</title><rect x="1.9275%" y="164" width="1.1893%" height="15" fill="rgb(210,31,41)" fg:x="235" fg:w="145"/><text x="2.1775%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (16 samples, 0.13%)</title><rect x="2.9856%" y="180" width="0.1312%" height="15" fill="rgb(221,200,47)" fg:x="364" fg:w="16"/><text x="3.2356%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (93 samples, 0.76%)</title><rect x="3.1742%" y="148" width="0.7628%" height="15" fill="rgb(226,26,5)" fg:x="387" fg:w="93"/><text x="3.4242%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="3.8304%" y="164" width="0.1066%" height="15" fill="rgb(249,33,26)" fg:x="467" fg:w="13"/><text x="4.0804%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (21 samples, 0.17%)</title><rect x="3.9370%" y="148" width="0.1722%" height="15" fill="rgb(235,183,28)" fg:x="480" fg:w="21"/><text x="4.1870%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (73 samples, 0.60%)</title><rect x="4.9131%" y="180" width="0.5988%" height="15" fill="rgb(221,5,38)" fg:x="599" fg:w="73"/><text x="5.1631%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (46 samples, 0.38%)</title><rect x="5.1345%" y="196" width="0.3773%" height="15" fill="rgb(247,18,42)" fg:x="626" fg:w="46"/><text x="5.3845%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (585 samples, 4.80%)</title><rect x="0.8694%" y="116" width="4.7982%" height="15" fill="rgb(241,131,45)" fg:x="106" fg:w="585"/><text x="1.1194%" y="126.50">apply_..</text></g><g><title>_remove_edge (kappybara/mixture.py:191) (581 samples, 4.77%)</title><rect x="0.9022%" y="132" width="4.7654%" height="15" fill="rgb(249,31,29)" fg:x="110" fg:w="581"/><text x="1.1522%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (186 samples, 1.53%)</title><rect x="4.1421%" y="148" width="1.5256%" height="15" fill="rgb(225,111,53)" fg:x="505" fg:w="186"/><text x="4.3921%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (159 samples, 1.30%)</title><rect x="4.3635%" y="164" width="1.3041%" height="15" fill="rgb(238,160,17)" fg:x="532" fg:w="159"/><text x="4.6135%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (16 samples, 0.13%)</title><rect x="5.5364%" y="180" width="0.1312%" height="15" fill="rgb(214,148,48)" fg:x="675" fg:w="16"/><text x="5.7864%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (69 samples, 0.57%)</title><rect x="6.1270%" y="180" width="0.5659%" height="15" fill="rgb(232,36,49)" fg:x="747" fg:w="69"/><text x="6.3770%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (31 samples, 0.25%)</title><rect x="14.9360%" y="196" width="0.2543%" height="15" fill="rgb(209,103,24)" fg:x="1821" fg:w="31"/><text x="15.1860%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (1,064 samples, 8.73%)</title><rect x="6.6929%" y="180" width="8.7270%" height="15" fill="rgb(229,88,8)" fg:x="816" fg:w="1064"/><text x="6.9429%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.23%)</title><rect x="15.1903%" y="196" width="0.2297%" height="15" fill="rgb(213,181,19)" fg:x="1852" fg:w="28"/><text x="15.4403%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.18%)</title><rect x="17.8232%" y="196" width="0.1804%" height="15" fill="rgb(254,191,54)" fg:x="2173" fg:w="22"/><text x="18.0732%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (343 samples, 2.81%)</title><rect x="15.4199%" y="180" width="2.8133%" height="15" fill="rgb(241,83,37)" fg:x="1880" fg:w="343"/><text x="15.6699%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.23%)</title><rect x="18.0036%" y="196" width="0.2297%" height="15" fill="rgb(233,36,39)" fg:x="2195" fg:w="28"/><text x="18.2536%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (89 samples, 0.73%)</title><rect x="18.2497%" y="180" width="0.7300%" height="15" fill="rgb(226,3,54)" fg:x="2225" fg:w="89"/><text x="18.4997%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (81 samples, 0.66%)</title><rect x="18.9797%" y="180" width="0.6644%" height="15" fill="rgb(245,192,40)" fg:x="2314" fg:w="81"/><text x="19.2297%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (24 samples, 0.20%)</title><rect x="21.6289%" y="196" width="0.1969%" height="15" fill="rgb(238,167,29)" fg:x="2637" fg:w="24"/><text x="21.8789%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (296 samples, 2.43%)</title><rect x="19.6440%" y="180" width="2.4278%" height="15" fill="rgb(232,182,51)" fg:x="2395" fg:w="296"/><text x="19.8940%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.25%)</title><rect x="21.8258%" y="196" width="0.2461%" height="15" fill="rgb(231,60,39)" fg:x="2661" fg:w="30"/><text x="22.0758%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (272 samples, 2.23%)</title><rect x="22.0719%" y="180" width="2.2310%" height="15" fill="rgb(208,69,12)" fg:x="2691" fg:w="272"/><text x="22.3219%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (24 samples, 0.20%)</title><rect x="25.9022%" y="196" width="0.1969%" height="15" fill="rgb(235,93,37)" fg:x="3158" fg:w="24"/><text x="26.1522%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (98 samples, 0.80%)</title><rect x="26.0991%" y="196" width="0.8038%" height="15" fill="rgb(213,116,39)" fg:x="3182" fg:w="98"/><text x="26.3491%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (127 samples, 1.04%)</title><rect x="28.6663%" y="212" width="1.0417%" height="15" fill="rgb(222,207,29)" fg:x="3495" fg:w="127"/><text x="28.9163%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (119 samples, 0.98%)</title><rect x="31.5617%" y="228" width="0.9760%" height="15" fill="rgb(206,96,30)" fg:x="3848" fg:w="119"/><text x="31.8117%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,047 samples, 8.59%)</title><rect x="26.9439%" y="196" width="8.5876%" height="15" fill="rgb(218,138,4)" fg:x="3285" fg:w="1047"/><text x="27.1939%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (710 samples, 5.82%)</title><rect x="29.7080%" y="212" width="5.8235%" height="15" fill="rgb(250,191,14)" fg:x="3622" fg:w="710"/><text x="29.9580%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (365 samples, 2.99%)</title><rect x="32.5377%" y="228" width="2.9938%" height="15" fill="rgb(239,60,40)" fg:x="3967" fg:w="365"/><text x="32.7877%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (110 samples, 0.90%)</title><rect x="35.5315%" y="196" width="0.9022%" height="15" fill="rgb(206,27,48)" fg:x="4332" fg:w="110"/><text x="35.7815%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (22 samples, 0.18%)</title><rect x="37.2375%" y="212" width="0.1804%" height="15" fill="rgb(225,35,8)" fg:x="4540" fg:w="22"/><text x="37.4875%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (201 samples, 1.65%)</title><rect x="36.4747%" y="196" width="1.6486%" height="15" fill="rgb(250,213,24)" fg:x="4447" fg:w="201"/><text x="36.7247%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (86 samples, 0.71%)</title><rect x="37.4180%" y="212" width="0.7054%" height="15" fill="rgb(247,123,22)" fg:x="4562" fg:w="86"/><text x="37.6680%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (231 samples, 1.89%)</title><rect x="45.5299%" y="212" width="1.8947%" height="15" fill="rgb(231,138,38)" fg:x="5551" fg:w="231"/><text x="45.7799%" y="222.50">_..</text></g><g><title>stated (kappybara/pattern.py:52) (15 samples, 0.12%)</title><rect x="47.9823%" y="228" width="0.1230%" height="15" fill="rgb(231,145,46)" fg:x="5850" fg:w="15"/><text x="48.2323%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (158 samples, 1.30%)</title><rect x="47.5230%" y="212" width="1.2959%" height="15" fill="rgb(251,118,11)" fg:x="5794" fg:w="158"/><text x="47.7730%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (87 samples, 0.71%)</title><rect x="48.1053%" y="228" width="0.7136%" height="15" fill="rgb(217,147,25)" fg:x="5865" fg:w="87"/><text x="48.3553%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (20 samples, 0.16%)</title><rect x="49.6719%" y="228" width="0.1640%" height="15" fill="rgb(247,81,37)" fg:x="6056" fg:w="20"/><text x="49.9219%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:59) (467 samples, 3.83%)</title><rect x="49.8360%" y="228" width="3.8304%" height="15" fill="rgb(209,12,38)" fg:x="6076" fg:w="467"/><text x="50.0860%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (257 samples, 2.11%)</title><rect x="51.5584%" y="244" width="2.1079%" height="15" fill="rgb(227,1,9)" fg:x="6286" fg:w="257"/><text x="51.8084%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.19%)</title><rect x="53.4777%" y="260" width="0.1886%" height="15" fill="rgb(248,47,43)" fg:x="6520" fg:w="23"/><text x="53.7277%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (288 samples, 2.36%)</title><rect x="53.6663%" y="228" width="2.3622%" height="15" fill="rgb(221,10,30)" fg:x="6543" fg:w="288"/><text x="53.9163%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (105 samples, 0.86%)</title><rect x="56.0285%" y="228" width="0.8612%" height="15" fill="rgb(210,229,1)" fg:x="6831" fg:w="105"/><text x="56.2785%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (13 samples, 0.11%)</title><rect x="56.8898%" y="228" width="0.1066%" height="15" fill="rgb(222,148,37)" fg:x="6936" fg:w="13"/><text x="57.1398%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,026 samples, 8.42%)</title><rect x="48.8189%" y="212" width="8.4154%" height="15" fill="rgb(234,67,33)" fg:x="5952" fg:w="1026"/><text x="49.0689%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (29 samples, 0.24%)</title><rect x="56.9964%" y="228" width="0.2379%" height="15" fill="rgb(247,98,35)" fg:x="6949" fg:w="29"/><text x="57.2464%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (26 samples, 0.21%)</title><rect x="57.3163%" y="212" width="0.2133%" height="15" fill="rgb(247,138,52)" fg:x="6988" fg:w="26"/><text x="57.5663%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (21 samples, 0.17%)</title><rect x="58.2185%" y="228" width="0.1722%" height="15" fill="rgb(213,79,30)" fg:x="7098" fg:w="21"/><text x="58.4685%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.12%)</title><rect x="59.5226%" y="244" width="0.1230%" height="15" fill="rgb(246,177,23)" fg:x="7257" fg:w="15"/><text x="59.7726%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (290 samples, 2.38%)</title><rect x="57.5295%" y="212" width="2.3786%" height="15" fill="rgb(230,62,27)" fg:x="7014" fg:w="290"/><text x="57.7795%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (185 samples, 1.52%)</title><rect x="58.3907%" y="228" width="1.5174%" height="15" fill="rgb(216,154,8)" fg:x="7119" fg:w="185"/><text x="58.6407%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.26%)</title><rect x="59.6457%" y="244" width="0.2625%" height="15" fill="rgb(244,35,45)" fg:x="7272" fg:w="32"/><text x="59.8957%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.13%)</title><rect x="61.2861%" y="228" width="0.1312%" height="15" fill="rgb(251,115,12)" fg:x="7472" fg:w="16"/><text x="61.5361%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (509 samples, 4.17%)</title><rect x="59.9081%" y="212" width="4.1749%" height="15" fill="rgb(240,54,50)" fg:x="7304" fg:w="509"/><text x="60.1581%" y="222.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (325 samples, 2.67%)</title><rect x="61.4173%" y="228" width="2.6657%" height="15" fill="rgb(233,84,52)" fg:x="7488" fg:w="325"/><text x="61.6673%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (54 samples, 0.44%)</title><rect x="63.6401%" y="244" width="0.4429%" height="15" fill="rgb(207,117,47)" fg:x="7759" fg:w="54"/><text x="63.8901%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (74 samples, 0.61%)</title><rect x="64.0830%" y="212" width="0.6070%" height="15" fill="rgb(249,43,39)" fg:x="7813" fg:w="74"/><text x="64.3330%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (173 samples, 1.42%)</title><rect x="64.7228%" y="212" width="1.4190%" height="15" fill="rgb(209,38,44)" fg:x="7891" fg:w="173"/><text x="64.9728%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (76 samples, 0.62%)</title><rect x="66.1417%" y="212" width="0.6234%" height="15" fill="rgb(236,212,23)" fg:x="8064" fg:w="76"/><text x="66.3917%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (23 samples, 0.19%)</title><rect x="66.7651%" y="212" width="0.1886%" height="15" fill="rgb(242,79,21)" fg:x="8140" fg:w="23"/><text x="67.0151%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,795 samples, 31.13%)</title><rect x="38.1234%" y="196" width="31.1270%" height="15" fill="rgb(211,96,35)" fg:x="4648" fg:w="3795"/><text x="38.3734%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (280 samples, 2.30%)</title><rect x="66.9537%" y="212" width="2.2966%" height="15" fill="rgb(253,215,40)" fg:x="8163" fg:w="280"/><text x="67.2037%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,531 samples, 45.37%)</title><rect x="24.3028%" y="180" width="45.3658%" height="15" fill="rgb(211,81,21)" fg:x="2963" fg:w="5531"/><text x="24.5528%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (51 samples, 0.42%)</title><rect x="69.2503%" y="196" width="0.4183%" height="15" fill="rgb(208,190,38)" fg:x="8443" fg:w="51"/><text x="69.5003%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (51 samples, 0.42%)</title><rect x="71.0548%" y="196" width="0.4183%" height="15" fill="rgb(235,213,38)" fg:x="8663" fg:w="51"/><text x="71.3048%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (38 samples, 0.31%)</title><rect x="72.5230%" y="212" width="0.3117%" height="15" fill="rgb(237,122,38)" fg:x="8842" fg:w="38"/><text x="72.7730%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (606 samples, 4.97%)</title><rect x="69.7835%" y="180" width="4.9705%" height="15" fill="rgb(244,218,35)" fg:x="8508" fg:w="606"/><text x="70.0335%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (400 samples, 3.28%)</title><rect x="71.4731%" y="196" width="3.2808%" height="15" fill="rgb(240,68,47)" fg:x="8714" fg:w="400"/><text x="71.7231%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (234 samples, 1.92%)</title><rect x="72.8346%" y="212" width="1.9193%" height="15" fill="rgb(210,16,53)" fg:x="8880" fg:w="234"/><text x="73.0846%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (111 samples, 0.91%)</title><rect x="74.7539%" y="180" width="0.9104%" height="15" fill="rgb(235,124,12)" fg:x="9114" fg:w="111"/><text x="75.0039%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (41 samples, 0.34%)</title><rect x="75.3281%" y="196" width="0.3363%" height="15" fill="rgb(224,169,11)" fg:x="9184" fg:w="41"/><text x="75.5781%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (22 samples, 0.18%)</title><rect x="75.9596%" y="196" width="0.1804%" height="15" fill="rgb(250,166,2)" fg:x="9261" fg:w="22"/><text x="76.2096%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (108 samples, 0.89%)</title><rect x="75.6644%" y="180" width="0.8858%" height="15" fill="rgb(242,216,29)" fg:x="9225" fg:w="108"/><text x="75.9144%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (50 samples, 0.41%)</title><rect x="76.1401%" y="196" width="0.4101%" height="15" fill="rgb(230,116,27)" fg:x="9283" fg:w="50"/><text x="76.3901%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (197 samples, 1.62%)</title><rect x="76.5502%" y="180" width="1.6158%" height="15" fill="rgb(228,99,48)" fg:x="9333" fg:w="197"/><text x="76.8002%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.16%)</title><rect x="78.0102%" y="196" width="0.1558%" height="15" fill="rgb(253,11,6)" fg:x="9511" fg:w="19"/><text x="78.2602%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (56 samples, 0.46%)</title><rect x="78.1660%" y="180" width="0.4593%" height="15" fill="rgb(247,143,39)" fg:x="9530" fg:w="56"/><text x="78.4160%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (100 samples, 0.82%)</title><rect x="78.6253%" y="180" width="0.8202%" height="15" fill="rgb(236,97,10)" fg:x="9586" fg:w="100"/><text x="78.8753%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.12%)</title><rect x="81.1434%" y="196" width="0.1230%" height="15" fill="rgb(233,208,19)" fg:x="9893" fg:w="15"/><text x="81.3934%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (145 samples, 1.19%)</title><rect x="81.2664%" y="196" width="1.1893%" height="15" fill="rgb(216,164,2)" fg:x="9908" fg:w="145"/><text x="81.5164%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="82.3491%" y="212" width="0.1066%" height="15" fill="rgb(220,129,5)" fg:x="10040" fg:w="13"/><text x="82.5991%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (379 samples, 3.11%)</title><rect x="79.4455%" y="180" width="3.1086%" height="15" fill="rgb(242,17,10)" fg:x="9686" fg:w="379"/><text x="79.6955%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (42 samples, 0.34%)</title><rect x="82.5623%" y="180" width="0.3445%" height="15" fill="rgb(242,107,0)" fg:x="10066" fg:w="42"/><text x="82.8123%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,423 samples, 77.29%)</title><rect x="5.7743%" y="164" width="77.2884%" height="15" fill="rgb(251,28,31)" fg:x="704" fg:w="9423"/><text x="6.0243%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__hash__ (kappybara/pattern.py:187) (14 samples, 0.11%)</title><rect x="83.8419%" y="180" width="0.1148%" height="15" fill="rgb(233,223,10)" fg:x="10222" fg:w="14"/><text x="84.0919%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (116 samples, 0.95%)</title><rect x="83.0627%" y="164" width="0.9514%" height="15" fill="rgb(215,21,27)" fg:x="10127" fg:w="116"/><text x="83.3127%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (141 samples, 1.16%)</title><rect x="84.0469%" y="164" width="1.1565%" height="15" fill="rgb(232,23,21)" fg:x="10247" fg:w="141"/><text x="84.2969%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,697 samples, 79.54%)</title><rect x="5.6923%" y="148" width="79.5358%" height="15" fill="rgb(244,5,23)" fg:x="694" fg:w="9697"/><text x="5.9423%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (26 samples, 0.21%)</title><rect x="85.2936%" y="164" width="0.2133%" height="15" fill="rgb(226,81,46)" fg:x="10399" fg:w="26"/><text x="85.5436%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (43 samples, 0.35%)</title><rect x="89.2799%" y="212" width="0.3527%" height="15" fill="rgb(247,70,30)" fg:x="10885" fg:w="43"/><text x="89.5299%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (132 samples, 1.08%)</title><rect x="89.6325%" y="212" width="1.0827%" height="15" fill="rgb(212,68,19)" fg:x="10928" fg:w="132"/><text x="89.8825%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.17%)</title><rect x="90.5430%" y="228" width="0.1722%" height="15" fill="rgb(240,187,13)" fg:x="11039" fg:w="21"/><text x="90.7930%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (27 samples, 0.22%)</title><rect x="90.7644%" y="212" width="0.2215%" height="15" fill="rgb(223,113,26)" fg:x="11066" fg:w="27"/><text x="91.0144%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (723 samples, 5.93%)</title><rect x="85.5069%" y="164" width="5.9301%" height="15" fill="rgb(206,192,2)" fg:x="10425" fg:w="723"/><text x="85.7569%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (534 samples, 4.38%)</title><rect x="87.0571%" y="180" width="4.3799%" height="15" fill="rgb(241,108,4)" fg:x="10614" fg:w="534"/><text x="87.3071%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (477 samples, 3.91%)</title><rect x="87.5246%" y="196" width="3.9124%" height="15" fill="rgb(247,173,49)" fg:x="10671" fg:w="477"/><text x="87.7746%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (55 samples, 0.45%)</title><rect x="90.9859%" y="212" width="0.4511%" height="15" fill="rgb(224,114,35)" fg:x="11093" fg:w="55"/><text x="91.2359%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.17%)</title><rect x="92.9134%" y="180" width="0.1722%" height="15" fill="rgb(245,159,27)" fg:x="11328" fg:w="21"/><text x="93.1634%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (16 samples, 0.13%)</title><rect x="93.2579%" y="180" width="0.1312%" height="15" fill="rgb(245,172,44)" fg:x="11370" fg:w="16"/><text x="93.5079%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (143 samples, 1.17%)</title><rect x="93.3891%" y="180" width="1.1729%" height="15" fill="rgb(236,23,11)" fg:x="11386" fg:w="143"/><text x="93.6391%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (30 samples, 0.25%)</title><rect x="94.3159%" y="196" width="0.2461%" height="15" fill="rgb(205,117,38)" fg:x="11499" fg:w="30"/><text x="94.5659%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (158 samples, 1.30%)</title><rect x="94.5620%" y="180" width="1.2959%" height="15" fill="rgb(237,72,25)" fg:x="11529" fg:w="158"/><text x="94.8120%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (17 samples, 0.14%)</title><rect x="95.7185%" y="196" width="0.1394%" height="15" fill="rgb(244,70,9)" fg:x="11670" fg:w="17"/><text x="95.9685%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (68 samples, 0.56%)</title><rect x="95.8579%" y="180" width="0.5577%" height="15" fill="rgb(217,125,39)" fg:x="11687" fg:w="68"/><text x="96.1079%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (181 samples, 1.48%)</title><rect x="96.4157%" y="180" width="1.4846%" height="15" fill="rgb(235,36,10)" fg:x="11755" fg:w="181"/><text x="96.6657%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,632 samples, 13.39%)</title><rect x="85.2280%" y="148" width="13.3858%" height="15" fill="rgb(251,123,47)" fg:x="10391" fg:w="1632"/><text x="85.4780%" y="158.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (867 samples, 7.11%)</title><rect x="91.5026%" y="164" width="7.1112%" height="15" fill="rgb(221,13,13)" fg:x="11156" fg:w="867"/><text x="91.7526%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:70) (87 samples, 0.71%)</title><rect x="97.9003%" y="180" width="0.7136%" height="15" fill="rgb(238,131,9)" fg:x="11936" fg:w="87"/><text x="98.1503%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (12,028 samples, 98.65%)</title><rect x="0.8694%" y="100" width="98.6549%" height="15" fill="rgb(211,50,8)" fg:x="106" fg:w="12028"/><text x="1.1194%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,440 samples, 93.83%)</title><rect x="5.6923%" y="116" width="93.8320%" height="15" fill="rgb(245,182,24)" fg:x="694" fg:w="11440"/><text x="5.9423%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,440 samples, 93.83%)</title><rect x="5.6923%" y="132" width="93.8320%" height="15" fill="rgb(242,14,37)" fg:x="694" fg:w="11440"/><text x="5.9423%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (102 samples, 0.84%)</title><rect x="98.6877%" y="148" width="0.8366%" height="15" fill="rgb(246,228,12)" fg:x="12032" fg:w="102"/><text x="98.9377%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (12,129 samples, 99.48%)</title><rect x="0.0574%" y="68" width="99.4833%" height="15" fill="rgb(213,55,15)" fg:x="7" fg:w="12129"/><text x="0.3074%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (12,086 samples, 99.13%)</title><rect x="0.4101%" y="84" width="99.1306%" height="15" fill="rgb(209,9,3)" fg:x="50" fg:w="12086"/><text x="0.6601%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:98) (19 samples, 0.16%)</title><rect x="99.6391%" y="68" width="0.1558%" height="15" fill="rgb(230,59,30)" fg:x="12148" fg:w="19"/><text x="99.8891%" y="78.50"></text></g><g><title>all (12,192 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="12192"/><text x="0.2500%" y="62.50"></text></g></svg></svg>