<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit ccdf3fc</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="7807"><g><title>heterodimerization_system (kappybara/examples.py:15) (8 samples, 0.10%)</title><rect x="0.0897%" y="84" width="0.1025%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="8"/><text x="0.3397%" y="94.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (12 samples, 0.15%)</title><rect x="0.0512%" y="68" width="0.1537%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="12"/><text x="0.3012%" y="78.50"></text></g><g><title>update (kappybara/system.py:69) (8 samples, 0.10%)</title><rect x="0.2049%" y="84" width="0.1025%" height="15" fill="rgb(221,193,54)" fg:x="16" fg:w="8"/><text x="0.4549%" y="94.50"></text></g><g><title>act (kappybara/system.py:63) (10 samples, 0.13%)</title><rect x="0.3074%" y="100" width="0.1281%" height="15" fill="rgb(248,212,6)" fg:x="24" fg:w="10"/><text x="0.5574%" y="110.50"></text></g><g><title>select (kappybara/rule.py:104) (10 samples, 0.13%)</title><rect x="0.3074%" y="116" width="0.1281%" height="15" fill="rgb(208,68,35)" fg:x="24" fg:w="10"/><text x="0.5574%" y="126.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (9 samples, 0.12%)</title><rect x="0.4355%" y="116" width="0.1153%" height="15" fill="rgb(232,128,0)" fg:x="34" fg:w="9"/><text x="0.6855%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (51 samples, 0.65%)</title><rect x="0.9222%" y="180" width="0.6533%" height="15" fill="rgb(207,160,47)" fg:x="72" fg:w="51"/><text x="1.1722%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.14%)</title><rect x="8.4155%" y="196" width="0.1409%" height="15" fill="rgb(228,23,34)" fg:x="657" fg:w="11"/><text x="8.6655%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (564 samples, 7.22%)</title><rect x="1.5755%" y="180" width="7.2243%" height="15" fill="rgb(218,30,26)" fg:x="123" fg:w="564"/><text x="1.8255%" y="190.50">embeddings..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.24%)</title><rect x="8.5564%" y="196" width="0.2434%" height="15" fill="rgb(220,122,19)" fg:x="668" fg:w="19"/><text x="8.8064%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (196 samples, 2.51%)</title><rect x="8.7998%" y="180" width="2.5106%" height="15" fill="rgb(250,228,42)" fg:x="687" fg:w="196"/><text x="9.0498%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.20%)</title><rect x="11.1054%" y="196" width="0.2049%" height="15" fill="rgb(240,193,28)" fg:x="867" fg:w="16"/><text x="11.3554%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (34 samples, 0.44%)</title><rect x="11.3232%" y="180" width="0.4355%" height="15" fill="rgb(216,20,37)" fg:x="884" fg:w="34"/><text x="11.5732%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (29 samples, 0.37%)</title><rect x="11.7587%" y="180" width="0.3715%" height="15" fill="rgb(206,188,39)" fg:x="918" fg:w="29"/><text x="12.0087%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.15%)</title><rect x="13.7953%" y="196" width="0.1537%" height="15" fill="rgb(217,207,13)" fg:x="1077" fg:w="12"/><text x="14.0453%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (168 samples, 2.15%)</title><rect x="12.1301%" y="180" width="2.1519%" height="15" fill="rgb(231,73,38)" fg:x="947" fg:w="168"/><text x="12.3801%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.33%)</title><rect x="13.9490%" y="196" width="0.3330%" height="15" fill="rgb(225,20,46)" fg:x="1089" fg:w="26"/><text x="14.1990%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (138 samples, 1.77%)</title><rect x="14.2821%" y="180" width="1.7676%" height="15" fill="rgb(210,31,41)" fg:x="1115" fg:w="138"/><text x="14.5321%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (50 samples, 0.64%)</title><rect x="17.2794%" y="196" width="0.6405%" height="15" fill="rgb(221,200,47)" fg:x="1349" fg:w="50"/><text x="17.5294%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (88 samples, 1.13%)</title><rect x="19.1111%" y="212" width="1.1272%" height="15" fill="rgb(226,26,5)" fg:x="1492" fg:w="88"/><text x="19.3611%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (46 samples, 0.59%)</title><rect x="21.3014%" y="228" width="0.5892%" height="15" fill="rgb(249,33,26)" fg:x="1663" fg:w="46"/><text x="21.5514%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (518 samples, 6.64%)</title><rect x="17.9454%" y="196" width="6.6351%" height="15" fill="rgb(235,183,28)" fg:x="1401" fg:w="518"/><text x="18.1954%" y="206.50">embeds_in..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (339 samples, 4.34%)</title><rect x="20.2382%" y="212" width="4.3423%" height="15" fill="rgb(221,5,38)" fg:x="1580" fg:w="339"/><text x="20.4882%" y="222.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (210 samples, 2.69%)</title><rect x="21.8906%" y="228" width="2.6899%" height="15" fill="rgb(247,18,42)" fg:x="1709" fg:w="210"/><text x="22.1406%" y="238.50">si..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (73 samples, 0.94%)</title><rect x="24.5805%" y="196" width="0.9351%" height="15" fill="rgb(241,131,45)" fg:x="1919" fg:w="73"/><text x="24.8305%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (48 samples, 0.61%)</title><rect x="26.1816%" y="212" width="0.6148%" height="15" fill="rgb(249,31,29)" fg:x="2044" fg:w="48"/><text x="26.4316%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (123 samples, 1.58%)</title><rect x="25.5540%" y="196" width="1.5755%" height="15" fill="rgb(225,111,53)" fg:x="1995" fg:w="123"/><text x="25.8040%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (26 samples, 0.33%)</title><rect x="26.7965%" y="212" width="0.3330%" height="15" fill="rgb(238,160,17)" fg:x="2092" fg:w="26"/><text x="27.0465%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (90 samples, 1.15%)</title><rect x="32.9320%" y="212" width="1.1528%" height="15" fill="rgb(214,148,48)" fg:x="2571" fg:w="90"/><text x="33.1820%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (9 samples, 0.12%)</title><rect x="34.4947%" y="228" width="0.1153%" height="15" fill="rgb(232,36,49)" fg:x="2693" fg:w="9"/><text x="34.7447%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (101 samples, 1.29%)</title><rect x="34.1360%" y="212" width="1.2937%" height="15" fill="rgb(209,103,24)" fg:x="2665" fg:w="101"/><text x="34.3860%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (64 samples, 0.82%)</title><rect x="34.6100%" y="228" width="0.8198%" height="15" fill="rgb(229,88,8)" fg:x="2702" fg:w="64"/><text x="34.8600%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (16 samples, 0.20%)</title><rect x="36.0061%" y="228" width="0.2049%" height="15" fill="rgb(213,181,19)" fg:x="2811" fg:w="16"/><text x="36.2561%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.19%)</title><rect x="37.6457%" y="244" width="0.1921%" height="15" fill="rgb(254,191,54)" fg:x="2939" fg:w="15"/><text x="37.8957%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (265 samples, 3.39%)</title><rect x="36.2111%" y="228" width="3.3944%" height="15" fill="rgb(241,83,37)" fg:x="2827" fg:w="265"/><text x="36.4611%" y="238.50">bou..</text></g><g><title>__eq__ (kappybara/utils.py:33) (138 samples, 1.77%)</title><rect x="37.8378%" y="244" width="1.7676%" height="15" fill="rgb(233,36,39)" fg:x="2954" fg:w="138"/><text x="38.0878%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.31%)</title><rect x="39.2981%" y="260" width="0.3074%" height="15" fill="rgb(226,3,54)" fg:x="3068" fg:w="24"/><text x="39.5481%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (124 samples, 1.59%)</title><rect x="39.6055%" y="228" width="1.5883%" height="15" fill="rgb(245,192,40)" fg:x="3092" fg:w="124"/><text x="39.8555%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:61) (38 samples, 0.49%)</title><rect x="41.1938%" y="228" width="0.4867%" height="15" fill="rgb(238,167,29)" fg:x="3216" fg:w="38"/><text x="41.4438%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (12 samples, 0.15%)</title><rect x="41.6805%" y="228" width="0.1537%" height="15" fill="rgb(232,182,51)" fg:x="3254" fg:w="12"/><text x="41.9305%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (534 samples, 6.84%)</title><rect x="35.4297%" y="212" width="6.8400%" height="15" fill="rgb(231,60,39)" fg:x="2766" fg:w="534"/><text x="35.6797%" y="222.50">embeds_in..</text></g><g><title>coupled (kappybara/pattern.py:66) (34 samples, 0.44%)</title><rect x="41.8343%" y="228" width="0.4355%" height="15" fill="rgb(208,69,12)" fg:x="3266" fg:w="34"/><text x="42.0843%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (8 samples, 0.10%)</title><rect x="42.2954%" y="212" width="0.1025%" height="15" fill="rgb(235,93,37)" fg:x="3302" fg:w="8"/><text x="42.5454%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (84 samples, 1.08%)</title><rect x="42.3978%" y="212" width="1.0760%" height="15" fill="rgb(213,116,39)" fg:x="3310" fg:w="84"/><text x="42.6478%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (42 samples, 0.54%)</title><rect x="42.9358%" y="228" width="0.5380%" height="15" fill="rgb(222,207,29)" fg:x="3352" fg:w="42"/><text x="43.1858%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (76 samples, 0.97%)</title><rect x="43.4738%" y="212" width="0.9735%" height="15" fill="rgb(206,96,30)" fg:x="3394" fg:w="76"/><text x="43.7238%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (45 samples, 0.58%)</title><rect x="43.8709%" y="228" width="0.5764%" height="15" fill="rgb(218,138,4)" fg:x="3425" fg:w="45"/><text x="44.1209%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.12%)</title><rect x="44.3320%" y="244" width="0.1153%" height="15" fill="rgb(250,191,14)" fg:x="3461" fg:w="9"/><text x="44.5820%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (21 samples, 0.27%)</title><rect x="44.4473%" y="212" width="0.2690%" height="15" fill="rgb(239,60,40)" fg:x="3470" fg:w="21"/><text x="44.6973%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (43 samples, 0.55%)</title><rect x="44.7163%" y="212" width="0.5508%" height="15" fill="rgb(206,27,48)" fg:x="3491" fg:w="43"/><text x="44.9663%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (17 samples, 0.22%)</title><rect x="45.2671%" y="212" width="0.2178%" height="15" fill="rgb(225,35,8)" fg:x="3534" fg:w="17"/><text x="45.5171%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,583 samples, 20.28%)</title><rect x="27.1295%" y="196" width="20.2767%" height="15" fill="rgb(250,213,24)" fg:x="2118" fg:w="1583"/><text x="27.3795%" y="206.50">embeds_in (kappybara/pattern.py:..</text></g><g><title>sites (kappybara/pattern.py:113) (145 samples, 1.86%)</title><rect x="45.5489%" y="212" width="1.8573%" height="15" fill="rgb(247,123,22)" fg:x="3556" fg:w="145"/><text x="45.7989%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,472 samples, 31.66%)</title><rect x="16.0497%" y="180" width="31.6639%" height="15" fill="rgb(231,138,38)" fg:x="1253" fg:w="2472"/><text x="16.2997%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (24 samples, 0.31%)</title><rect x="47.4062%" y="196" width="0.3074%" height="15" fill="rgb(231,145,46)" fg:x="3701" fg:w="24"/><text x="47.6562%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (33 samples, 0.42%)</title><rect x="48.5462%" y="196" width="0.4227%" height="15" fill="rgb(251,118,11)" fg:x="3790" fg:w="33"/><text x="48.7962%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (32 samples, 0.41%)</title><rect x="49.7887%" y="212" width="0.4099%" height="15" fill="rgb(217,147,25)" fg:x="3887" fg:w="32"/><text x="50.0387%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (308 samples, 3.95%)</title><rect x="47.7648%" y="180" width="3.9452%" height="15" fill="rgb(247,81,37)" fg:x="3729" fg:w="308"/><text x="48.0148%" y="190.50">embe..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (214 samples, 2.74%)</title><rect x="48.9689%" y="196" width="2.7411%" height="15" fill="rgb(209,12,38)" fg:x="3823" fg:w="214"/><text x="49.2189%" y="206.50">__..</text></g><g><title>sites (kappybara/pattern.py:113) (118 samples, 1.51%)</title><rect x="50.1985%" y="212" width="1.5115%" height="15" fill="rgb(227,1,9)" fg:x="3919" fg:w="118"/><text x="50.4485%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (45 samples, 0.58%)</title><rect x="51.7100%" y="180" width="0.5764%" height="15" fill="rgb(248,47,43)" fg:x="4037" fg:w="45"/><text x="51.9600%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (16 samples, 0.20%)</title><rect x="52.0815%" y="196" width="0.2049%" height="15" fill="rgb(221,10,30)" fg:x="4066" fg:w="16"/><text x="52.3315%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (11 samples, 0.14%)</title><rect x="52.5042%" y="196" width="0.1409%" height="15" fill="rgb(210,229,1)" fg:x="4099" fg:w="11"/><text x="52.7542%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (64 samples, 0.82%)</title><rect x="52.2864%" y="180" width="0.8198%" height="15" fill="rgb(222,148,37)" fg:x="4082" fg:w="64"/><text x="52.5364%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (36 samples, 0.46%)</title><rect x="52.6451%" y="196" width="0.4611%" height="15" fill="rgb(234,67,33)" fg:x="4110" fg:w="36"/><text x="52.8951%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (62 samples, 0.79%)</title><rect x="53.1062%" y="180" width="0.7942%" height="15" fill="rgb(247,98,35)" fg:x="4146" fg:w="62"/><text x="53.3562%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.14%)</title><rect x="53.7594%" y="196" width="0.1409%" height="15" fill="rgb(247,138,52)" fg:x="4197" fg:w="11"/><text x="54.0094%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (21 samples, 0.27%)</title><rect x="53.9003%" y="180" width="0.2690%" height="15" fill="rgb(213,79,30)" fg:x="4208" fg:w="21"/><text x="54.1503%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (26 samples, 0.33%)</title><rect x="54.1693%" y="180" width="0.3330%" height="15" fill="rgb(246,177,23)" fg:x="4229" fg:w="26"/><text x="54.4193%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (38 samples, 0.49%)</title><rect x="55.2581%" y="196" width="0.4867%" height="15" fill="rgb(230,62,27)" fg:x="4314" fg:w="38"/><text x="55.5081%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (101 samples, 1.29%)</title><rect x="54.5024%" y="180" width="1.2937%" height="15" fill="rgb(216,154,8)" fg:x="4255" fg:w="101"/><text x="54.7524%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (21 samples, 0.27%)</title><rect x="55.8473%" y="180" width="0.2690%" height="15" fill="rgb(244,35,45)" fg:x="4360" fg:w="21"/><text x="56.0973%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (25 samples, 0.32%)</title><rect x="56.1163%" y="180" width="0.3202%" height="15" fill="rgb(251,115,12)" fg:x="4381" fg:w="25"/><text x="56.3663%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (4,361 samples, 55.86%)</title><rect x="0.6276%" y="164" width="55.8601%" height="15" fill="rgb(240,54,50)" fg:x="49" fg:w="4361"/><text x="0.8776%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (99 samples, 1.27%)</title><rect x="56.4878%" y="164" width="1.2681%" height="15" fill="rgb(233,84,52)" fg:x="4410" fg:w="99"/><text x="56.7378%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (28 samples, 0.36%)</title><rect x="57.3972%" y="180" width="0.3587%" height="15" fill="rgb(207,117,47)" fg:x="4481" fg:w="28"/><text x="57.6472%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (99 samples, 1.27%)</title><rect x="57.7687%" y="164" width="1.2681%" height="15" fill="rgb(249,43,39)" fg:x="4510" fg:w="99"/><text x="58.0187%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (16 samples, 0.20%)</title><rect x="58.8318%" y="180" width="0.2049%" height="15" fill="rgb(209,38,44)" fg:x="4593" fg:w="16"/><text x="59.0818%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (4,561 samples, 58.42%)</title><rect x="0.6276%" y="148" width="58.4219%" height="15" fill="rgb(236,212,23)" fg:x="49" fg:w="4561"/><text x="0.8776%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:194) (13 samples, 0.17%)</title><rect x="59.0496%" y="164" width="0.1665%" height="15" fill="rgb(242,79,21)" fg:x="4610" fg:w="13"/><text x="59.2996%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:65) (8 samples, 0.10%)</title><rect x="61.0734%" y="180" width="0.1025%" height="15" fill="rgb(211,96,35)" fg:x="4768" fg:w="8"/><text x="61.3234%" y="190.50"></text></g><g><title>lookup (kappybara/indexed_set.py:169) (30 samples, 0.38%)</title><rect x="63.8530%" y="212" width="0.3843%" height="15" fill="rgb(253,215,40)" fg:x="4985" fg:w="30"/><text x="64.1030%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (115 samples, 1.47%)</title><rect x="64.2372%" y="212" width="1.4730%" height="15" fill="rgb(211,81,21)" fg:x="5015" fg:w="115"/><text x="64.4872%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.24%)</title><rect x="65.4669%" y="228" width="0.2434%" height="15" fill="rgb(208,190,38)" fg:x="5111" fg:w="19"/><text x="65.7169%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:173) (26 samples, 0.33%)</title><rect x="65.7999%" y="212" width="0.3330%" height="15" fill="rgb(235,213,38)" fg:x="5137" fg:w="26"/><text x="66.0499%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (613 samples, 7.85%)</title><rect x="59.2161%" y="164" width="7.8519%" height="15" fill="rgb(237,122,38)" fg:x="4623" fg:w="613"/><text x="59.4661%" y="174.50">create_inde..</text></g><g><title>__call__ (kappybara/indexed_set.py:66) (460 samples, 5.89%)</title><rect x="61.1759%" y="180" width="5.8921%" height="15" fill="rgb(244,218,35)" fg:x="4776" fg:w="460"/><text x="61.4259%" y="190.50">__call_..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (403 samples, 5.16%)</title><rect x="61.9060%" y="196" width="5.1620%" height="15" fill="rgb(240,68,47)" fg:x="4833" fg:w="403"/><text x="62.1560%" y="206.50">&lt;lambd..</text></g><g><title>lookup (kappybara/indexed_set.py:174) (73 samples, 0.94%)</title><rect x="66.1330%" y="212" width="0.9351%" height="15" fill="rgb(210,16,53)" fg:x="5163" fg:w="73"/><text x="66.3830%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (93 samples, 1.19%)</title><rect x="71.3590%" y="180" width="1.1912%" height="15" fill="rgb(235,124,12)" fg:x="5571" fg:w="93"/><text x="71.6090%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.37%)</title><rect x="72.5503%" y="180" width="0.3715%" height="15" fill="rgb(224,169,11)" fg:x="5664" fg:w="29"/><text x="72.8003%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:118) (268 samples, 3.43%)</title><rect x="72.9217%" y="180" width="3.4328%" height="15" fill="rgb(250,166,2)" fg:x="5693" fg:w="268"/><text x="73.1717%" y="190.50">__i..</text></g><g><title>__init__ (kappybara/indexed_set.py:119) (62 samples, 0.79%)</title><rect x="76.3546%" y="180" width="0.7942%" height="15" fill="rgb(242,216,29)" fg:x="5961" fg:w="62"/><text x="76.6046%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (521 samples, 6.67%)</title><rect x="77.1487%" y="180" width="6.6735%" height="15" fill="rgb(230,116,27)" fg:x="6023" fg:w="521"/><text x="77.3987%" y="190.50">__init__ ..</text></g><g><title>__init__ (kappybara/indexed_set.py:123) (114 samples, 1.46%)</title><rect x="83.8222%" y="180" width="1.4602%" height="15" fill="rgb(228,99,48)" fg:x="6544" fg:w="114"/><text x="84.0722%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (327 samples, 4.19%)</title><rect x="85.2824%" y="180" width="4.1885%" height="15" fill="rgb(253,11,6)" fg:x="6658" fg:w="327"/><text x="85.5324%" y="190.50">__ini..</text></g><g><title>__init__ (kappybara/indexed_set.py:126) (39 samples, 0.50%)</title><rect x="89.4710%" y="180" width="0.4996%" height="15" fill="rgb(247,143,39)" fg:x="6985" fg:w="39"/><text x="89.7210%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:127) (26 samples, 0.33%)</title><rect x="89.9705%" y="180" width="0.3330%" height="15" fill="rgb(236,97,10)" fg:x="7024" fg:w="26"/><text x="90.2205%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (10 samples, 0.13%)</title><rect x="90.3036%" y="180" width="0.1281%" height="15" fill="rgb(233,208,19)" fg:x="7050" fg:w="10"/><text x="90.5536%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (10 samples, 0.13%)</title><rect x="91.8150%" y="196" width="0.1281%" height="15" fill="rgb(216,164,2)" fg:x="7168" fg:w="10"/><text x="92.0650%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (154 samples, 1.97%)</title><rect x="90.4317%" y="180" width="1.9726%" height="15" fill="rgb(220,129,5)" fg:x="7060" fg:w="154"/><text x="90.6817%" y="190.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (36 samples, 0.46%)</title><rect x="91.9431%" y="196" width="0.4611%" height="15" fill="rgb(242,17,10)" fg:x="7178" fg:w="36"/><text x="92.1931%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (12 samples, 0.15%)</title><rect x="93.5571%" y="196" width="0.1537%" height="15" fill="rgb(242,107,0)" fg:x="7304" fg:w="12"/><text x="93.8071%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (124 samples, 1.59%)</title><rect x="92.4043%" y="180" width="1.5883%" height="15" fill="rgb(251,28,31)" fg:x="7214" fg:w="124"/><text x="92.6543%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (22 samples, 0.28%)</title><rect x="93.7108%" y="196" width="0.2818%" height="15" fill="rgb(233,223,10)" fg:x="7316" fg:w="22"/><text x="93.9608%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:134) (55 samples, 0.70%)</title><rect x="93.9926%" y="180" width="0.7045%" height="15" fill="rgb(215,21,27)" fg:x="7338" fg:w="55"/><text x="94.2426%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (144 samples, 1.84%)</title><rect x="94.6971%" y="180" width="1.8445%" height="15" fill="rgb(232,23,21)" fg:x="7393" fg:w="144"/><text x="94.9471%" y="190.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (19 samples, 0.24%)</title><rect x="96.2982%" y="196" width="0.2434%" height="15" fill="rgb(244,5,23)" fg:x="7518" fg:w="19"/><text x="96.5482%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (2,983 samples, 38.21%)</title><rect x="59.0496%" y="148" width="38.2093%" height="15" fill="rgb(226,81,46)" fg:x="4610" fg:w="2983"/><text x="59.2996%" y="158.50">track_component (kappybara/mixture.py:94)</text></g><g><title>create_index (kappybara/indexed_set.py:198) (2,347 samples, 30.06%)</title><rect x="67.1961%" y="164" width="30.0628%" height="15" fill="rgb(247,70,30)" fg:x="5246" fg:w="2347"/><text x="67.4461%" y="174.50">create_index (kappybara/indexed_set.py:198)</text></g><g><title>add (kappybara/indexed_set.py:138) (56 samples, 0.72%)</title><rect x="96.5416%" y="180" width="0.7173%" height="15" fill="rgb(212,68,19)" fg:x="7537" fg:w="56"/><text x="96.7916%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (7,784 samples, 99.71%)</title><rect x="0.2049%" y="68" width="99.7054%" height="15" fill="rgb(240,187,13)" fg:x="16" fg:w="7784"/><text x="0.4549%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (7,776 samples, 99.60%)</title><rect x="0.3074%" y="84" width="99.6029%" height="15" fill="rgb(223,113,26)" fg:x="24" fg:w="7776"/><text x="0.5574%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (7,766 samples, 99.47%)</title><rect x="0.4355%" y="100" width="99.4748%" height="15" fill="rgb(206,192,2)" fg:x="34" fg:w="7766"/><text x="0.6855%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (7,753 samples, 99.31%)</title><rect x="0.6020%" y="116" width="99.3083%" height="15" fill="rgb(241,108,4)" fg:x="47" fg:w="7753"/><text x="0.8520%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (7,753 samples, 99.31%)</title><rect x="0.6020%" y="132" width="99.3083%" height="15" fill="rgb(247,173,49)" fg:x="47" fg:w="7753"/><text x="0.8520%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (207 samples, 2.65%)</title><rect x="97.2589%" y="148" width="2.6515%" height="15" fill="rgb(224,114,35)" fg:x="7593" fg:w="207"/><text x="97.5089%" y="158.50">tr..</text></g><g><title>all (7,807 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="7807"/><text x="0.2500%" y="62.50"></text></g></svg></svg>