<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit ccdf3fc</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="12028"><g><title>update (kappybara/system.py:69) (14 samples, 0.12%)</title><rect x="0.0831%" y="84" width="0.1164%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="14"/><text x="0.3331%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (14 samples, 0.12%)</title><rect x="0.0831%" y="100" width="0.1164%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="14"/><text x="0.3331%" y="110.50"></text></g><g><title>select (kappybara/rule.py:104) (31 samples, 0.26%)</title><rect x="0.2577%" y="116" width="0.2577%" height="15" fill="rgb(221,193,54)" fg:x="31" fg:w="31"/><text x="0.5077%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (37 samples, 0.31%)</title><rect x="0.2494%" y="100" width="0.3076%" height="15" fill="rgb(248,212,6)" fg:x="30" fg:w="37"/><text x="0.4994%" y="110.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (43 samples, 0.36%)</title><rect x="0.7067%" y="148" width="0.3575%" height="15" fill="rgb(208,68,35)" fg:x="85" fg:w="43"/><text x="0.9567%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (29 samples, 0.24%)</title><rect x="0.8231%" y="164" width="0.2411%" height="15" fill="rgb(232,128,0)" fg:x="99" fg:w="29"/><text x="1.0731%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (50 samples, 0.42%)</title><rect x="1.1058%" y="164" width="0.4157%" height="15" fill="rgb(207,160,47)" fg:x="133" fg:w="50"/><text x="1.3558%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:66) (17 samples, 0.14%)</title><rect x="1.3801%" y="180" width="0.1413%" height="15" fill="rgb(228,23,34)" fg:x="166" fg:w="17"/><text x="1.6301%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (31 samples, 0.26%)</title><rect x="1.7626%" y="180" width="0.2577%" height="15" fill="rgb(218,30,26)" fg:x="212" fg:w="31"/><text x="2.0126%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (29 samples, 0.24%)</title><rect x="2.0203%" y="180" width="0.2411%" height="15" fill="rgb(220,122,19)" fg:x="243" fg:w="29"/><text x="2.2703%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (33 samples, 0.27%)</title><rect x="2.3030%" y="180" width="0.2744%" height="15" fill="rgb(250,228,42)" fg:x="277" fg:w="33"/><text x="2.5530%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (201 samples, 1.67%)</title><rect x="1.0642%" y="148" width="1.6711%" height="15" fill="rgb(240,193,28)" fg:x="128" fg:w="201"/><text x="1.3142%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:198) (145 samples, 1.21%)</title><rect x="1.5298%" y="164" width="1.2055%" height="15" fill="rgb(216,20,37)" fg:x="184" fg:w="145"/><text x="1.7798%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:138) (19 samples, 0.16%)</title><rect x="2.5773%" y="180" width="0.1580%" height="15" fill="rgb(206,188,39)" fg:x="310" fg:w="19"/><text x="2.8273%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (86 samples, 0.71%)</title><rect x="2.8018%" y="148" width="0.7150%" height="15" fill="rgb(217,207,13)" fg:x="337" fg:w="86"/><text x="3.0518%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.12%)</title><rect x="3.4004%" y="164" width="0.1164%" height="15" fill="rgb(231,73,38)" fg:x="409" fg:w="14"/><text x="3.6504%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (17 samples, 0.14%)</title><rect x="3.5168%" y="148" width="0.1413%" height="15" fill="rgb(225,20,46)" fg:x="423" fg:w="17"/><text x="3.7668%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (87 samples, 0.72%)</title><rect x="4.4812%" y="180" width="0.7233%" height="15" fill="rgb(210,31,41)" fg:x="539" fg:w="87"/><text x="4.7312%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (51 samples, 0.42%)</title><rect x="4.7805%" y="196" width="0.4240%" height="15" fill="rgb(221,200,47)" fg:x="575" fg:w="51"/><text x="5.0305%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (569 samples, 4.73%)</title><rect x="0.6485%" y="132" width="4.7306%" height="15" fill="rgb(226,26,5)" fg:x="78" fg:w="569"/><text x="0.8985%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (203 samples, 1.69%)</title><rect x="3.6914%" y="148" width="1.6877%" height="15" fill="rgb(249,33,26)" fg:x="444" fg:w="203"/><text x="3.9414%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (184 samples, 1.53%)</title><rect x="3.8494%" y="164" width="1.5298%" height="15" fill="rgb(235,183,28)" fg:x="463" fg:w="184"/><text x="4.0994%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (15 samples, 0.12%)</title><rect x="5.2544%" y="180" width="0.1247%" height="15" fill="rgb(221,5,38)" fg:x="632" fg:w="15"/><text x="5.5044%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (582 samples, 4.84%)</title><rect x="0.5570%" y="116" width="4.8387%" height="15" fill="rgb(247,18,42)" fg:x="67" fg:w="582"/><text x="0.8070%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:261) (81 samples, 0.67%)</title><rect x="5.9361%" y="180" width="0.6734%" height="15" fill="rgb(241,131,45)" fg:x="714" fg:w="81"/><text x="6.1861%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.17%)</title><rect x="14.4330%" y="196" width="0.1746%" height="15" fill="rgb(249,31,29)" fg:x="1736" fg:w="21"/><text x="14.6830%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (1,008 samples, 8.38%)</title><rect x="6.6096%" y="180" width="8.3804%" height="15" fill="rgb(225,111,53)" fg:x="795" fg:w="1008"/><text x="6.8596%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (46 samples, 0.38%)</title><rect x="14.6076%" y="196" width="0.3824%" height="15" fill="rgb(238,160,17)" fg:x="1757" fg:w="46"/><text x="14.8576%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.11%)</title><rect x="17.6339%" y="196" width="0.1081%" height="15" fill="rgb(214,148,48)" fg:x="2121" fg:w="13"/><text x="17.8839%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (368 samples, 3.06%)</title><rect x="14.9900%" y="180" width="3.0595%" height="15" fill="rgb(232,36,49)" fg:x="1803" fg:w="368"/><text x="15.2400%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.31%)</title><rect x="17.7419%" y="196" width="0.3076%" height="15" fill="rgb(209,103,24)" fg:x="2134" fg:w="37"/><text x="17.9919%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (92 samples, 0.76%)</title><rect x="18.0828%" y="180" width="0.7649%" height="15" fill="rgb(229,88,8)" fg:x="2175" fg:w="92"/><text x="18.3328%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (62 samples, 0.52%)</title><rect x="18.8477%" y="180" width="0.5155%" height="15" fill="rgb(213,181,19)" fg:x="2267" fg:w="62"/><text x="19.0977%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.14%)</title><rect x="21.8740%" y="196" width="0.1413%" height="15" fill="rgb(254,191,54)" fg:x="2631" fg:w="17"/><text x="22.1240%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (363 samples, 3.02%)</title><rect x="19.3632%" y="180" width="3.0180%" height="15" fill="rgb(241,83,37)" fg:x="2329" fg:w="363"/><text x="19.6132%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (44 samples, 0.37%)</title><rect x="22.0153%" y="196" width="0.3658%" height="15" fill="rgb(233,36,39)" fg:x="2648" fg:w="44"/><text x="22.2653%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (274 samples, 2.28%)</title><rect x="22.3811%" y="180" width="2.2780%" height="15" fill="rgb(226,3,54)" fg:x="2692" fg:w="274"/><text x="22.6311%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (17 samples, 0.14%)</title><rect x="25.9894%" y="196" width="0.1413%" height="15" fill="rgb(245,192,40)" fg:x="3126" fg:w="17"/><text x="26.2394%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (106 samples, 0.88%)</title><rect x="26.1307%" y="196" width="0.8813%" height="15" fill="rgb(238,167,29)" fg:x="3143" fg:w="106"/><text x="26.3807%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (148 samples, 1.23%)</title><rect x="28.5667%" y="212" width="1.2305%" height="15" fill="rgb(232,182,51)" fg:x="3436" fg:w="148"/><text x="28.8167%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (132 samples, 1.10%)</title><rect x="31.2355%" y="228" width="1.0974%" height="15" fill="rgb(231,60,39)" fg:x="3757" fg:w="132"/><text x="31.4855%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,026 samples, 8.53%)</title><rect x="27.0452%" y="196" width="8.5301%" height="15" fill="rgb(208,69,12)" fg:x="3253" fg:w="1026"/><text x="27.2952%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (695 samples, 5.78%)</title><rect x="29.7971%" y="212" width="5.7782%" height="15" fill="rgb(235,93,37)" fg:x="3584" fg:w="695"/><text x="30.0471%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (390 samples, 3.24%)</title><rect x="32.3329%" y="228" width="3.2424%" height="15" fill="rgb(213,116,39)" fg:x="3889" fg:w="390"/><text x="32.5829%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (133 samples, 1.11%)</title><rect x="35.5753%" y="196" width="1.1058%" height="15" fill="rgb(222,207,29)" fg:x="4279" fg:w="133"/><text x="35.8253%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (15 samples, 0.12%)</title><rect x="37.5873%" y="212" width="0.1247%" height="15" fill="rgb(206,96,30)" fg:x="4521" fg:w="15"/><text x="37.8373%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (184 samples, 1.53%)</title><rect x="36.7642%" y="196" width="1.5298%" height="15" fill="rgb(218,138,4)" fg:x="4422" fg:w="184"/><text x="37.0142%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (70 samples, 0.58%)</title><rect x="37.7120%" y="212" width="0.5820%" height="15" fill="rgb(250,191,14)" fg:x="4536" fg:w="70"/><text x="37.9620%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (210 samples, 1.75%)</title><rect x="45.6601%" y="212" width="1.7459%" height="15" fill="rgb(239,60,40)" fg:x="5492" fg:w="210"/><text x="45.9101%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (175 samples, 1.45%)</title><rect x="47.5058%" y="212" width="1.4549%" height="15" fill="rgb(206,27,48)" fg:x="5714" fg:w="175"/><text x="47.7558%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (116 samples, 0.96%)</title><rect x="47.9963%" y="228" width="0.9644%" height="15" fill="rgb(225,35,8)" fg:x="5773" fg:w="116"/><text x="48.2463%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (13 samples, 0.11%)</title><rect x="49.8753%" y="228" width="0.1081%" height="15" fill="rgb(250,213,24)" fg:x="5999" fg:w="13"/><text x="50.1253%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.16%)</title><rect x="52.0951%" y="244" width="0.1580%" height="15" fill="rgb(247,123,22)" fg:x="6266" fg:w="19"/><text x="52.3451%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (547 samples, 4.55%)</title><rect x="49.9834%" y="228" width="4.5477%" height="15" fill="rgb(231,138,38)" fg:x="6012" fg:w="547"/><text x="50.2334%" y="238.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (274 samples, 2.28%)</title><rect x="52.2531%" y="244" width="2.2780%" height="15" fill="rgb(231,145,46)" fg:x="6285" fg:w="274"/><text x="52.5031%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (51 samples, 0.42%)</title><rect x="54.1071%" y="260" width="0.4240%" height="15" fill="rgb(251,118,11)" fg:x="6508" fg:w="51"/><text x="54.3571%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (274 samples, 2.28%)</title><rect x="54.5311%" y="228" width="2.2780%" height="15" fill="rgb(217,147,25)" fg:x="6559" fg:w="274"/><text x="54.7811%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (100 samples, 0.83%)</title><rect x="56.8091%" y="228" width="0.8314%" height="15" fill="rgb(247,81,37)" fg:x="6833" fg:w="100"/><text x="57.0591%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.12%)</title><rect x="57.6405%" y="228" width="0.1164%" height="15" fill="rgb(209,12,38)" fg:x="6933" fg:w="14"/><text x="57.8905%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,090 samples, 9.06%)</title><rect x="48.9608%" y="212" width="9.0622%" height="15" fill="rgb(227,1,9)" fg:x="5889" fg:w="1090"/><text x="49.2108%" y="222.50">embeds_in (ka..</text></g><g><title>coupled (kappybara/pattern.py:66) (32 samples, 0.27%)</title><rect x="57.7569%" y="228" width="0.2660%" height="15" fill="rgb(248,47,43)" fg:x="6947" fg:w="32"/><text x="58.0069%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (19 samples, 0.16%)</title><rect x="58.0978%" y="212" width="0.1580%" height="15" fill="rgb(221,10,30)" fg:x="6988" fg:w="19"/><text x="58.3478%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (301 samples, 2.50%)</title><rect x="58.2557%" y="212" width="2.5025%" height="15" fill="rgb(210,229,1)" fg:x="7007" fg:w="301"/><text x="58.5057%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (192 samples, 1.60%)</title><rect x="59.1620%" y="228" width="1.5963%" height="15" fill="rgb(222,148,37)" fg:x="7116" fg:w="192"/><text x="59.4120%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.26%)</title><rect x="60.5005%" y="244" width="0.2577%" height="15" fill="rgb(234,67,33)" fg:x="7277" fg:w="31"/><text x="60.7505%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (434 samples, 3.61%)</title><rect x="60.7582%" y="212" width="3.6082%" height="15" fill="rgb(247,98,35)" fg:x="7308" fg:w="434"/><text x="61.0082%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (300 samples, 2.49%)</title><rect x="61.8723%" y="228" width="2.4942%" height="15" fill="rgb(247,138,52)" fg:x="7442" fg:w="300"/><text x="62.1223%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (73 samples, 0.61%)</title><rect x="63.7596%" y="244" width="0.6069%" height="15" fill="rgb(213,79,30)" fg:x="7669" fg:w="73"/><text x="64.0096%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (72 samples, 0.60%)</title><rect x="64.3665%" y="212" width="0.5986%" height="15" fill="rgb(246,177,23)" fg:x="7742" fg:w="72"/><text x="64.6165%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (176 samples, 1.46%)</title><rect x="64.9651%" y="212" width="1.4633%" height="15" fill="rgb(230,62,27)" fg:x="7814" fg:w="176"/><text x="65.2151%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (60 samples, 0.50%)</title><rect x="66.4283%" y="212" width="0.4988%" height="15" fill="rgb(216,154,8)" fg:x="7990" fg:w="60"/><text x="66.6783%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (14 samples, 0.12%)</title><rect x="66.9272%" y="212" width="0.1164%" height="15" fill="rgb(244,35,45)" fg:x="8050" fg:w="14"/><text x="67.1772%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,738 samples, 31.08%)</title><rect x="38.2940%" y="196" width="31.0775%" height="15" fill="rgb(251,115,12)" fg:x="4606" fg:w="3738"/><text x="38.5440%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (280 samples, 2.33%)</title><rect x="67.0436%" y="212" width="2.3279%" height="15" fill="rgb(240,54,50)" fg:x="8064" fg:w="280"/><text x="67.2936%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,427 samples, 45.12%)</title><rect x="24.6591%" y="180" width="45.1197%" height="15" fill="rgb(233,84,52)" fg:x="2966" fg:w="5427"/><text x="24.9091%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (49 samples, 0.41%)</title><rect x="69.3715%" y="196" width="0.4074%" height="15" fill="rgb(207,117,47)" fg:x="8344" fg:w="49"/><text x="69.6215%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (59 samples, 0.49%)</title><rect x="70.7682%" y="196" width="0.4905%" height="15" fill="rgb(249,43,39)" fg:x="8512" fg:w="59"/><text x="71.0182%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (55 samples, 0.46%)</title><rect x="72.2231%" y="212" width="0.4573%" height="15" fill="rgb(209,38,44)" fg:x="8687" fg:w="55"/><text x="72.4731%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (537 samples, 4.46%)</title><rect x="69.8703%" y="180" width="4.4646%" height="15" fill="rgb(236,212,23)" fg:x="8404" fg:w="537"/><text x="70.1203%" y="190.50">embed..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (370 samples, 3.08%)</title><rect x="71.2587%" y="196" width="3.0762%" height="15" fill="rgb(242,79,21)" fg:x="8571" fg:w="370"/><text x="71.5087%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (199 samples, 1.65%)</title><rect x="72.6804%" y="212" width="1.6545%" height="15" fill="rgb(211,96,35)" fg:x="8742" fg:w="199"/><text x="72.9304%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (97 samples, 0.81%)</title><rect x="74.3349%" y="180" width="0.8065%" height="15" fill="rgb(253,215,40)" fg:x="8941" fg:w="97"/><text x="74.5849%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (47 samples, 0.39%)</title><rect x="74.7506%" y="196" width="0.3908%" height="15" fill="rgb(211,81,21)" fg:x="8991" fg:w="47"/><text x="75.0006%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (24 samples, 0.20%)</title><rect x="75.3824%" y="196" width="0.1995%" height="15" fill="rgb(208,190,38)" fg:x="9067" fg:w="24"/><text x="75.6324%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (113 samples, 0.94%)</title><rect x="75.1413%" y="180" width="0.9395%" height="15" fill="rgb(235,213,38)" fg:x="9038" fg:w="113"/><text x="75.3913%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (60 samples, 0.50%)</title><rect x="75.5820%" y="196" width="0.4988%" height="15" fill="rgb(237,122,38)" fg:x="9091" fg:w="60"/><text x="75.8320%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (205 samples, 1.70%)</title><rect x="76.0808%" y="180" width="1.7044%" height="15" fill="rgb(244,218,35)" fg:x="9151" fg:w="205"/><text x="76.3308%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.27%)</title><rect x="77.5191%" y="196" width="0.2660%" height="15" fill="rgb(240,68,47)" fg:x="9324" fg:w="32"/><text x="77.7691%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (73 samples, 0.61%)</title><rect x="77.7852%" y="180" width="0.6069%" height="15" fill="rgb(210,16,53)" fg:x="9356" fg:w="73"/><text x="78.0352%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (90 samples, 0.75%)</title><rect x="78.3921%" y="180" width="0.7483%" height="15" fill="rgb(235,124,12)" fg:x="9429" fg:w="90"/><text x="78.6421%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="79.0323%" y="196" width="0.1081%" height="15" fill="rgb(224,169,11)" fg:x="9506" fg:w="13"/><text x="79.2823%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (144 samples, 1.20%)</title><rect x="81.0276%" y="196" width="1.1972%" height="15" fill="rgb(250,166,2)" fg:x="9746" fg:w="144"/><text x="81.2776%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="82.0170%" y="212" width="0.2078%" height="15" fill="rgb(242,216,29)" fg:x="9865" fg:w="25"/><text x="82.2670%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (382 samples, 3.18%)</title><rect x="79.1403%" y="180" width="3.1759%" height="15" fill="rgb(230,116,27)" fg:x="9519" fg:w="382"/><text x="79.3903%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (34 samples, 0.28%)</title><rect x="82.3163%" y="180" width="0.2827%" height="15" fill="rgb(228,99,48)" fg:x="9901" fg:w="34"/><text x="82.5663%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,288 samples, 77.22%)</title><rect x="5.5454%" y="164" width="77.2198%" height="15" fill="rgb(253,11,6)" fg:x="667" fg:w="9288"/><text x="5.7954%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (110 samples, 0.91%)</title><rect x="82.7652%" y="164" width="0.9145%" height="15" fill="rgb(247,143,39)" fg:x="9955" fg:w="110"/><text x="83.0152%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (31 samples, 0.26%)</title><rect x="83.4220%" y="180" width="0.2577%" height="15" fill="rgb(236,97,10)" fg:x="10034" fg:w="31"/><text x="83.6720%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (140 samples, 1.16%)</title><rect x="83.6964%" y="164" width="1.1640%" height="15" fill="rgb(233,208,19)" fg:x="10067" fg:w="140"/><text x="83.9464%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (22 samples, 0.18%)</title><rect x="84.6774%" y="180" width="0.1829%" height="15" fill="rgb(216,164,2)" fg:x="10185" fg:w="22"/><text x="84.9274%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,549 samples, 79.39%)</title><rect x="5.4872%" y="148" width="79.3898%" height="15" fill="rgb(220,129,5)" fg:x="660" fg:w="9549"/><text x="5.7372%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:194) (20 samples, 0.17%)</title><rect x="84.9933%" y="164" width="0.1663%" height="15" fill="rgb(242,17,10)" fg:x="10223" fg:w="20"/><text x="85.2433%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:169) (59 samples, 0.49%)</title><rect x="88.7928%" y="212" width="0.4905%" height="15" fill="rgb(242,107,0)" fg:x="10680" fg:w="59"/><text x="89.0428%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (138 samples, 1.15%)</title><rect x="89.2833%" y="212" width="1.1473%" height="15" fill="rgb(251,28,31)" fg:x="10739" fg:w="138"/><text x="89.5333%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.23%)</title><rect x="90.1979%" y="228" width="0.2328%" height="15" fill="rgb(233,223,10)" fg:x="10849" fg:w="28"/><text x="90.4479%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:173) (25 samples, 0.21%)</title><rect x="90.4889%" y="212" width="0.2078%" height="15" fill="rgb(215,21,27)" fg:x="10884" fg:w="25"/><text x="90.7389%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (722 samples, 6.00%)</title><rect x="85.1596%" y="164" width="6.0027%" height="15" fill="rgb(232,23,21)" fg:x="10243" fg:w="722"/><text x="85.4096%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:66) (544 samples, 4.52%)</title><rect x="86.6395%" y="180" width="4.5228%" height="15" fill="rgb(244,5,23)" fg:x="10421" fg:w="544"/><text x="86.8895%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (476 samples, 3.96%)</title><rect x="87.2049%" y="196" width="3.9574%" height="15" fill="rgb(226,81,46)" fg:x="10489" fg:w="476"/><text x="87.4549%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:174) (56 samples, 0.47%)</title><rect x="90.6967%" y="212" width="0.4656%" height="15" fill="rgb(247,70,30)" fg:x="10909" fg:w="56"/><text x="90.9467%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.20%)</title><rect x="92.9082%" y="180" width="0.1995%" height="15" fill="rgb(212,68,19)" fg:x="11175" fg:w="24"/><text x="93.1582%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (17 samples, 0.14%)</title><rect x="93.3405%" y="180" width="0.1413%" height="15" fill="rgb(240,187,13)" fg:x="11227" fg:w="17"/><text x="93.5905%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (161 samples, 1.34%)</title><rect x="93.4819%" y="180" width="1.3385%" height="15" fill="rgb(223,113,26)" fg:x="11244" fg:w="161"/><text x="93.7319%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (28 samples, 0.23%)</title><rect x="94.5876%" y="196" width="0.2328%" height="15" fill="rgb(206,192,2)" fg:x="11377" fg:w="28"/><text x="94.8376%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (163 samples, 1.36%)</title><rect x="94.8204%" y="180" width="1.3552%" height="15" fill="rgb(241,108,4)" fg:x="11405" fg:w="163"/><text x="95.0704%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (29 samples, 0.24%)</title><rect x="95.9345%" y="196" width="0.2411%" height="15" fill="rgb(247,173,49)" fg:x="11539" fg:w="29"/><text x="96.1845%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:134) (42 samples, 0.35%)</title><rect x="96.1756%" y="180" width="0.3492%" height="15" fill="rgb(224,114,35)" fg:x="11568" fg:w="42"/><text x="96.4256%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (181 samples, 1.50%)</title><rect x="96.5248%" y="180" width="1.5048%" height="15" fill="rgb(245,159,27)" fg:x="11610" fg:w="181"/><text x="96.7748%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (24 samples, 0.20%)</title><rect x="97.8301%" y="196" width="0.1995%" height="15" fill="rgb(245,172,44)" fg:x="11767" fg:w="24"/><text x="98.0801%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,665 samples, 13.84%)</title><rect x="84.8770%" y="148" width="13.8427%" height="15" fill="rgb(236,23,11)" fg:x="10209" fg:w="1665"/><text x="85.1270%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:198) (899 samples, 7.47%)</title><rect x="91.2454%" y="164" width="7.4742%" height="15" fill="rgb(205,117,38)" fg:x="10975" fg:w="899"/><text x="91.4954%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:138) (83 samples, 0.69%)</title><rect x="98.0296%" y="180" width="0.6901%" height="15" fill="rgb(237,72,25)" fg:x="11791" fg:w="83"/><text x="98.2796%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (11,904 samples, 98.97%)</title><rect x="0.5570%" y="100" width="98.9691%" height="15" fill="rgb(244,70,9)" fg:x="67" fg:w="11904"/><text x="0.8070%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,313 samples, 94.06%)</title><rect x="5.4706%" y="116" width="94.0555%" height="15" fill="rgb(217,125,39)" fg:x="658" fg:w="11313"/><text x="5.7206%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,312 samples, 94.05%)</title><rect x="5.4789%" y="132" width="94.0472%" height="15" fill="rgb(235,36,10)" fg:x="659" fg:w="11312"/><text x="5.7289%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (85 samples, 0.71%)</title><rect x="98.8194%" y="148" width="0.7067%" height="15" fill="rgb(251,123,47)" fg:x="11886" fg:w="85"/><text x="99.0694%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (11,963 samples, 99.46%)</title><rect x="0.0831%" y="68" width="99.4596%" height="15" fill="rgb(221,13,13)" fg:x="10" fg:w="11963"/><text x="0.3331%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,949 samples, 99.34%)</title><rect x="0.1995%" y="84" width="99.3432%" height="15" fill="rgb(238,131,9)" fg:x="24" fg:w="11949"/><text x="0.4495%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>sites (kappybara/pattern.py:111) (20 samples, 0.17%)</title><rect x="99.7589%" y="68" width="0.1663%" height="15" fill="rgb(211,50,8)" fg:x="11999" fg:w="20"/><text x="100.0089%" y="78.50"></text></g><g><title>all (12,028 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="12028"/><text x="0.2500%" y="62.50"></text></g></svg></svg>