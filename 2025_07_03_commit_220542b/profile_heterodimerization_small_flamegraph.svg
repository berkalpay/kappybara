<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 220542b</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="4413"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (6 samples, 0.14%)</title><rect x="0.0000%" y="68" width="0.1360%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.14%)</title><rect x="0.0000%" y="84" width="0.1360%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.14%)</title><rect x="0.0000%" y="100" width="0.1360%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.14%)</title><rect x="0.0000%" y="116" width="0.1360%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.14%)</title><rect x="0.0000%" y="132" width="0.1360%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.14%)</title><rect x="0.0000%" y="148" width="0.1360%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (6 samples, 0.14%)</title><rect x="0.1360%" y="68" width="0.1360%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="6"/><text x="0.3860%" y="78.50"></text></g><g><title>act (kappybara/system.py:63) (7 samples, 0.16%)</title><rect x="0.4079%" y="100" width="0.1586%" height="15" fill="rgb(228,23,34)" fg:x="18" fg:w="7"/><text x="0.6579%" y="110.50"></text></g><g><title>select (kappybara/rule.py:90) (5 samples, 0.11%)</title><rect x="0.4532%" y="116" width="0.1133%" height="15" fill="rgb(218,30,26)" fg:x="20" fg:w="5"/><text x="0.7032%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (41 samples, 0.93%)</title><rect x="1.0197%" y="180" width="0.9291%" height="15" fill="rgb(220,122,19)" fg:x="45" fg:w="41"/><text x="1.2697%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.18%)</title><rect x="13.4149%" y="196" width="0.1813%" height="15" fill="rgb(250,228,42)" fg:x="592" fg:w="8"/><text x="13.6649%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (532 samples, 12.06%)</title><rect x="1.9488%" y="180" width="12.0553%" height="15" fill="rgb(240,193,28)" fg:x="86" fg:w="532"/><text x="2.1988%" y="190.50">embeddings (kappyb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.41%)</title><rect x="13.5962%" y="196" width="0.4079%" height="15" fill="rgb(216,20,37)" fg:x="600" fg:w="18"/><text x="13.8462%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.25%)</title><rect x="17.8337%" y="196" width="0.2493%" height="15" fill="rgb(206,188,39)" fg:x="787" fg:w="11"/><text x="18.0837%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (193 samples, 4.37%)</title><rect x="14.0041%" y="180" width="4.3734%" height="15" fill="rgb(217,207,13)" fg:x="618" fg:w="193"/><text x="14.2541%" y="190.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.29%)</title><rect x="18.0829%" y="196" width="0.2946%" height="15" fill="rgb(231,73,38)" fg:x="798" fg:w="13"/><text x="18.3329%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (47 samples, 1.07%)</title><rect x="18.3775%" y="180" width="1.0650%" height="15" fill="rgb(225,20,46)" fg:x="811" fg:w="47"/><text x="18.6275%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (34 samples, 0.77%)</title><rect x="19.4426%" y="180" width="0.7705%" height="15" fill="rgb(210,31,41)" fg:x="858" fg:w="34"/><text x="19.6926%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.14%)</title><rect x="23.1588%" y="196" width="0.1360%" height="15" fill="rgb(221,200,47)" fg:x="1022" fg:w="6"/><text x="23.4088%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (145 samples, 3.29%)</title><rect x="20.2130%" y="180" width="3.2857%" height="15" fill="rgb(226,26,5)" fg:x="892" fg:w="145"/><text x="20.4630%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.20%)</title><rect x="23.2948%" y="196" width="0.2039%" height="15" fill="rgb(249,33,26)" fg:x="1028" fg:w="9"/><text x="23.5448%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (115 samples, 2.61%)</title><rect x="23.4988%" y="180" width="2.6059%" height="15" fill="rgb(235,183,28)" fg:x="1037" fg:w="115"/><text x="23.7488%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (15 samples, 0.34%)</title><rect x="28.3027%" y="196" width="0.3399%" height="15" fill="rgb(221,5,38)" fg:x="1249" fg:w="15"/><text x="28.5527%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (45 samples, 1.02%)</title><rect x="28.6426%" y="196" width="1.0197%" height="15" fill="rgb(247,18,42)" fg:x="1264" fg:w="45"/><text x="28.8926%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (66 samples, 1.50%)</title><rect x="31.5205%" y="212" width="1.4956%" height="15" fill="rgb(241,131,45)" fg:x="1391" fg:w="66"/><text x="31.7705%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (46 samples, 1.04%)</title><rect x="35.2368%" y="228" width="1.0424%" height="15" fill="rgb(249,31,29)" fg:x="1555" fg:w="46"/><text x="35.4868%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (519 samples, 11.76%)</title><rect x="29.7303%" y="196" width="11.7607%" height="15" fill="rgb(225,111,53)" fg:x="1312" fg:w="519"/><text x="29.9803%" y="206.50">embeds_in (kappyb..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (374 samples, 8.47%)</title><rect x="33.0161%" y="212" width="8.4750%" height="15" fill="rgb(238,160,17)" fg:x="1457" fg:w="374"/><text x="33.2661%" y="222.50">__iter__ (ka..</text></g><g><title>sites (kappybara/pattern.py:113) (230 samples, 5.21%)</title><rect x="36.2792%" y="228" width="5.2119%" height="15" fill="rgb(214,148,48)" fg:x="1601" fg:w="230"/><text x="36.5292%" y="238.50">sites ..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (60 samples, 1.36%)</title><rect x="41.4910%" y="196" width="1.3596%" height="15" fill="rgb(232,36,49)" fg:x="1831" fg:w="60"/><text x="41.7410%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (22 samples, 0.50%)</title><rect x="43.5531%" y="212" width="0.4985%" height="15" fill="rgb(209,103,24)" fg:x="1922" fg:w="22"/><text x="43.8031%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (83 samples, 1.88%)</title><rect x="42.8960%" y="196" width="1.8808%" height="15" fill="rgb(229,88,8)" fg:x="1893" fg:w="83"/><text x="43.1460%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (32 samples, 0.73%)</title><rect x="44.0517%" y="212" width="0.7251%" height="15" fill="rgb(213,181,19)" fg:x="1944" fg:w="32"/><text x="44.3017%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (81 samples, 1.84%)</title><rect x="54.2262%" y="212" width="1.8355%" height="15" fill="rgb(254,191,54)" fg:x="2393" fg:w="81"/><text x="54.4762%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (5 samples, 0.11%)</title><rect x="56.0616%" y="212" width="0.1133%" height="15" fill="rgb(241,83,37)" fg:x="2474" fg:w="5"/><text x="56.3116%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (15 samples, 0.34%)</title><rect x="56.5375%" y="228" width="0.3399%" height="15" fill="rgb(233,36,39)" fg:x="2495" fg:w="15"/><text x="56.7875%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (73 samples, 1.65%)</title><rect x="56.1749%" y="212" width="1.6542%" height="15" fill="rgb(226,3,54)" fg:x="2479" fg:w="73"/><text x="56.4249%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (42 samples, 0.95%)</title><rect x="56.8774%" y="228" width="0.9517%" height="15" fill="rgb(245,192,40)" fg:x="2510" fg:w="42"/><text x="57.1274%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.25%)</title><rect x="61.4321%" y="244" width="0.2493%" height="15" fill="rgb(238,167,29)" fg:x="2711" fg:w="11"/><text x="61.6821%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (246 samples, 5.57%)</title><rect x="59.0301%" y="228" width="5.5744%" height="15" fill="rgb(232,182,51)" fg:x="2605" fg:w="246"/><text x="59.2801%" y="238.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (129 samples, 2.92%)</title><rect x="61.6814%" y="244" width="2.9232%" height="15" fill="rgb(231,60,39)" fg:x="2722" fg:w="129"/><text x="61.9314%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.29%)</title><rect x="64.3100%" y="260" width="0.2946%" height="15" fill="rgb(208,69,12)" fg:x="2838" fg:w="13"/><text x="64.5600%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (112 samples, 2.54%)</title><rect x="64.6046%" y="228" width="2.5380%" height="15" fill="rgb(235,93,37)" fg:x="2851" fg:w="112"/><text x="64.8546%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (43 samples, 0.97%)</title><rect x="67.1425%" y="228" width="0.9744%" height="15" fill="rgb(213,116,39)" fg:x="2963" fg:w="43"/><text x="67.3925%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (488 samples, 11.06%)</title><rect x="57.8291%" y="212" width="11.0582%" height="15" fill="rgb(222,207,29)" fg:x="2552" fg:w="488"/><text x="58.0791%" y="222.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:66) (32 samples, 0.73%)</title><rect x="68.1622%" y="228" width="0.7251%" height="15" fill="rgb(206,96,30)" fg:x="3008" fg:w="32"/><text x="68.4122%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (8 samples, 0.18%)</title><rect x="68.9780%" y="212" width="0.1813%" height="15" fill="rgb(218,138,4)" fg:x="3044" fg:w="8"/><text x="69.2280%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (7 samples, 0.16%)</title><rect x="69.8391%" y="228" width="0.1586%" height="15" fill="rgb(250,191,14)" fg:x="3082" fg:w="7"/><text x="70.0891%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.14%)</title><rect x="70.8588%" y="244" width="0.1360%" height="15" fill="rgb(239,60,40)" fg:x="3127" fg:w="6"/><text x="71.1088%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (93 samples, 2.11%)</title><rect x="69.1593%" y="212" width="2.1074%" height="15" fill="rgb(206,27,48)" fg:x="3052" fg:w="93"/><text x="69.4093%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (56 samples, 1.27%)</title><rect x="69.9977%" y="228" width="1.2690%" height="15" fill="rgb(225,35,8)" fg:x="3089" fg:w="56"/><text x="70.2477%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.27%)</title><rect x="70.9948%" y="244" width="0.2719%" height="15" fill="rgb(250,213,24)" fg:x="3133" fg:w="12"/><text x="71.2448%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.11%)</title><rect x="71.7879%" y="228" width="0.1133%" height="15" fill="rgb(247,123,22)" fg:x="3168" fg:w="5"/><text x="72.0379%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (66 samples, 1.50%)</title><rect x="71.2667%" y="212" width="1.4956%" height="15" fill="rgb(231,138,38)" fg:x="3145" fg:w="66"/><text x="71.5167%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (38 samples, 0.86%)</title><rect x="71.9012%" y="228" width="0.8611%" height="15" fill="rgb(231,145,46)" fg:x="3173" fg:w="38"/><text x="72.1512%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.16%)</title><rect x="72.6037%" y="244" width="0.1586%" height="15" fill="rgb(251,118,11)" fg:x="3204" fg:w="7"/><text x="72.8537%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (19 samples, 0.43%)</title><rect x="72.7623%" y="212" width="0.4305%" height="15" fill="rgb(217,147,25)" fg:x="3211" fg:w="19"/><text x="73.0123%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (52 samples, 1.18%)</title><rect x="73.2155%" y="212" width="1.1783%" height="15" fill="rgb(247,81,37)" fg:x="3231" fg:w="52"/><text x="73.4655%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (28 samples, 0.63%)</title><rect x="74.3938%" y="212" width="0.6345%" height="15" fill="rgb(209,12,38)" fg:x="3283" fg:w="28"/><text x="74.6438%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (9 samples, 0.20%)</title><rect x="75.0283%" y="212" width="0.2039%" height="15" fill="rgb(227,1,9)" fg:x="3311" fg:w="9"/><text x="75.2783%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,479 samples, 33.51%)</title><rect x="44.7768%" y="196" width="33.5146%" height="15" fill="rgb(248,47,43)" fg:x="1976" fg:w="1479"/><text x="45.0268%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (135 samples, 3.06%)</title><rect x="75.2323%" y="212" width="3.0591%" height="15" fill="rgb(221,10,30)" fg:x="3320" fg:w="135"/><text x="75.4823%" y="222.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,322 samples, 52.62%)</title><rect x="26.1047%" y="180" width="52.6173%" height="15" fill="rgb(210,229,1)" fg:x="1152" fg:w="2322"/><text x="26.3547%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (19 samples, 0.43%)</title><rect x="78.2914%" y="196" width="0.4305%" height="15" fill="rgb(222,148,37)" fg:x="3455" fg:w="19"/><text x="78.5414%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (27 samples, 0.61%)</title><rect x="80.4668%" y="196" width="0.6118%" height="15" fill="rgb(234,67,33)" fg:x="3551" fg:w="27"/><text x="80.7168%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (22 samples, 0.50%)</title><rect x="82.1437%" y="212" width="0.4985%" height="15" fill="rgb(247,98,35)" fg:x="3625" fg:w="22"/><text x="82.3937%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (290 samples, 6.57%)</title><rect x="78.7673%" y="180" width="6.5715%" height="15" fill="rgb(247,138,52)" fg:x="3476" fg:w="290"/><text x="79.0173%" y="190.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (188 samples, 4.26%)</title><rect x="81.0786%" y="196" width="4.2601%" height="15" fill="rgb(213,79,30)" fg:x="3578" fg:w="188"/><text x="81.3286%" y="206.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (119 samples, 2.70%)</title><rect x="82.6422%" y="212" width="2.6966%" height="15" fill="rgb(246,177,23)" fg:x="3647" fg:w="119"/><text x="82.8922%" y="222.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:101) (5 samples, 0.11%)</title><rect x="85.9959%" y="196" width="0.1133%" height="15" fill="rgb(230,62,27)" fg:x="3795" fg:w="5"/><text x="86.2459%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (56 samples, 1.27%)</title><rect x="85.3388%" y="180" width="1.2690%" height="15" fill="rgb(216,154,8)" fg:x="3766" fg:w="56"/><text x="85.5888%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (22 samples, 0.50%)</title><rect x="86.1092%" y="196" width="0.4985%" height="15" fill="rgb(244,35,45)" fg:x="3800" fg:w="22"/><text x="86.3592%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (54 samples, 1.22%)</title><rect x="86.6077%" y="180" width="1.2237%" height="15" fill="rgb(251,115,12)" fg:x="3822" fg:w="54"/><text x="86.8577%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (30 samples, 0.68%)</title><rect x="87.1516%" y="196" width="0.6798%" height="15" fill="rgb(240,54,50)" fg:x="3846" fg:w="30"/><text x="87.4016%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.14%)</title><rect x="88.9191%" y="196" width="0.1360%" height="15" fill="rgb(233,84,52)" fg:x="3924" fg:w="6"/><text x="89.1691%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (57 samples, 1.29%)</title><rect x="87.8314%" y="180" width="1.2916%" height="15" fill="rgb(207,117,47)" fg:x="3876" fg:w="57"/><text x="88.0814%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (13 samples, 0.29%)</title><rect x="89.1230%" y="180" width="0.2946%" height="15" fill="rgb(249,43,39)" fg:x="3933" fg:w="13"/><text x="89.3730%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (31 samples, 0.70%)</title><rect x="89.4176%" y="180" width="0.7025%" height="15" fill="rgb(209,38,44)" fg:x="3946" fg:w="31"/><text x="89.6676%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (38 samples, 0.86%)</title><rect x="91.6383%" y="196" width="0.8611%" height="15" fill="rgb(236,212,23)" fg:x="4044" fg:w="38"/><text x="91.8883%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (109 samples, 2.47%)</title><rect x="90.1201%" y="180" width="2.4700%" height="15" fill="rgb(242,79,21)" fg:x="3977" fg:w="109"/><text x="90.3701%" y="190.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:287) (20 samples, 0.45%)</title><rect x="92.6354%" y="180" width="0.4532%" height="15" fill="rgb(211,96,35)" fg:x="4088" fg:w="20"/><text x="92.8854%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (6 samples, 0.14%)</title><rect x="93.0886%" y="180" width="0.1360%" height="15" fill="rgb(253,215,40)" fg:x="4108" fg:w="6"/><text x="93.3386%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (4,094 samples, 92.77%)</title><rect x="0.6571%" y="164" width="92.7714%" height="15" fill="rgb(211,81,21)" fg:x="29" fg:w="4094"/><text x="0.9071%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>embeddings (kappybara/pattern.py:290) (9 samples, 0.20%)</title><rect x="93.2246%" y="180" width="0.2039%" height="15" fill="rgb(208,190,38)" fg:x="4114" fg:w="9"/><text x="93.4746%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (6 samples, 0.14%)</title><rect x="94.8788%" y="180" width="0.1360%" height="15" fill="rgb(235,213,38)" fg:x="4187" fg:w="6"/><text x="95.1288%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (76 samples, 1.72%)</title><rect x="93.4285%" y="164" width="1.7222%" height="15" fill="rgb(237,122,38)" fg:x="4123" fg:w="76"/><text x="93.6785%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (6 samples, 0.14%)</title><rect x="95.0147%" y="180" width="0.1360%" height="15" fill="rgb(244,218,35)" fg:x="4193" fg:w="6"/><text x="95.2647%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (4,288 samples, 97.17%)</title><rect x="0.5665%" y="148" width="97.1675%" height="15" fill="rgb(240,68,47)" fg:x="25" fg:w="4288"/><text x="0.8165%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (113 samples, 2.56%)</title><rect x="95.1734%" y="164" width="2.5606%" height="15" fill="rgb(210,16,53)" fg:x="4200" fg:w="113"/><text x="95.4234%" y="174.50">__..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (5 samples, 0.11%)</title><rect x="97.6207%" y="180" width="0.1133%" height="15" fill="rgb(235,124,12)" fg:x="4308" fg:w="5"/><text x="97.8707%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,363 samples, 98.87%)</title><rect x="0.2719%" y="68" width="98.8670%" height="15" fill="rgb(224,169,11)" fg:x="12" fg:w="4363"/><text x="0.5219%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,360 samples, 98.80%)</title><rect x="0.3399%" y="84" width="98.7990%" height="15" fill="rgb(250,166,2)" fg:x="15" fg:w="4360"/><text x="0.5899%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,350 samples, 98.57%)</title><rect x="0.5665%" y="100" width="98.5724%" height="15" fill="rgb(242,216,29)" fg:x="25" fg:w="4350"/><text x="0.8165%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:101) (4,350 samples, 98.57%)</title><rect x="0.5665%" y="116" width="98.5724%" height="15" fill="rgb(230,116,27)" fg:x="25" fg:w="4350"/><text x="0.8165%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (4,350 samples, 98.57%)</title><rect x="0.5665%" y="132" width="98.5724%" height="15" fill="rgb(228,99,48)" fg:x="25" fg:w="4350"/><text x="0.8165%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (62 samples, 1.40%)</title><rect x="97.7340%" y="148" width="1.4049%" height="15" fill="rgb(253,11,6)" fg:x="4313" fg:w="62"/><text x="97.9840%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (12 samples, 0.27%)</title><rect x="99.1389%" y="68" width="0.2719%" height="15" fill="rgb(247,143,39)" fg:x="4375" fg:w="12"/><text x="99.3889%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (11 samples, 0.25%)</title><rect x="99.4108%" y="68" width="0.2493%" height="15" fill="rgb(236,97,10)" fg:x="4387" fg:w="11"/><text x="99.6608%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (7 samples, 0.16%)</title><rect x="99.6601%" y="68" width="0.1586%" height="15" fill="rgb(233,208,19)" fg:x="4398" fg:w="7"/><text x="99.9101%" y="78.50"></text></g><g><title>all (4,413 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="4413"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:113) (8 samples, 0.18%)</title><rect x="99.8187%" y="68" width="0.1813%" height="15" fill="rgb(220,129,5)" fg:x="4405" fg:w="8"/><text x="100.0687%" y="78.50"></text></g></svg></svg>