<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 9ade368</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9903"><g><title>n_embeddings (kappybara/rule.py:184) (15 samples, 0.15%)</title><rect x="0.3332%" y="180" width="0.1515%" height="15" fill="rgb(227,0,7)" fg:x="33" fg:w="15"/><text x="0.5832%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (67 samples, 0.68%)</title><rect x="0.1010%" y="84" width="0.6766%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="67"/><text x="0.3510%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (67 samples, 0.68%)</title><rect x="0.1010%" y="100" width="0.6766%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="67"/><text x="0.3510%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (59 samples, 0.60%)</title><rect x="0.1818%" y="116" width="0.5958%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="59"/><text x="0.4318%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (57 samples, 0.58%)</title><rect x="0.2020%" y="132" width="0.5756%" height="15" fill="rgb(208,68,35)" fg:x="20" fg:w="57"/><text x="0.4520%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (57 samples, 0.58%)</title><rect x="0.2020%" y="148" width="0.5756%" height="15" fill="rgb(232,128,0)" fg:x="20" fg:w="57"/><text x="0.4520%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (56 samples, 0.57%)</title><rect x="0.2121%" y="164" width="0.5655%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="56"/><text x="0.4621%" y="174.50"></text></g><g><title>act (kappybara/system.py:62) (10 samples, 0.10%)</title><rect x="0.8179%" y="100" width="0.1010%" height="15" fill="rgb(228,23,34)" fg:x="81" fg:w="10"/><text x="1.0679%" y="110.50"></text></g><g><title>select (kappybara/rule.py:103) (24 samples, 0.24%)</title><rect x="0.9189%" y="116" width="0.2424%" height="15" fill="rgb(218,30,26)" fg:x="91" fg:w="24"/><text x="1.1689%" y="126.50"></text></g><g><title>select (kappybara/rule.py:217) (25 samples, 0.25%)</title><rect x="1.2219%" y="116" width="0.2524%" height="15" fill="rgb(220,122,19)" fg:x="121" fg:w="25"/><text x="1.4719%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (62 samples, 0.63%)</title><rect x="0.9189%" y="100" width="0.6261%" height="15" fill="rgb(250,228,42)" fg:x="91" fg:w="62"/><text x="1.1689%" y="110.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (15 samples, 0.15%)</title><rect x="1.6561%" y="148" width="0.1515%" height="15" fill="rgb(240,193,28)" fg:x="164" fg:w="15"/><text x="1.9061%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (98 samples, 0.99%)</title><rect x="1.8681%" y="148" width="0.9896%" height="15" fill="rgb(216,20,37)" fg:x="185" fg:w="98"/><text x="2.1181%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.10%)</title><rect x="2.7567%" y="164" width="0.1010%" height="15" fill="rgb(206,188,39)" fg:x="273" fg:w="10"/><text x="3.0067%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (23 samples, 0.23%)</title><rect x="2.8577%" y="148" width="0.2323%" height="15" fill="rgb(217,207,13)" fg:x="283" fg:w="23"/><text x="3.1077%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (11 samples, 0.11%)</title><rect x="4.0796%" y="180" width="0.1111%" height="15" fill="rgb(231,73,38)" fg:x="404" fg:w="11"/><text x="4.3296%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (68 samples, 0.69%)</title><rect x="4.1906%" y="180" width="0.6867%" height="15" fill="rgb(225,20,46)" fg:x="415" fg:w="68"/><text x="4.4406%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (41 samples, 0.41%)</title><rect x="4.4633%" y="196" width="0.4140%" height="15" fill="rgb(210,31,41)" fg:x="442" fg:w="41"/><text x="4.7133%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (354 samples, 3.57%)</title><rect x="1.6056%" y="132" width="3.5747%" height="15" fill="rgb(221,200,47)" fg:x="159" fg:w="354"/><text x="1.8556%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (203 samples, 2.05%)</title><rect x="3.1304%" y="148" width="2.0499%" height="15" fill="rgb(226,26,5)" fg:x="310" fg:w="203"/><text x="3.3804%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (179 samples, 1.81%)</title><rect x="3.3727%" y="164" width="1.8075%" height="15" fill="rgb(249,33,26)" fg:x="334" fg:w="179"/><text x="3.6227%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (27 samples, 0.27%)</title><rect x="4.9076%" y="180" width="0.2726%" height="15" fill="rgb(235,183,28)" fg:x="486" fg:w="27"/><text x="5.1576%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (18 samples, 0.18%)</title><rect x="5.1802%" y="132" width="0.1818%" height="15" fill="rgb(221,5,38)" fg:x="513" fg:w="18"/><text x="5.4302%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (11 samples, 0.11%)</title><rect x="5.2509%" y="148" width="0.1111%" height="15" fill="rgb(247,18,42)" fg:x="520" fg:w="11"/><text x="5.5009%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (381 samples, 3.85%)</title><rect x="1.5450%" y="116" width="3.8473%" height="15" fill="rgb(241,131,45)" fg:x="153" fg:w="381"/><text x="1.7950%" y="126.50">appl..</text></g><g><title>embeddings (kappybara/pattern.py:256) (62 samples, 0.63%)</title><rect x="5.9477%" y="148" width="0.6261%" height="15" fill="rgb(249,31,29)" fg:x="589" fg:w="62"/><text x="6.1977%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.19%)</title><rect x="10.5827%" y="164" width="0.1919%" height="15" fill="rgb(225,111,53)" fg:x="1048" fg:w="19"/><text x="10.8327%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (448 samples, 4.52%)</title><rect x="6.5738%" y="148" width="4.5239%" height="15" fill="rgb(238,160,17)" fg:x="651" fg:w="448"/><text x="6.8238%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.32%)</title><rect x="10.7745%" y="164" width="0.3231%" height="15" fill="rgb(214,148,48)" fg:x="1067" fg:w="32"/><text x="11.0245%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.15%)</title><rect x="13.8645%" y="164" width="0.1515%" height="15" fill="rgb(232,36,49)" fg:x="1373" fg:w="15"/><text x="14.1145%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (315 samples, 3.18%)</title><rect x="11.0976%" y="148" width="3.1809%" height="15" fill="rgb(209,103,24)" fg:x="1099" fg:w="315"/><text x="11.3476%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.26%)</title><rect x="14.0160%" y="164" width="0.2625%" height="15" fill="rgb(229,88,8)" fg:x="1388" fg:w="26"/><text x="14.2660%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (84 samples, 0.85%)</title><rect x="14.2987%" y="148" width="0.8482%" height="15" fill="rgb(213,181,19)" fg:x="1416" fg:w="84"/><text x="14.5487%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (64 samples, 0.65%)</title><rect x="15.1469%" y="148" width="0.6463%" height="15" fill="rgb(254,191,54)" fg:x="1500" fg:w="64"/><text x="15.3969%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.20%)</title><rect x="18.0450%" y="164" width="0.2020%" height="15" fill="rgb(241,83,37)" fg:x="1787" fg:w="20"/><text x="18.2950%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (276 samples, 2.79%)</title><rect x="15.7932%" y="148" width="2.7870%" height="15" fill="rgb(233,36,39)" fg:x="1564" fg:w="276"/><text x="16.0432%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.33%)</title><rect x="18.2470%" y="164" width="0.3332%" height="15" fill="rgb(226,3,54)" fg:x="1807" fg:w="33"/><text x="18.4970%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (291 samples, 2.94%)</title><rect x="18.5802%" y="148" width="2.9385%" height="15" fill="rgb(245,192,40)" fg:x="1840" fg:w="291"/><text x="18.8302%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (22 samples, 0.22%)</title><rect x="23.9927%" y="164" width="0.2222%" height="15" fill="rgb(238,167,29)" fg:x="2376" fg:w="22"/><text x="24.2427%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (79 samples, 0.80%)</title><rect x="24.2149%" y="164" width="0.7977%" height="15" fill="rgb(232,182,51)" fg:x="2398" fg:w="79"/><text x="24.4649%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (118 samples, 1.19%)</title><rect x="27.0120%" y="180" width="1.1916%" height="15" fill="rgb(231,60,39)" fg:x="2675" fg:w="118"/><text x="27.2620%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (95 samples, 0.96%)</title><rect x="30.1828%" y="196" width="0.9593%" height="15" fill="rgb(208,69,12)" fg:x="2989" fg:w="95"/><text x="30.4328%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,005 samples, 10.15%)</title><rect x="25.0429%" y="164" width="10.1484%" height="15" fill="rgb(235,93,37)" fg:x="2480" fg:w="1005"/><text x="25.2929%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (692 samples, 6.99%)</title><rect x="28.2036%" y="180" width="6.9878%" height="15" fill="rgb(213,116,39)" fg:x="2793" fg:w="692"/><text x="28.4536%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (401 samples, 4.05%)</title><rect x="31.1421%" y="196" width="4.0493%" height="15" fill="rgb(222,207,29)" fg:x="3084" fg:w="401"/><text x="31.3921%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (126 samples, 1.27%)</title><rect x="35.1914%" y="164" width="1.2723%" height="15" fill="rgb(206,96,30)" fg:x="3485" fg:w="126"/><text x="35.4414%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (78 samples, 0.79%)</title><rect x="37.4533%" y="180" width="0.7876%" height="15" fill="rgb(218,138,4)" fg:x="3709" fg:w="78"/><text x="37.7033%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (183 samples, 1.85%)</title><rect x="36.5546%" y="164" width="1.8479%" height="15" fill="rgb(250,191,14)" fg:x="3620" fg:w="183"/><text x="36.8046%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (16 samples, 0.16%)</title><rect x="38.2409%" y="180" width="0.1616%" height="15" fill="rgb(239,60,40)" fg:x="3787" fg:w="16"/><text x="38.4909%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (219 samples, 2.21%)</title><rect x="48.3389%" y="180" width="2.2115%" height="15" fill="rgb(206,27,48)" fg:x="4787" fg:w="219"/><text x="48.5889%" y="190.50">_..</text></g><g><title>stated (kappybara/pattern.py:50) (19 samples, 0.19%)</title><rect x="51.2067%" y="196" width="0.1919%" height="15" fill="rgb(225,35,8)" fg:x="5071" fg:w="19"/><text x="51.4567%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (176 samples, 1.78%)</title><rect x="50.6210%" y="180" width="1.7772%" height="15" fill="rgb(250,213,24)" fg:x="5013" fg:w="176"/><text x="50.8710%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (99 samples, 1.00%)</title><rect x="51.3986%" y="196" width="0.9997%" height="15" fill="rgb(247,123,22)" fg:x="5090" fg:w="99"/><text x="51.6486%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (29 samples, 0.29%)</title><rect x="53.7514%" y="196" width="0.2928%" height="15" fill="rgb(231,138,38)" fg:x="5323" fg:w="29"/><text x="54.0014%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (21 samples, 0.21%)</title><rect x="56.4071%" y="212" width="0.2121%" height="15" fill="rgb(231,145,46)" fg:x="5586" fg:w="21"/><text x="56.6571%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.14%)</title><rect x="58.7903%" y="228" width="0.1414%" height="15" fill="rgb(251,118,11)" fg:x="5822" fg:w="14"/><text x="59.0403%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (519 samples, 5.24%)</title><rect x="54.0442%" y="196" width="5.2408%" height="15" fill="rgb(217,147,25)" fg:x="5352" fg:w="519"/><text x="54.2942%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (264 samples, 2.67%)</title><rect x="56.6192%" y="212" width="2.6659%" height="15" fill="rgb(247,81,37)" fg:x="5607" fg:w="264"/><text x="56.8692%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.35%)</title><rect x="58.9316%" y="228" width="0.3534%" height="15" fill="rgb(209,12,38)" fg:x="5836" fg:w="35"/><text x="59.1816%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (248 samples, 2.50%)</title><rect x="59.2851%" y="196" width="2.5043%" height="15" fill="rgb(227,1,9)" fg:x="5871" fg:w="248"/><text x="59.5351%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (107 samples, 1.08%)</title><rect x="61.7894%" y="196" width="1.0805%" height="15" fill="rgb(248,47,43)" fg:x="6119" fg:w="107"/><text x="62.0394%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (14 samples, 0.14%)</title><rect x="62.8698%" y="196" width="0.1414%" height="15" fill="rgb(221,10,30)" fg:x="6226" fg:w="14"/><text x="63.1198%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,092 samples, 11.03%)</title><rect x="52.3983%" y="180" width="11.0270%" height="15" fill="rgb(210,229,1)" fg:x="5189" fg:w="1092"/><text x="52.6483%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (41 samples, 0.41%)</title><rect x="63.0112%" y="196" width="0.4140%" height="15" fill="rgb(222,148,37)" fg:x="6240" fg:w="41"/><text x="63.2612%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (32 samples, 0.32%)</title><rect x="63.4959%" y="180" width="0.3231%" height="15" fill="rgb(234,67,33)" fg:x="6288" fg:w="32"/><text x="63.7459%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.14%)</title><rect x="64.9298%" y="196" width="0.1414%" height="15" fill="rgb(247,98,35)" fg:x="6430" fg:w="14"/><text x="65.1798%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.17%)</title><rect x="66.7676%" y="212" width="0.1717%" height="15" fill="rgb(247,138,52)" fg:x="6612" fg:w="17"/><text x="67.0176%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (341 samples, 3.44%)</title><rect x="63.8190%" y="180" width="3.4434%" height="15" fill="rgb(213,79,30)" fg:x="6320" fg:w="341"/><text x="64.0690%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (217 samples, 2.19%)</title><rect x="65.0712%" y="196" width="2.1913%" height="15" fill="rgb(246,177,23)" fg:x="6444" fg:w="217"/><text x="65.3212%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.32%)</title><rect x="66.9393%" y="212" width="0.3231%" height="15" fill="rgb(230,62,27)" fg:x="6629" fg:w="32"/><text x="67.1893%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.10%)</title><rect x="68.6863%" y="196" width="0.1010%" height="15" fill="rgb(216,154,8)" fg:x="6802" fg:w="10"/><text x="68.9363%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.13%)</title><rect x="70.6251%" y="212" width="0.1313%" height="15" fill="rgb(244,35,45)" fg:x="6994" fg:w="13"/><text x="70.8751%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (395 samples, 3.99%)</title><rect x="67.2624%" y="180" width="3.9887%" height="15" fill="rgb(251,115,12)" fg:x="6661" fg:w="395"/><text x="67.5124%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (244 samples, 2.46%)</title><rect x="68.7872%" y="196" width="2.4639%" height="15" fill="rgb(240,54,50)" fg:x="6812" fg:w="244"/><text x="69.0372%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (49 samples, 0.49%)</title><rect x="70.7563%" y="212" width="0.4948%" height="15" fill="rgb(233,84,52)" fg:x="7007" fg:w="49"/><text x="71.0063%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (92 samples, 0.93%)</title><rect x="71.2511%" y="180" width="0.9290%" height="15" fill="rgb(207,117,47)" fg:x="7056" fg:w="92"/><text x="71.5011%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (171 samples, 1.73%)</title><rect x="72.2104%" y="180" width="1.7267%" height="15" fill="rgb(249,43,39)" fg:x="7151" fg:w="171"/><text x="72.4604%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (109 samples, 1.10%)</title><rect x="73.9372%" y="180" width="1.1007%" height="15" fill="rgb(209,38,44)" fg:x="7322" fg:w="109"/><text x="74.1872%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (25 samples, 0.25%)</title><rect x="75.0379%" y="180" width="0.2524%" height="15" fill="rgb(236,212,23)" fg:x="7431" fg:w="25"/><text x="75.2879%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,974 samples, 40.13%)</title><rect x="38.4025%" y="164" width="40.1293%" height="15" fill="rgb(242,79,21)" fg:x="3803" fg:w="3974"/><text x="38.6525%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (321 samples, 3.24%)</title><rect x="75.2903%" y="180" width="3.2414%" height="15" fill="rgb(211,96,35)" fg:x="7456" fg:w="321"/><text x="75.5403%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,691 samples, 57.47%)</title><rect x="21.5187%" y="148" width="57.4674%" height="15" fill="rgb(253,215,40)" fg:x="2131" fg:w="5691"/><text x="21.7687%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (45 samples, 0.45%)</title><rect x="78.5318%" y="164" width="0.4544%" height="15" fill="rgb(211,81,21)" fg:x="7777" fg:w="45"/><text x="78.7818%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (16 samples, 0.16%)</title><rect x="78.9862%" y="148" width="0.1616%" height="15" fill="rgb(208,190,38)" fg:x="7822" fg:w="16"/><text x="79.2362%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (67 samples, 0.68%)</title><rect x="80.5110%" y="164" width="0.6766%" height="15" fill="rgb(235,213,38)" fg:x="7973" fg:w="67"/><text x="80.7610%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (44 samples, 0.44%)</title><rect x="82.3488%" y="180" width="0.4443%" height="15" fill="rgb(237,122,38)" fg:x="8155" fg:w="44"/><text x="82.5988%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (603 samples, 6.09%)</title><rect x="79.1578%" y="148" width="6.0891%" height="15" fill="rgb(244,218,35)" fg:x="7839" fg:w="603"/><text x="79.4078%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (402 samples, 4.06%)</title><rect x="81.1875%" y="164" width="4.0594%" height="15" fill="rgb(240,68,47)" fg:x="8040" fg:w="402"/><text x="81.4375%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (243 samples, 2.45%)</title><rect x="82.7931%" y="180" width="2.4538%" height="15" fill="rgb(210,16,53)" fg:x="8199" fg:w="243"/><text x="83.0431%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (38 samples, 0.38%)</title><rect x="85.8326%" y="164" width="0.3837%" height="15" fill="rgb(235,124,12)" fg:x="8500" fg:w="38"/><text x="86.0826%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (108 samples, 1.09%)</title><rect x="85.2469%" y="148" width="1.0906%" height="15" fill="rgb(224,169,11)" fg:x="8442" fg:w="108"/><text x="85.4969%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (12 samples, 0.12%)</title><rect x="86.2163%" y="164" width="0.1212%" height="15" fill="rgb(250,166,2)" fg:x="8538" fg:w="12"/><text x="86.4663%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (70 samples, 0.71%)</title><rect x="86.3375%" y="148" width="0.7069%" height="15" fill="rgb(242,216,29)" fg:x="8550" fg:w="70"/><text x="86.5875%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (29 samples, 0.29%)</title><rect x="86.7515%" y="164" width="0.2928%" height="15" fill="rgb(230,116,27)" fg:x="8591" fg:w="29"/><text x="87.0015%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.13%)</title><rect x="88.3369%" y="164" width="0.1313%" height="15" fill="rgb(228,99,48)" fg:x="8748" fg:w="13"/><text x="88.5869%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (174 samples, 1.76%)</title><rect x="87.0443%" y="148" width="1.7570%" height="15" fill="rgb(253,11,6)" fg:x="8620" fg:w="174"/><text x="87.2943%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.33%)</title><rect x="88.4681%" y="164" width="0.3332%" height="15" fill="rgb(247,143,39)" fg:x="8761" fg:w="33"/><text x="88.7181%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (63 samples, 0.64%)</title><rect x="88.8014%" y="148" width="0.6362%" height="15" fill="rgb(236,97,10)" fg:x="8794" fg:w="63"/><text x="89.0514%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (78 samples, 0.79%)</title><rect x="89.4375%" y="148" width="0.7876%" height="15" fill="rgb(233,208,19)" fg:x="8857" fg:w="78"/><text x="89.6875%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.14%)</title><rect x="93.5272%" y="180" width="0.1414%" height="15" fill="rgb(216,164,2)" fg:x="9262" fg:w="14"/><text x="93.7772%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (164 samples, 1.66%)</title><rect x="92.2953%" y="164" width="1.6561%" height="15" fill="rgb(220,129,5)" fg:x="9140" fg:w="164"/><text x="92.5453%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.28%)</title><rect x="93.6686%" y="180" width="0.2827%" height="15" fill="rgb(242,17,10)" fg:x="9276" fg:w="28"/><text x="93.9186%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (380 samples, 3.84%)</title><rect x="90.2252%" y="148" width="3.8372%" height="15" fill="rgb(242,107,0)" fg:x="8935" fg:w="380"/><text x="90.4752%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.11%)</title><rect x="93.9513%" y="164" width="0.1111%" height="15" fill="rgb(251,28,31)" fg:x="9304" fg:w="11"/><text x="94.2013%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (35 samples, 0.35%)</title><rect x="94.0624%" y="148" width="0.3534%" height="15" fill="rgb(233,223,10)" fg:x="9315" fg:w="35"/><text x="94.3124%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (13 samples, 0.13%)</title><rect x="94.4158%" y="148" width="0.1313%" height="15" fill="rgb(215,21,27)" fg:x="9350" fg:w="13"/><text x="94.6658%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,823 samples, 89.09%)</title><rect x="5.4933%" y="132" width="89.0942%" height="15" fill="rgb(232,23,21)" fg:x="544" fg:w="8823"/><text x="5.7433%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (63 samples, 0.64%)</title><rect x="94.5875%" y="132" width="0.6362%" height="15" fill="rgb(244,5,23)" fg:x="9367" fg:w="63"/><text x="94.8375%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (11 samples, 0.11%)</title><rect x="95.2237%" y="132" width="0.1111%" height="15" fill="rgb(226,81,46)" fg:x="9430" fg:w="11"/><text x="95.4737%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (10 samples, 0.10%)</title><rect x="95.3347%" y="132" width="0.1010%" height="15" fill="rgb(247,70,30)" fg:x="9441" fg:w="10"/><text x="95.5847%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.13%)</title><rect x="98.0612%" y="148" width="0.1313%" height="15" fill="rgb(212,68,19)" fg:x="9711" fg:w="13"/><text x="98.3112%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (310 samples, 3.13%)</title><rect x="95.4357%" y="132" width="3.1304%" height="15" fill="rgb(240,187,13)" fg:x="9451" fg:w="310"/><text x="95.6857%" y="142.50">_up..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.37%)</title><rect x="98.1925%" y="148" width="0.3736%" height="15" fill="rgb(223,113,26)" fg:x="9724" fg:w="37"/><text x="98.4425%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,688 samples, 97.83%)</title><rect x="1.5450%" y="100" width="97.8289%" height="15" fill="rgb(206,192,2)" fg:x="153" fg:w="9688"/><text x="1.7950%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (9,304 samples, 93.95%)</title><rect x="5.4226%" y="116" width="93.9513%" height="15" fill="rgb(241,108,4)" fg:x="537" fg:w="9304"/><text x="5.6726%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (80 samples, 0.81%)</title><rect x="98.5661%" y="132" width="0.8078%" height="15" fill="rgb(247,173,49)" fg:x="9761" fg:w="80"/><text x="98.8161%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.10%)</title><rect x="99.2729%" y="148" width="0.1010%" height="15" fill="rgb(224,114,35)" fg:x="9831" fg:w="10"/><text x="99.5229%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,834 samples, 99.30%)</title><rect x="0.0909%" y="68" width="99.3032%" height="15" fill="rgb(245,159,27)" fg:x="9" fg:w="9834"/><text x="0.3409%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,766 samples, 98.62%)</title><rect x="0.7775%" y="84" width="98.6166%" height="15" fill="rgb(245,172,44)" fg:x="77" fg:w="9766"/><text x="1.0275%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (16 samples, 0.16%)</title><rect x="99.3941%" y="68" width="0.1616%" height="15" fill="rgb(236,23,11)" fg:x="9843" fg:w="16"/><text x="99.6441%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (16 samples, 0.16%)</title><rect x="99.3941%" y="84" width="0.1616%" height="15" fill="rgb(205,117,38)" fg:x="9843" fg:w="16"/><text x="99.6441%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (16 samples, 0.16%)</title><rect x="99.3941%" y="100" width="0.1616%" height="15" fill="rgb(237,72,25)" fg:x="9843" fg:w="16"/><text x="99.6441%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (16 samples, 0.16%)</title><rect x="99.3941%" y="116" width="0.1616%" height="15" fill="rgb(244,70,9)" fg:x="9843" fg:w="16"/><text x="99.6441%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (16 samples, 0.16%)</title><rect x="99.3941%" y="132" width="0.1616%" height="15" fill="rgb(217,125,39)" fg:x="9843" fg:w="16"/><text x="99.6441%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (16 samples, 0.16%)</title><rect x="99.3941%" y="148" width="0.1616%" height="15" fill="rgb(235,36,10)" fg:x="9843" fg:w="16"/><text x="99.6441%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (16 samples, 0.16%)</title><rect x="99.3941%" y="164" width="0.1616%" height="15" fill="rgb(251,123,47)" fg:x="9843" fg:w="16"/><text x="99.6441%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.15%)</title><rect x="99.4042%" y="180" width="0.1515%" height="15" fill="rgb(221,13,13)" fg:x="9844" fg:w="15"/><text x="99.6542%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.15%)</title><rect x="99.4042%" y="196" width="0.1515%" height="15" fill="rgb(238,131,9)" fg:x="9844" fg:w="15"/><text x="99.6542%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.15%)</title><rect x="99.4042%" y="212" width="0.1515%" height="15" fill="rgb(211,50,8)" fg:x="9844" fg:w="15"/><text x="99.6542%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.15%)</title><rect x="99.4042%" y="228" width="0.1515%" height="15" fill="rgb(245,182,24)" fg:x="9844" fg:w="15"/><text x="99.6542%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.15%)</title><rect x="99.4042%" y="244" width="0.1515%" height="15" fill="rgb(242,14,37)" fg:x="9844" fg:w="15"/><text x="99.6542%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (11 samples, 0.11%)</title><rect x="99.5557%" y="68" width="0.1111%" height="15" fill="rgb(246,228,12)" fg:x="9859" fg:w="11"/><text x="99.8057%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (12 samples, 0.12%)</title><rect x="99.6668%" y="68" width="0.1212%" height="15" fill="rgb(213,55,15)" fg:x="9870" fg:w="12"/><text x="99.9168%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (12 samples, 0.12%)</title><rect x="99.7879%" y="68" width="0.1212%" height="15" fill="rgb(209,9,3)" fg:x="9882" fg:w="12"/><text x="100.0379%" y="78.50"></text></g><g><title>all (9,903 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="9903"/><text x="0.2500%" y="62.50"></text></g></svg></svg>