<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="570" onload="init(evt)" viewBox="0 0 1200 570" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="570" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 3833699</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="559.00"> </text><svg id="frames" x="10" width="1180" total_samples="2430"><g><title>&lt;module&gt; (profile_ktam.py:1) (3 samples, 0.12%)</title><rect x="0.0000%" y="68" width="0.1235%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="0.0000%" y="84" width="0.1235%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="0.0000%" y="100" width="0.1235%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="0.0000%" y="116" width="0.1235%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="0.0000%" y="132" width="0.1235%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="0.0000%" y="148" width="0.1235%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:19) (3 samples, 0.12%)</title><rect x="0.1646%" y="68" width="0.1235%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="3"/><text x="0.4146%" y="78.50"></text></g><g><title>rules (kappybara/kappa.py:53) (3 samples, 0.12%)</title><rect x="0.1646%" y="84" width="0.1235%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="3"/><text x="0.4146%" y="94.50"></text></g><g><title>parse (kappybara/grammar.py:28) (3 samples, 0.12%)</title><rect x="0.1646%" y="100" width="0.1235%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="3"/><text x="0.4146%" y="110.50"></text></g><g><title>parse (lark/lark.py:655) (3 samples, 0.12%)</title><rect x="0.1646%" y="116" width="0.1235%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="3"/><text x="0.4146%" y="126.50"></text></g><g><title>parse (lark/parser_frontends.py:104) (3 samples, 0.12%)</title><rect x="0.1646%" y="132" width="0.1235%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="3"/><text x="0.4146%" y="142.50"></text></g><g><title>parse (lark/parsers/earley.py:280) (3 samples, 0.12%)</title><rect x="0.1646%" y="148" width="0.1235%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="3"/><text x="0.4146%" y="158.50"></text></g><g><title>_parse (lark/parsers/xearley.py:150) (3 samples, 0.12%)</title><rect x="0.1646%" y="164" width="0.1235%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="3"/><text x="0.4146%" y="174.50"></text></g><g><title>update (kappybara/system.py:69) (3 samples, 0.12%)</title><rect x="0.2881%" y="84" width="0.1235%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="3"/><text x="0.5381%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (3 samples, 0.12%)</title><rect x="0.2881%" y="100" width="0.1235%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="3"/><text x="0.5381%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (3 samples, 0.12%)</title><rect x="0.2881%" y="116" width="0.1235%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="3"/><text x="0.5381%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (15 samples, 0.62%)</title><rect x="0.4115%" y="100" width="0.6173%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="15"/><text x="0.6615%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (11 samples, 0.45%)</title><rect x="0.5761%" y="116" width="0.4527%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="11"/><text x="0.8261%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (5 samples, 0.21%)</title><rect x="1.1111%" y="148" width="0.2058%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="5"/><text x="1.3611%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (15 samples, 0.62%)</title><rect x="1.3580%" y="148" width="0.6173%" height="15" fill="rgb(226,26,5)" fg:x="33" fg:w="15"/><text x="1.6080%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (3 samples, 0.12%)</title><rect x="1.9753%" y="148" width="0.1235%" height="15" fill="rgb(249,33,26)" fg:x="48" fg:w="3"/><text x="2.2253%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (3 samples, 0.12%)</title><rect x="3.4156%" y="180" width="0.1235%" height="15" fill="rgb(235,183,28)" fg:x="83" fg:w="3"/><text x="3.6656%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (23 samples, 0.95%)</title><rect x="3.5391%" y="180" width="0.9465%" height="15" fill="rgb(221,5,38)" fg:x="86" fg:w="23"/><text x="3.7891%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (13 samples, 0.53%)</title><rect x="3.9506%" y="196" width="0.5350%" height="15" fill="rgb(247,18,42)" fg:x="96" fg:w="13"/><text x="4.2006%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (89 samples, 3.66%)</title><rect x="1.0700%" y="132" width="3.6626%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="89"/><text x="1.3200%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (62 samples, 2.55%)</title><rect x="2.1811%" y="148" width="2.5514%" height="15" fill="rgb(249,31,29)" fg:x="53" fg:w="62"/><text x="2.4311%" y="158.50">de..</text></g><g><title>neighbors (kappybara/pattern.py:120) (55 samples, 2.26%)</title><rect x="2.4691%" y="164" width="2.2634%" height="15" fill="rgb(225,111,53)" fg:x="60" fg:w="55"/><text x="2.7191%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (5 samples, 0.21%)</title><rect x="4.5267%" y="180" width="0.2058%" height="15" fill="rgb(238,160,17)" fg:x="110" fg:w="5"/><text x="4.7767%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (98 samples, 4.03%)</title><rect x="1.0288%" y="116" width="4.0329%" height="15" fill="rgb(214,148,48)" fg:x="25" fg:w="98"/><text x="1.2788%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (8 samples, 0.33%)</title><rect x="4.7325%" y="132" width="0.3292%" height="15" fill="rgb(232,36,49)" fg:x="115" fg:w="8"/><text x="4.9825%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (5 samples, 0.21%)</title><rect x="4.8560%" y="148" width="0.2058%" height="15" fill="rgb(209,103,24)" fg:x="118" fg:w="5"/><text x="5.1060%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (13 samples, 0.53%)</title><rect x="5.5144%" y="148" width="0.5350%" height="15" fill="rgb(229,88,8)" fg:x="134" fg:w="13"/><text x="5.7644%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (99 samples, 4.07%)</title><rect x="6.0494%" y="148" width="4.0741%" height="15" fill="rgb(213,181,19)" fg:x="147" fg:w="99"/><text x="6.2994%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (4 samples, 0.16%)</title><rect x="9.9588%" y="164" width="0.1646%" height="15" fill="rgb(254,191,54)" fg:x="242" fg:w="4"/><text x="10.2088%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (4 samples, 0.16%)</title><rect x="13.3745%" y="164" width="0.1646%" height="15" fill="rgb(241,83,37)" fg:x="325" fg:w="4"/><text x="13.6245%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (91 samples, 3.74%)</title><rect x="10.1235%" y="148" width="3.7449%" height="15" fill="rgb(233,36,39)" fg:x="246" fg:w="91"/><text x="10.3735%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.33%)</title><rect x="13.5391%" y="164" width="0.3292%" height="15" fill="rgb(226,3,54)" fg:x="329" fg:w="8"/><text x="13.7891%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (23 samples, 0.95%)</title><rect x="13.8683%" y="148" width="0.9465%" height="15" fill="rgb(245,192,40)" fg:x="337" fg:w="23"/><text x="14.1183%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (22 samples, 0.91%)</title><rect x="14.8148%" y="148" width="0.9053%" height="15" fill="rgb(238,167,29)" fg:x="360" fg:w="22"/><text x="15.0648%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.25%)</title><rect x="17.7366%" y="164" width="0.2469%" height="15" fill="rgb(232,182,51)" fg:x="431" fg:w="6"/><text x="17.9866%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (67 samples, 2.76%)</title><rect x="15.7202%" y="148" width="2.7572%" height="15" fill="rgb(231,60,39)" fg:x="382" fg:w="67"/><text x="15.9702%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.49%)</title><rect x="17.9835%" y="164" width="0.4938%" height="15" fill="rgb(208,69,12)" fg:x="437" fg:w="12"/><text x="18.2335%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (68 samples, 2.80%)</title><rect x="18.4774%" y="148" width="2.7984%" height="15" fill="rgb(235,93,37)" fg:x="449" fg:w="68"/><text x="18.7274%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (5 samples, 0.21%)</title><rect x="23.2099%" y="164" width="0.2058%" height="15" fill="rgb(213,116,39)" fg:x="564" fg:w="5"/><text x="23.4599%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (26 samples, 1.07%)</title><rect x="23.4156%" y="164" width="1.0700%" height="15" fill="rgb(222,207,29)" fg:x="569" fg:w="26"/><text x="23.6656%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (35 samples, 1.44%)</title><rect x="26.4609%" y="180" width="1.4403%" height="15" fill="rgb(206,96,30)" fg:x="643" fg:w="35"/><text x="26.7109%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (30 samples, 1.23%)</title><rect x="29.5062%" y="196" width="1.2346%" height="15" fill="rgb(218,138,4)" fg:x="717" fg:w="30"/><text x="29.7562%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (236 samples, 9.71%)</title><rect x="24.5679%" y="164" width="9.7119%" height="15" fill="rgb(250,191,14)" fg:x="597" fg:w="236"/><text x="24.8179%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (155 samples, 6.38%)</title><rect x="27.9012%" y="180" width="6.3786%" height="15" fill="rgb(239,60,40)" fg:x="678" fg:w="155"/><text x="28.1512%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (86 samples, 3.54%)</title><rect x="30.7407%" y="196" width="3.5391%" height="15" fill="rgb(206,27,48)" fg:x="747" fg:w="86"/><text x="30.9907%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (32 samples, 1.32%)</title><rect x="34.2798%" y="164" width="1.3169%" height="15" fill="rgb(225,35,8)" fg:x="833" fg:w="32"/><text x="34.5298%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (4 samples, 0.16%)</title><rect x="35.5967%" y="164" width="0.1646%" height="15" fill="rgb(250,213,24)" fg:x="865" fg:w="4"/><text x="35.8467%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (22 samples, 0.91%)</title><rect x="36.7490%" y="180" width="0.9053%" height="15" fill="rgb(247,123,22)" fg:x="893" fg:w="22"/><text x="36.9990%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (50 samples, 2.06%)</title><rect x="35.7613%" y="164" width="2.0576%" height="15" fill="rgb(231,138,38)" fg:x="869" fg:w="50"/><text x="36.0113%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (4 samples, 0.16%)</title><rect x="37.6543%" y="180" width="0.1646%" height="15" fill="rgb(231,145,46)" fg:x="915" fg:w="4"/><text x="37.9043%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (55 samples, 2.26%)</title><rect x="47.6543%" y="180" width="2.2634%" height="15" fill="rgb(251,118,11)" fg:x="1158" fg:w="55"/><text x="47.9043%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (8 samples, 0.33%)</title><rect x="49.9177%" y="180" width="0.3292%" height="15" fill="rgb(217,147,25)" fg:x="1213" fg:w="8"/><text x="50.1677%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (10 samples, 0.41%)</title><rect x="50.8230%" y="196" width="0.4115%" height="15" fill="rgb(247,81,37)" fg:x="1235" fg:w="10"/><text x="51.0730%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (61 samples, 2.51%)</title><rect x="50.2469%" y="180" width="2.5103%" height="15" fill="rgb(209,12,38)" fg:x="1221" fg:w="61"/><text x="50.4969%" y="190.50">em..</text></g><g><title>stated (kappybara/pattern.py:52) (37 samples, 1.52%)</title><rect x="51.2346%" y="196" width="1.5226%" height="15" fill="rgb(227,1,9)" fg:x="1245" fg:w="37"/><text x="51.4846%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (5 samples, 0.21%)</title><rect x="53.9095%" y="196" width="0.2058%" height="15" fill="rgb(248,47,43)" fg:x="1310" fg:w="5"/><text x="54.1595%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (9 samples, 0.37%)</title><rect x="56.0905%" y="212" width="0.3704%" height="15" fill="rgb(221,10,30)" fg:x="1363" fg:w="9"/><text x="56.3405%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (114 samples, 4.69%)</title><rect x="54.1152%" y="196" width="4.6914%" height="15" fill="rgb(210,229,1)" fg:x="1315" fg:w="114"/><text x="54.3652%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (57 samples, 2.35%)</title><rect x="56.4609%" y="212" width="2.3457%" height="15" fill="rgb(222,148,37)" fg:x="1372" fg:w="57"/><text x="56.7109%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.74%)</title><rect x="58.0658%" y="228" width="0.7407%" height="15" fill="rgb(234,67,33)" fg:x="1411" fg:w="18"/><text x="58.3158%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (57 samples, 2.35%)</title><rect x="58.8066%" y="196" width="2.3457%" height="15" fill="rgb(247,98,35)" fg:x="1429" fg:w="57"/><text x="59.0566%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (18 samples, 0.74%)</title><rect x="61.1523%" y="196" width="0.7407%" height="15" fill="rgb(247,138,52)" fg:x="1486" fg:w="18"/><text x="61.4023%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (3 samples, 0.12%)</title><rect x="61.8930%" y="196" width="0.1235%" height="15" fill="rgb(213,79,30)" fg:x="1504" fg:w="3"/><text x="62.1430%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (233 samples, 9.59%)</title><rect x="52.7572%" y="180" width="9.5885%" height="15" fill="rgb(246,177,23)" fg:x="1282" fg:w="233"/><text x="53.0072%" y="190.50">embeds_in (kap..</text></g><g><title>coupled (kappybara/pattern.py:64) (8 samples, 0.33%)</title><rect x="62.0165%" y="196" width="0.3292%" height="15" fill="rgb(230,62,27)" fg:x="1507" fg:w="8"/><text x="62.2665%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (6 samples, 0.25%)</title><rect x="62.4280%" y="180" width="0.2469%" height="15" fill="rgb(216,154,8)" fg:x="1517" fg:w="6"/><text x="62.6780%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (87 samples, 3.58%)</title><rect x="62.6749%" y="180" width="3.5802%" height="15" fill="rgb(244,35,45)" fg:x="1523" fg:w="87"/><text x="62.9249%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (57 samples, 2.35%)</title><rect x="63.9095%" y="196" width="2.3457%" height="15" fill="rgb(251,115,12)" fg:x="1553" fg:w="57"/><text x="64.1595%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.21%)</title><rect x="66.0494%" y="212" width="0.2058%" height="15" fill="rgb(240,54,50)" fg:x="1605" fg:w="5"/><text x="66.2994%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (4 samples, 0.16%)</title><rect x="67.6955%" y="196" width="0.1646%" height="15" fill="rgb(233,84,52)" fg:x="1645" fg:w="4"/><text x="67.9455%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.21%)</title><rect x="69.4650%" y="212" width="0.2058%" height="15" fill="rgb(207,117,47)" fg:x="1688" fg:w="5"/><text x="69.7150%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (94 samples, 3.87%)</title><rect x="66.2551%" y="180" width="3.8683%" height="15" fill="rgb(249,43,39)" fg:x="1610" fg:w="94"/><text x="66.5051%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (55 samples, 2.26%)</title><rect x="67.8601%" y="196" width="2.2634%" height="15" fill="rgb(209,38,44)" fg:x="1649" fg:w="55"/><text x="68.1101%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.45%)</title><rect x="69.6708%" y="212" width="0.4527%" height="15" fill="rgb(236,212,23)" fg:x="1693" fg:w="11"/><text x="69.9208%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (23 samples, 0.95%)</title><rect x="70.1235%" y="180" width="0.9465%" height="15" fill="rgb(242,79,21)" fg:x="1704" fg:w="23"/><text x="70.3735%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (43 samples, 1.77%)</title><rect x="71.0700%" y="180" width="1.7695%" height="15" fill="rgb(211,96,35)" fg:x="1727" fg:w="43"/><text x="71.3200%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (16 samples, 0.66%)</title><rect x="72.8395%" y="180" width="0.6584%" height="15" fill="rgb(253,215,40)" fg:x="1770" fg:w="16"/><text x="73.0895%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (11 samples, 0.45%)</title><rect x="73.4979%" y="180" width="0.4527%" height="15" fill="rgb(211,81,21)" fg:x="1786" fg:w="11"/><text x="73.7479%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (952 samples, 39.18%)</title><rect x="37.8189%" y="164" width="39.1770%" height="15" fill="rgb(208,190,38)" fg:x="919" fg:w="952"/><text x="38.0689%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (74 samples, 3.05%)</title><rect x="73.9506%" y="180" width="3.0453%" height="15" fill="rgb(235,213,38)" fg:x="1797" fg:w="74"/><text x="74.2006%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (1,365 samples, 56.17%)</title><rect x="21.2757%" y="148" width="56.1728%" height="15" fill="rgb(237,122,38)" fg:x="517" fg:w="1365"/><text x="21.5257%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (11 samples, 0.45%)</title><rect x="76.9959%" y="164" width="0.4527%" height="15" fill="rgb(244,218,35)" fg:x="1871" fg:w="11"/><text x="77.2459%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (17 samples, 0.70%)</title><rect x="78.6831%" y="164" width="0.6996%" height="15" fill="rgb(240,68,47)" fg:x="1912" fg:w="17"/><text x="78.9331%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (18 samples, 0.74%)</title><rect x="80.8642%" y="180" width="0.7407%" height="15" fill="rgb(210,16,53)" fg:x="1965" fg:w="18"/><text x="81.1142%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (150 samples, 6.17%)</title><rect x="77.5309%" y="148" width="6.1728%" height="15" fill="rgb(235,124,12)" fg:x="1884" fg:w="150"/><text x="77.7809%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (105 samples, 4.32%)</title><rect x="79.3827%" y="164" width="4.3210%" height="15" fill="rgb(224,169,11)" fg:x="1929" fg:w="105"/><text x="79.6327%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (51 samples, 2.10%)</title><rect x="81.6049%" y="180" width="2.0988%" height="15" fill="rgb(250,166,2)" fg:x="1983" fg:w="51"/><text x="81.8549%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (15 samples, 0.62%)</title><rect x="84.1564%" y="164" width="0.6173%" height="15" fill="rgb(242,216,29)" fg:x="2045" fg:w="15"/><text x="84.4064%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (32 samples, 1.32%)</title><rect x="83.7037%" y="148" width="1.3169%" height="15" fill="rgb(230,116,27)" fg:x="2034" fg:w="32"/><text x="83.9537%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (6 samples, 0.25%)</title><rect x="84.7737%" y="164" width="0.2469%" height="15" fill="rgb(228,99,48)" fg:x="2060" fg:w="6"/><text x="85.0237%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (10 samples, 0.41%)</title><rect x="85.2263%" y="164" width="0.4115%" height="15" fill="rgb(253,11,6)" fg:x="2071" fg:w="10"/><text x="85.4763%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (30 samples, 1.23%)</title><rect x="85.0206%" y="148" width="1.2346%" height="15" fill="rgb(247,143,39)" fg:x="2066" fg:w="30"/><text x="85.2706%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (15 samples, 0.62%)</title><rect x="85.6379%" y="164" width="0.6173%" height="15" fill="rgb(236,97,10)" fg:x="2081" fg:w="15"/><text x="85.8879%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (55 samples, 2.26%)</title><rect x="86.2551%" y="148" width="2.2634%" height="15" fill="rgb(233,208,19)" fg:x="2096" fg:w="55"/><text x="86.5051%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.37%)</title><rect x="88.1481%" y="164" width="0.3704%" height="15" fill="rgb(216,164,2)" fg:x="2142" fg:w="9"/><text x="88.3981%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="89.0535%" y="164" width="0.1235%" height="15" fill="rgb(220,129,5)" fg:x="2164" fg:w="3"/><text x="89.3035%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (18 samples, 0.74%)</title><rect x="88.5185%" y="148" width="0.7407%" height="15" fill="rgb(242,17,10)" fg:x="2151" fg:w="18"/><text x="88.7685%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (19 samples, 0.78%)</title><rect x="89.2593%" y="148" width="0.7819%" height="15" fill="rgb(242,107,0)" fg:x="2169" fg:w="19"/><text x="89.5093%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (40 samples, 1.65%)</title><rect x="91.9342%" y="164" width="1.6461%" height="15" fill="rgb(251,28,31)" fg:x="2234" fg:w="40"/><text x="92.1842%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (4 samples, 0.16%)</title><rect x="93.4156%" y="180" width="0.1646%" height="15" fill="rgb(233,223,10)" fg:x="2270" fg:w="4"/><text x="93.6656%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (88 samples, 3.62%)</title><rect x="90.0412%" y="148" width="3.6214%" height="15" fill="rgb(215,21,27)" fg:x="2188" fg:w="88"/><text x="90.2912%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (10 samples, 0.41%)</title><rect x="93.6626%" y="148" width="0.4115%" height="15" fill="rgb(232,23,21)" fg:x="2276" fg:w="10"/><text x="93.9126%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (3 samples, 0.12%)</title><rect x="94.0741%" y="148" width="0.1235%" height="15" fill="rgb(244,5,23)" fg:x="2286" fg:w="3"/><text x="94.3241%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (2,166 samples, 89.14%)</title><rect x="5.1440%" y="132" width="89.1358%" height="15" fill="rgb(226,81,46)" fg:x="125" fg:w="2166"/><text x="5.3940%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (13 samples, 0.53%)</title><rect x="94.2798%" y="132" width="0.5350%" height="15" fill="rgb(247,70,30)" fg:x="2291" fg:w="13"/><text x="94.5298%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (4 samples, 0.16%)</title><rect x="94.8148%" y="132" width="0.1646%" height="15" fill="rgb(212,68,19)" fg:x="2304" fg:w="4"/><text x="95.0648%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.29%)</title><rect x="97.3663%" y="148" width="0.2881%" height="15" fill="rgb(240,187,13)" fg:x="2366" fg:w="7"/><text x="97.6163%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (72 samples, 2.96%)</title><rect x="95.0617%" y="132" width="2.9630%" height="15" fill="rgb(223,113,26)" fg:x="2310" fg:w="72"/><text x="95.3117%" y="142.50">_up..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.37%)</title><rect x="97.6543%" y="148" width="0.3704%" height="15" fill="rgb(206,192,2)" fg:x="2373" fg:w="9"/><text x="97.9043%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (2,396 samples, 98.60%)</title><rect x="0.2881%" y="68" width="98.6008%" height="15" fill="rgb(241,108,4)" fg:x="7" fg:w="2396"/><text x="0.5381%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (2,393 samples, 98.48%)</title><rect x="0.4115%" y="84" width="98.4774%" height="15" fill="rgb(247,173,49)" fg:x="10" fg:w="2393"/><text x="0.6615%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (2,378 samples, 97.86%)</title><rect x="1.0288%" y="100" width="97.8601%" height="15" fill="rgb(224,114,35)" fg:x="25" fg:w="2378"/><text x="1.2788%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (2,280 samples, 93.83%)</title><rect x="5.0617%" y="116" width="93.8272%" height="15" fill="rgb(245,159,27)" fg:x="123" fg:w="2280"/><text x="5.3117%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (21 samples, 0.86%)</title><rect x="98.0247%" y="132" width="0.8642%" height="15" fill="rgb(245,172,44)" fg:x="2382" fg:w="21"/><text x="98.2747%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.21%)</title><rect x="98.6831%" y="148" width="0.2058%" height="15" fill="rgb(236,23,11)" fg:x="2398" fg:w="5"/><text x="98.9331%" y="158.50"></text></g><g><title>__init__ (lark/lark.py:357) (3 samples, 0.12%)</title><rect x="98.9300%" y="308" width="0.1235%" height="15" fill="rgb(205,117,38)" fg:x="2404" fg:w="3"/><text x="99.1800%" y="318.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1415) (3 samples, 0.12%)</title><rect x="98.9300%" y="324" width="0.1235%" height="15" fill="rgb(237,72,25)" fg:x="2404" fg:w="3"/><text x="99.1800%" y="334.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1240) (3 samples, 0.12%)</title><rect x="98.9300%" y="340" width="0.1235%" height="15" fill="rgb(244,70,9)" fg:x="2404" fg:w="3"/><text x="99.1800%" y="350.50"></text></g><g><title>__init__ (lark/lark.py:407) (3 samples, 0.12%)</title><rect x="99.0535%" y="308" width="0.1235%" height="15" fill="rgb(217,125,39)" fg:x="2407" fg:w="3"/><text x="99.3035%" y="318.50"></text></g><g><title>compile (lark/load_grammar.py:710) (3 samples, 0.12%)</title><rect x="99.0535%" y="324" width="0.1235%" height="15" fill="rgb(235,36,10)" fg:x="2407" fg:w="3"/><text x="99.3035%" y="334.50"></text></g><g><title>transform (lark/visitors.py:264) (3 samples, 0.12%)</title><rect x="99.0535%" y="340" width="0.1235%" height="15" fill="rgb(251,123,47)" fg:x="2407" fg:w="3"/><text x="99.3035%" y="350.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (9 samples, 0.37%)</title><rect x="98.9300%" y="260" width="0.3704%" height="15" fill="rgb(221,13,13)" fg:x="2404" fg:w="9"/><text x="99.1800%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (9 samples, 0.37%)</title><rect x="98.9300%" y="276" width="0.3704%" height="15" fill="rgb(238,131,9)" fg:x="2404" fg:w="9"/><text x="99.1800%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (9 samples, 0.37%)</title><rect x="98.9300%" y="292" width="0.3704%" height="15" fill="rgb(211,50,8)" fg:x="2404" fg:w="9"/><text x="99.1800%" y="302.50"></text></g><g><title>__init__ (lark/lark.py:439) (3 samples, 0.12%)</title><rect x="99.1770%" y="308" width="0.1235%" height="15" fill="rgb(245,182,24)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="318.50"></text></g><g><title>_build_parser (lark/lark.py:485) (3 samples, 0.12%)</title><rect x="99.1770%" y="324" width="0.1235%" height="15" fill="rgb(242,14,37)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="334.50"></text></g><g><title>_construct_parsing_frontend (lark/parser_frontends.py:257) (3 samples, 0.12%)</title><rect x="99.1770%" y="340" width="0.1235%" height="15" fill="rgb(246,228,12)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="350.50"></text></g><g><title>__init__ (lark/parser_frontends.py:61) (3 samples, 0.12%)</title><rect x="99.1770%" y="356" width="0.1235%" height="15" fill="rgb(213,55,15)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="366.50"></text></g><g><title>create_earley_parser (lark/parser_frontends.py:215) (3 samples, 0.12%)</title><rect x="99.1770%" y="372" width="0.1235%" height="15" fill="rgb(209,9,3)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="382.50"></text></g><g><title>create_earley_parser__dynamic (lark/parser_frontends.py:193) (3 samples, 0.12%)</title><rect x="99.1770%" y="388" width="0.1235%" height="15" fill="rgb(230,59,30)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="398.50"></text></g><g><title>__init__ (lark/parsers/xearley.py:34) (3 samples, 0.12%)</title><rect x="99.1770%" y="404" width="0.1235%" height="15" fill="rgb(209,121,21)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="414.50"></text></g><g><title>__init__ (lark/parsers/earley.py:35) (3 samples, 0.12%)</title><rect x="99.1770%" y="420" width="0.1235%" height="15" fill="rgb(220,109,13)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="430.50"></text></g><g><title>__init__ (lark/parsers/grammar_analysis.py:178) (3 samples, 0.12%)</title><rect x="99.1770%" y="436" width="0.1235%" height="15" fill="rgb(232,18,1)" fg:x="2410" fg:w="3"/><text x="99.4270%" y="446.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (14 samples, 0.58%)</title><rect x="98.8889%" y="68" width="0.5761%" height="15" fill="rgb(215,41,42)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.58%)</title><rect x="98.8889%" y="84" width="0.5761%" height="15" fill="rgb(224,123,36)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.58%)</title><rect x="98.8889%" y="100" width="0.5761%" height="15" fill="rgb(240,125,3)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.58%)</title><rect x="98.8889%" y="116" width="0.5761%" height="15" fill="rgb(205,98,50)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.58%)</title><rect x="98.8889%" y="132" width="0.5761%" height="15" fill="rgb(205,185,37)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.58%)</title><rect x="98.8889%" y="148" width="0.5761%" height="15" fill="rgb(238,207,15)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.58%)</title><rect x="98.8889%" y="164" width="0.5761%" height="15" fill="rgb(213,199,42)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.58%)</title><rect x="98.8889%" y="180" width="0.5761%" height="15" fill="rgb(235,201,11)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.58%)</title><rect x="98.8889%" y="196" width="0.5761%" height="15" fill="rgb(207,46,11)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.58%)</title><rect x="98.8889%" y="212" width="0.5761%" height="15" fill="rgb(241,35,35)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.58%)</title><rect x="98.8889%" y="228" width="0.5761%" height="15" fill="rgb(243,32,47)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.58%)</title><rect x="98.8889%" y="244" width="0.5761%" height="15" fill="rgb(247,202,23)" fg:x="2403" fg:w="14"/><text x="99.1389%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (4 samples, 0.16%)</title><rect x="99.3004%" y="260" width="0.1646%" height="15" fill="rgb(219,102,11)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (4 samples, 0.16%)</title><rect x="99.3004%" y="276" width="0.1646%" height="15" fill="rgb(243,110,44)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (4 samples, 0.16%)</title><rect x="99.3004%" y="292" width="0.1646%" height="15" fill="rgb(222,74,54)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (4 samples, 0.16%)</title><rect x="99.3004%" y="308" width="0.1646%" height="15" fill="rgb(216,99,12)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (4 samples, 0.16%)</title><rect x="99.3004%" y="324" width="0.1646%" height="15" fill="rgb(226,22,26)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (4 samples, 0.16%)</title><rect x="99.3004%" y="340" width="0.1646%" height="15" fill="rgb(217,163,10)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="350.50"></text></g><g><title>&lt;module&gt; (lark/__init__.py:11) (4 samples, 0.16%)</title><rect x="99.3004%" y="356" width="0.1646%" height="15" fill="rgb(213,25,53)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (4 samples, 0.16%)</title><rect x="99.3004%" y="372" width="0.1646%" height="15" fill="rgb(252,105,26)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (4 samples, 0.16%)</title><rect x="99.3004%" y="388" width="0.1646%" height="15" fill="rgb(220,39,43)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (4 samples, 0.16%)</title><rect x="99.3004%" y="404" width="0.1646%" height="15" fill="rgb(229,68,48)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (4 samples, 0.16%)</title><rect x="99.3004%" y="420" width="0.1646%" height="15" fill="rgb(252,8,32)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (4 samples, 0.16%)</title><rect x="99.3004%" y="436" width="0.1646%" height="15" fill="rgb(223,20,43)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="446.50"></text></g><g><title>&lt;module&gt; (lark/lark.py:20) (4 samples, 0.16%)</title><rect x="99.3004%" y="452" width="0.1646%" height="15" fill="rgb(229,81,49)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (4 samples, 0.16%)</title><rect x="99.3004%" y="468" width="0.1646%" height="15" fill="rgb(236,28,36)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (4 samples, 0.16%)</title><rect x="99.3004%" y="484" width="0.1646%" height="15" fill="rgb(249,185,26)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (4 samples, 0.16%)</title><rect x="99.3004%" y="500" width="0.1646%" height="15" fill="rgb(249,174,33)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (4 samples, 0.16%)</title><rect x="99.3004%" y="516" width="0.1646%" height="15" fill="rgb(233,201,37)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (4 samples, 0.16%)</title><rect x="99.3004%" y="532" width="0.1646%" height="15" fill="rgb(221,78,26)" fg:x="2413" fg:w="4"/><text x="99.5504%" y="542.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (3 samples, 0.12%)</title><rect x="99.4650%" y="68" width="0.1235%" height="15" fill="rgb(250,127,30)" fg:x="2417" fg:w="3"/><text x="99.7150%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (6 samples, 0.25%)</title><rect x="99.6296%" y="68" width="0.2469%" height="15" fill="rgb(230,49,44)" fg:x="2421" fg:w="6"/><text x="99.8796%" y="78.50"></text></g><g><title>all (2,430 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="2430"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (3 samples, 0.12%)</title><rect x="99.8765%" y="68" width="0.1235%" height="15" fill="rgb(249,83,47)" fg:x="2427" fg:w="3"/><text x="100.1265%" y="78.50"></text></g></svg></svg>