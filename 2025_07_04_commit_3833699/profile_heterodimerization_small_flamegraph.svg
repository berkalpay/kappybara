<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 3833699</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="4745"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (8 samples, 0.17%)</title><rect x="0.0000%" y="68" width="0.1686%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="8"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (8 samples, 0.17%)</title><rect x="0.0000%" y="84" width="0.1686%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="8"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (8 samples, 0.17%)</title><rect x="0.0000%" y="100" width="0.1686%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="8"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (8 samples, 0.17%)</title><rect x="0.0000%" y="116" width="0.1686%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="8"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (8 samples, 0.17%)</title><rect x="0.0000%" y="132" width="0.1686%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="8"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (8 samples, 0.17%)</title><rect x="0.0000%" y="148" width="0.1686%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="8"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (5 samples, 0.11%)</title><rect x="0.0632%" y="164" width="0.1054%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="5"/><text x="0.3132%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (5 samples, 0.11%)</title><rect x="0.0632%" y="180" width="0.1054%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="5"/><text x="0.3132%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (5 samples, 0.11%)</title><rect x="0.0632%" y="196" width="0.1054%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="5"/><text x="0.3132%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (5 samples, 0.11%)</title><rect x="0.0632%" y="212" width="0.1054%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="5"/><text x="0.3132%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (5 samples, 0.11%)</title><rect x="0.0632%" y="228" width="0.1054%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="5"/><text x="0.3132%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (5 samples, 0.11%)</title><rect x="0.0632%" y="244" width="0.1054%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="5"/><text x="0.3132%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (5 samples, 0.11%)</title><rect x="0.0632%" y="260" width="0.1054%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="5"/><text x="0.3132%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (5 samples, 0.11%)</title><rect x="0.0632%" y="276" width="0.1054%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="5"/><text x="0.3132%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (5 samples, 0.11%)</title><rect x="0.0632%" y="292" width="0.1054%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="5"/><text x="0.3132%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (7 samples, 0.15%)</title><rect x="0.1686%" y="68" width="0.1475%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="7"/><text x="0.4186%" y="78.50"></text></g><g><title>act (kappybara/system.py:63) (9 samples, 0.19%)</title><rect x="0.3793%" y="100" width="0.1897%" height="15" fill="rgb(225,20,46)" fg:x="18" fg:w="9"/><text x="0.6293%" y="110.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (49 samples, 1.03%)</title><rect x="0.6322%" y="132" width="1.0327%" height="15" fill="rgb(210,31,41)" fg:x="30" fg:w="49"/><text x="0.8822%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (22 samples, 0.46%)</title><rect x="1.9810%" y="148" width="0.4636%" height="15" fill="rgb(221,200,47)" fg:x="94" fg:w="22"/><text x="2.2310%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (224 samples, 4.72%)</title><rect x="2.4447%" y="148" width="4.7208%" height="15" fill="rgb(226,26,5)" fg:x="116" fg:w="224"/><text x="2.6947%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.46%)</title><rect x="6.7018%" y="164" width="0.4636%" height="15" fill="rgb(249,33,26)" fg:x="318" fg:w="22"/><text x="6.9518%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.25%)</title><rect x="10.9800%" y="164" width="0.2529%" height="15" fill="rgb(235,183,28)" fg:x="521" fg:w="12"/><text x="11.2300%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (198 samples, 4.17%)</title><rect x="7.1654%" y="148" width="4.1728%" height="15" fill="rgb(221,5,38)" fg:x="340" fg:w="198"/><text x="7.4154%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="11.2329%" y="164" width="0.1054%" height="15" fill="rgb(247,18,42)" fg:x="533" fg:w="5"/><text x="11.4829%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (38 samples, 0.80%)</title><rect x="11.3804%" y="148" width="0.8008%" height="15" fill="rgb(241,131,45)" fg:x="540" fg:w="38"/><text x="11.6304%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (36 samples, 0.76%)</title><rect x="12.1812%" y="148" width="0.7587%" height="15" fill="rgb(249,31,29)" fg:x="578" fg:w="36"/><text x="12.4312%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.25%)</title><rect x="15.1739%" y="164" width="0.2529%" height="15" fill="rgb(225,111,53)" fg:x="720" fg:w="12"/><text x="15.4239%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (144 samples, 3.03%)</title><rect x="12.9399%" y="148" width="3.0348%" height="15" fill="rgb(238,160,17)" fg:x="614" fg:w="144"/><text x="13.1899%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.55%)</title><rect x="15.4268%" y="164" width="0.5479%" height="15" fill="rgb(214,148,48)" fg:x="732" fg:w="26"/><text x="15.6768%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (111 samples, 2.34%)</title><rect x="15.9747%" y="148" width="2.3393%" height="15" fill="rgb(232,36,49)" fg:x="758" fg:w="111"/><text x="16.2247%" y="158.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (46 samples, 0.97%)</title><rect x="19.9789%" y="164" width="0.9694%" height="15" fill="rgb(209,103,24)" fg:x="948" fg:w="46"/><text x="20.2289%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (75 samples, 1.58%)</title><rect x="22.6133%" y="180" width="1.5806%" height="15" fill="rgb(229,88,8)" fg:x="1073" fg:w="75"/><text x="22.8633%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (43 samples, 0.91%)</title><rect x="25.5216%" y="196" width="0.9062%" height="15" fill="rgb(213,181,19)" fg:x="1211" fg:w="43"/><text x="25.7716%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (474 samples, 9.99%)</title><rect x="20.9484%" y="164" width="9.9895%" height="15" fill="rgb(254,191,54)" fg:x="994" fg:w="474"/><text x="21.1984%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (320 samples, 6.74%)</title><rect x="24.1939%" y="180" width="6.7439%" height="15" fill="rgb(241,83,37)" fg:x="1148" fg:w="320"/><text x="24.4439%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (214 samples, 4.51%)</title><rect x="26.4278%" y="196" width="4.5100%" height="15" fill="rgb(233,36,39)" fg:x="1254" fg:w="214"/><text x="26.6778%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (54 samples, 1.14%)</title><rect x="30.9378%" y="164" width="1.1380%" height="15" fill="rgb(226,3,54)" fg:x="1468" fg:w="54"/><text x="31.1878%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (34 samples, 0.72%)</title><rect x="33.3404%" y="180" width="0.7165%" height="15" fill="rgb(245,192,40)" fg:x="1582" fg:w="34"/><text x="33.5904%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (113 samples, 2.38%)</title><rect x="32.1180%" y="164" width="2.3815%" height="15" fill="rgb(238,167,29)" fg:x="1524" fg:w="113"/><text x="32.3680%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (21 samples, 0.44%)</title><rect x="34.0569%" y="180" width="0.4426%" height="15" fill="rgb(232,182,51)" fg:x="1616" fg:w="21"/><text x="34.3069%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (100 samples, 2.11%)</title><rect x="43.4141%" y="180" width="2.1075%" height="15" fill="rgb(231,60,39)" fg:x="2060" fg:w="100"/><text x="43.6641%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (5 samples, 0.11%)</title><rect x="45.5216%" y="180" width="0.1054%" height="15" fill="rgb(208,69,12)" fg:x="2160" fg:w="5"/><text x="45.7716%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (8 samples, 0.17%)</title><rect x="46.1538%" y="196" width="0.1686%" height="15" fill="rgb(235,93,37)" fg:x="2190" fg:w="8"/><text x="46.4038%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (79 samples, 1.66%)</title><rect x="45.6270%" y="180" width="1.6649%" height="15" fill="rgb(213,116,39)" fg:x="2165" fg:w="79"/><text x="45.8770%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (46 samples, 0.97%)</title><rect x="46.3224%" y="196" width="0.9694%" height="15" fill="rgb(222,207,29)" fg:x="2198" fg:w="46"/><text x="46.5724%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (8 samples, 0.17%)</title><rect x="48.1981%" y="196" width="0.1686%" height="15" fill="rgb(206,96,30)" fg:x="2287" fg:w="8"/><text x="48.4481%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.32%)</title><rect x="50.6428%" y="212" width="0.3161%" height="15" fill="rgb(218,138,4)" fg:x="2403" fg:w="15"/><text x="50.8928%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.17%)</title><rect x="52.8978%" y="228" width="0.1686%" height="15" fill="rgb(250,191,14)" fg:x="2510" fg:w="8"/><text x="53.1478%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (254 samples, 5.35%)</title><rect x="48.3667%" y="196" width="5.3530%" height="15" fill="rgb(239,60,40)" fg:x="2295" fg:w="254"/><text x="48.6167%" y="206.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (131 samples, 2.76%)</title><rect x="50.9589%" y="212" width="2.7608%" height="15" fill="rgb(206,27,48)" fg:x="2418" fg:w="131"/><text x="51.2089%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.65%)</title><rect x="53.0664%" y="228" width="0.6533%" height="15" fill="rgb(225,35,8)" fg:x="2518" fg:w="31"/><text x="53.3164%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (110 samples, 2.32%)</title><rect x="53.7197%" y="196" width="2.3182%" height="15" fill="rgb(250,213,24)" fg:x="2549" fg:w="110"/><text x="53.9697%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (46 samples, 0.97%)</title><rect x="56.0379%" y="196" width="0.9694%" height="15" fill="rgb(247,123,22)" fg:x="2659" fg:w="46"/><text x="56.2879%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (5 samples, 0.11%)</title><rect x="57.0074%" y="196" width="0.1054%" height="15" fill="rgb(231,138,38)" fg:x="2705" fg:w="5"/><text x="57.2574%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (496 samples, 10.45%)</title><rect x="47.2919%" y="180" width="10.4531%" height="15" fill="rgb(231,145,46)" fg:x="2244" fg:w="496"/><text x="47.5419%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (30 samples, 0.63%)</title><rect x="57.1128%" y="196" width="0.6322%" height="15" fill="rgb(251,118,11)" fg:x="2710" fg:w="30"/><text x="57.3628%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (5 samples, 0.11%)</title><rect x="57.7871%" y="180" width="0.1054%" height="15" fill="rgb(217,147,25)" fg:x="2742" fg:w="5"/><text x="58.0371%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (87 samples, 1.83%)</title><rect x="57.8925%" y="180" width="1.8335%" height="15" fill="rgb(247,81,37)" fg:x="2747" fg:w="87"/><text x="58.1425%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (47 samples, 0.99%)</title><rect x="58.7355%" y="196" width="0.9905%" height="15" fill="rgb(209,12,38)" fg:x="2787" fg:w="47"/><text x="58.9855%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.13%)</title><rect x="59.5996%" y="212" width="0.1264%" height="15" fill="rgb(227,1,9)" fg:x="2828" fg:w="6"/><text x="59.8496%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (66 samples, 1.39%)</title><rect x="59.7260%" y="180" width="1.3909%" height="15" fill="rgb(248,47,43)" fg:x="2834" fg:w="66"/><text x="59.9760%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (42 samples, 0.89%)</title><rect x="60.2318%" y="196" width="0.8851%" height="15" fill="rgb(221,10,30)" fg:x="2858" fg:w="42"/><text x="60.4818%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.25%)</title><rect x="60.8641%" y="212" width="0.2529%" height="15" fill="rgb(210,229,1)" fg:x="2888" fg:w="12"/><text x="61.1141%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (29 samples, 0.61%)</title><rect x="61.1170%" y="180" width="0.6112%" height="15" fill="rgb(222,148,37)" fg:x="2900" fg:w="29"/><text x="61.3670%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (54 samples, 1.14%)</title><rect x="61.7281%" y="180" width="1.1380%" height="15" fill="rgb(234,67,33)" fg:x="2929" fg:w="54"/><text x="61.9781%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (27 samples, 0.57%)</title><rect x="62.8662%" y="180" width="0.5690%" height="15" fill="rgb(247,98,35)" fg:x="2983" fg:w="27"/><text x="63.1162%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (5 samples, 0.11%)</title><rect x="63.4352%" y="180" width="0.1054%" height="15" fill="rgb(247,138,52)" fg:x="3010" fg:w="5"/><text x="63.6852%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,531 samples, 32.27%)</title><rect x="34.4995%" y="164" width="32.2655%" height="15" fill="rgb(213,79,30)" fg:x="1637" fg:w="1531"/><text x="34.7495%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (153 samples, 3.22%)</title><rect x="63.5406%" y="180" width="3.2244%" height="15" fill="rgb(246,177,23)" fg:x="3015" fg:w="153"/><text x="63.7906%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,336 samples, 49.23%)</title><rect x="18.3140%" y="148" width="49.2308%" height="15" fill="rgb(230,62,27)" fg:x="869" fg:w="2336"/><text x="18.5640%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (37 samples, 0.78%)</title><rect x="66.7650%" y="164" width="0.7798%" height="15" fill="rgb(216,154,8)" fg:x="3168" fg:w="37"/><text x="67.0150%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (5 samples, 0.11%)</title><rect x="67.5448%" y="148" width="0.1054%" height="15" fill="rgb(244,35,45)" fg:x="3205" fg:w="5"/><text x="67.7948%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (31 samples, 0.65%)</title><rect x="68.9568%" y="164" width="0.6533%" height="15" fill="rgb(251,115,12)" fg:x="3272" fg:w="31"/><text x="69.2068%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (30 samples, 0.63%)</title><rect x="70.7060%" y="180" width="0.6322%" height="15" fill="rgb(240,54,50)" fg:x="3355" fg:w="30"/><text x="70.9560%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (312 samples, 6.58%)</title><rect x="67.6712%" y="148" width="6.5753%" height="15" fill="rgb(233,84,52)" fg:x="3211" fg:w="312"/><text x="67.9212%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (220 samples, 4.64%)</title><rect x="69.6101%" y="164" width="4.6365%" height="15" fill="rgb(207,117,47)" fg:x="3303" fg:w="220"/><text x="69.8601%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (138 samples, 2.91%)</title><rect x="71.3383%" y="180" width="2.9083%" height="15" fill="rgb(249,43,39)" fg:x="3385" fg:w="138"/><text x="71.5883%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (25 samples, 0.53%)</title><rect x="74.9631%" y="164" width="0.5269%" height="15" fill="rgb(209,38,44)" fg:x="3557" fg:w="25"/><text x="75.2131%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (65 samples, 1.37%)</title><rect x="74.2466%" y="148" width="1.3699%" height="15" fill="rgb(236,212,23)" fg:x="3523" fg:w="65"/><text x="74.4966%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (6 samples, 0.13%)</title><rect x="75.4900%" y="164" width="0.1264%" height="15" fill="rgb(242,79,21)" fg:x="3582" fg:w="6"/><text x="75.7400%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (11 samples, 0.23%)</title><rect x="76.0169%" y="164" width="0.2318%" height="15" fill="rgb(211,96,35)" fg:x="3607" fg:w="11"/><text x="76.2669%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (57 samples, 1.20%)</title><rect x="75.6164%" y="148" width="1.2013%" height="15" fill="rgb(253,215,40)" fg:x="3588" fg:w="57"/><text x="75.8664%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (27 samples, 0.57%)</title><rect x="76.2487%" y="164" width="0.5690%" height="15" fill="rgb(211,81,21)" fg:x="3618" fg:w="27"/><text x="76.4987%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (36 samples, 0.76%)</title><rect x="76.8177%" y="148" width="0.7587%" height="15" fill="rgb(208,190,38)" fg:x="3645" fg:w="36"/><text x="77.0677%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="77.4710%" y="164" width="0.1054%" height="15" fill="rgb(235,213,38)" fg:x="3676" fg:w="5"/><text x="77.7210%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (16 samples, 0.34%)</title><rect x="77.5764%" y="148" width="0.3372%" height="15" fill="rgb(237,122,38)" fg:x="3681" fg:w="16"/><text x="77.8264%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.13%)</title><rect x="77.7871%" y="164" width="0.1264%" height="15" fill="rgb(244,218,35)" fg:x="3691" fg:w="6"/><text x="78.0371%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (15 samples, 0.32%)</title><rect x="77.9136%" y="148" width="0.3161%" height="15" fill="rgb(240,68,47)" fg:x="3697" fg:w="15"/><text x="78.1636%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (39 samples, 0.82%)</title><rect x="79.3256%" y="164" width="0.8219%" height="15" fill="rgb(210,16,53)" fg:x="3764" fg:w="39"/><text x="79.5756%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.23%)</title><rect x="79.9157%" y="180" width="0.2318%" height="15" fill="rgb(235,124,12)" fg:x="3792" fg:w="11"/><text x="80.1657%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (95 samples, 2.00%)</title><rect x="78.2297%" y="148" width="2.0021%" height="15" fill="rgb(224,169,11)" fg:x="3712" fg:w="95"/><text x="78.4797%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (31 samples, 0.65%)</title><rect x="80.2950%" y="148" width="0.6533%" height="15" fill="rgb(250,166,2)" fg:x="3810" fg:w="31"/><text x="80.5450%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (41 samples, 0.86%)</title><rect x="80.9484%" y="148" width="0.8641%" height="15" fill="rgb(242,216,29)" fg:x="3841" fg:w="41"/><text x="81.1984%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,809 samples, 80.27%)</title><rect x="1.6649%" y="132" width="80.2740%" height="15" fill="rgb(230,116,27)" fg:x="79" fg:w="3809"/><text x="1.9149%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (6 samples, 0.13%)</title><rect x="81.8124%" y="148" width="0.1264%" height="15" fill="rgb(228,99,48)" fg:x="3882" fg:w="6"/><text x="82.0624%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (29 samples, 0.61%)</title><rect x="81.9389%" y="132" width="0.6112%" height="15" fill="rgb(253,11,6)" fg:x="3888" fg:w="29"/><text x="82.1889%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (12 samples, 0.25%)</title><rect x="82.5501%" y="132" width="0.2529%" height="15" fill="rgb(247,143,39)" fg:x="3917" fg:w="12"/><text x="82.8001%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (17 samples, 0.36%)</title><rect x="82.8030%" y="132" width="0.3583%" height="15" fill="rgb(236,97,10)" fg:x="3929" fg:w="17"/><text x="83.0530%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (152 samples, 3.20%)</title><rect x="90.1581%" y="148" width="3.2034%" height="15" fill="rgb(233,208,19)" fg:x="4278" fg:w="152"/><text x="90.4081%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.21%)</title><rect x="93.3614%" y="148" width="0.2107%" height="15" fill="rgb(216,164,2)" fg:x="4430" fg:w="10"/><text x="93.6114%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (542 samples, 11.42%)</title><rect x="83.1612%" y="132" width="11.4226%" height="15" fill="rgb(220,129,5)" fg:x="3946" fg:w="542"/><text x="83.4112%" y="142.50">_update_embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 1.01%)</title><rect x="93.5722%" y="148" width="1.0116%" height="15" fill="rgb(242,17,10)" fg:x="4440" fg:w="48"/><text x="93.8222%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (42 samples, 0.89%)</title><rect x="98.4194%" y="148" width="0.8851%" height="15" fill="rgb(242,107,0)" fg:x="4670" fg:w="42"/><text x="98.6694%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,715 samples, 99.37%)</title><rect x="0.3161%" y="68" width="99.3678%" height="15" fill="rgb(251,28,31)" fg:x="15" fg:w="4715"/><text x="0.5661%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,712 samples, 99.30%)</title><rect x="0.3793%" y="84" width="99.3045%" height="15" fill="rgb(233,223,10)" fg:x="18" fg:w="4712"/><text x="0.6293%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,703 samples, 99.11%)</title><rect x="0.5690%" y="100" width="99.1149%" height="15" fill="rgb(215,21,27)" fg:x="27" fg:w="4703"/><text x="0.8190%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,700 samples, 99.05%)</title><rect x="0.6322%" y="116" width="99.0516%" height="15" fill="rgb(232,23,21)" fg:x="30" fg:w="4700"/><text x="0.8822%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (242 samples, 5.10%)</title><rect x="94.5838%" y="132" width="5.1001%" height="15" fill="rgb(244,5,23)" fg:x="4488" fg:w="242"/><text x="94.8338%" y="142.50">_updat..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.38%)</title><rect x="99.3045%" y="148" width="0.3793%" height="15" fill="rgb(226,81,46)" fg:x="4712" fg:w="18"/><text x="99.5545%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:109) (8 samples, 0.17%)</title><rect x="99.7260%" y="68" width="0.1686%" height="15" fill="rgb(247,70,30)" fg:x="4732" fg:w="8"/><text x="99.9760%" y="78.50"></text></g><g><title>all (4,745 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="4745"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (5 samples, 0.11%)</title><rect x="99.8946%" y="68" width="0.1054%" height="15" fill="rgb(240,187,13)" fg:x="4740" fg:w="5"/><text x="100.1446%" y="78.50"></text></g></svg></svg>