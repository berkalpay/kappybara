<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 3833699</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="8717"><g><title>n_embeddings (kappybara/rule.py:170) (46 samples, 0.53%)</title><rect x="0.1606%" y="180" width="0.5277%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="46"/><text x="0.4106%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (24 samples, 0.28%)</title><rect x="0.4130%" y="196" width="0.2753%" height="15" fill="rgb(217,0,24)" fg:x="36" fg:w="24"/><text x="0.6630%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (13 samples, 0.15%)</title><rect x="0.5392%" y="212" width="0.1491%" height="15" fill="rgb(221,193,54)" fg:x="47" fg:w="13"/><text x="0.7892%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (11 samples, 0.13%)</title><rect x="0.9063%" y="180" width="0.1262%" height="15" fill="rgb(248,212,6)" fg:x="79" fg:w="11"/><text x="1.1563%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (9 samples, 0.10%)</title><rect x="0.9292%" y="196" width="0.1032%" height="15" fill="rgb(208,68,35)" fg:x="81" fg:w="9"/><text x="1.1792%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (21 samples, 0.24%)</title><rect x="1.0325%" y="180" width="0.2409%" height="15" fill="rgb(232,128,0)" fg:x="90" fg:w="21"/><text x="1.2825%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (16 samples, 0.18%)</title><rect x="1.2734%" y="180" width="0.1835%" height="15" fill="rgb(207,160,47)" fg:x="111" fg:w="16"/><text x="1.5234%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (11 samples, 0.13%)</title><rect x="1.3307%" y="196" width="0.1262%" height="15" fill="rgb(228,23,34)" fg:x="116" fg:w="11"/><text x="1.5807%" y="206.50"></text></g><g><title>update (kappybara/system.py:69) (134 samples, 1.54%)</title><rect x="0.0574%" y="84" width="1.5372%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="134"/><text x="0.3074%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (133 samples, 1.53%)</title><rect x="0.0688%" y="100" width="1.5258%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="133"/><text x="0.3188%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (133 samples, 1.53%)</title><rect x="0.0688%" y="116" width="1.5258%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="133"/><text x="0.3188%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (133 samples, 1.53%)</title><rect x="0.0688%" y="132" width="1.5258%" height="15" fill="rgb(240,193,28)" fg:x="6" fg:w="133"/><text x="0.3188%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (133 samples, 1.53%)</title><rect x="0.0688%" y="148" width="1.5258%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="133"/><text x="0.3188%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (133 samples, 1.53%)</title><rect x="0.0688%" y="164" width="1.5258%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="133"/><text x="0.3188%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (10 samples, 0.11%)</title><rect x="1.6749%" y="116" width="0.1147%" height="15" fill="rgb(217,207,13)" fg:x="146" fg:w="10"/><text x="1.9249%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (31 samples, 0.36%)</title><rect x="1.6175%" y="100" width="0.3556%" height="15" fill="rgb(231,73,38)" fg:x="141" fg:w="31"/><text x="1.8675%" y="110.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (12 samples, 0.14%)</title><rect x="2.1223%" y="148" width="0.1377%" height="15" fill="rgb(225,20,46)" fg:x="185" fg:w="12"/><text x="2.3723%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (16 samples, 0.18%)</title><rect x="2.5009%" y="180" width="0.1835%" height="15" fill="rgb(210,31,41)" fg:x="218" fg:w="16"/><text x="2.7509%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (9 samples, 0.10%)</title><rect x="2.5812%" y="196" width="0.1032%" height="15" fill="rgb(221,200,47)" fg:x="225" fg:w="9"/><text x="2.8312%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (65 samples, 0.75%)</title><rect x="1.9961%" y="132" width="0.7457%" height="15" fill="rgb(226,26,5)" fg:x="174" fg:w="65"/><text x="2.2461%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (39 samples, 0.45%)</title><rect x="2.2944%" y="148" width="0.4474%" height="15" fill="rgb(249,33,26)" fg:x="200" fg:w="39"/><text x="2.5444%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (31 samples, 0.36%)</title><rect x="2.3861%" y="164" width="0.3556%" height="15" fill="rgb(235,183,28)" fg:x="208" fg:w="31"/><text x="2.6361%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (13 samples, 0.15%)</title><rect x="2.7418%" y="132" width="0.1491%" height="15" fill="rgb(221,5,38)" fg:x="239" fg:w="13"/><text x="2.9918%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (22 samples, 0.25%)</title><rect x="5.1509%" y="148" width="0.2524%" height="15" fill="rgb(247,18,42)" fg:x="449" fg:w="22"/><text x="5.4009%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (27 samples, 0.31%)</title><rect x="10.1526%" y="164" width="0.3097%" height="15" fill="rgb(241,131,45)" fg:x="885" fg:w="27"/><text x="10.4026%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (731 samples, 8.39%)</title><rect x="2.9024%" y="132" width="8.3859%" height="15" fill="rgb(249,31,29)" fg:x="253" fg:w="731"/><text x="3.1524%" y="142.50">_remove_edge..</text></g><g><title>__eq__ (kappybara/utils.py:33) (513 samples, 5.89%)</title><rect x="5.4032%" y="148" width="5.8851%" height="15" fill="rgb(225,111,53)" fg:x="471" fg:w="513"/><text x="5.6532%" y="158.50">__eq__ ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (72 samples, 0.83%)</title><rect x="10.4623%" y="164" width="0.8260%" height="15" fill="rgb(238,160,17)" fg:x="912" fg:w="72"/><text x="10.7123%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (817 samples, 9.37%)</title><rect x="1.9732%" y="116" width="9.3725%" height="15" fill="rgb(214,148,48)" fg:x="172" fg:w="817"/><text x="2.2232%" y="126.50">apply_update ..</text></g><g><title>embeddings (kappybara/pattern.py:256) (30 samples, 0.34%)</title><rect x="11.9307%" y="148" width="0.3442%" height="15" fill="rgb(232,36,49)" fg:x="1040" fg:w="30"/><text x="12.1807%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="16.3359%" y="164" width="0.1032%" height="15" fill="rgb(209,103,24)" fg:x="1424" fg:w="9"/><text x="16.5859%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (406 samples, 4.66%)</title><rect x="12.2749%" y="148" width="4.6576%" height="15" fill="rgb(229,88,8)" fg:x="1070" fg:w="406"/><text x="12.5249%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.49%)</title><rect x="16.4391%" y="164" width="0.4933%" height="15" fill="rgb(213,181,19)" fg:x="1433" fg:w="43"/><text x="16.6891%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.14%)</title><rect x="19.9495%" y="164" width="0.1377%" height="15" fill="rgb(254,191,54)" fg:x="1739" fg:w="12"/><text x="20.1995%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (305 samples, 3.50%)</title><rect x="16.9324%" y="148" width="3.4989%" height="15" fill="rgb(241,83,37)" fg:x="1476" fg:w="305"/><text x="17.1824%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.34%)</title><rect x="20.0872%" y="164" width="0.3442%" height="15" fill="rgb(233,36,39)" fg:x="1751" fg:w="30"/><text x="20.3372%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (74 samples, 0.85%)</title><rect x="20.4313%" y="148" width="0.8489%" height="15" fill="rgb(226,3,54)" fg:x="1781" fg:w="74"/><text x="20.6813%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (55 samples, 0.63%)</title><rect x="21.2803%" y="148" width="0.6310%" height="15" fill="rgb(245,192,40)" fg:x="1855" fg:w="55"/><text x="21.5303%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.21%)</title><rect x="24.1138%" y="164" width="0.2065%" height="15" fill="rgb(238,167,29)" fg:x="2102" fg:w="18"/><text x="24.3638%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (248 samples, 2.85%)</title><rect x="21.9112%" y="148" width="2.8450%" height="15" fill="rgb(232,182,51)" fg:x="1910" fg:w="248"/><text x="22.1612%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.44%)</title><rect x="24.3203%" y="164" width="0.4359%" height="15" fill="rgb(231,60,39)" fg:x="2120" fg:w="38"/><text x="24.5703%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (229 samples, 2.63%)</title><rect x="24.7562%" y="148" width="2.6271%" height="15" fill="rgb(208,69,12)" fg:x="2158" fg:w="229"/><text x="25.0062%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (11 samples, 0.13%)</title><rect x="28.9893%" y="164" width="0.1262%" height="15" fill="rgb(235,93,37)" fg:x="2527" fg:w="11"/><text x="29.2393%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (89 samples, 1.02%)</title><rect x="29.1155%" y="164" width="1.0210%" height="15" fill="rgb(213,116,39)" fg:x="2538" fg:w="89"/><text x="29.3655%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (115 samples, 1.32%)</title><rect x="32.3735%" y="180" width="1.3193%" height="15" fill="rgb(222,207,29)" fg:x="2822" fg:w="115"/><text x="32.6235%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (90 samples, 1.03%)</title><rect x="35.3333%" y="196" width="1.0325%" height="15" fill="rgb(206,96,30)" fg:x="3080" fg:w="90"/><text x="35.5833%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (879 samples, 10.08%)</title><rect x="30.1480%" y="164" width="10.0837%" height="15" fill="rgb(218,138,4)" fg:x="2628" fg:w="879"/><text x="30.3980%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (570 samples, 6.54%)</title><rect x="33.6928%" y="180" width="6.5389%" height="15" fill="rgb(250,191,14)" fg:x="2937" fg:w="570"/><text x="33.9428%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (337 samples, 3.87%)</title><rect x="36.3657%" y="196" width="3.8660%" height="15" fill="rgb(239,60,40)" fg:x="3170" fg:w="337"/><text x="36.6157%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (117 samples, 1.34%)</title><rect x="40.2317%" y="164" width="1.3422%" height="15" fill="rgb(206,27,48)" fg:x="3507" fg:w="117"/><text x="40.4817%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (71 samples, 0.81%)</title><rect x="42.9850%" y="180" width="0.8145%" height="15" fill="rgb(225,35,8)" fg:x="3747" fg:w="71"/><text x="43.2350%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (212 samples, 2.43%)</title><rect x="41.6428%" y="164" width="2.4320%" height="15" fill="rgb(250,213,24)" fg:x="3630" fg:w="212"/><text x="41.8928%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (24 samples, 0.28%)</title><rect x="43.7995%" y="180" width="0.2753%" height="15" fill="rgb(247,123,22)" fg:x="3818" fg:w="24"/><text x="44.0495%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (170 samples, 1.95%)</title><rect x="53.1261%" y="180" width="1.9502%" height="15" fill="rgb(231,138,38)" fg:x="4631" fg:w="170"/><text x="53.3761%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (14 samples, 0.16%)</title><rect x="55.0763%" y="180" width="0.1606%" height="15" fill="rgb(231,145,46)" fg:x="4801" fg:w="14"/><text x="55.3263%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (21 samples, 0.24%)</title><rect x="55.7531%" y="196" width="0.2409%" height="15" fill="rgb(251,118,11)" fg:x="4860" fg:w="21"/><text x="56.0031%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (165 samples, 1.89%)</title><rect x="55.2369%" y="180" width="1.8929%" height="15" fill="rgb(217,147,25)" fg:x="4815" fg:w="165"/><text x="55.4869%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (99 samples, 1.14%)</title><rect x="55.9940%" y="196" width="1.1357%" height="15" fill="rgb(247,81,37)" fg:x="4881" fg:w="99"/><text x="56.2440%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (22 samples, 0.25%)</title><rect x="58.0131%" y="196" width="0.2524%" height="15" fill="rgb(209,12,38)" fg:x="5057" fg:w="22"/><text x="58.2631%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.15%)</title><rect x="60.5369%" y="212" width="0.1491%" height="15" fill="rgb(227,1,9)" fg:x="5277" fg:w="13"/><text x="60.7869%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (418 samples, 4.80%)</title><rect x="58.2655%" y="196" width="4.7952%" height="15" fill="rgb(248,47,43)" fg:x="5079" fg:w="418"/><text x="58.5155%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (207 samples, 2.37%)</title><rect x="60.6860%" y="212" width="2.3747%" height="15" fill="rgb(221,10,30)" fg:x="5290" fg:w="207"/><text x="60.9360%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.48%)</title><rect x="62.5789%" y="228" width="0.4818%" height="15" fill="rgb(210,229,1)" fg:x="5455" fg:w="42"/><text x="62.8289%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (206 samples, 2.36%)</title><rect x="63.0607%" y="196" width="2.3632%" height="15" fill="rgb(222,148,37)" fg:x="5497" fg:w="206"/><text x="63.3107%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (100 samples, 1.15%)</title><rect x="65.4239%" y="196" width="1.1472%" height="15" fill="rgb(234,67,33)" fg:x="5703" fg:w="100"/><text x="65.6739%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.20%)</title><rect x="66.5711%" y="196" width="0.1950%" height="15" fill="rgb(247,98,35)" fg:x="5803" fg:w="17"/><text x="66.8211%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (869 samples, 9.97%)</title><rect x="57.1297%" y="180" width="9.9690%" height="15" fill="rgb(247,138,52)" fg:x="4980" fg:w="869"/><text x="57.3797%" y="190.50">embeds_in (kap..</text></g><g><title>coupled (kappybara/pattern.py:64) (29 samples, 0.33%)</title><rect x="66.7661%" y="196" width="0.3327%" height="15" fill="rgb(213,79,30)" fg:x="5820" fg:w="29"/><text x="67.0161%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (12 samples, 0.14%)</title><rect x="67.1102%" y="180" width="0.1377%" height="15" fill="rgb(246,177,23)" fg:x="5850" fg:w="12"/><text x="67.3602%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="68.0050%" y="196" width="0.1147%" height="15" fill="rgb(230,62,27)" fg:x="5928" fg:w="10"/><text x="68.2550%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (208 samples, 2.39%)</title><rect x="67.2479%" y="180" width="2.3861%" height="15" fill="rgb(216,154,8)" fg:x="5862" fg:w="208"/><text x="67.4979%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (132 samples, 1.51%)</title><rect x="68.1198%" y="196" width="1.5143%" height="15" fill="rgb(244,35,45)" fg:x="5938" fg:w="132"/><text x="68.3698%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.25%)</title><rect x="69.3817%" y="212" width="0.2524%" height="15" fill="rgb(251,115,12)" fg:x="6048" fg:w="22"/><text x="69.6317%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (255 samples, 2.93%)</title><rect x="69.6340%" y="180" width="2.9253%" height="15" fill="rgb(240,54,50)" fg:x="6070" fg:w="255"/><text x="69.8840%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (176 samples, 2.02%)</title><rect x="70.5403%" y="196" width="2.0190%" height="15" fill="rgb(233,84,52)" fg:x="6149" fg:w="176"/><text x="70.7903%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.55%)</title><rect x="72.0087%" y="212" width="0.5506%" height="15" fill="rgb(207,117,47)" fg:x="6277" fg:w="48"/><text x="72.2587%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (52 samples, 0.60%)</title><rect x="72.5594%" y="180" width="0.5965%" height="15" fill="rgb(249,43,39)" fg:x="6325" fg:w="52"/><text x="72.8094%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (120 samples, 1.38%)</title><rect x="73.1559%" y="180" width="1.3766%" height="15" fill="rgb(209,38,44)" fg:x="6377" fg:w="120"/><text x="73.4059%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (45 samples, 0.52%)</title><rect x="74.5325%" y="180" width="0.5162%" height="15" fill="rgb(236,212,23)" fg:x="6497" fg:w="45"/><text x="74.7825%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (18 samples, 0.21%)</title><rect x="75.0488%" y="180" width="0.2065%" height="15" fill="rgb(242,79,21)" fg:x="6542" fg:w="18"/><text x="75.2988%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (2,967 samples, 34.04%)</title><rect x="44.0748%" y="164" width="34.0369%" height="15" fill="rgb(211,96,35)" fg:x="3842" fg:w="2967"/><text x="44.3248%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (249 samples, 2.86%)</title><rect x="75.2552%" y="180" width="2.8565%" height="15" fill="rgb(253,215,40)" fg:x="6560" fg:w="249"/><text x="75.5052%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,468 samples, 51.26%)</title><rect x="27.3833%" y="148" width="51.2562%" height="15" fill="rgb(211,81,21)" fg:x="2387" fg:w="4468"/><text x="27.6333%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (46 samples, 0.53%)</title><rect x="78.1117%" y="164" width="0.5277%" height="15" fill="rgb(208,190,38)" fg:x="6809" fg:w="46"/><text x="78.3617%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (46 samples, 0.53%)</title><rect x="79.9587%" y="164" width="0.5277%" height="15" fill="rgb(235,213,38)" fg:x="6970" fg:w="46"/><text x="80.2087%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (68 samples, 0.78%)</title><rect x="81.7254%" y="180" width="0.7801%" height="15" fill="rgb(237,122,38)" fg:x="7124" fg:w="68"/><text x="81.9754%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (569 samples, 6.53%)</title><rect x="78.7771%" y="148" width="6.5275%" height="15" fill="rgb(244,218,35)" fg:x="6867" fg:w="569"/><text x="79.0271%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (420 samples, 4.82%)</title><rect x="80.4864%" y="164" width="4.8182%" height="15" fill="rgb(240,68,47)" fg:x="7016" fg:w="420"/><text x="80.7364%" y="174.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:111) (244 samples, 2.80%)</title><rect x="82.5054%" y="180" width="2.7991%" height="15" fill="rgb(210,16,53)" fg:x="7192" fg:w="244"/><text x="82.7554%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (51 samples, 0.59%)</title><rect x="85.7979%" y="164" width="0.5851%" height="15" fill="rgb(235,124,12)" fg:x="7479" fg:w="51"/><text x="86.0479%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (106 samples, 1.22%)</title><rect x="85.3046%" y="148" width="1.2160%" height="15" fill="rgb(224,169,11)" fg:x="7436" fg:w="106"/><text x="85.5546%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (12 samples, 0.14%)</title><rect x="86.3829%" y="164" width="0.1377%" height="15" fill="rgb(250,166,2)" fg:x="7530" fg:w="12"/><text x="86.6329%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (26 samples, 0.30%)</title><rect x="86.8992%" y="164" width="0.2983%" height="15" fill="rgb(242,216,29)" fg:x="7575" fg:w="26"/><text x="87.1492%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (112 samples, 1.28%)</title><rect x="86.5206%" y="148" width="1.2848%" height="15" fill="rgb(230,116,27)" fg:x="7542" fg:w="112"/><text x="86.7706%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (53 samples, 0.61%)</title><rect x="87.1974%" y="164" width="0.6080%" height="15" fill="rgb(228,99,48)" fg:x="7601" fg:w="53"/><text x="87.4474%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (101 samples, 1.16%)</title><rect x="87.8054%" y="148" width="1.1587%" height="15" fill="rgb(253,11,6)" fg:x="7654" fg:w="101"/><text x="88.0554%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.18%)</title><rect x="88.7805%" y="164" width="0.1835%" height="15" fill="rgb(247,143,39)" fg:x="7739" fg:w="16"/><text x="89.0305%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (41 samples, 0.47%)</title><rect x="88.9641%" y="148" width="0.4703%" height="15" fill="rgb(236,97,10)" fg:x="7755" fg:w="41"/><text x="89.2141%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (56 samples, 0.64%)</title><rect x="89.4344%" y="148" width="0.6424%" height="15" fill="rgb(233,208,19)" fg:x="7796" fg:w="56"/><text x="89.6844%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (69 samples, 0.79%)</title><rect x="91.4076%" y="164" width="0.7916%" height="15" fill="rgb(216,164,2)" fg:x="7968" fg:w="69"/><text x="91.6576%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (193 samples, 2.21%)</title><rect x="90.0769%" y="148" width="2.2141%" height="15" fill="rgb(220,129,5)" fg:x="7852" fg:w="193"/><text x="90.3269%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:278) (13 samples, 0.15%)</title><rect x="92.2909%" y="148" width="0.1491%" height="15" fill="rgb(242,17,10)" fg:x="8045" fg:w="13"/><text x="92.5409%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (51 samples, 0.59%)</title><rect x="92.5318%" y="148" width="0.5851%" height="15" fill="rgb(242,107,0)" fg:x="8066" fg:w="51"/><text x="92.7818%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,125 samples, 81.74%)</title><rect x="11.5407%" y="132" width="81.7368%" height="15" fill="rgb(251,28,31)" fg:x="1006" fg:w="7125"/><text x="11.7907%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (63 samples, 0.72%)</title><rect x="93.2775%" y="132" width="0.7227%" height="15" fill="rgb(233,223,10)" fg:x="8131" fg:w="63"/><text x="93.5275%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.13%)</title><rect x="97.2238%" y="148" width="0.1262%" height="15" fill="rgb(215,21,27)" fg:x="8475" fg:w="11"/><text x="97.4738%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (331 samples, 3.80%)</title><rect x="94.1723%" y="132" width="3.7972%" height="15" fill="rgb(232,23,21)" fg:x="8209" fg:w="331"/><text x="94.4223%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (54 samples, 0.62%)</title><rect x="97.3500%" y="148" width="0.6195%" height="15" fill="rgb(244,5,23)" fg:x="8486" fg:w="54"/><text x="97.6000%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.13%)</title><rect x="99.1626%" y="148" width="0.1262%" height="15" fill="rgb(226,81,46)" fg:x="8644" fg:w="11"/><text x="99.4126%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,671 samples, 99.47%)</title><rect x="0.0574%" y="68" width="99.4723%" height="15" fill="rgb(247,70,30)" fg:x="5" fg:w="8671"/><text x="0.3074%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,537 samples, 97.94%)</title><rect x="1.5946%" y="84" width="97.9351%" height="15" fill="rgb(212,68,19)" fg:x="139" fg:w="8537"/><text x="1.8446%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,504 samples, 97.56%)</title><rect x="1.9732%" y="100" width="97.5565%" height="15" fill="rgb(240,187,13)" fg:x="172" fg:w="8504"/><text x="2.2232%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (7,679 samples, 88.09%)</title><rect x="11.4374%" y="116" width="88.0922%" height="15" fill="rgb(223,113,26)" fg:x="997" fg:w="7679"/><text x="11.6874%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (136 samples, 1.56%)</title><rect x="97.9695%" y="132" width="1.5602%" height="15" fill="rgb(206,192,2)" fg:x="8540" fg:w="136"/><text x="98.2195%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.24%)</title><rect x="99.2887%" y="148" width="0.2409%" height="15" fill="rgb(241,108,4)" fg:x="8655" fg:w="21"/><text x="99.5387%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (9 samples, 0.10%)</title><rect x="99.6214%" y="68" width="0.1032%" height="15" fill="rgb(247,173,49)" fg:x="8684" fg:w="9"/><text x="99.8714%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (11 samples, 0.13%)</title><rect x="99.8050%" y="68" width="0.1262%" height="15" fill="rgb(224,114,35)" fg:x="8700" fg:w="11"/><text x="100.0550%" y="78.50"></text></g><g><title>all (8,717 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="8717"/><text x="0.2500%" y="62.50"></text></g></svg></svg>