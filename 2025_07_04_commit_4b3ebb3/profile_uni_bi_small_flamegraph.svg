<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 4b3ebb3</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="8756"><g><title>n_embeddings (kappybara/rule.py:170) (37 samples, 0.42%)</title><rect x="0.1827%" y="180" width="0.4226%" height="15" fill="rgb(227,0,7)" fg:x="16" fg:w="37"/><text x="0.4327%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (22 samples, 0.25%)</title><rect x="0.3540%" y="196" width="0.2513%" height="15" fill="rgb(217,0,24)" fg:x="31" fg:w="22"/><text x="0.6040%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (17 samples, 0.19%)</title><rect x="0.4111%" y="212" width="0.1942%" height="15" fill="rgb(221,193,54)" fg:x="36" fg:w="17"/><text x="0.6611%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (13 samples, 0.15%)</title><rect x="0.7880%" y="180" width="0.1485%" height="15" fill="rgb(248,212,6)" fg:x="69" fg:w="13"/><text x="1.0380%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (16 samples, 0.18%)</title><rect x="0.9365%" y="180" width="0.1827%" height="15" fill="rgb(208,68,35)" fg:x="82" fg:w="16"/><text x="1.1865%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (13 samples, 0.15%)</title><rect x="1.1192%" y="180" width="0.1485%" height="15" fill="rgb(232,128,0)" fg:x="98" fg:w="13"/><text x="1.3692%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (108 samples, 1.23%)</title><rect x="0.1142%" y="84" width="1.2334%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="108"/><text x="0.3642%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (108 samples, 1.23%)</title><rect x="0.1142%" y="100" width="1.2334%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="108"/><text x="0.3642%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (107 samples, 1.22%)</title><rect x="0.1256%" y="116" width="1.2220%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="107"/><text x="0.3756%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (107 samples, 1.22%)</title><rect x="0.1256%" y="132" width="1.2220%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="107"/><text x="0.3756%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (107 samples, 1.22%)</title><rect x="0.1256%" y="148" width="1.2220%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="107"/><text x="0.3756%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (107 samples, 1.22%)</title><rect x="0.1256%" y="164" width="1.2220%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="107"/><text x="0.3756%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (20 samples, 0.23%)</title><rect x="1.3591%" y="100" width="0.2284%" height="15" fill="rgb(216,20,37)" fg:x="119" fg:w="20"/><text x="1.6091%" y="110.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (12 samples, 0.14%)</title><rect x="1.6560%" y="148" width="0.1370%" height="15" fill="rgb(206,188,39)" fg:x="145" fg:w="12"/><text x="1.9060%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (10 samples, 0.11%)</title><rect x="1.8159%" y="148" width="0.1142%" height="15" fill="rgb(217,207,13)" fg:x="159" fg:w="10"/><text x="2.0659%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (14 samples, 0.16%)</title><rect x="2.1471%" y="180" width="0.1599%" height="15" fill="rgb(231,73,38)" fg:x="188" fg:w="14"/><text x="2.3971%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (10 samples, 0.11%)</title><rect x="2.1928%" y="196" width="0.1142%" height="15" fill="rgb(225,20,46)" fg:x="192" fg:w="10"/><text x="2.4428%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (64 samples, 0.73%)</title><rect x="1.6217%" y="132" width="0.7309%" height="15" fill="rgb(210,31,41)" fg:x="142" fg:w="64"/><text x="1.8717%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (33 samples, 0.38%)</title><rect x="1.9758%" y="148" width="0.3769%" height="15" fill="rgb(221,200,47)" fg:x="173" fg:w="33"/><text x="2.2258%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (29 samples, 0.33%)</title><rect x="2.0215%" y="164" width="0.3312%" height="15" fill="rgb(226,26,5)" fg:x="177" fg:w="29"/><text x="2.2715%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (27 samples, 0.31%)</title><rect x="4.5797%" y="148" width="0.3084%" height="15" fill="rgb(249,33,26)" fg:x="401" fg:w="27"/><text x="4.8297%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.19%)</title><rect x="8.9082%" y="164" width="0.1942%" height="15" fill="rgb(235,183,28)" fg:x="780" fg:w="17"/><text x="9.1582%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (668 samples, 7.63%)</title><rect x="2.4555%" y="132" width="7.6291%" height="15" fill="rgb(221,5,38)" fg:x="215" fg:w="668"/><text x="2.7055%" y="142.50">_remove_ed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (455 samples, 5.20%)</title><rect x="4.8881%" y="148" width="5.1964%" height="15" fill="rgb(247,18,42)" fg:x="428" fg:w="455"/><text x="5.1381%" y="158.50">__eq__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (86 samples, 0.98%)</title><rect x="9.1023%" y="164" width="0.9822%" height="15" fill="rgb(241,131,45)" fg:x="797" fg:w="86"/><text x="9.3523%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (747 samples, 8.53%)</title><rect x="1.5875%" y="116" width="8.5313%" height="15" fill="rgb(249,31,29)" fg:x="139" fg:w="747"/><text x="1.8375%" y="126.50">apply_update..</text></g><g><title>apply_update (kappybara/mixture.py:106) (9 samples, 0.10%)</title><rect x="10.1188%" y="116" width="0.1028%" height="15" fill="rgb(225,111,53)" fg:x="886" fg:w="9"/><text x="10.3688%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (11 samples, 0.13%)</title><rect x="10.2216%" y="132" width="0.1256%" height="15" fill="rgb(238,160,17)" fg:x="895" fg:w="11"/><text x="10.4716%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (40 samples, 0.46%)</title><rect x="10.7812%" y="148" width="0.4568%" height="15" fill="rgb(214,148,48)" fg:x="944" fg:w="40"/><text x="11.0312%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="15.5208%" y="164" width="0.1142%" height="15" fill="rgb(232,36,49)" fg:x="1359" fg:w="10"/><text x="15.7708%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (416 samples, 4.75%)</title><rect x="11.2380%" y="148" width="4.7510%" height="15" fill="rgb(209,103,24)" fg:x="984" fg:w="416"/><text x="11.4880%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.35%)</title><rect x="15.6350%" y="164" width="0.3540%" height="15" fill="rgb(229,88,8)" fg:x="1369" fg:w="31"/><text x="15.8850%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.13%)</title><rect x="19.4038%" y="164" width="0.1256%" height="15" fill="rgb(213,181,19)" fg:x="1699" fg:w="11"/><text x="19.6538%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (331 samples, 3.78%)</title><rect x="15.9890%" y="148" width="3.7803%" height="15" fill="rgb(254,191,54)" fg:x="1400" fg:w="331"/><text x="16.2390%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.24%)</title><rect x="19.5295%" y="164" width="0.2398%" height="15" fill="rgb(241,83,37)" fg:x="1710" fg:w="21"/><text x="19.7795%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (77 samples, 0.88%)</title><rect x="19.7921%" y="148" width="0.8794%" height="15" fill="rgb(233,36,39)" fg:x="1733" fg:w="77"/><text x="20.0421%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (55 samples, 0.63%)</title><rect x="20.6715%" y="148" width="0.6281%" height="15" fill="rgb(226,3,54)" fg:x="1810" fg:w="55"/><text x="20.9215%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.18%)</title><rect x="23.3440%" y="164" width="0.1827%" height="15" fill="rgb(245,192,40)" fg:x="2044" fg:w="16"/><text x="23.5940%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (234 samples, 2.67%)</title><rect x="21.2997%" y="148" width="2.6725%" height="15" fill="rgb(238,167,29)" fg:x="1865" fg:w="234"/><text x="21.5497%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.45%)</title><rect x="23.5267%" y="164" width="0.4454%" height="15" fill="rgb(232,182,51)" fg:x="2060" fg:w="39"/><text x="23.7767%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (228 samples, 2.60%)</title><rect x="23.9721%" y="148" width="2.6039%" height="15" fill="rgb(231,60,39)" fg:x="2099" fg:w="228"/><text x="24.2221%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (15 samples, 0.17%)</title><rect x="28.5290%" y="164" width="0.1713%" height="15" fill="rgb(208,69,12)" fg:x="2498" fg:w="15"/><text x="28.7790%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (94 samples, 1.07%)</title><rect x="28.7003%" y="164" width="1.0735%" height="15" fill="rgb(235,93,37)" fg:x="2513" fg:w="94"/><text x="28.9503%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (110 samples, 1.26%)</title><rect x="31.4185%" y="180" width="1.2563%" height="15" fill="rgb(213,116,39)" fg:x="2751" fg:w="110"/><text x="31.6685%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (86 samples, 0.98%)</title><rect x="34.6277%" y="196" width="0.9822%" height="15" fill="rgb(222,207,29)" fg:x="3032" fg:w="86"/><text x="34.8777%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (855 samples, 9.76%)</title><rect x="29.8081%" y="164" width="9.7647%" height="15" fill="rgb(206,96,30)" fg:x="2610" fg:w="855"/><text x="30.0581%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (604 samples, 6.90%)</title><rect x="32.6747%" y="180" width="6.8981%" height="15" fill="rgb(218,138,4)" fg:x="2861" fg:w="604"/><text x="32.9247%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (347 samples, 3.96%)</title><rect x="35.6099%" y="196" width="3.9630%" height="15" fill="rgb(250,191,14)" fg:x="3118" fg:w="347"/><text x="35.8599%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (121 samples, 1.38%)</title><rect x="39.5729%" y="164" width="1.3819%" height="15" fill="rgb(239,60,40)" fg:x="3465" fg:w="121"/><text x="39.8229%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (70 samples, 0.80%)</title><rect x="41.9141%" y="180" width="0.7995%" height="15" fill="rgb(206,27,48)" fg:x="3670" fg:w="70"/><text x="42.1641%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (176 samples, 2.01%)</title><rect x="41.0233%" y="164" width="2.0101%" height="15" fill="rgb(225,35,8)" fg:x="3592" fg:w="176"/><text x="41.2733%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (28 samples, 0.32%)</title><rect x="42.7136%" y="180" width="0.3198%" height="15" fill="rgb(250,213,24)" fg:x="3740" fg:w="28"/><text x="42.9636%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (195 samples, 2.23%)</title><rect x="52.7524%" y="180" width="2.2270%" height="15" fill="rgb(247,123,22)" fg:x="4619" fg:w="195"/><text x="53.0024%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (15 samples, 0.17%)</title><rect x="54.9794%" y="180" width="0.1713%" height="15" fill="rgb(231,138,38)" fg:x="4814" fg:w="15"/><text x="55.2294%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (10 samples, 0.11%)</title><rect x="55.5276%" y="196" width="0.1142%" height="15" fill="rgb(231,145,46)" fg:x="4862" fg:w="10"/><text x="55.7776%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (133 samples, 1.52%)</title><rect x="55.1508%" y="180" width="1.5190%" height="15" fill="rgb(251,118,11)" fg:x="4829" fg:w="133"/><text x="55.4008%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (90 samples, 1.03%)</title><rect x="55.6418%" y="196" width="1.0279%" height="15" fill="rgb(217,147,25)" fg:x="4872" fg:w="90"/><text x="55.8918%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (27 samples, 0.31%)</title><rect x="57.6291%" y="196" width="0.3084%" height="15" fill="rgb(247,81,37)" fg:x="5046" fg:w="27"/><text x="57.8791%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (20 samples, 0.23%)</title><rect x="60.1987%" y="212" width="0.2284%" height="15" fill="rgb(209,12,38)" fg:x="5271" fg:w="20"/><text x="60.4487%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="62.1859%" y="228" width="0.1142%" height="15" fill="rgb(227,1,9)" fg:x="5445" fg:w="10"/><text x="62.4359%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (423 samples, 4.83%)</title><rect x="57.9374%" y="196" width="4.8310%" height="15" fill="rgb(248,47,43)" fg:x="5073" fg:w="423"/><text x="58.1874%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (205 samples, 2.34%)</title><rect x="60.4271%" y="212" width="2.3413%" height="15" fill="rgb(221,10,30)" fg:x="5291" fg:w="205"/><text x="60.6771%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.47%)</title><rect x="62.3001%" y="228" width="0.4683%" height="15" fill="rgb(210,229,1)" fg:x="5455" fg:w="41"/><text x="62.5501%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (198 samples, 2.26%)</title><rect x="62.7684%" y="196" width="2.2613%" height="15" fill="rgb(222,148,37)" fg:x="5496" fg:w="198"/><text x="63.0184%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (93 samples, 1.06%)</title><rect x="65.0297%" y="196" width="1.0621%" height="15" fill="rgb(234,67,33)" fg:x="5694" fg:w="93"/><text x="65.2797%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (12 samples, 0.14%)</title><rect x="66.0918%" y="196" width="0.1370%" height="15" fill="rgb(247,98,35)" fg:x="5787" fg:w="12"/><text x="66.3418%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (884 samples, 10.10%)</title><rect x="56.6697%" y="180" width="10.0959%" height="15" fill="rgb(247,138,52)" fg:x="4962" fg:w="884"/><text x="56.9197%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (47 samples, 0.54%)</title><rect x="66.2289%" y="196" width="0.5368%" height="15" fill="rgb(213,79,30)" fg:x="5799" fg:w="47"/><text x="66.4789%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (21 samples, 0.24%)</title><rect x="66.7656%" y="180" width="0.2398%" height="15" fill="rgb(246,177,23)" fg:x="5846" fg:w="21"/><text x="67.0156%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.13%)</title><rect x="67.8735%" y="196" width="0.1256%" height="15" fill="rgb(230,62,27)" fg:x="5943" fg:w="11"/><text x="68.1235%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (236 samples, 2.70%)</title><rect x="67.0055%" y="180" width="2.6953%" height="15" fill="rgb(216,154,8)" fg:x="5867" fg:w="236"/><text x="67.2555%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (149 samples, 1.70%)</title><rect x="67.9991%" y="196" width="1.7017%" height="15" fill="rgb(244,35,45)" fg:x="5954" fg:w="149"/><text x="68.2491%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.24%)</title><rect x="69.4609%" y="212" width="0.2398%" height="15" fill="rgb(251,115,12)" fg:x="6082" fg:w="21"/><text x="69.7109%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (304 samples, 3.47%)</title><rect x="69.7008%" y="180" width="3.4719%" height="15" fill="rgb(240,54,50)" fg:x="6103" fg:w="304"/><text x="69.9508%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (194 samples, 2.22%)</title><rect x="70.9571%" y="196" width="2.2156%" height="15" fill="rgb(233,84,52)" fg:x="6213" fg:w="194"/><text x="71.2071%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.55%)</title><rect x="72.6245%" y="212" width="0.5482%" height="15" fill="rgb(207,117,47)" fg:x="6359" fg:w="48"/><text x="72.8745%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (43 samples, 0.49%)</title><rect x="73.1727%" y="180" width="0.4911%" height="15" fill="rgb(249,43,39)" fg:x="6407" fg:w="43"/><text x="73.4227%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (108 samples, 1.23%)</title><rect x="73.6638%" y="180" width="1.2334%" height="15" fill="rgb(209,38,44)" fg:x="6450" fg:w="108"/><text x="73.9138%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (59 samples, 0.67%)</title><rect x="74.8972%" y="180" width="0.6738%" height="15" fill="rgb(236,212,23)" fg:x="6558" fg:w="59"/><text x="75.1472%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (14 samples, 0.16%)</title><rect x="75.5710%" y="180" width="0.1599%" height="15" fill="rgb(242,79,21)" fg:x="6617" fg:w="14"/><text x="75.8210%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,092 samples, 35.31%)</title><rect x="43.0333%" y="164" width="35.3129%" height="15" fill="rgb(211,96,35)" fg:x="3768" fg:w="3092"/><text x="43.2833%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (229 samples, 2.62%)</title><rect x="75.7309%" y="180" width="2.6153%" height="15" fill="rgb(253,215,40)" fg:x="6631" fg:w="229"/><text x="75.9809%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,574 samples, 52.24%)</title><rect x="26.5761%" y="148" width="52.2385%" height="15" fill="rgb(211,81,21)" fg:x="2327" fg:w="4574"/><text x="26.8261%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (41 samples, 0.47%)</title><rect x="78.3463%" y="164" width="0.4683%" height="15" fill="rgb(208,190,38)" fg:x="6860" fg:w="41"/><text x="78.5963%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (71 samples, 0.81%)</title><rect x="80.1736%" y="164" width="0.8109%" height="15" fill="rgb(235,213,38)" fg:x="7020" fg:w="71"/><text x="80.4236%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (58 samples, 0.66%)</title><rect x="82.0352%" y="180" width="0.6624%" height="15" fill="rgb(237,122,38)" fg:x="7183" fg:w="58"/><text x="82.2852%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (562 samples, 6.42%)</title><rect x="78.9287%" y="148" width="6.4185%" height="15" fill="rgb(244,218,35)" fg:x="6911" fg:w="562"/><text x="79.1787%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (382 samples, 4.36%)</title><rect x="80.9845%" y="164" width="4.3627%" height="15" fill="rgb(240,68,47)" fg:x="7091" fg:w="382"/><text x="81.2345%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (232 samples, 2.65%)</title><rect x="82.6976%" y="180" width="2.6496%" height="15" fill="rgb(210,16,53)" fg:x="7241" fg:w="232"/><text x="82.9476%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (45 samples, 0.51%)</title><rect x="85.8154%" y="164" width="0.5139%" height="15" fill="rgb(235,124,12)" fg:x="7514" fg:w="45"/><text x="86.0654%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (93 samples, 1.06%)</title><rect x="85.3472%" y="148" width="1.0621%" height="15" fill="rgb(224,169,11)" fg:x="7473" fg:w="93"/><text x="85.5972%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (16 samples, 0.18%)</title><rect x="86.6149%" y="164" width="0.1827%" height="15" fill="rgb(250,166,2)" fg:x="7584" fg:w="16"/><text x="86.8649%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (88 samples, 1.01%)</title><rect x="86.4093%" y="148" width="1.0050%" height="15" fill="rgb(242,216,29)" fg:x="7566" fg:w="88"/><text x="86.6593%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (54 samples, 0.62%)</title><rect x="86.7976%" y="164" width="0.6167%" height="15" fill="rgb(230,116,27)" fg:x="7600" fg:w="54"/><text x="87.0476%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (104 samples, 1.19%)</title><rect x="87.4143%" y="148" width="1.1878%" height="15" fill="rgb(228,99,48)" fg:x="7654" fg:w="104"/><text x="87.6643%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.15%)</title><rect x="88.4536%" y="164" width="0.1485%" height="15" fill="rgb(253,11,6)" fg:x="7745" fg:w="13"/><text x="88.7036%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (35 samples, 0.40%)</title><rect x="88.6021%" y="148" width="0.3997%" height="15" fill="rgb(247,143,39)" fg:x="7758" fg:w="35"/><text x="88.8521%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (56 samples, 0.64%)</title><rect x="89.0018%" y="148" width="0.6396%" height="15" fill="rgb(236,97,10)" fg:x="7793" fg:w="56"/><text x="89.2518%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.10%)</title><rect x="89.5386%" y="164" width="0.1028%" height="15" fill="rgb(233,208,19)" fg:x="7840" fg:w="9"/><text x="89.7886%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (98 samples, 1.12%)</title><rect x="91.2175%" y="164" width="1.1192%" height="15" fill="rgb(216,164,2)" fg:x="7987" fg:w="98"/><text x="91.4675%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.16%)</title><rect x="92.1768%" y="180" width="0.1599%" height="15" fill="rgb(220,129,5)" fg:x="8071" fg:w="14"/><text x="92.4268%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (246 samples, 2.81%)</title><rect x="89.6414%" y="148" width="2.8095%" height="15" fill="rgb(242,17,10)" fg:x="7849" fg:w="246"/><text x="89.8914%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (24 samples, 0.27%)</title><rect x="92.4509%" y="148" width="0.2741%" height="15" fill="rgb(242,107,0)" fg:x="8095" fg:w="24"/><text x="92.7009%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:111) (9 samples, 0.10%)</title><rect x="92.6222%" y="164" width="0.1028%" height="15" fill="rgb(251,28,31)" fg:x="8110" fg:w="9"/><text x="92.8722%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (43 samples, 0.49%)</title><rect x="92.7821%" y="148" width="0.4911%" height="15" fill="rgb(233,223,10)" fg:x="8124" fg:w="43"/><text x="93.0321%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (10 samples, 0.11%)</title><rect x="93.2732%" y="148" width="0.1142%" height="15" fill="rgb(215,21,27)" fg:x="8167" fg:w="10"/><text x="93.5232%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,273 samples, 83.06%)</title><rect x="10.3586%" y="132" width="83.0630%" height="15" fill="rgb(232,23,21)" fg:x="907" fg:w="7273"/><text x="10.6086%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (51 samples, 0.58%)</title><rect x="93.4217%" y="132" width="0.5825%" height="15" fill="rgb(244,5,23)" fg:x="8180" fg:w="51"/><text x="93.6717%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (11 samples, 0.13%)</title><rect x="94.0041%" y="132" width="0.1256%" height="15" fill="rgb(226,81,46)" fg:x="8231" fg:w="11"/><text x="94.2541%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (11 samples, 0.13%)</title><rect x="94.1297%" y="132" width="0.1256%" height="15" fill="rgb(247,70,30)" fg:x="8242" fg:w="11"/><text x="94.3797%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.23%)</title><rect x="97.2933%" y="148" width="0.2284%" height="15" fill="rgb(212,68,19)" fg:x="8519" fg:w="20"/><text x="97.5433%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (327 samples, 3.73%)</title><rect x="94.2554%" y="132" width="3.7346%" height="15" fill="rgb(240,187,13)" fg:x="8253" fg:w="327"/><text x="94.5054%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.47%)</title><rect x="97.5217%" y="148" width="0.4683%" height="15" fill="rgb(223,113,26)" fg:x="8539" fg:w="41"/><text x="97.7717%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="99.2691%" y="148" width="0.1142%" height="15" fill="rgb(206,192,2)" fg:x="8692" fg:w="10"/><text x="99.5191%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (8,585 samples, 98.05%)</title><rect x="1.5875%" y="100" width="98.0471%" height="15" fill="rgb(241,108,4)" fg:x="139" fg:w="8585"/><text x="1.8375%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (7,829 samples, 89.41%)</title><rect x="10.2216%" y="116" width="89.4130%" height="15" fill="rgb(247,173,49)" fg:x="895" fg:w="7829"/><text x="10.4716%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (144 samples, 1.64%)</title><rect x="97.9899%" y="132" width="1.6446%" height="15" fill="rgb(224,114,35)" fg:x="8580" fg:w="144"/><text x="98.2399%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.25%)</title><rect x="99.3833%" y="148" width="0.2513%" height="15" fill="rgb(245,159,27)" fg:x="8702" fg:w="22"/><text x="99.6333%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,715 samples, 99.53%)</title><rect x="0.1142%" y="68" width="99.5317%" height="15" fill="rgb(245,172,44)" fg:x="10" fg:w="8715"/><text x="0.3642%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,607 samples, 98.30%)</title><rect x="1.3476%" y="84" width="98.2983%" height="15" fill="rgb(236,23,11)" fg:x="118" fg:w="8607"/><text x="1.5976%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:97) (9 samples, 0.10%)</title><rect x="99.7487%" y="68" width="0.1028%" height="15" fill="rgb(205,117,38)" fg:x="8734" fg:w="9"/><text x="99.9987%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (12 samples, 0.14%)</title><rect x="99.8515%" y="68" width="0.1370%" height="15" fill="rgb(237,72,25)" fg:x="8743" fg:w="12"/><text x="100.1015%" y="78.50"></text></g><g><title>all (8,756 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="8756"/><text x="0.2500%" y="62.50"></text></g></svg></svg>