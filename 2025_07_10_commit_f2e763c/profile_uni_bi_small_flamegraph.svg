<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit f2e763c</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="9328"><g><title>update (kappybara/system.py:69) (34 samples, 0.36%)</title><rect x="0.1179%" y="84" width="0.3645%" height="15" fill="rgb(227,0,7)" fg:x="11" fg:w="34"/><text x="0.3679%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (33 samples, 0.35%)</title><rect x="0.1286%" y="100" width="0.3538%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="33"/><text x="0.3786%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (31 samples, 0.33%)</title><rect x="0.1501%" y="116" width="0.3323%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="31"/><text x="0.4001%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (28 samples, 0.30%)</title><rect x="0.1822%" y="132" width="0.3002%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="28"/><text x="0.4322%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (28 samples, 0.30%)</title><rect x="0.1822%" y="148" width="0.3002%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="28"/><text x="0.4322%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (27 samples, 0.29%)</title><rect x="0.1930%" y="164" width="0.2895%" height="15" fill="rgb(232,128,0)" fg:x="18" fg:w="27"/><text x="0.4430%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (16 samples, 0.17%)</title><rect x="0.5789%" y="116" width="0.1715%" height="15" fill="rgb(207,160,47)" fg:x="54" fg:w="16"/><text x="0.8289%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (45 samples, 0.48%)</title><rect x="0.5253%" y="100" width="0.4824%" height="15" fill="rgb(228,23,34)" fg:x="49" fg:w="45"/><text x="0.7753%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (22 samples, 0.24%)</title><rect x="0.7719%" y="116" width="0.2358%" height="15" fill="rgb(218,30,26)" fg:x="72" fg:w="22"/><text x="1.0219%" y="126.50"></text></g><g><title>_produce_update (kappybara/rule.py:150) (12 samples, 0.13%)</title><rect x="0.8791%" y="132" width="0.1286%" height="15" fill="rgb(220,122,19)" fg:x="82" fg:w="12"/><text x="1.1291%" y="142.50"></text></g><g><title>disconnect_site (kappybara/mixture.py:234) (12 samples, 0.13%)</title><rect x="0.8791%" y="148" width="0.1286%" height="15" fill="rgb(250,228,42)" fg:x="82" fg:w="12"/><text x="1.1291%" y="158.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (20 samples, 0.21%)</title><rect x="1.1042%" y="148" width="0.2144%" height="15" fill="rgb(240,193,28)" fg:x="103" fg:w="20"/><text x="1.3542%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (75 samples, 0.80%)</title><rect x="1.3722%" y="148" width="0.8040%" height="15" fill="rgb(216,20,37)" fg:x="128" fg:w="75"/><text x="1.6222%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (22 samples, 0.24%)</title><rect x="2.1762%" y="148" width="0.2358%" height="15" fill="rgb(206,188,39)" fg:x="203" fg:w="22"/><text x="2.4262%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (83 samples, 0.89%)</title><rect x="3.4734%" y="180" width="0.8898%" height="15" fill="rgb(217,207,13)" fg:x="324" fg:w="83"/><text x="3.7234%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (50 samples, 0.54%)</title><rect x="3.8272%" y="196" width="0.5360%" height="15" fill="rgb(231,73,38)" fg:x="357" fg:w="50"/><text x="4.0772%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (332 samples, 3.56%)</title><rect x="1.0720%" y="132" width="3.5592%" height="15" fill="rgb(225,20,46)" fg:x="100" fg:w="332"/><text x="1.3220%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (201 samples, 2.15%)</title><rect x="2.4764%" y="148" width="2.1548%" height="15" fill="rgb(210,31,41)" fg:x="231" fg:w="201"/><text x="2.7264%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (170 samples, 1.82%)</title><rect x="2.8087%" y="164" width="1.8225%" height="15" fill="rgb(221,200,47)" fg:x="262" fg:w="170"/><text x="3.0587%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (22 samples, 0.24%)</title><rect x="4.3954%" y="180" width="0.2358%" height="15" fill="rgb(226,26,5)" fg:x="410" fg:w="22"/><text x="4.6454%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (31 samples, 0.33%)</title><rect x="4.6312%" y="132" width="0.3323%" height="15" fill="rgb(249,33,26)" fg:x="432" fg:w="31"/><text x="4.8812%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (25 samples, 0.27%)</title><rect x="4.6955%" y="148" width="0.2680%" height="15" fill="rgb(235,183,28)" fg:x="438" fg:w="25"/><text x="4.9455%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (369 samples, 3.96%)</title><rect x="1.0184%" y="116" width="3.9558%" height="15" fill="rgb(221,5,38)" fg:x="95" fg:w="369"/><text x="1.2684%" y="126.50">appl..</text></g><g><title>embeddings (kappybara/pattern.py:256) (46 samples, 0.49%)</title><rect x="5.4138%" y="148" width="0.4931%" height="15" fill="rgb(247,18,42)" fg:x="505" fg:w="46"/><text x="5.6638%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.23%)</title><rect x="9.7556%" y="164" width="0.2251%" height="15" fill="rgb(241,131,45)" fg:x="910" fg:w="21"/><text x="10.0056%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (422 samples, 4.52%)</title><rect x="5.9069%" y="148" width="4.5240%" height="15" fill="rgb(249,31,29)" fg:x="551" fg:w="422"/><text x="6.1569%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.45%)</title><rect x="9.9807%" y="164" width="0.4503%" height="15" fill="rgb(225,111,53)" fg:x="931" fg:w="42"/><text x="10.2307%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (305 samples, 3.27%)</title><rect x="10.4310%" y="148" width="3.2697%" height="15" fill="rgb(238,160,17)" fg:x="973" fg:w="305"/><text x="10.6810%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.34%)</title><rect x="13.3576%" y="164" width="0.3431%" height="15" fill="rgb(214,148,48)" fg:x="1246" fg:w="32"/><text x="13.6076%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (79 samples, 0.85%)</title><rect x="13.7221%" y="148" width="0.8469%" height="15" fill="rgb(232,36,49)" fg:x="1280" fg:w="79"/><text x="13.9721%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (57 samples, 0.61%)</title><rect x="14.5690%" y="148" width="0.6111%" height="15" fill="rgb(209,103,24)" fg:x="1359" fg:w="57"/><text x="14.8190%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.24%)</title><rect x="17.5172%" y="164" width="0.2358%" height="15" fill="rgb(229,88,8)" fg:x="1634" fg:w="22"/><text x="17.7672%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (274 samples, 2.94%)</title><rect x="15.1801%" y="148" width="2.9374%" height="15" fill="rgb(213,181,19)" fg:x="1416" fg:w="274"/><text x="15.4301%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.36%)</title><rect x="17.7530%" y="164" width="0.3645%" height="15" fill="rgb(254,191,54)" fg:x="1656" fg:w="34"/><text x="18.0030%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (232 samples, 2.49%)</title><rect x="18.1175%" y="148" width="2.4871%" height="15" fill="rgb(241,83,37)" fg:x="1690" fg:w="232"/><text x="18.3675%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (18 samples, 0.19%)</title><rect x="23.1561%" y="164" width="0.1930%" height="15" fill="rgb(233,36,39)" fg:x="2160" fg:w="18"/><text x="23.4061%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (90 samples, 0.96%)</title><rect x="23.3491%" y="164" width="0.9648%" height="15" fill="rgb(226,3,54)" fg:x="2178" fg:w="90"/><text x="23.5991%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (125 samples, 1.34%)</title><rect x="26.1900%" y="180" width="1.3401%" height="15" fill="rgb(245,192,40)" fg:x="2443" fg:w="125"/><text x="26.4400%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (91 samples, 0.98%)</title><rect x="29.5455%" y="196" width="0.9756%" height="15" fill="rgb(238,167,29)" fg:x="2756" fg:w="91"/><text x="29.7955%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (921 samples, 9.87%)</title><rect x="24.3246%" y="164" width="9.8735%" height="15" fill="rgb(232,182,51)" fg:x="2269" fg:w="921"/><text x="24.5746%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (622 samples, 6.67%)</title><rect x="27.5300%" y="180" width="6.6681%" height="15" fill="rgb(231,60,39)" fg:x="2568" fg:w="622"/><text x="27.7800%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (343 samples, 3.68%)</title><rect x="30.5210%" y="196" width="3.6771%" height="15" fill="rgb(208,69,12)" fg:x="2847" fg:w="343"/><text x="30.7710%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (117 samples, 1.25%)</title><rect x="34.1981%" y="164" width="1.2543%" height="15" fill="rgb(235,93,37)" fg:x="3190" fg:w="117"/><text x="34.4481%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (92 samples, 0.99%)</title><rect x="36.4601%" y="180" width="0.9863%" height="15" fill="rgb(213,116,39)" fg:x="3401" fg:w="92"/><text x="36.7101%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (203 samples, 2.18%)</title><rect x="35.4953%" y="164" width="2.1762%" height="15" fill="rgb(222,207,29)" fg:x="3311" fg:w="203"/><text x="35.7453%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (21 samples, 0.23%)</title><rect x="37.4464%" y="180" width="0.2251%" height="15" fill="rgb(206,96,30)" fg:x="3493" fg:w="21"/><text x="37.6964%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (203 samples, 2.18%)</title><rect x="48.7243%" y="180" width="2.1762%" height="15" fill="rgb(218,138,4)" fg:x="4545" fg:w="203"/><text x="48.9743%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (17 samples, 0.18%)</title><rect x="50.9005%" y="180" width="0.1822%" height="15" fill="rgb(250,191,14)" fg:x="4748" fg:w="17"/><text x="51.1505%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (57 samples, 0.61%)</title><rect x="51.8225%" y="196" width="0.6111%" height="15" fill="rgb(239,60,40)" fg:x="4834" fg:w="57"/><text x="52.0725%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (186 samples, 1.99%)</title><rect x="51.0828%" y="180" width="1.9940%" height="15" fill="rgb(206,27,48)" fg:x="4765" fg:w="186"/><text x="51.3328%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (60 samples, 0.64%)</title><rect x="52.4335%" y="196" width="0.6432%" height="15" fill="rgb(225,35,8)" fg:x="4891" fg:w="60"/><text x="52.6835%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (28 samples, 0.30%)</title><rect x="54.4919%" y="196" width="0.3002%" height="15" fill="rgb(250,213,24)" fg:x="5083" fg:w="28"/><text x="54.7419%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.18%)</title><rect x="56.7860%" y="212" width="0.1822%" height="15" fill="rgb(247,123,22)" fg:x="5297" fg:w="17"/><text x="57.0360%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.17%)</title><rect x="59.1981%" y="228" width="0.1715%" height="15" fill="rgb(231,138,38)" fg:x="5522" fg:w="16"/><text x="59.4481%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (451 samples, 4.83%)</title><rect x="54.7920%" y="196" width="4.8349%" height="15" fill="rgb(231,145,46)" fg:x="5111" fg:w="451"/><text x="55.0420%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (248 samples, 2.66%)</title><rect x="56.9683%" y="212" width="2.6587%" height="15" fill="rgb(251,118,11)" fg:x="5314" fg:w="248"/><text x="57.2183%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.26%)</title><rect x="59.3696%" y="228" width="0.2573%" height="15" fill="rgb(217,147,25)" fg:x="5538" fg:w="24"/><text x="59.6196%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (216 samples, 2.32%)</title><rect x="59.6269%" y="196" width="2.3156%" height="15" fill="rgb(247,81,37)" fg:x="5562" fg:w="216"/><text x="59.8769%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (85 samples, 0.91%)</title><rect x="61.9425%" y="196" width="0.9112%" height="15" fill="rgb(209,12,38)" fg:x="5778" fg:w="85"/><text x="62.1925%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="62.8538%" y="196" width="0.1822%" height="15" fill="rgb(227,1,9)" fg:x="5863" fg:w="17"/><text x="63.1038%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (973 samples, 10.43%)</title><rect x="53.0768%" y="180" width="10.4310%" height="15" fill="rgb(248,47,43)" fg:x="4951" fg:w="973"/><text x="53.3268%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (44 samples, 0.47%)</title><rect x="63.0360%" y="196" width="0.4717%" height="15" fill="rgb(221,10,30)" fg:x="5880" fg:w="44"/><text x="63.2860%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (28 samples, 0.30%)</title><rect x="63.6042%" y="180" width="0.3002%" height="15" fill="rgb(210,229,1)" fg:x="5933" fg:w="28"/><text x="63.8542%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.18%)</title><rect x="64.8585%" y="196" width="0.1822%" height="15" fill="rgb(222,148,37)" fg:x="6050" fg:w="17"/><text x="65.1085%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="66.7131%" y="212" width="0.1072%" height="15" fill="rgb(234,67,33)" fg:x="6223" fg:w="10"/><text x="66.9631%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (308 samples, 3.30%)</title><rect x="63.9044%" y="180" width="3.3019%" height="15" fill="rgb(247,98,35)" fg:x="5961" fg:w="308"/><text x="64.1544%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (202 samples, 2.17%)</title><rect x="65.0407%" y="196" width="2.1655%" height="15" fill="rgb(247,138,52)" fg:x="6067" fg:w="202"/><text x="65.2907%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.39%)</title><rect x="66.8203%" y="212" width="0.3859%" height="15" fill="rgb(213,79,30)" fg:x="6233" fg:w="36"/><text x="67.0703%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.13%)</title><rect x="68.6214%" y="196" width="0.1286%" height="15" fill="rgb(246,177,23)" fg:x="6401" fg:w="12"/><text x="68.8714%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="70.6154%" y="212" width="0.1072%" height="15" fill="rgb(230,62,27)" fg:x="6587" fg:w="10"/><text x="70.8654%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (367 samples, 3.93%)</title><rect x="67.2063%" y="180" width="3.9344%" height="15" fill="rgb(216,154,8)" fg:x="6269" fg:w="367"/><text x="67.4563%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (223 samples, 2.39%)</title><rect x="68.7500%" y="196" width="2.3907%" height="15" fill="rgb(244,35,45)" fg:x="6413" fg:w="223"/><text x="69.0000%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.42%)</title><rect x="70.7226%" y="212" width="0.4181%" height="15" fill="rgb(251,115,12)" fg:x="6597" fg:w="39"/><text x="70.9726%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (86 samples, 0.92%)</title><rect x="71.1407%" y="180" width="0.9220%" height="15" fill="rgb(240,54,50)" fg:x="6636" fg:w="86"/><text x="71.3907%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (183 samples, 1.96%)</title><rect x="72.0840%" y="180" width="1.9618%" height="15" fill="rgb(233,84,52)" fg:x="6724" fg:w="183"/><text x="72.3340%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (91 samples, 0.98%)</title><rect x="74.0459%" y="180" width="0.9756%" height="15" fill="rgb(207,117,47)" fg:x="6907" fg:w="91"/><text x="74.2959%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (22 samples, 0.24%)</title><rect x="75.0214%" y="180" width="0.2358%" height="15" fill="rgb(249,43,39)" fg:x="6998" fg:w="22"/><text x="75.2714%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,814 samples, 40.89%)</title><rect x="37.6715%" y="164" width="40.8877%" height="15" fill="rgb(209,38,44)" fg:x="3514" fg:w="3814"/><text x="37.9215%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (308 samples, 3.30%)</title><rect x="75.2573%" y="180" width="3.3019%" height="15" fill="rgb(236,212,23)" fg:x="7020" fg:w="308"/><text x="75.5073%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,461 samples, 58.54%)</title><rect x="20.6046%" y="148" width="58.5442%" height="15" fill="rgb(242,79,21)" fg:x="1922" fg:w="5461"/><text x="20.8546%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (55 samples, 0.59%)</title><rect x="78.5592%" y="164" width="0.5896%" height="15" fill="rgb(211,96,35)" fg:x="7328" fg:w="55"/><text x="78.8092%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (60 samples, 0.64%)</title><rect x="80.6389%" y="164" width="0.6432%" height="15" fill="rgb(253,215,40)" fg:x="7522" fg:w="60"/><text x="80.8889%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (56 samples, 0.60%)</title><rect x="82.3756%" y="180" width="0.6003%" height="15" fill="rgb(211,81,21)" fg:x="7684" fg:w="56"/><text x="82.6256%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (565 samples, 6.06%)</title><rect x="79.2882%" y="148" width="6.0570%" height="15" fill="rgb(208,190,38)" fg:x="7396" fg:w="565"/><text x="79.5382%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (379 samples, 4.06%)</title><rect x="81.2822%" y="164" width="4.0630%" height="15" fill="rgb(235,213,38)" fg:x="7582" fg:w="379"/><text x="81.5322%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (221 samples, 2.37%)</title><rect x="82.9760%" y="180" width="2.3692%" height="15" fill="rgb(237,122,38)" fg:x="7740" fg:w="221"/><text x="83.2260%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (35 samples, 0.38%)</title><rect x="86.0527%" y="164" width="0.3752%" height="15" fill="rgb(244,218,35)" fg:x="8027" fg:w="35"/><text x="86.3027%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (113 samples, 1.21%)</title><rect x="85.3452%" y="148" width="1.2114%" height="15" fill="rgb(240,68,47)" fg:x="7961" fg:w="113"/><text x="85.5952%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (12 samples, 0.13%)</title><rect x="86.4280%" y="164" width="0.1286%" height="15" fill="rgb(210,16,53)" fg:x="8062" fg:w="12"/><text x="86.6780%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (15 samples, 0.16%)</title><rect x="87.0283%" y="164" width="0.1608%" height="15" fill="rgb(235,124,12)" fg:x="8118" fg:w="15"/><text x="87.2783%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (113 samples, 1.21%)</title><rect x="86.5566%" y="148" width="1.2114%" height="15" fill="rgb(224,169,11)" fg:x="8074" fg:w="113"/><text x="86.8066%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (54 samples, 0.58%)</title><rect x="87.1891%" y="164" width="0.5789%" height="15" fill="rgb(250,166,2)" fg:x="8133" fg:w="54"/><text x="87.4391%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="88.9901%" y="164" width="0.1394%" height="15" fill="rgb(242,216,29)" fg:x="8301" fg:w="13"/><text x="89.2401%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (145 samples, 1.55%)</title><rect x="87.7680%" y="148" width="1.5545%" height="15" fill="rgb(230,116,27)" fg:x="8187" fg:w="145"/><text x="88.0180%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.19%)</title><rect x="89.1295%" y="164" width="0.1930%" height="15" fill="rgb(228,99,48)" fg:x="8314" fg:w="18"/><text x="89.3795%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (65 samples, 0.70%)</title><rect x="89.3225%" y="148" width="0.6968%" height="15" fill="rgb(253,11,6)" fg:x="8332" fg:w="65"/><text x="89.5725%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (68 samples, 0.73%)</title><rect x="90.0193%" y="148" width="0.7290%" height="15" fill="rgb(247,143,39)" fg:x="8397" fg:w="68"/><text x="90.2693%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="92.8816%" y="164" width="0.1072%" height="15" fill="rgb(236,97,10)" fg:x="8664" fg:w="10"/><text x="93.1316%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (127 samples, 1.36%)</title><rect x="92.9889%" y="164" width="1.3615%" height="15" fill="rgb(233,208,19)" fg:x="8674" fg:w="127"/><text x="93.2389%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (350 samples, 3.75%)</title><rect x="90.7483%" y="148" width="3.7521%" height="15" fill="rgb(216,164,2)" fg:x="8465" fg:w="350"/><text x="90.9983%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (39 samples, 0.42%)</title><rect x="94.5219%" y="148" width="0.4181%" height="15" fill="rgb(220,129,5)" fg:x="8817" fg:w="39"/><text x="94.7719%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (10 samples, 0.11%)</title><rect x="94.9400%" y="148" width="0.1072%" height="15" fill="rgb(242,17,10)" fg:x="8856" fg:w="10"/><text x="95.1900%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,407 samples, 90.13%)</title><rect x="5.0279%" y="132" width="90.1265%" height="15" fill="rgb(242,107,0)" fg:x="469" fg:w="8407"/><text x="5.2779%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (10 samples, 0.11%)</title><rect x="95.0472%" y="148" width="0.1072%" height="15" fill="rgb(251,28,31)" fg:x="8866" fg:w="10"/><text x="95.2972%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (38 samples, 0.41%)</title><rect x="95.1544%" y="132" width="0.4074%" height="15" fill="rgb(233,223,10)" fg:x="8876" fg:w="38"/><text x="95.4044%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (12 samples, 0.13%)</title><rect x="95.5617%" y="132" width="0.1286%" height="15" fill="rgb(215,21,27)" fg:x="8914" fg:w="12"/><text x="95.8117%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="98.0167%" y="148" width="0.1286%" height="15" fill="rgb(232,23,21)" fg:x="9143" fg:w="12"/><text x="98.2667%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (254 samples, 2.72%)</title><rect x="95.7333%" y="132" width="2.7230%" height="15" fill="rgb(244,5,23)" fg:x="8930" fg:w="254"/><text x="95.9833%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.31%)</title><rect x="98.1454%" y="148" width="0.3109%" height="15" fill="rgb(226,81,46)" fg:x="9155" fg:w="29"/><text x="98.3954%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (8,806 samples, 94.40%)</title><rect x="4.9850%" y="116" width="94.4039%" height="15" fill="rgb(247,70,30)" fg:x="465" fg:w="8806"/><text x="5.2350%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (87 samples, 0.93%)</title><rect x="98.4563%" y="132" width="0.9327%" height="15" fill="rgb(212,68,19)" fg:x="9184" fg:w="87"/><text x="98.7063%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,262 samples, 99.29%)</title><rect x="0.1072%" y="68" width="99.2925%" height="15" fill="rgb(240,187,13)" fg:x="10" fg:w="9262"/><text x="0.3572%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,227 samples, 98.92%)</title><rect x="0.4824%" y="84" width="98.9172%" height="15" fill="rgb(223,113,26)" fg:x="45" fg:w="9227"/><text x="0.7324%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (9,178 samples, 98.39%)</title><rect x="1.0077%" y="100" width="98.3919%" height="15" fill="rgb(206,192,2)" fg:x="94" fg:w="9178"/><text x="1.2577%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (13 samples, 0.14%)</title><rect x="99.3997%" y="260" width="0.1394%" height="15" fill="rgb(241,108,4)" fg:x="9272" fg:w="13"/><text x="99.6497%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (13 samples, 0.14%)</title><rect x="99.3997%" y="276" width="0.1394%" height="15" fill="rgb(247,173,49)" fg:x="9272" fg:w="13"/><text x="99.6497%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (13 samples, 0.14%)</title><rect x="99.3997%" y="292" width="0.1394%" height="15" fill="rgb(224,114,35)" fg:x="9272" fg:w="13"/><text x="99.6497%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (15 samples, 0.16%)</title><rect x="99.3997%" y="68" width="0.1608%" height="15" fill="rgb(245,159,27)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.16%)</title><rect x="99.3997%" y="84" width="0.1608%" height="15" fill="rgb(245,172,44)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.16%)</title><rect x="99.3997%" y="100" width="0.1608%" height="15" fill="rgb(236,23,11)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.16%)</title><rect x="99.3997%" y="116" width="0.1608%" height="15" fill="rgb(205,117,38)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.16%)</title><rect x="99.3997%" y="132" width="0.1608%" height="15" fill="rgb(237,72,25)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.16%)</title><rect x="99.3997%" y="148" width="0.1608%" height="15" fill="rgb(244,70,9)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (15 samples, 0.16%)</title><rect x="99.3997%" y="164" width="0.1608%" height="15" fill="rgb(217,125,39)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.16%)</title><rect x="99.3997%" y="180" width="0.1608%" height="15" fill="rgb(235,36,10)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.16%)</title><rect x="99.3997%" y="196" width="0.1608%" height="15" fill="rgb(251,123,47)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.16%)</title><rect x="99.3997%" y="212" width="0.1608%" height="15" fill="rgb(221,13,13)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.16%)</title><rect x="99.3997%" y="228" width="0.1608%" height="15" fill="rgb(238,131,9)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.16%)</title><rect x="99.3997%" y="244" width="0.1608%" height="15" fill="rgb(211,50,8)" fg:x="9272" fg:w="15"/><text x="99.6497%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (13 samples, 0.14%)</title><rect x="99.5605%" y="68" width="0.1394%" height="15" fill="rgb(245,182,24)" fg:x="9287" fg:w="13"/><text x="99.8105%" y="78.50"></text></g><g><title>all (9,328 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="9328"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (11 samples, 0.12%)</title><rect x="99.8821%" y="68" width="0.1179%" height="15" fill="rgb(246,228,12)" fg:x="9317" fg:w="11"/><text x="100.1321%" y="78.50"></text></g></svg></svg>