<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_disperse_flamegraph.svg -- python profile_uni_bi_disperse.py # commit 09a3603</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="5997"><g><title>_instantiate_component (kappybara/mixture.py:56) (9 samples, 0.15%)</title><rect x="0.0667%" y="100" width="0.1501%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="9"/><text x="0.3167%" y="110.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_disperse.py:21) (18 samples, 0.30%)</title><rect x="0.0667%" y="68" width="0.3002%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="18"/><text x="0.3167%" y="78.50"></text></g><g><title>instantiate (kappybara/mixture.py:53) (18 samples, 0.30%)</title><rect x="0.0667%" y="84" width="0.3002%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="18"/><text x="0.3167%" y="94.50"></text></g><g><title>_instantiate_component (kappybara/mixture.py:71) (6 samples, 0.10%)</title><rect x="0.2668%" y="100" width="0.1001%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="6"/><text x="0.5168%" y="110.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (7 samples, 0.12%)</title><rect x="0.6003%" y="148" width="0.1167%" height="15" fill="rgb(208,68,35)" fg:x="36" fg:w="7"/><text x="0.8503%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (7 samples, 0.12%)</title><rect x="0.6003%" y="164" width="0.1167%" height="15" fill="rgb(232,128,0)" fg:x="36" fg:w="7"/><text x="0.8503%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (8 samples, 0.13%)</title><rect x="0.7170%" y="148" width="0.1334%" height="15" fill="rgb(207,160,47)" fg:x="43" fg:w="8"/><text x="0.9670%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (22 samples, 0.37%)</title><rect x="0.5169%" y="132" width="0.3669%" height="15" fill="rgb(228,23,34)" fg:x="31" fg:w="22"/><text x="0.7669%" y="142.50"></text></g><g><title>track_component (kappybara/mixture.py:86) (34 samples, 0.57%)</title><rect x="0.3835%" y="116" width="0.5670%" height="15" fill="rgb(218,30,26)" fg:x="23" fg:w="34"/><text x="0.6335%" y="126.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_disperse.py:23) (38 samples, 0.63%)</title><rect x="0.3835%" y="68" width="0.6337%" height="15" fill="rgb(220,122,19)" fg:x="23" fg:w="38"/><text x="0.6335%" y="78.50"></text></g><g><title>__init__ (kappybara/system.py:25) (38 samples, 0.63%)</title><rect x="0.3835%" y="84" width="0.6337%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="38"/><text x="0.6335%" y="94.50"></text></g><g><title>_track_rule (kappybara/system.py:39) (38 samples, 0.63%)</title><rect x="0.3835%" y="100" width="0.6337%" height="15" fill="rgb(240,193,28)" fg:x="23" fg:w="38"/><text x="0.6335%" y="110.50"></text></g><g><title>n_embeddings (kappybara/rule.py:169) (24 samples, 0.40%)</title><rect x="1.0672%" y="180" width="0.4002%" height="15" fill="rgb(216,20,37)" fg:x="64" fg:w="24"/><text x="1.3172%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:170) (18 samples, 0.30%)</title><rect x="4.1854%" y="196" width="0.3002%" height="15" fill="rgb(206,188,39)" fg:x="251" fg:w="18"/><text x="4.4354%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:80) (7 samples, 0.12%)</title><rect x="5.3527%" y="212" width="0.1167%" height="15" fill="rgb(217,207,13)" fg:x="321" fg:w="7"/><text x="5.6027%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.22%)</title><rect x="7.7039%" y="228" width="0.2168%" height="15" fill="rgb(231,73,38)" fg:x="462" fg:w="13"/><text x="7.9539%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (229 samples, 3.82%)</title><rect x="4.4856%" y="196" width="3.8186%" height="15" fill="rgb(225,20,46)" fg:x="269" fg:w="229"/><text x="4.7356%" y="206.50">&lt;gen..</text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (170 samples, 2.83%)</title><rect x="5.4694%" y="212" width="2.8348%" height="15" fill="rgb(210,31,41)" fg:x="328" fg:w="170"/><text x="5.7194%" y="222.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.38%)</title><rect x="7.9206%" y="228" width="0.3835%" height="15" fill="rgb(221,200,47)" fg:x="475" fg:w="23"/><text x="8.1706%" y="238.50"></text></g><g><title>n_embeddings (kappybara/rule.py:170) (414 samples, 6.90%)</title><rect x="1.4674%" y="180" width="6.9035%" height="15" fill="rgb(226,26,5)" fg:x="88" fg:w="414"/><text x="1.7174%" y="190.50">n_embeddi..</text></g><g><title>n_embeddings (kappybara/rule.py:172) (44 samples, 0.73%)</title><rect x="8.3709%" y="180" width="0.7337%" height="15" fill="rgb(249,33,26)" fg:x="502" fg:w="44"/><text x="8.6209%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:174) (44 samples, 0.73%)</title><rect x="9.1046%" y="180" width="0.7337%" height="15" fill="rgb(235,183,28)" fg:x="546" fg:w="44"/><text x="9.3546%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:175) (10 samples, 0.17%)</title><rect x="9.8383%" y="180" width="0.1668%" height="15" fill="rgb(221,5,38)" fg:x="590" fg:w="10"/><text x="10.0883%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:217) (17 samples, 0.28%)</title><rect x="10.0217%" y="180" width="0.2835%" height="15" fill="rgb(247,18,42)" fg:x="601" fg:w="17"/><text x="10.2717%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:219) (15 samples, 0.25%)</title><rect x="10.3052%" y="180" width="0.2501%" height="15" fill="rgb(241,131,45)" fg:x="618" fg:w="15"/><text x="10.5552%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:220) (6 samples, 0.10%)</title><rect x="10.5553%" y="180" width="0.1001%" height="15" fill="rgb(249,31,29)" fg:x="633" fg:w="6"/><text x="10.8053%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.13%)</title><rect x="13.0399%" y="212" width="0.1334%" height="15" fill="rgb(225,111,53)" fg:x="782" fg:w="8"/><text x="13.2899%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (169 samples, 2.82%)</title><rect x="10.6553%" y="180" width="2.8181%" height="15" fill="rgb(238,160,17)" fg:x="639" fg:w="169"/><text x="10.9053%" y="190.50">n_..</text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (114 samples, 1.90%)</title><rect x="11.5725%" y="196" width="1.9010%" height="15" fill="rgb(214,148,48)" fg:x="694" fg:w="114"/><text x="11.8225%" y="206.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.30%)</title><rect x="13.1733%" y="212" width="0.3002%" height="15" fill="rgb(232,36,49)" fg:x="790" fg:w="18"/><text x="13.4233%" y="222.50"></text></g><g><title>embeddings (kappybara/mixture.py:76) (38 samples, 0.63%)</title><rect x="14.5406%" y="196" width="0.6337%" height="15" fill="rgb(209,103,24)" fg:x="872" fg:w="38"/><text x="14.7906%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (135 samples, 2.25%)</title><rect x="13.4734%" y="180" width="2.2511%" height="15" fill="rgb(229,88,8)" fg:x="808" fg:w="135"/><text x="13.7234%" y="190.50">n..</text></g><g><title>embeddings (kappybara/mixture.py:78) (33 samples, 0.55%)</title><rect x="15.1743%" y="196" width="0.5503%" height="15" fill="rgb(213,181,19)" fg:x="910" fg:w="33"/><text x="15.4243%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.12%)</title><rect x="17.4921%" y="212" width="0.1167%" height="15" fill="rgb(254,191,54)" fg:x="1049" fg:w="7"/><text x="17.7421%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (119 samples, 1.98%)</title><rect x="15.7245%" y="180" width="1.9843%" height="15" fill="rgb(241,83,37)" fg:x="943" fg:w="119"/><text x="15.9745%" y="190.50">n..</text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (81 samples, 1.35%)</title><rect x="16.3582%" y="196" width="1.3507%" height="15" fill="rgb(233,36,39)" fg:x="981" fg:w="81"/><text x="16.6082%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.10%)</title><rect x="17.6088%" y="212" width="0.1001%" height="15" fill="rgb(226,3,54)" fg:x="1056" fg:w="6"/><text x="17.8588%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:227) (9 samples, 0.15%)</title><rect x="17.7089%" y="180" width="0.1501%" height="15" fill="rgb(245,192,40)" fg:x="1062" fg:w="9"/><text x="17.9589%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:228) (43 samples, 0.72%)</title><rect x="17.8589%" y="180" width="0.7170%" height="15" fill="rgb(238,167,29)" fg:x="1071" fg:w="43"/><text x="18.1089%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (1,061 samples, 17.69%)</title><rect x="1.0339%" y="84" width="17.6922%" height="15" fill="rgb(232,182,51)" fg:x="62" fg:w="1061"/><text x="1.2839%" y="94.50">update (kappybara/system.py..</text></g><g><title>wait (kappybara/system.py:58) (1,061 samples, 17.69%)</title><rect x="1.0339%" y="100" width="17.6922%" height="15" fill="rgb(231,60,39)" fg:x="62" fg:w="1061"/><text x="1.2839%" y="110.50">wait (kappybara/system.py:5..</text></g><g><title>reactivity (kappybara/system.py:55) (1,061 samples, 17.69%)</title><rect x="1.0339%" y="116" width="17.6922%" height="15" fill="rgb(208,69,12)" fg:x="62" fg:w="1061"/><text x="1.2839%" y="126.50">reactivity (kappybara/syste..</text></g><g><title>__get__ (functools.py:998) (1,061 samples, 17.69%)</title><rect x="1.0339%" y="132" width="17.6922%" height="15" fill="rgb(235,93,37)" fg:x="62" fg:w="1061"/><text x="1.2839%" y="142.50">__get__ (functools.py:998)</text></g><g><title>rule_reactivities (kappybara/system.py:51) (1,061 samples, 17.69%)</title><rect x="1.0339%" y="148" width="17.6922%" height="15" fill="rgb(213,116,39)" fg:x="62" fg:w="1061"/><text x="1.2839%" y="158.50">rule_reactivities (kappybar..</text></g><g><title>reactivity (kappybara/rule.py:18) (1,061 samples, 17.69%)</title><rect x="1.0339%" y="164" width="17.6922%" height="15" fill="rgb(222,207,29)" fg:x="62" fg:w="1061"/><text x="1.2839%" y="174.50">reactivity (kappybara/rule...</text></g><g><title>n_embeddings (kappybara/rule.py:229) (9 samples, 0.15%)</title><rect x="18.5760%" y="180" width="0.1501%" height="15" fill="rgb(206,96,30)" fg:x="1114" fg:w="9"/><text x="18.8260%" y="190.50"></text></g><g><title>select (kappybara/rule.py:239) (19 samples, 0.32%)</title><rect x="18.7427%" y="116" width="0.3168%" height="15" fill="rgb(218,138,4)" fg:x="1124" fg:w="19"/><text x="18.9927%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (29 samples, 0.48%)</title><rect x="18.7260%" y="100" width="0.4836%" height="15" fill="rgb(250,191,14)" fg:x="1123" fg:w="29"/><text x="18.9760%" y="110.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (78 samples, 1.30%)</title><rect x="19.2096%" y="132" width="1.3007%" height="15" fill="rgb(239,60,40)" fg:x="1152" fg:w="78"/><text x="19.4596%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (23 samples, 0.38%)</title><rect x="20.7270%" y="148" width="0.3835%" height="15" fill="rgb(206,27,48)" fg:x="1243" fg:w="23"/><text x="20.9770%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.22%)</title><rect x="24.9792%" y="164" width="0.2168%" height="15" fill="rgb(225,35,8)" fg:x="1498" fg:w="13"/><text x="25.2292%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (266 samples, 4.44%)</title><rect x="21.1106%" y="148" width="4.4356%" height="15" fill="rgb(250,213,24)" fg:x="1266" fg:w="266"/><text x="21.3606%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.35%)</title><rect x="25.1959%" y="164" width="0.3502%" height="15" fill="rgb(247,123,22)" fg:x="1511" fg:w="21"/><text x="25.4459%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.18%)</title><rect x="28.5976%" y="164" width="0.1834%" height="15" fill="rgb(231,138,38)" fg:x="1715" fg:w="11"/><text x="28.8476%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (213 samples, 3.55%)</title><rect x="25.5461%" y="148" width="3.5518%" height="15" fill="rgb(231,145,46)" fg:x="1532" fg:w="213"/><text x="25.7961%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.32%)</title><rect x="28.7811%" y="164" width="0.3168%" height="15" fill="rgb(251,118,11)" fg:x="1726" fg:w="19"/><text x="29.0311%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (39 samples, 0.65%)</title><rect x="29.1813%" y="148" width="0.6503%" height="15" fill="rgb(217,147,25)" fg:x="1750" fg:w="39"/><text x="29.4313%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (33 samples, 0.55%)</title><rect x="29.8316%" y="148" width="0.5503%" height="15" fill="rgb(247,81,37)" fg:x="1789" fg:w="33"/><text x="30.0816%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.22%)</title><rect x="31.8993%" y="164" width="0.2168%" height="15" fill="rgb(209,12,38)" fg:x="1913" fg:w="13"/><text x="32.1493%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (119 samples, 1.98%)</title><rect x="30.3819%" y="148" width="1.9843%" height="15" fill="rgb(227,1,9)" fg:x="1822" fg:w="119"/><text x="30.6319%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.25%)</title><rect x="32.1161%" y="164" width="0.2501%" height="15" fill="rgb(248,47,43)" fg:x="1926" fg:w="15"/><text x="32.3661%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (111 samples, 1.85%)</title><rect x="32.3662%" y="148" width="1.8509%" height="15" fill="rgb(221,10,30)" fg:x="1941" fg:w="111"/><text x="32.6162%" y="158.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (33 samples, 0.55%)</title><rect x="35.9847%" y="164" width="0.5503%" height="15" fill="rgb(210,229,1)" fg:x="2158" fg:w="33"/><text x="36.2347%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (69 samples, 1.15%)</title><rect x="37.8856%" y="180" width="1.1506%" height="15" fill="rgb(222,148,37)" fg:x="2272" fg:w="69"/><text x="38.1356%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (38 samples, 0.63%)</title><rect x="40.5036%" y="196" width="0.6337%" height="15" fill="rgb(234,67,33)" fg:x="2429" fg:w="38"/><text x="40.7536%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (484 samples, 8.07%)</title><rect x="36.6016%" y="164" width="8.0707%" height="15" fill="rgb(247,98,35)" fg:x="2195" fg:w="484"/><text x="36.8516%" y="174.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (338 samples, 5.64%)</title><rect x="39.0362%" y="180" width="5.6362%" height="15" fill="rgb(247,138,52)" fg:x="2341" fg:w="338"/><text x="39.2862%" y="190.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:111) (212 samples, 3.54%)</title><rect x="41.1372%" y="196" width="3.5351%" height="15" fill="rgb(213,79,30)" fg:x="2467" fg:w="212"/><text x="41.3872%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (113 samples, 1.88%)</title><rect x="44.6723%" y="164" width="1.8843%" height="15" fill="rgb(246,177,23)" fg:x="2679" fg:w="113"/><text x="44.9223%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (53 samples, 0.88%)</title><rect x="47.6238%" y="180" width="0.8838%" height="15" fill="rgb(230,62,27)" fg:x="2856" fg:w="53"/><text x="47.8738%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (391 samples, 6.52%)</title><rect x="46.6066%" y="164" width="6.5199%" height="15" fill="rgb(216,154,8)" fg:x="2795" fg:w="391"/><text x="46.8566%" y="174.50">embeds_in..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (277 samples, 4.62%)</title><rect x="48.5076%" y="180" width="4.6190%" height="15" fill="rgb(244,35,45)" fg:x="2909" fg:w="277"/><text x="48.7576%" y="190.50">__get..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (76 samples, 1.27%)</title><rect x="58.2625%" y="180" width="1.2673%" height="15" fill="rgb(251,115,12)" fg:x="3494" fg:w="76"/><text x="58.5125%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:66) (7 samples, 0.12%)</title><rect x="59.5298%" y="180" width="0.1167%" height="15" fill="rgb(240,54,50)" fg:x="3570" fg:w="7"/><text x="59.7798%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (7 samples, 0.12%)</title><rect x="59.9967%" y="196" width="0.1167%" height="15" fill="rgb(233,84,52)" fg:x="3598" fg:w="7"/><text x="60.2467%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (65 samples, 1.08%)</title><rect x="59.6465%" y="180" width="1.0839%" height="15" fill="rgb(207,117,47)" fg:x="3577" fg:w="65"/><text x="59.8965%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (37 samples, 0.62%)</title><rect x="60.1134%" y="196" width="0.6170%" height="15" fill="rgb(249,43,39)" fg:x="3605" fg:w="37"/><text x="60.3634%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (11 samples, 0.18%)</title><rect x="61.5808%" y="196" width="0.1834%" height="15" fill="rgb(209,38,44)" fg:x="3693" fg:w="11"/><text x="61.8308%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.18%)</title><rect x="62.9315%" y="212" width="0.1834%" height="15" fill="rgb(236,212,23)" fg:x="3774" fg:w="11"/><text x="63.1815%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.12%)</title><rect x="64.0820%" y="228" width="0.1167%" height="15" fill="rgb(242,79,21)" fg:x="3843" fg:w="7"/><text x="64.3320%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (156 samples, 2.60%)</title><rect x="61.7642%" y="196" width="2.6013%" height="15" fill="rgb(211,96,35)" fg:x="3704" fg:w="156"/><text x="62.0142%" y="206.50">bo..</text></g><g><title>__eq__ (kappybara/utils.py:33) (75 samples, 1.25%)</title><rect x="63.1149%" y="212" width="1.2506%" height="15" fill="rgb(253,215,40)" fg:x="3785" fg:w="75"/><text x="63.3649%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.17%)</title><rect x="64.1988%" y="228" width="0.1668%" height="15" fill="rgb(211,81,21)" fg:x="3850" fg:w="10"/><text x="64.4488%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (113 samples, 1.88%)</title><rect x="64.3655%" y="196" width="1.8843%" height="15" fill="rgb(208,190,38)" fg:x="3860" fg:w="113"/><text x="64.6155%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (61 samples, 1.02%)</title><rect x="66.2498%" y="196" width="1.0172%" height="15" fill="rgb(235,213,38)" fg:x="3973" fg:w="61"/><text x="66.4998%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (423 samples, 7.05%)</title><rect x="60.7304%" y="180" width="7.0535%" height="15" fill="rgb(237,122,38)" fg:x="3642" fg:w="423"/><text x="60.9804%" y="190.50">embeds_in..</text></g><g><title>coupled (kappybara/pattern.py:64) (27 samples, 0.45%)</title><rect x="67.3337%" y="196" width="0.4502%" height="15" fill="rgb(244,218,35)" fg:x="4038" fg:w="27"/><text x="67.5837%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (7 samples, 0.12%)</title><rect x="67.8339%" y="180" width="0.1167%" height="15" fill="rgb(240,68,47)" fg:x="4068" fg:w="7"/><text x="68.0839%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (12 samples, 0.20%)</title><rect x="67.9506%" y="180" width="0.2001%" height="15" fill="rgb(210,16,53)" fg:x="4075" fg:w="12"/><text x="68.2006%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (37 samples, 0.62%)</title><rect x="68.1507%" y="180" width="0.6170%" height="15" fill="rgb(235,124,12)" fg:x="4087" fg:w="37"/><text x="68.4007%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,039 samples, 17.33%)</title><rect x="53.1266%" y="164" width="17.3253%" height="15" fill="rgb(224,169,11)" fg:x="3186" fg:w="1039"/><text x="53.3766%" y="174.50">embeds_in (kappybara/patter..</text></g><g><title>sites (kappybara/pattern.py:111) (99 samples, 1.65%)</title><rect x="68.8011%" y="180" width="1.6508%" height="15" fill="rgb(250,166,2)" fg:x="4126" fg:w="99"/><text x="69.0511%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (2,188 samples, 36.48%)</title><rect x="34.2171%" y="148" width="36.4849%" height="15" fill="rgb(242,216,29)" fg:x="2052" fg:w="2188"/><text x="34.4671%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (15 samples, 0.25%)</title><rect x="70.4519%" y="164" width="0.2501%" height="15" fill="rgb(230,116,27)" fg:x="4225" fg:w="15"/><text x="70.7019%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (37 samples, 0.62%)</title><rect x="72.1027%" y="164" width="0.6170%" height="15" fill="rgb(228,99,48)" fg:x="4324" fg:w="37"/><text x="72.3527%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (30 samples, 0.50%)</title><rect x="73.6201%" y="180" width="0.5003%" height="15" fill="rgb(253,11,6)" fg:x="4415" fg:w="30"/><text x="73.8701%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (341 samples, 5.69%)</title><rect x="70.7520%" y="148" width="5.6862%" height="15" fill="rgb(247,143,39)" fg:x="4243" fg:w="341"/><text x="71.0020%" y="158.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (223 samples, 3.72%)</title><rect x="72.7197%" y="164" width="3.7185%" height="15" fill="rgb(236,97,10)" fg:x="4361" fg:w="223"/><text x="72.9697%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (139 samples, 2.32%)</title><rect x="74.1204%" y="180" width="2.3178%" height="15" fill="rgb(233,208,19)" fg:x="4445" fg:w="139"/><text x="74.3704%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (16 samples, 0.27%)</title><rect x="77.0552%" y="164" width="0.2668%" height="15" fill="rgb(216,164,2)" fg:x="4621" fg:w="16"/><text x="77.3052%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (60 samples, 1.00%)</title><rect x="76.4382%" y="148" width="1.0005%" height="15" fill="rgb(220,129,5)" fg:x="4584" fg:w="60"/><text x="76.6882%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (7 samples, 0.12%)</title><rect x="77.3220%" y="164" width="0.1167%" height="15" fill="rgb(242,17,10)" fg:x="4637" fg:w="7"/><text x="77.5720%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (6 samples, 0.10%)</title><rect x="77.8389%" y="164" width="0.1001%" height="15" fill="rgb(242,107,0)" fg:x="4668" fg:w="6"/><text x="78.0889%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (90 samples, 1.50%)</title><rect x="77.4387%" y="148" width="1.5008%" height="15" fill="rgb(251,28,31)" fg:x="4644" fg:w="90"/><text x="77.6887%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (60 samples, 1.00%)</title><rect x="77.9390%" y="164" width="1.0005%" height="15" fill="rgb(233,223,10)" fg:x="4674" fg:w="60"/><text x="78.1890%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (13 samples, 0.22%)</title><rect x="79.0228%" y="148" width="0.2168%" height="15" fill="rgb(215,21,27)" fg:x="4739" fg:w="13"/><text x="79.2728%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (17 samples, 0.28%)</title><rect x="79.2396%" y="148" width="0.2835%" height="15" fill="rgb(232,23,21)" fg:x="4752" fg:w="17"/><text x="79.4896%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,549 samples, 59.18%)</title><rect x="20.5103%" y="132" width="59.1796%" height="15" fill="rgb(244,5,23)" fg:x="1230" fg:w="3549"/><text x="20.7603%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (10 samples, 0.17%)</title><rect x="79.5231%" y="148" width="0.1668%" height="15" fill="rgb(226,81,46)" fg:x="4769" fg:w="10"/><text x="79.7731%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (51 samples, 0.85%)</title><rect x="79.6898%" y="132" width="0.8504%" height="15" fill="rgb(247,70,30)" fg:x="4779" fg:w="51"/><text x="79.9398%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (17 samples, 0.28%)</title><rect x="80.5403%" y="132" width="0.2835%" height="15" fill="rgb(212,68,19)" fg:x="4830" fg:w="17"/><text x="80.7903%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (12 samples, 0.20%)</title><rect x="80.8237%" y="132" width="0.2001%" height="15" fill="rgb(240,187,13)" fg:x="4847" fg:w="12"/><text x="81.0737%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (39 samples, 0.65%)</title><rect x="90.3618%" y="148" width="0.6503%" height="15" fill="rgb(223,113,26)" fg:x="5419" fg:w="39"/><text x="90.6118%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.38%)</title><rect x="91.0122%" y="148" width="0.3835%" height="15" fill="rgb(206,192,2)" fg:x="5458" fg:w="23"/><text x="91.2622%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (660 samples, 11.01%)</title><rect x="81.0238%" y="132" width="11.0055%" height="15" fill="rgb(241,108,4)" fg:x="4859" fg:w="660"/><text x="81.2738%" y="142.50">_update_embeddin..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.63%)</title><rect x="91.3957%" y="148" width="0.6337%" height="15" fill="rgb(247,173,49)" fg:x="5481" fg:w="38"/><text x="91.6457%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (98 samples, 1.63%)</title><rect x="97.4654%" y="148" width="1.6342%" height="15" fill="rgb(224,114,35)" fg:x="5845" fg:w="98"/><text x="97.7154%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_disperse.py:27) (5,895 samples, 98.30%)</title><rect x="1.0339%" y="68" width="98.2991%" height="15" fill="rgb(245,159,27)" fg:x="62" fg:w="5895"/><text x="1.2839%" y="78.50">&lt;module&gt; (profile_uni_bi_disperse.py:27)</text></g><g><title>update (kappybara/system.py:70) (4,834 samples, 80.61%)</title><rect x="18.7260%" y="84" width="80.6070%" height="15" fill="rgb(245,172,44)" fg:x="1123" fg:w="4834"/><text x="18.9760%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,805 samples, 80.12%)</title><rect x="19.2096%" y="100" width="80.1234%" height="15" fill="rgb(236,23,11)" fg:x="1152" fg:w="4805"/><text x="19.4596%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,805 samples, 80.12%)</title><rect x="19.2096%" y="116" width="80.1234%" height="15" fill="rgb(205,117,38)" fg:x="1152" fg:w="4805"/><text x="19.4596%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (438 samples, 7.30%)</title><rect x="92.0293%" y="132" width="7.3037%" height="15" fill="rgb(237,72,25)" fg:x="5519" fg:w="438"/><text x="92.2793%" y="142.50">_update_em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.23%)</title><rect x="99.0995%" y="148" width="0.2335%" height="15" fill="rgb(244,70,9)" fg:x="5943" fg:w="14"/><text x="99.3495%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (10 samples, 0.17%)</title><rect x="99.3330%" y="260" width="0.1668%" height="15" fill="rgb(217,125,39)" fg:x="5957" fg:w="10"/><text x="99.5830%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (10 samples, 0.17%)</title><rect x="99.3330%" y="276" width="0.1668%" height="15" fill="rgb(235,36,10)" fg:x="5957" fg:w="10"/><text x="99.5830%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (10 samples, 0.17%)</title><rect x="99.3330%" y="292" width="0.1668%" height="15" fill="rgb(251,123,47)" fg:x="5957" fg:w="10"/><text x="99.5830%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_disperse.py:3) (13 samples, 0.22%)</title><rect x="99.3330%" y="68" width="0.2168%" height="15" fill="rgb(221,13,13)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.22%)</title><rect x="99.3330%" y="84" width="0.2168%" height="15" fill="rgb(238,131,9)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.22%)</title><rect x="99.3330%" y="100" width="0.2168%" height="15" fill="rgb(211,50,8)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.22%)</title><rect x="99.3330%" y="116" width="0.2168%" height="15" fill="rgb(245,182,24)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.22%)</title><rect x="99.3330%" y="132" width="0.2168%" height="15" fill="rgb(242,14,37)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.22%)</title><rect x="99.3330%" y="148" width="0.2168%" height="15" fill="rgb(246,228,12)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (13 samples, 0.22%)</title><rect x="99.3330%" y="164" width="0.2168%" height="15" fill="rgb(213,55,15)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.22%)</title><rect x="99.3330%" y="180" width="0.2168%" height="15" fill="rgb(209,9,3)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.22%)</title><rect x="99.3330%" y="196" width="0.2168%" height="15" fill="rgb(230,59,30)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.22%)</title><rect x="99.3330%" y="212" width="0.2168%" height="15" fill="rgb(209,121,21)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.22%)</title><rect x="99.3330%" y="228" width="0.2168%" height="15" fill="rgb(220,109,13)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.22%)</title><rect x="99.3330%" y="244" width="0.2168%" height="15" fill="rgb(232,18,1)" fg:x="5957" fg:w="13"/><text x="99.5830%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (14 samples, 0.23%)</title><rect x="99.5998%" y="68" width="0.2335%" height="15" fill="rgb(215,41,42)" fg:x="5973" fg:w="14"/><text x="99.8498%" y="78.50"></text></g><g><title>all (5,997 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="5997"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (6 samples, 0.10%)</title><rect x="99.8999%" y="68" width="0.1001%" height="15" fill="rgb(240,125,3)" fg:x="5991" fg:w="6"/><text x="100.1499%" y="78.50"></text></g></svg></svg>