<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 09a3603</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9412"><g><title>update (kappybara/system.py:69) (40 samples, 0.42%)</title><rect x="0.0425%" y="84" width="0.4250%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="40"/><text x="0.2925%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (40 samples, 0.42%)</title><rect x="0.0425%" y="100" width="0.4250%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="40"/><text x="0.2925%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (38 samples, 0.40%)</title><rect x="0.0637%" y="116" width="0.4037%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="38"/><text x="0.3137%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (37 samples, 0.39%)</title><rect x="0.0744%" y="132" width="0.3931%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="37"/><text x="0.3244%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (37 samples, 0.39%)</title><rect x="0.0744%" y="148" width="0.3931%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="37"/><text x="0.3244%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (33 samples, 0.35%)</title><rect x="0.1169%" y="164" width="0.3506%" height="15" fill="rgb(232,128,0)" fg:x="11" fg:w="33"/><text x="0.3669%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (15 samples, 0.16%)</title><rect x="0.6162%" y="116" width="0.1594%" height="15" fill="rgb(207,160,47)" fg:x="58" fg:w="15"/><text x="0.8662%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (34 samples, 0.36%)</title><rect x="0.5419%" y="100" width="0.3612%" height="15" fill="rgb(228,23,34)" fg:x="51" fg:w="34"/><text x="0.7919%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (11 samples, 0.12%)</title><rect x="0.7862%" y="116" width="0.1169%" height="15" fill="rgb(218,30,26)" fg:x="74" fg:w="11"/><text x="1.0362%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (22 samples, 0.23%)</title><rect x="1.0306%" y="148" width="0.2337%" height="15" fill="rgb(220,122,19)" fg:x="97" fg:w="22"/><text x="1.2806%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (76 samples, 0.81%)</title><rect x="1.3281%" y="148" width="0.8075%" height="15" fill="rgb(250,228,42)" fg:x="125" fg:w="76"/><text x="1.5781%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="2.0187%" y="164" width="0.1169%" height="15" fill="rgb(240,193,28)" fg:x="190" fg:w="11"/><text x="2.2687%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (24 samples, 0.25%)</title><rect x="2.1356%" y="148" width="0.2550%" height="15" fill="rgb(216,20,37)" fg:x="201" fg:w="24"/><text x="2.3856%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (10 samples, 0.11%)</title><rect x="3.3680%" y="180" width="0.1062%" height="15" fill="rgb(206,188,39)" fg:x="317" fg:w="10"/><text x="3.6180%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (64 samples, 0.68%)</title><rect x="3.4743%" y="180" width="0.6800%" height="15" fill="rgb(217,207,13)" fg:x="327" fg:w="64"/><text x="3.7243%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (30 samples, 0.32%)</title><rect x="3.8355%" y="196" width="0.3187%" height="15" fill="rgb(231,73,38)" fg:x="361" fg:w="30"/><text x="4.0855%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (338 samples, 3.59%)</title><rect x="0.9456%" y="132" width="3.5912%" height="15" fill="rgb(225,20,46)" fg:x="89" fg:w="338"/><text x="1.1956%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (195 samples, 2.07%)</title><rect x="2.4649%" y="148" width="2.0718%" height="15" fill="rgb(210,31,41)" fg:x="232" fg:w="195"/><text x="2.7149%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (171 samples, 1.82%)</title><rect x="2.7199%" y="164" width="1.8168%" height="15" fill="rgb(221,200,47)" fg:x="256" fg:w="171"/><text x="2.9699%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (31 samples, 0.33%)</title><rect x="4.2074%" y="180" width="0.3294%" height="15" fill="rgb(226,26,5)" fg:x="396" fg:w="31"/><text x="4.4574%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (364 samples, 3.87%)</title><rect x="0.9031%" y="116" width="3.8674%" height="15" fill="rgb(249,33,26)" fg:x="85" fg:w="364"/><text x="1.1531%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (22 samples, 0.23%)</title><rect x="4.5368%" y="132" width="0.2337%" height="15" fill="rgb(235,183,28)" fg:x="427" fg:w="22"/><text x="4.7868%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (15 samples, 0.16%)</title><rect x="4.6111%" y="148" width="0.1594%" height="15" fill="rgb(221,5,38)" fg:x="434" fg:w="15"/><text x="4.8611%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (44 samples, 0.47%)</title><rect x="5.2380%" y="148" width="0.4675%" height="15" fill="rgb(247,18,42)" fg:x="493" fg:w="44"/><text x="5.4880%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.21%)</title><rect x="9.4454%" y="164" width="0.2125%" height="15" fill="rgb(241,131,45)" fg:x="889" fg:w="20"/><text x="9.6954%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (398 samples, 4.23%)</title><rect x="5.7055%" y="148" width="4.2286%" height="15" fill="rgb(249,31,29)" fg:x="537" fg:w="398"/><text x="5.9555%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.28%)</title><rect x="9.6579%" y="164" width="0.2762%" height="15" fill="rgb(225,111,53)" fg:x="909" fg:w="26"/><text x="9.9079%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="13.1003%" y="164" width="0.1381%" height="15" fill="rgb(238,160,17)" fg:x="1233" fg:w="13"/><text x="13.3503%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (337 samples, 3.58%)</title><rect x="9.9341%" y="148" width="3.5805%" height="15" fill="rgb(214,148,48)" fg:x="935" fg:w="337"/><text x="10.1841%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.28%)</title><rect x="13.2384%" y="164" width="0.2762%" height="15" fill="rgb(232,36,49)" fg:x="1246" fg:w="26"/><text x="13.4884%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (89 samples, 0.95%)</title><rect x="13.5465%" y="148" width="0.9456%" height="15" fill="rgb(209,103,24)" fg:x="1275" fg:w="89"/><text x="13.7965%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (69 samples, 0.73%)</title><rect x="14.4921%" y="148" width="0.7331%" height="15" fill="rgb(229,88,8)" fg:x="1364" fg:w="69"/><text x="14.7421%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (31 samples, 0.33%)</title><rect x="17.6477%" y="164" width="0.3294%" height="15" fill="rgb(213,181,19)" fg:x="1661" fg:w="31"/><text x="17.8977%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (298 samples, 3.17%)</title><rect x="15.2252%" y="148" width="3.1662%" height="15" fill="rgb(254,191,54)" fg:x="1433" fg:w="298"/><text x="15.4752%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.41%)</title><rect x="17.9771%" y="164" width="0.4144%" height="15" fill="rgb(241,83,37)" fg:x="1692" fg:w="39"/><text x="18.2271%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (217 samples, 2.31%)</title><rect x="18.3914%" y="148" width="2.3056%" height="15" fill="rgb(233,36,39)" fg:x="1731" fg:w="217"/><text x="18.6414%" y="158.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (22 samples, 0.23%)</title><rect x="22.9282%" y="164" width="0.2337%" height="15" fill="rgb(226,3,54)" fg:x="2158" fg:w="22"/><text x="23.1782%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (92 samples, 0.98%)</title><rect x="23.1619%" y="164" width="0.9775%" height="15" fill="rgb(245,192,40)" fg:x="2180" fg:w="92"/><text x="23.4119%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (103 samples, 1.09%)</title><rect x="26.3068%" y="180" width="1.0943%" height="15" fill="rgb(238,167,29)" fg:x="2476" fg:w="103"/><text x="26.5568%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (97 samples, 1.03%)</title><rect x="29.7599%" y="196" width="1.0306%" height="15" fill="rgb(232,182,51)" fg:x="2801" fg:w="97"/><text x="30.0099%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (974 samples, 10.35%)</title><rect x="24.1819%" y="164" width="10.3485%" height="15" fill="rgb(231,60,39)" fg:x="2276" fg:w="974"/><text x="24.4319%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (671 samples, 7.13%)</title><rect x="27.4012%" y="180" width="7.1292%" height="15" fill="rgb(208,69,12)" fg:x="2579" fg:w="671"/><text x="27.6512%" y="190.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:111) (352 samples, 3.74%)</title><rect x="30.7905%" y="196" width="3.7399%" height="15" fill="rgb(235,93,37)" fg:x="2898" fg:w="352"/><text x="31.0405%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (123 samples, 1.31%)</title><rect x="34.5304%" y="164" width="1.3068%" height="15" fill="rgb(213,116,39)" fg:x="3250" fg:w="123"/><text x="34.7804%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (80 samples, 0.85%)</title><rect x="36.7510%" y="180" width="0.8500%" height="15" fill="rgb(222,207,29)" fg:x="3459" fg:w="80"/><text x="37.0010%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (182 samples, 1.93%)</title><rect x="35.8797%" y="164" width="1.9337%" height="15" fill="rgb(206,96,30)" fg:x="3377" fg:w="182"/><text x="36.1297%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (20 samples, 0.21%)</title><rect x="37.6009%" y="180" width="0.2125%" height="15" fill="rgb(218,138,4)" fg:x="3539" fg:w="20"/><text x="37.8509%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (207 samples, 2.20%)</title><rect x="48.3850%" y="180" width="2.1993%" height="15" fill="rgb(250,191,14)" fg:x="4554" fg:w="207"/><text x="48.6350%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (12 samples, 0.13%)</title><rect x="50.5844%" y="180" width="0.1275%" height="15" fill="rgb(239,60,40)" fg:x="4761" fg:w="12"/><text x="50.8344%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (12 samples, 0.13%)</title><rect x="51.3281%" y="196" width="0.1275%" height="15" fill="rgb(206,27,48)" fg:x="4831" fg:w="12"/><text x="51.5781%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (170 samples, 1.81%)</title><rect x="50.7119%" y="180" width="1.8062%" height="15" fill="rgb(225,35,8)" fg:x="4773" fg:w="170"/><text x="50.9619%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (100 samples, 1.06%)</title><rect x="51.4556%" y="196" width="1.0625%" height="15" fill="rgb(250,213,24)" fg:x="4843" fg:w="100"/><text x="51.7056%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (16 samples, 0.17%)</title><rect x="53.7718%" y="196" width="0.1700%" height="15" fill="rgb(247,123,22)" fg:x="5061" fg:w="16"/><text x="54.0218%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (24 samples, 0.25%)</title><rect x="56.3855%" y="212" width="0.2550%" height="15" fill="rgb(231,138,38)" fg:x="5307" fg:w="24"/><text x="56.6355%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="58.9460%" y="228" width="0.1381%" height="15" fill="rgb(231,145,46)" fg:x="5548" fg:w="13"/><text x="59.1960%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (513 samples, 5.45%)</title><rect x="53.9418%" y="196" width="5.4505%" height="15" fill="rgb(251,118,11)" fg:x="5077" fg:w="513"/><text x="54.1918%" y="206.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (259 samples, 2.75%)</title><rect x="56.6405%" y="212" width="2.7518%" height="15" fill="rgb(217,147,25)" fg:x="5331" fg:w="259"/><text x="56.8905%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.31%)</title><rect x="59.0841%" y="228" width="0.3081%" height="15" fill="rgb(247,81,37)" fg:x="5561" fg:w="29"/><text x="59.3341%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (202 samples, 2.15%)</title><rect x="59.3923%" y="196" width="2.1462%" height="15" fill="rgb(209,12,38)" fg:x="5590" fg:w="202"/><text x="59.6423%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (102 samples, 1.08%)</title><rect x="61.5385%" y="196" width="1.0837%" height="15" fill="rgb(227,1,9)" fg:x="5792" fg:w="102"/><text x="61.7885%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="62.6222%" y="196" width="0.1806%" height="15" fill="rgb(248,47,43)" fg:x="5894" fg:w="17"/><text x="62.8722%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (996 samples, 10.58%)</title><rect x="52.5181%" y="180" width="10.5822%" height="15" fill="rgb(221,10,30)" fg:x="4943" fg:w="996"/><text x="52.7681%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (28 samples, 0.30%)</title><rect x="62.8028%" y="196" width="0.2975%" height="15" fill="rgb(210,229,1)" fg:x="5911" fg:w="28"/><text x="63.0528%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (11 samples, 0.12%)</title><rect x="63.1003%" y="180" width="0.1169%" height="15" fill="rgb(222,148,37)" fg:x="5939" fg:w="11"/><text x="63.3503%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (28 samples, 0.30%)</title><rect x="63.2172%" y="180" width="0.2975%" height="15" fill="rgb(234,67,33)" fg:x="5950" fg:w="28"/><text x="63.4672%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.15%)</title><rect x="64.5771%" y="196" width="0.1487%" height="15" fill="rgb(247,98,35)" fg:x="6078" fg:w="14"/><text x="64.8271%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="66.2027%" y="212" width="0.1062%" height="15" fill="rgb(247,138,52)" fg:x="6231" fg:w="10"/><text x="66.4527%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (292 samples, 3.10%)</title><rect x="63.5147%" y="180" width="3.1024%" height="15" fill="rgb(213,79,30)" fg:x="5978" fg:w="292"/><text x="63.7647%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (178 samples, 1.89%)</title><rect x="64.7259%" y="196" width="1.8912%" height="15" fill="rgb(246,177,23)" fg:x="6092" fg:w="178"/><text x="64.9759%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.31%)</title><rect x="66.3090%" y="212" width="0.3081%" height="15" fill="rgb(230,62,27)" fg:x="6241" fg:w="29"/><text x="66.5590%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.16%)</title><rect x="68.0727%" y="196" width="0.1594%" height="15" fill="rgb(216,154,8)" fg:x="6407" fg:w="15"/><text x="68.3227%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="70.0276%" y="212" width="0.1169%" height="15" fill="rgb(244,35,45)" fg:x="6591" fg:w="11"/><text x="70.2776%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (370 samples, 3.93%)</title><rect x="66.6171%" y="180" width="3.9312%" height="15" fill="rgb(251,115,12)" fg:x="6270" fg:w="370"/><text x="66.8671%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (218 samples, 2.32%)</title><rect x="68.2320%" y="196" width="2.3162%" height="15" fill="rgb(240,54,50)" fg:x="6422" fg:w="218"/><text x="68.4820%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.40%)</title><rect x="70.1445%" y="212" width="0.4037%" height="15" fill="rgb(233,84,52)" fg:x="6602" fg:w="38"/><text x="70.3945%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (87 samples, 0.92%)</title><rect x="70.5482%" y="180" width="0.9244%" height="15" fill="rgb(207,117,47)" fg:x="6640" fg:w="87"/><text x="70.7982%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (176 samples, 1.87%)</title><rect x="71.4832%" y="180" width="1.8700%" height="15" fill="rgb(249,43,39)" fg:x="6728" fg:w="176"/><text x="71.7332%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (94 samples, 1.00%)</title><rect x="73.3532%" y="180" width="0.9987%" height="15" fill="rgb(209,38,44)" fg:x="6904" fg:w="94"/><text x="73.6032%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (23 samples, 0.24%)</title><rect x="74.3519%" y="180" width="0.2444%" height="15" fill="rgb(236,212,23)" fg:x="6998" fg:w="23"/><text x="74.6019%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,776 samples, 40.12%)</title><rect x="37.8134%" y="164" width="40.1190%" height="15" fill="rgb(242,79,21)" fg:x="3559" fg:w="3776"/><text x="38.0634%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (314 samples, 3.34%)</title><rect x="74.5963%" y="180" width="3.3362%" height="15" fill="rgb(211,96,35)" fg:x="7021" fg:w="314"/><text x="74.8463%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,436 samples, 57.76%)</title><rect x="20.6970%" y="148" width="57.7561%" height="15" fill="rgb(253,215,40)" fg:x="1948" fg:w="5436"/><text x="20.9470%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (49 samples, 0.52%)</title><rect x="77.9324%" y="164" width="0.5206%" height="15" fill="rgb(211,81,21)" fg:x="7335" fg:w="49"/><text x="78.1824%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (66 samples, 0.70%)</title><rect x="80.0786%" y="164" width="0.7012%" height="15" fill="rgb(208,190,38)" fg:x="7537" fg:w="66"/><text x="80.3286%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (50 samples, 0.53%)</title><rect x="82.1929%" y="180" width="0.5312%" height="15" fill="rgb(235,213,38)" fg:x="7736" fg:w="50"/><text x="82.4429%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (620 samples, 6.59%)</title><rect x="78.6124%" y="148" width="6.5873%" height="15" fill="rgb(237,122,38)" fg:x="7399" fg:w="620"/><text x="78.8624%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (416 samples, 4.42%)</title><rect x="80.7799%" y="164" width="4.4199%" height="15" fill="rgb(244,218,35)" fg:x="7603" fg:w="416"/><text x="81.0299%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (233 samples, 2.48%)</title><rect x="82.7242%" y="180" width="2.4756%" height="15" fill="rgb(240,68,47)" fg:x="7786" fg:w="233"/><text x="82.9742%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (38 samples, 0.40%)</title><rect x="85.9966%" y="164" width="0.4037%" height="15" fill="rgb(210,16,53)" fg:x="8094" fg:w="38"/><text x="86.2466%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (122 samples, 1.30%)</title><rect x="85.1997%" y="148" width="1.2962%" height="15" fill="rgb(235,124,12)" fg:x="8019" fg:w="122"/><text x="85.4497%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="86.7722%" y="164" width="0.1806%" height="15" fill="rgb(224,169,11)" fg:x="8167" fg:w="17"/><text x="87.0222%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (93 samples, 0.99%)</title><rect x="86.4960%" y="148" width="0.9881%" height="15" fill="rgb(250,166,2)" fg:x="8141" fg:w="93"/><text x="86.7460%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (50 samples, 0.53%)</title><rect x="86.9528%" y="164" width="0.5312%" height="15" fill="rgb(242,216,29)" fg:x="8184" fg:w="50"/><text x="87.2028%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="88.6740%" y="164" width="0.1275%" height="15" fill="rgb(230,116,27)" fg:x="8346" fg:w="12"/><text x="88.9240%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (159 samples, 1.69%)</title><rect x="87.4841%" y="148" width="1.6893%" height="15" fill="rgb(228,99,48)" fg:x="8234" fg:w="159"/><text x="87.7341%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.37%)</title><rect x="88.8015%" y="164" width="0.3719%" height="15" fill="rgb(253,11,6)" fg:x="8358" fg:w="35"/><text x="89.0515%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (71 samples, 0.75%)</title><rect x="89.1734%" y="148" width="0.7544%" height="15" fill="rgb(247,143,39)" fg:x="8393" fg:w="71"/><text x="89.4234%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.11%)</title><rect x="89.8215%" y="164" width="0.1062%" height="15" fill="rgb(236,97,10)" fg:x="8454" fg:w="10"/><text x="90.0715%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (91 samples, 0.97%)</title><rect x="89.9278%" y="148" width="0.9669%" height="15" fill="rgb(233,208,19)" fg:x="8464" fg:w="91"/><text x="90.1778%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (134 samples, 1.42%)</title><rect x="93.0408%" y="164" width="1.4237%" height="15" fill="rgb(216,164,2)" fg:x="8757" fg:w="134"/><text x="93.2908%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.15%)</title><rect x="94.3158%" y="180" width="0.1487%" height="15" fill="rgb(220,129,5)" fg:x="8877" fg:w="14"/><text x="94.5658%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (346 samples, 3.68%)</title><rect x="90.8946%" y="148" width="3.6762%" height="15" fill="rgb(242,17,10)" fg:x="8555" fg:w="346"/><text x="91.1446%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (37 samples, 0.39%)</title><rect x="94.5920%" y="148" width="0.3931%" height="15" fill="rgb(242,107,0)" fg:x="8903" fg:w="37"/><text x="94.8420%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,504 samples, 90.35%)</title><rect x="4.8343%" y="132" width="90.3527%" height="15" fill="rgb(251,28,31)" fg:x="455" fg:w="8504"/><text x="5.0843%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (13 samples, 0.14%)</title><rect x="95.0489%" y="148" width="0.1381%" height="15" fill="rgb(233,223,10)" fg:x="8946" fg:w="13"/><text x="95.2989%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (47 samples, 0.50%)</title><rect x="95.1870%" y="132" width="0.4994%" height="15" fill="rgb(215,21,27)" fg:x="8959" fg:w="47"/><text x="95.4370%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (11 samples, 0.12%)</title><rect x="95.6864%" y="132" width="0.1169%" height="15" fill="rgb(232,23,21)" fg:x="9006" fg:w="11"/><text x="95.9364%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (240 samples, 2.55%)</title><rect x="95.8882%" y="132" width="2.5499%" height="15" fill="rgb(244,5,23)" fg:x="9025" fg:w="240"/><text x="96.1382%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.19%)</title><rect x="98.2469%" y="148" width="0.1912%" height="15" fill="rgb(226,81,46)" fg:x="9247" fg:w="18"/><text x="98.4969%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (8,903 samples, 94.59%)</title><rect x="4.7811%" y="116" width="94.5920%" height="15" fill="rgb(247,70,30)" fg:x="450" fg:w="8903"/><text x="5.0311%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (88 samples, 0.93%)</title><rect x="98.4382%" y="132" width="0.9350%" height="15" fill="rgb(212,68,19)" fg:x="9265" fg:w="88"/><text x="98.6882%" y="142.50"></text></g><g><title>act (kappybara/system.py:65) (9,269 samples, 98.48%)</title><rect x="0.9031%" y="100" width="98.4807%" height="15" fill="rgb(240,187,13)" fg:x="85" fg:w="9269"/><text x="1.1531%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,354 samples, 99.38%)</title><rect x="0.0319%" y="68" width="99.3838%" height="15" fill="rgb(223,113,26)" fg:x="3" fg:w="9354"/><text x="0.2819%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,313 samples, 98.95%)</title><rect x="0.4675%" y="84" width="98.9482%" height="15" fill="rgb(206,192,2)" fg:x="44" fg:w="9313"/><text x="0.7175%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (10 samples, 0.11%)</title><rect x="99.4156%" y="68" width="0.1062%" height="15" fill="rgb(241,108,4)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.4156%" y="84" width="0.1062%" height="15" fill="rgb(247,173,49)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.4156%" y="100" width="0.1062%" height="15" fill="rgb(224,114,35)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.4156%" y="116" width="0.1062%" height="15" fill="rgb(245,159,27)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.4156%" y="132" width="0.1062%" height="15" fill="rgb(245,172,44)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.4156%" y="148" width="0.1062%" height="15" fill="rgb(236,23,11)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.11%)</title><rect x="99.4156%" y="164" width="0.1062%" height="15" fill="rgb(205,117,38)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.4156%" y="180" width="0.1062%" height="15" fill="rgb(237,72,25)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.4156%" y="196" width="0.1062%" height="15" fill="rgb(244,70,9)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.4156%" y="212" width="0.1062%" height="15" fill="rgb(217,125,39)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.4156%" y="228" width="0.1062%" height="15" fill="rgb(235,36,10)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.4156%" y="244" width="0.1062%" height="15" fill="rgb(251,123,47)" fg:x="9357" fg:w="10"/><text x="99.6656%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (10 samples, 0.11%)</title><rect x="99.5219%" y="68" width="0.1062%" height="15" fill="rgb(221,13,13)" fg:x="9367" fg:w="10"/><text x="99.7719%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (17 samples, 0.18%)</title><rect x="99.6281%" y="68" width="0.1806%" height="15" fill="rgb(238,131,9)" fg:x="9377" fg:w="17"/><text x="99.8781%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (11 samples, 0.12%)</title><rect x="99.8088%" y="68" width="0.1169%" height="15" fill="rgb(211,50,8)" fg:x="9394" fg:w="11"/><text x="100.0588%" y="78.50"></text></g><g><title>all (9,412 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="9412"/><text x="0.2500%" y="62.50"></text></g></svg></svg>