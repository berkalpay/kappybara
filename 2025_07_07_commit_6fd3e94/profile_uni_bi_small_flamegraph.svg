<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="362" onload="init(evt)" viewBox="0 0 1200 362" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="362" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 6fd3e94</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="351.00"> </text><svg id="frames" x="10" width="1180" total_samples="9380"><g><title>n_embeddings (kappybara/rule.py:170) (10 samples, 0.11%)</title><rect x="0.2345%" y="180" width="0.1066%" height="15" fill="rgb(227,0,7)" fg:x="22" fg:w="10"/><text x="0.4845%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (46 samples, 0.49%)</title><rect x="0.0959%" y="84" width="0.4904%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="46"/><text x="0.3459%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (45 samples, 0.48%)</title><rect x="0.1066%" y="100" width="0.4797%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="45"/><text x="0.3566%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (40 samples, 0.43%)</title><rect x="0.1599%" y="116" width="0.4264%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="40"/><text x="0.4099%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (39 samples, 0.42%)</title><rect x="0.1706%" y="132" width="0.4158%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="39"/><text x="0.4206%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (39 samples, 0.42%)</title><rect x="0.1706%" y="148" width="0.4158%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="39"/><text x="0.4206%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (37 samples, 0.39%)</title><rect x="0.1919%" y="164" width="0.3945%" height="15" fill="rgb(207,160,47)" fg:x="18" fg:w="37"/><text x="0.4419%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (15 samples, 0.16%)</title><rect x="0.7569%" y="116" width="0.1599%" height="15" fill="rgb(228,23,34)" fg:x="71" fg:w="15"/><text x="1.0069%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (42 samples, 0.45%)</title><rect x="0.6716%" y="100" width="0.4478%" height="15" fill="rgb(218,30,26)" fg:x="63" fg:w="42"/><text x="0.9216%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (15 samples, 0.16%)</title><rect x="0.9595%" y="116" width="0.1599%" height="15" fill="rgb(220,122,19)" fg:x="90" fg:w="15"/><text x="1.2095%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (34 samples, 0.36%)</title><rect x="1.2154%" y="148" width="0.3625%" height="15" fill="rgb(250,228,42)" fg:x="114" fg:w="34"/><text x="1.4654%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (80 samples, 0.85%)</title><rect x="1.6205%" y="148" width="0.8529%" height="15" fill="rgb(240,193,28)" fg:x="152" fg:w="80"/><text x="1.8705%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="2.3561%" y="164" width="0.1173%" height="15" fill="rgb(216,20,37)" fg:x="221" fg:w="11"/><text x="2.6061%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (17 samples, 0.18%)</title><rect x="2.4733%" y="148" width="0.1812%" height="15" fill="rgb(206,188,39)" fg:x="232" fg:w="17"/><text x="2.7233%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (12 samples, 0.13%)</title><rect x="3.7100%" y="180" width="0.1279%" height="15" fill="rgb(217,207,13)" fg:x="348" fg:w="12"/><text x="3.9600%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (78 samples, 0.83%)</title><rect x="3.8380%" y="180" width="0.8316%" height="15" fill="rgb(231,73,38)" fg:x="360" fg:w="78"/><text x="4.0880%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (60 samples, 0.64%)</title><rect x="4.0299%" y="196" width="0.6397%" height="15" fill="rgb(225,20,46)" fg:x="378" fg:w="60"/><text x="4.2799%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (353 samples, 3.76%)</title><rect x="1.1620%" y="132" width="3.7633%" height="15" fill="rgb(210,31,41)" fg:x="109" fg:w="353"/><text x="1.4120%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (207 samples, 2.21%)</title><rect x="2.7186%" y="148" width="2.2068%" height="15" fill="rgb(221,200,47)" fg:x="255" fg:w="207"/><text x="2.9686%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (185 samples, 1.97%)</title><rect x="2.9531%" y="164" width="1.9723%" height="15" fill="rgb(226,26,5)" fg:x="277" fg:w="185"/><text x="3.2031%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (23 samples, 0.25%)</title><rect x="4.6802%" y="180" width="0.2452%" height="15" fill="rgb(249,33,26)" fg:x="439" fg:w="23"/><text x="4.9302%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (381 samples, 4.06%)</title><rect x="1.1301%" y="116" width="4.0618%" height="15" fill="rgb(235,183,28)" fg:x="106" fg:w="381"/><text x="1.3801%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (25 samples, 0.27%)</title><rect x="4.9254%" y="132" width="0.2665%" height="15" fill="rgb(221,5,38)" fg:x="462" fg:w="25"/><text x="5.1754%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (16 samples, 0.17%)</title><rect x="5.0213%" y="148" width="0.1706%" height="15" fill="rgb(247,18,42)" fg:x="471" fg:w="16"/><text x="5.2713%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (48 samples, 0.51%)</title><rect x="5.7036%" y="148" width="0.5117%" height="15" fill="rgb(241,131,45)" fg:x="535" fg:w="48"/><text x="5.9536%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.20%)</title><rect x="10.0959%" y="164" width="0.2026%" height="15" fill="rgb(249,31,29)" fg:x="947" fg:w="19"/><text x="10.3459%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (411 samples, 4.38%)</title><rect x="6.2154%" y="148" width="4.3817%" height="15" fill="rgb(225,111,53)" fg:x="583" fg:w="411"/><text x="6.4654%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.30%)</title><rect x="10.2985%" y="164" width="0.2985%" height="15" fill="rgb(238,160,17)" fg:x="966" fg:w="28"/><text x="10.5485%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.16%)</title><rect x="13.3475%" y="164" width="0.1599%" height="15" fill="rgb(214,148,48)" fg:x="1252" fg:w="15"/><text x="13.5975%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (288 samples, 3.07%)</title><rect x="10.5970%" y="148" width="3.0704%" height="15" fill="rgb(232,36,49)" fg:x="994" fg:w="288"/><text x="10.8470%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.16%)</title><rect x="13.5075%" y="164" width="0.1599%" height="15" fill="rgb(209,103,24)" fg:x="1267" fg:w="15"/><text x="13.7575%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (67 samples, 0.71%)</title><rect x="13.7100%" y="148" width="0.7143%" height="15" fill="rgb(229,88,8)" fg:x="1286" fg:w="67"/><text x="13.9600%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (65 samples, 0.69%)</title><rect x="14.4243%" y="148" width="0.6930%" height="15" fill="rgb(213,181,19)" fg:x="1353" fg:w="65"/><text x="14.6743%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.25%)</title><rect x="17.5160%" y="164" width="0.2452%" height="15" fill="rgb(254,191,54)" fg:x="1643" fg:w="23"/><text x="17.7660%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (277 samples, 2.95%)</title><rect x="15.1173%" y="148" width="2.9531%" height="15" fill="rgb(241,83,37)" fg:x="1418" fg:w="277"/><text x="15.3673%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.31%)</title><rect x="17.7612%" y="164" width="0.3092%" height="15" fill="rgb(233,36,39)" fg:x="1666" fg:w="29"/><text x="18.0112%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (229 samples, 2.44%)</title><rect x="18.0704%" y="148" width="2.4414%" height="15" fill="rgb(226,3,54)" fg:x="1695" fg:w="229"/><text x="18.3204%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (27 samples, 0.29%)</title><rect x="22.4520%" y="164" width="0.2878%" height="15" fill="rgb(245,192,40)" fg:x="2106" fg:w="27"/><text x="22.7020%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (90 samples, 0.96%)</title><rect x="22.7399%" y="164" width="0.9595%" height="15" fill="rgb(238,167,29)" fg:x="2133" fg:w="90"/><text x="22.9899%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (122 samples, 1.30%)</title><rect x="25.8529%" y="180" width="1.3006%" height="15" fill="rgb(232,182,51)" fg:x="2425" fg:w="122"/><text x="26.1029%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (95 samples, 1.01%)</title><rect x="28.7740%" y="196" width="1.0128%" height="15" fill="rgb(231,60,39)" fg:x="2699" fg:w="95"/><text x="29.0240%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (940 samples, 10.02%)</title><rect x="23.7207%" y="164" width="10.0213%" height="15" fill="rgb(208,69,12)" fg:x="2225" fg:w="940"/><text x="23.9707%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (618 samples, 6.59%)</title><rect x="27.1535%" y="180" width="6.5885%" height="15" fill="rgb(235,93,37)" fg:x="2547" fg:w="618"/><text x="27.4035%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (371 samples, 3.96%)</title><rect x="29.7868%" y="196" width="3.9552%" height="15" fill="rgb(213,116,39)" fg:x="2794" fg:w="371"/><text x="30.0368%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (126 samples, 1.34%)</title><rect x="33.7420%" y="164" width="1.3433%" height="15" fill="rgb(222,207,29)" fg:x="3165" fg:w="126"/><text x="33.9920%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (78 samples, 0.83%)</title><rect x="36.3539%" y="180" width="0.8316%" height="15" fill="rgb(206,96,30)" fg:x="3410" fg:w="78"/><text x="36.6039%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (204 samples, 2.17%)</title><rect x="35.1493%" y="164" width="2.1748%" height="15" fill="rgb(218,138,4)" fg:x="3297" fg:w="204"/><text x="35.3993%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (13 samples, 0.14%)</title><rect x="37.1855%" y="180" width="0.1386%" height="15" fill="rgb(250,191,14)" fg:x="3488" fg:w="13"/><text x="37.4355%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (245 samples, 2.61%)</title><rect x="47.2495%" y="180" width="2.6119%" height="15" fill="rgb(239,60,40)" fg:x="4432" fg:w="245"/><text x="47.4995%" y="190.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (20 samples, 0.21%)</title><rect x="49.8614%" y="180" width="0.2132%" height="15" fill="rgb(206,27,48)" fg:x="4677" fg:w="20"/><text x="50.1114%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (32 samples, 0.34%)</title><rect x="50.5544%" y="196" width="0.3412%" height="15" fill="rgb(225,35,8)" fg:x="4742" fg:w="32"/><text x="50.8044%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (176 samples, 1.88%)</title><rect x="50.0746%" y="180" width="1.8763%" height="15" fill="rgb(250,213,24)" fg:x="4697" fg:w="176"/><text x="50.3246%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (99 samples, 1.06%)</title><rect x="50.8955%" y="196" width="1.0554%" height="15" fill="rgb(247,123,22)" fg:x="4774" fg:w="99"/><text x="51.1455%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (17 samples, 0.18%)</title><rect x="53.4648%" y="196" width="0.1812%" height="15" fill="rgb(231,138,38)" fg:x="5015" fg:w="17"/><text x="53.7148%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (24 samples, 0.26%)</title><rect x="55.9382%" y="212" width="0.2559%" height="15" fill="rgb(231,145,46)" fg:x="5247" fg:w="24"/><text x="56.1882%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.18%)</title><rect x="58.1663%" y="228" width="0.1812%" height="15" fill="rgb(251,118,11)" fg:x="5456" fg:w="17"/><text x="58.4163%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (474 samples, 5.05%)</title><rect x="53.6461%" y="196" width="5.0533%" height="15" fill="rgb(217,147,25)" fg:x="5032" fg:w="474"/><text x="53.8961%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (235 samples, 2.51%)</title><rect x="56.1940%" y="212" width="2.5053%" height="15" fill="rgb(247,81,37)" fg:x="5271" fg:w="235"/><text x="56.4440%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.35%)</title><rect x="58.3475%" y="228" width="0.3518%" height="15" fill="rgb(209,12,38)" fg:x="5473" fg:w="33"/><text x="58.5975%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (271 samples, 2.89%)</title><rect x="58.6994%" y="196" width="2.8891%" height="15" fill="rgb(227,1,9)" fg:x="5506" fg:w="271"/><text x="58.9494%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (88 samples, 0.94%)</title><rect x="61.5885%" y="196" width="0.9382%" height="15" fill="rgb(248,47,43)" fg:x="5777" fg:w="88"/><text x="61.8385%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (18 samples, 0.19%)</title><rect x="62.5267%" y="196" width="0.1919%" height="15" fill="rgb(221,10,30)" fg:x="5865" fg:w="18"/><text x="62.7767%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,051 samples, 11.20%)</title><rect x="51.9510%" y="180" width="11.2047%" height="15" fill="rgb(210,229,1)" fg:x="4873" fg:w="1051"/><text x="52.2010%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (41 samples, 0.44%)</title><rect x="62.7186%" y="196" width="0.4371%" height="15" fill="rgb(222,148,37)" fg:x="5883" fg:w="41"/><text x="62.9686%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (11 samples, 0.12%)</title><rect x="63.1557%" y="180" width="0.1173%" height="15" fill="rgb(234,67,33)" fg:x="5924" fg:w="11"/><text x="63.4057%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (25 samples, 0.27%)</title><rect x="63.2729%" y="180" width="0.2665%" height="15" fill="rgb(247,98,35)" fg:x="5935" fg:w="25"/><text x="63.5229%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (26 samples, 0.28%)</title><rect x="64.4776%" y="196" width="0.2772%" height="15" fill="rgb(247,138,52)" fg:x="6048" fg:w="26"/><text x="64.7276%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="66.4712%" y="212" width="0.1279%" height="15" fill="rgb(213,79,30)" fg:x="6235" fg:w="12"/><text x="66.7212%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (317 samples, 3.38%)</title><rect x="63.5394%" y="180" width="3.3795%" height="15" fill="rgb(246,177,23)" fg:x="5960" fg:w="317"/><text x="63.7894%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (203 samples, 2.16%)</title><rect x="64.7548%" y="196" width="2.1642%" height="15" fill="rgb(230,62,27)" fg:x="6074" fg:w="203"/><text x="65.0048%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.32%)</title><rect x="66.5991%" y="212" width="0.3198%" height="15" fill="rgb(216,154,8)" fg:x="6247" fg:w="30"/><text x="66.8491%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="70.2985%" y="212" width="0.1066%" height="15" fill="rgb(244,35,45)" fg:x="6594" fg:w="10"/><text x="70.5485%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (365 samples, 3.89%)</title><rect x="66.9190%" y="180" width="3.8913%" height="15" fill="rgb(251,115,12)" fg:x="6277" fg:w="365"/><text x="67.1690%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (228 samples, 2.43%)</title><rect x="68.3795%" y="196" width="2.4307%" height="15" fill="rgb(240,54,50)" fg:x="6414" fg:w="228"/><text x="68.6295%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.41%)</title><rect x="70.4051%" y="212" width="0.4051%" height="15" fill="rgb(233,84,52)" fg:x="6604" fg:w="38"/><text x="70.6551%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (75 samples, 0.80%)</title><rect x="70.8102%" y="180" width="0.7996%" height="15" fill="rgb(207,117,47)" fg:x="6642" fg:w="75"/><text x="71.0602%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (193 samples, 2.06%)</title><rect x="71.6418%" y="180" width="2.0576%" height="15" fill="rgb(249,43,39)" fg:x="6720" fg:w="193"/><text x="71.8918%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (112 samples, 1.19%)</title><rect x="73.6994%" y="180" width="1.1940%" height="15" fill="rgb(209,38,44)" fg:x="6913" fg:w="112"/><text x="73.9494%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (32 samples, 0.34%)</title><rect x="74.8934%" y="180" width="0.3412%" height="15" fill="rgb(236,212,23)" fg:x="7025" fg:w="32"/><text x="75.1434%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,853 samples, 41.08%)</title><rect x="37.3241%" y="164" width="41.0768%" height="15" fill="rgb(242,79,21)" fg:x="3501" fg:w="3853"/><text x="37.5741%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (297 samples, 3.17%)</title><rect x="75.2345%" y="180" width="3.1663%" height="15" fill="rgb(211,96,35)" fg:x="7057" fg:w="297"/><text x="75.4845%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,497 samples, 58.60%)</title><rect x="20.5117%" y="148" width="58.6034%" height="15" fill="rgb(253,215,40)" fg:x="1924" fg:w="5497"/><text x="20.7617%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (67 samples, 0.71%)</title><rect x="78.4009%" y="164" width="0.7143%" height="15" fill="rgb(211,81,21)" fg:x="7354" fg:w="67"/><text x="78.6509%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (62 samples, 0.66%)</title><rect x="80.6397%" y="164" width="0.6610%" height="15" fill="rgb(208,190,38)" fg:x="7564" fg:w="62"/><text x="80.8897%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (59 samples, 0.63%)</title><rect x="82.5267%" y="180" width="0.6290%" height="15" fill="rgb(235,213,38)" fg:x="7741" fg:w="59"/><text x="82.7767%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (598 samples, 6.38%)</title><rect x="79.2217%" y="148" width="6.3753%" height="15" fill="rgb(237,122,38)" fg:x="7431" fg:w="598"/><text x="79.4717%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (403 samples, 4.30%)</title><rect x="81.3006%" y="164" width="4.2964%" height="15" fill="rgb(244,218,35)" fg:x="7626" fg:w="403"/><text x="81.5506%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (229 samples, 2.44%)</title><rect x="83.1557%" y="180" width="2.4414%" height="15" fill="rgb(240,68,47)" fg:x="7800" fg:w="229"/><text x="83.4057%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (39 samples, 0.42%)</title><rect x="86.2580%" y="164" width="0.4158%" height="15" fill="rgb(210,16,53)" fg:x="8091" fg:w="39"/><text x="86.5080%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (111 samples, 1.18%)</title><rect x="85.5970%" y="148" width="1.1834%" height="15" fill="rgb(235,124,12)" fg:x="8029" fg:w="111"/><text x="85.8470%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (10 samples, 0.11%)</title><rect x="86.6738%" y="164" width="0.1066%" height="15" fill="rgb(224,169,11)" fg:x="8130" fg:w="10"/><text x="86.9238%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="87.0469%" y="164" width="0.1812%" height="15" fill="rgb(250,166,2)" fg:x="8165" fg:w="17"/><text x="87.2969%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (78 samples, 0.83%)</title><rect x="86.7804%" y="148" width="0.8316%" height="15" fill="rgb(242,216,29)" fg:x="8140" fg:w="78"/><text x="87.0304%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (36 samples, 0.38%)</title><rect x="87.2281%" y="164" width="0.3838%" height="15" fill="rgb(230,116,27)" fg:x="8182" fg:w="36"/><text x="87.4781%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="88.8806%" y="164" width="0.1173%" height="15" fill="rgb(228,99,48)" fg:x="8337" fg:w="11"/><text x="89.1306%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (155 samples, 1.65%)</title><rect x="87.6119%" y="148" width="1.6525%" height="15" fill="rgb(253,11,6)" fg:x="8218" fg:w="155"/><text x="87.8619%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.27%)</title><rect x="88.9979%" y="164" width="0.2665%" height="15" fill="rgb(247,143,39)" fg:x="8348" fg:w="25"/><text x="89.2479%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (51 samples, 0.54%)</title><rect x="89.2644%" y="148" width="0.5437%" height="15" fill="rgb(236,97,10)" fg:x="8373" fg:w="51"/><text x="89.5144%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (76 samples, 0.81%)</title><rect x="89.8081%" y="148" width="0.8102%" height="15" fill="rgb(233,208,19)" fg:x="8424" fg:w="76"/><text x="90.0581%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="92.6866%" y="164" width="0.1066%" height="15" fill="rgb(216,164,2)" fg:x="8694" fg:w="10"/><text x="92.9366%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (120 samples, 1.28%)</title><rect x="92.7932%" y="164" width="1.2793%" height="15" fill="rgb(220,129,5)" fg:x="8704" fg:w="120"/><text x="93.0432%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="93.9446%" y="180" width="0.1279%" height="15" fill="rgb(242,17,10)" fg:x="8812" fg:w="12"/><text x="94.1946%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (337 samples, 3.59%)</title><rect x="90.6183%" y="148" width="3.5928%" height="15" fill="rgb(242,107,0)" fg:x="8500" fg:w="337"/><text x="90.8683%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (35 samples, 0.37%)</title><rect x="94.2431%" y="148" width="0.3731%" height="15" fill="rgb(251,28,31)" fg:x="8840" fg:w="35"/><text x="94.4931%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,391 samples, 89.46%)</title><rect x="5.2559%" y="132" width="89.4563%" height="15" fill="rgb(233,223,10)" fg:x="493" fg:w="8391"/><text x="5.5059%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (37 samples, 0.39%)</title><rect x="94.7122%" y="132" width="0.3945%" height="15" fill="rgb(215,21,27)" fg:x="8884" fg:w="37"/><text x="94.9622%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="97.9744%" y="148" width="0.1173%" height="15" fill="rgb(232,23,21)" fg:x="9190" fg:w="11"/><text x="98.2244%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (285 samples, 3.04%)</title><rect x="95.2985%" y="132" width="3.0384%" height="15" fill="rgb(244,5,23)" fg:x="8939" fg:w="285"/><text x="95.5485%" y="142.50">_up..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.25%)</title><rect x="98.0917%" y="148" width="0.2452%" height="15" fill="rgb(226,81,46)" fg:x="9201" fg:w="23"/><text x="98.3417%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,208 samples, 98.17%)</title><rect x="1.1194%" y="100" width="98.1663%" height="15" fill="rgb(247,70,30)" fg:x="105" fg:w="9208"/><text x="1.3694%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,826 samples, 94.09%)</title><rect x="5.1919%" y="116" width="94.0938%" height="15" fill="rgb(212,68,19)" fg:x="487" fg:w="8826"/><text x="5.4419%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (89 samples, 0.95%)</title><rect x="98.3369%" y="132" width="0.9488%" height="15" fill="rgb(240,187,13)" fg:x="9224" fg:w="89"/><text x="98.5869%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.11%)</title><rect x="99.1791%" y="148" width="0.1066%" height="15" fill="rgb(223,113,26)" fg:x="9303" fg:w="10"/><text x="99.4291%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,307 samples, 99.22%)</title><rect x="0.0746%" y="68" width="99.2217%" height="15" fill="rgb(206,192,2)" fg:x="7" fg:w="9307"/><text x="0.3246%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,259 samples, 98.71%)</title><rect x="0.5864%" y="84" width="98.7100%" height="15" fill="rgb(241,108,4)" fg:x="55" fg:w="9259"/><text x="0.8364%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__init__ (lark/lark.py:357) (10 samples, 0.11%)</title><rect x="99.2964%" y="308" width="0.1066%" height="15" fill="rgb(247,173,49)" fg:x="9314" fg:w="10"/><text x="99.5464%" y="318.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1415) (10 samples, 0.11%)</title><rect x="99.2964%" y="324" width="0.1066%" height="15" fill="rgb(224,114,35)" fg:x="9314" fg:w="10"/><text x="99.5464%" y="334.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (13 samples, 0.14%)</title><rect x="99.2964%" y="260" width="0.1386%" height="15" fill="rgb(245,159,27)" fg:x="9314" fg:w="13"/><text x="99.5464%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (13 samples, 0.14%)</title><rect x="99.2964%" y="276" width="0.1386%" height="15" fill="rgb(245,172,44)" fg:x="9314" fg:w="13"/><text x="99.5464%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (13 samples, 0.14%)</title><rect x="99.2964%" y="292" width="0.1386%" height="15" fill="rgb(236,23,11)" fg:x="9314" fg:w="13"/><text x="99.5464%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (18 samples, 0.19%)</title><rect x="99.2964%" y="68" width="0.1919%" height="15" fill="rgb(205,117,38)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (18 samples, 0.19%)</title><rect x="99.2964%" y="84" width="0.1919%" height="15" fill="rgb(237,72,25)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (18 samples, 0.19%)</title><rect x="99.2964%" y="100" width="0.1919%" height="15" fill="rgb(244,70,9)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (18 samples, 0.19%)</title><rect x="99.2964%" y="116" width="0.1919%" height="15" fill="rgb(217,125,39)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (18 samples, 0.19%)</title><rect x="99.2964%" y="132" width="0.1919%" height="15" fill="rgb(235,36,10)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (18 samples, 0.19%)</title><rect x="99.2964%" y="148" width="0.1919%" height="15" fill="rgb(251,123,47)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (18 samples, 0.19%)</title><rect x="99.2964%" y="164" width="0.1919%" height="15" fill="rgb(221,13,13)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (18 samples, 0.19%)</title><rect x="99.2964%" y="180" width="0.1919%" height="15" fill="rgb(238,131,9)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (18 samples, 0.19%)</title><rect x="99.2964%" y="196" width="0.1919%" height="15" fill="rgb(211,50,8)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (18 samples, 0.19%)</title><rect x="99.2964%" y="212" width="0.1919%" height="15" fill="rgb(245,182,24)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (18 samples, 0.19%)</title><rect x="99.2964%" y="228" width="0.1919%" height="15" fill="rgb(242,14,37)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (18 samples, 0.19%)</title><rect x="99.2964%" y="244" width="0.1919%" height="15" fill="rgb(246,228,12)" fg:x="9314" fg:w="18"/><text x="99.5464%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (10 samples, 0.11%)</title><rect x="99.4883%" y="68" width="0.1066%" height="15" fill="rgb(213,55,15)" fg:x="9332" fg:w="10"/><text x="99.7383%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (16 samples, 0.17%)</title><rect x="99.5949%" y="68" width="0.1706%" height="15" fill="rgb(209,9,3)" fg:x="9342" fg:w="16"/><text x="99.8449%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (10 samples, 0.11%)</title><rect x="99.7655%" y="68" width="0.1066%" height="15" fill="rgb(230,59,30)" fg:x="9358" fg:w="10"/><text x="100.0155%" y="78.50"></text></g><g><title>all (9,380 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="9380"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (12 samples, 0.13%)</title><rect x="99.8721%" y="68" width="0.1279%" height="15" fill="rgb(220,109,13)" fg:x="9368" fg:w="12"/><text x="100.1221%" y="78.50"></text></g></svg></svg>