<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 6fd3e94</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="9424"><g><title>update (kappybara/system.py:69) (16 samples, 0.17%)</title><rect x="0.0637%" y="84" width="0.1698%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="16"/><text x="0.3137%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (16 samples, 0.17%)</title><rect x="0.0637%" y="100" width="0.1698%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="16"/><text x="0.3137%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (16 samples, 0.17%)</title><rect x="0.0637%" y="116" width="0.1698%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="16"/><text x="0.3137%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (12 samples, 0.13%)</title><rect x="0.1061%" y="132" width="0.1273%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="12"/><text x="0.3561%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (12 samples, 0.13%)</title><rect x="0.1061%" y="148" width="0.1273%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="12"/><text x="0.3561%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (12 samples, 0.13%)</title><rect x="0.1061%" y="164" width="0.1273%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="12"/><text x="0.3561%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (35 samples, 0.37%)</title><rect x="0.2971%" y="100" width="0.3714%" height="15" fill="rgb(207,160,47)" fg:x="28" fg:w="35"/><text x="0.5471%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (25 samples, 0.27%)</title><rect x="0.4032%" y="116" width="0.2653%" height="15" fill="rgb(228,23,34)" fg:x="38" fg:w="25"/><text x="0.6532%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (22 samples, 0.23%)</title><rect x="0.7958%" y="148" width="0.2334%" height="15" fill="rgb(218,30,26)" fg:x="75" fg:w="22"/><text x="1.0458%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (83 samples, 0.88%)</title><rect x="1.0717%" y="148" width="0.8807%" height="15" fill="rgb(220,122,19)" fg:x="101" fg:w="83"/><text x="1.3217%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (23 samples, 0.24%)</title><rect x="1.9525%" y="148" width="0.2441%" height="15" fill="rgb(250,228,42)" fg:x="184" fg:w="23"/><text x="2.2025%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (15 samples, 0.16%)</title><rect x="3.3319%" y="180" width="0.1592%" height="15" fill="rgb(240,193,28)" fg:x="314" fg:w="15"/><text x="3.5819%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (12 samples, 0.13%)</title><rect x="3.6927%" y="196" width="0.1273%" height="15" fill="rgb(216,20,37)" fg:x="348" fg:w="12"/><text x="3.9427%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (64 samples, 0.68%)</title><rect x="3.4911%" y="180" width="0.6791%" height="15" fill="rgb(206,188,39)" fg:x="329" fg:w="64"/><text x="3.7411%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (33 samples, 0.35%)</title><rect x="3.8200%" y="196" width="0.3502%" height="15" fill="rgb(217,207,13)" fg:x="360" fg:w="33"/><text x="4.0700%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (354 samples, 3.76%)</title><rect x="0.7003%" y="132" width="3.7564%" height="15" fill="rgb(231,73,38)" fg:x="66" fg:w="354"/><text x="0.9503%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (207 samples, 2.20%)</title><rect x="2.2602%" y="148" width="2.1965%" height="15" fill="rgb(225,20,46)" fg:x="213" fg:w="207"/><text x="2.5102%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (173 samples, 1.84%)</title><rect x="2.6210%" y="164" width="1.8357%" height="15" fill="rgb(210,31,41)" fg:x="247" fg:w="173"/><text x="2.8710%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (25 samples, 0.27%)</title><rect x="4.1914%" y="180" width="0.2653%" height="15" fill="rgb(221,200,47)" fg:x="395" fg:w="25"/><text x="4.4414%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (382 samples, 4.05%)</title><rect x="0.6685%" y="116" width="4.0535%" height="15" fill="rgb(226,26,5)" fg:x="63" fg:w="382"/><text x="0.9185%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (25 samples, 0.27%)</title><rect x="4.4567%" y="132" width="0.2653%" height="15" fill="rgb(249,33,26)" fg:x="420" fg:w="25"/><text x="4.7067%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (17 samples, 0.18%)</title><rect x="4.5416%" y="148" width="0.1804%" height="15" fill="rgb(235,183,28)" fg:x="428" fg:w="17"/><text x="4.7916%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (32 samples, 0.34%)</title><rect x="5.2313%" y="148" width="0.3396%" height="15" fill="rgb(221,5,38)" fg:x="493" fg:w="32"/><text x="5.4813%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.18%)</title><rect x="8.8604%" y="164" width="0.1804%" height="15" fill="rgb(247,18,42)" fg:x="835" fg:w="17"/><text x="9.1104%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (354 samples, 3.76%)</title><rect x="5.5709%" y="148" width="3.7564%" height="15" fill="rgb(241,131,45)" fg:x="525" fg:w="354"/><text x="5.8209%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.29%)</title><rect x="9.0407%" y="164" width="0.2865%" height="15" fill="rgb(249,31,29)" fg:x="852" fg:w="27"/><text x="9.2907%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.19%)</title><rect x="12.4363%" y="164" width="0.1910%" height="15" fill="rgb(225,111,53)" fg:x="1172" fg:w="18"/><text x="12.6863%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (338 samples, 3.59%)</title><rect x="9.3272%" y="148" width="3.5866%" height="15" fill="rgb(238,160,17)" fg:x="879" fg:w="338"/><text x="9.5772%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.29%)</title><rect x="12.6273%" y="164" width="0.2865%" height="15" fill="rgb(214,148,48)" fg:x="1190" fg:w="27"/><text x="12.8773%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (78 samples, 0.83%)</title><rect x="12.9138%" y="148" width="0.8277%" height="15" fill="rgb(232,36,49)" fg:x="1217" fg:w="78"/><text x="13.1638%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (76 samples, 0.81%)</title><rect x="13.7415%" y="148" width="0.8065%" height="15" fill="rgb(209,103,24)" fg:x="1295" fg:w="76"/><text x="13.9915%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (36 samples, 0.38%)</title><rect x="16.7657%" y="164" width="0.3820%" height="15" fill="rgb(229,88,8)" fg:x="1580" fg:w="36"/><text x="17.0157%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (288 samples, 3.06%)</title><rect x="14.5480%" y="148" width="3.0560%" height="15" fill="rgb(213,181,19)" fg:x="1371" fg:w="288"/><text x="14.7980%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.46%)</title><rect x="17.1477%" y="164" width="0.4563%" height="15" fill="rgb(254,191,54)" fg:x="1616" fg:w="43"/><text x="17.3977%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (256 samples, 2.72%)</title><rect x="17.6040%" y="148" width="2.7165%" height="15" fill="rgb(241,83,37)" fg:x="1659" fg:w="256"/><text x="17.8540%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (31 samples, 0.33%)</title><rect x="22.7716%" y="164" width="0.3289%" height="15" fill="rgb(233,36,39)" fg:x="2146" fg:w="31"/><text x="23.0216%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (93 samples, 0.99%)</title><rect x="23.1006%" y="164" width="0.9868%" height="15" fill="rgb(226,3,54)" fg:x="2177" fg:w="93"/><text x="23.3506%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (122 samples, 1.29%)</title><rect x="25.9550%" y="180" width="1.2946%" height="15" fill="rgb(245,192,40)" fg:x="2446" fg:w="122"/><text x="26.2050%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (108 samples, 1.15%)</title><rect x="29.4779%" y="196" width="1.1460%" height="15" fill="rgb(238,167,29)" fg:x="2778" fg:w="108"/><text x="29.7279%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (935 samples, 9.92%)</title><rect x="24.1299%" y="164" width="9.9215%" height="15" fill="rgb(232,182,51)" fg:x="2274" fg:w="935"/><text x="24.3799%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (641 samples, 6.80%)</title><rect x="27.2496%" y="180" width="6.8018%" height="15" fill="rgb(231,60,39)" fg:x="2568" fg:w="641"/><text x="27.4996%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (323 samples, 3.43%)</title><rect x="30.6239%" y="196" width="3.4274%" height="15" fill="rgb(208,69,12)" fg:x="2886" fg:w="323"/><text x="30.8739%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (123 samples, 1.31%)</title><rect x="34.0514%" y="164" width="1.3052%" height="15" fill="rgb(235,93,37)" fg:x="3209" fg:w="123"/><text x="34.3014%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (85 samples, 0.90%)</title><rect x="36.4177%" y="180" width="0.9020%" height="15" fill="rgb(213,116,39)" fg:x="3432" fg:w="85"/><text x="36.6677%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (198 samples, 2.10%)</title><rect x="35.4202%" y="164" width="2.1010%" height="15" fill="rgb(222,207,29)" fg:x="3338" fg:w="198"/><text x="35.6702%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.20%)</title><rect x="37.3196%" y="180" width="0.2016%" height="15" fill="rgb(206,96,30)" fg:x="3517" fg:w="19"/><text x="37.5696%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (198 samples, 2.10%)</title><rect x="48.1961%" y="180" width="2.1010%" height="15" fill="rgb(218,138,4)" fg:x="4542" fg:w="198"/><text x="48.4461%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (16 samples, 0.17%)</title><rect x="50.2971%" y="180" width="0.1698%" height="15" fill="rgb(250,191,14)" fg:x="4740" fg:w="16"/><text x="50.5471%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (35 samples, 0.37%)</title><rect x="51.1036%" y="196" width="0.3714%" height="15" fill="rgb(239,60,40)" fg:x="4816" fg:w="35"/><text x="51.3536%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (202 samples, 2.14%)</title><rect x="50.4669%" y="180" width="2.1435%" height="15" fill="rgb(206,27,48)" fg:x="4756" fg:w="202"/><text x="50.7169%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (107 samples, 1.14%)</title><rect x="51.4750%" y="196" width="1.1354%" height="15" fill="rgb(225,35,8)" fg:x="4851" fg:w="107"/><text x="51.7250%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (26 samples, 0.28%)</title><rect x="53.7139%" y="196" width="0.2759%" height="15" fill="rgb(250,213,24)" fg:x="5062" fg:w="26"/><text x="53.9639%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.16%)</title><rect x="56.4410%" y="212" width="0.1592%" height="15" fill="rgb(247,123,22)" fg:x="5319" fg:w="15"/><text x="56.6910%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="58.7649%" y="228" width="0.1486%" height="15" fill="rgb(231,138,38)" fg:x="5538" fg:w="14"/><text x="59.0149%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (492 samples, 5.22%)</title><rect x="53.9898%" y="196" width="5.2207%" height="15" fill="rgb(231,145,46)" fg:x="5088" fg:w="492"/><text x="54.2398%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (246 samples, 2.61%)</title><rect x="56.6002%" y="212" width="2.6104%" height="15" fill="rgb(251,118,11)" fg:x="5334" fg:w="246"/><text x="56.8502%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.30%)</title><rect x="58.9134%" y="228" width="0.2971%" height="15" fill="rgb(217,147,25)" fg:x="5552" fg:w="28"/><text x="59.1634%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (255 samples, 2.71%)</title><rect x="59.2105%" y="196" width="2.7059%" height="15" fill="rgb(247,81,37)" fg:x="5580" fg:w="255"/><text x="59.4605%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (101 samples, 1.07%)</title><rect x="61.9164%" y="196" width="1.0717%" height="15" fill="rgb(209,12,38)" fg:x="5835" fg:w="101"/><text x="62.1664%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (16 samples, 0.17%)</title><rect x="62.9881%" y="196" width="0.1698%" height="15" fill="rgb(227,1,9)" fg:x="5936" fg:w="16"/><text x="63.2381%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,032 samples, 10.95%)</title><rect x="52.6104%" y="180" width="10.9508%" height="15" fill="rgb(248,47,43)" fg:x="4958" fg:w="1032"/><text x="52.8604%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (38 samples, 0.40%)</title><rect x="63.1579%" y="196" width="0.4032%" height="15" fill="rgb(221,10,30)" fg:x="5952" fg:w="38"/><text x="63.4079%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (31 samples, 0.33%)</title><rect x="63.6248%" y="180" width="0.3289%" height="15" fill="rgb(210,229,1)" fg:x="5996" fg:w="31"/><text x="63.8748%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (18 samples, 0.19%)</title><rect x="64.8663%" y="196" width="0.1910%" height="15" fill="rgb(222,148,37)" fg:x="6113" fg:w="18"/><text x="65.1163%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="66.7551%" y="212" width="0.1061%" height="15" fill="rgb(234,67,33)" fg:x="6291" fg:w="10"/><text x="67.0051%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (300 samples, 3.18%)</title><rect x="63.9537%" y="180" width="3.1834%" height="15" fill="rgb(247,98,35)" fg:x="6027" fg:w="300"/><text x="64.2037%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (196 samples, 2.08%)</title><rect x="65.0573%" y="196" width="2.0798%" height="15" fill="rgb(247,138,52)" fg:x="6131" fg:w="196"/><text x="65.3073%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.28%)</title><rect x="66.8612%" y="212" width="0.2759%" height="15" fill="rgb(213,79,30)" fg:x="6301" fg:w="26"/><text x="67.1112%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.12%)</title><rect x="68.6651%" y="196" width="0.1167%" height="15" fill="rgb(246,177,23)" fg:x="6471" fg:w="11"/><text x="68.9151%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="70.7980%" y="212" width="0.1486%" height="15" fill="rgb(230,62,27)" fg:x="6672" fg:w="14"/><text x="71.0480%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (396 samples, 4.20%)</title><rect x="67.1371%" y="180" width="4.2020%" height="15" fill="rgb(216,154,8)" fg:x="6327" fg:w="396"/><text x="67.3871%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (241 samples, 2.56%)</title><rect x="68.7818%" y="196" width="2.5573%" height="15" fill="rgb(244,35,45)" fg:x="6482" fg:w="241"/><text x="69.0318%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.39%)</title><rect x="70.9465%" y="212" width="0.3926%" height="15" fill="rgb(251,115,12)" fg:x="6686" fg:w="37"/><text x="71.1965%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (96 samples, 1.02%)</title><rect x="71.3391%" y="180" width="1.0187%" height="15" fill="rgb(240,54,50)" fg:x="6723" fg:w="96"/><text x="71.5891%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (148 samples, 1.57%)</title><rect x="72.3896%" y="180" width="1.5705%" height="15" fill="rgb(233,84,52)" fg:x="6822" fg:w="148"/><text x="72.6396%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (89 samples, 0.94%)</title><rect x="73.9601%" y="180" width="0.9444%" height="15" fill="rgb(207,117,47)" fg:x="6970" fg:w="89"/><text x="74.2101%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (21 samples, 0.22%)</title><rect x="74.9045%" y="180" width="0.2228%" height="15" fill="rgb(249,43,39)" fg:x="7059" fg:w="21"/><text x="75.1545%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,862 samples, 40.98%)</title><rect x="37.5212%" y="164" width="40.9805%" height="15" fill="rgb(209,38,44)" fg:x="3536" fg:w="3862"/><text x="37.7712%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (318 samples, 3.37%)</title><rect x="75.1273%" y="180" width="3.3744%" height="15" fill="rgb(236,212,23)" fg:x="7080" fg:w="318"/><text x="75.3773%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,545 samples, 58.84%)</title><rect x="20.3205%" y="148" width="58.8391%" height="15" fill="rgb(242,79,21)" fg:x="1915" fg:w="5545"/><text x="20.5705%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (62 samples, 0.66%)</title><rect x="78.5017%" y="164" width="0.6579%" height="15" fill="rgb(211,96,35)" fg:x="7398" fg:w="62"/><text x="78.7517%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (59 samples, 0.63%)</title><rect x="80.8468%" y="164" width="0.6261%" height="15" fill="rgb(253,215,40)" fg:x="7619" fg:w="59"/><text x="81.0968%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (39 samples, 0.41%)</title><rect x="82.5764%" y="180" width="0.4138%" height="15" fill="rgb(211,81,21)" fg:x="7782" fg:w="39"/><text x="82.8264%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (563 samples, 5.97%)</title><rect x="79.3188%" y="148" width="5.9741%" height="15" fill="rgb(208,190,38)" fg:x="7475" fg:w="563"/><text x="79.5688%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (360 samples, 3.82%)</title><rect x="81.4728%" y="164" width="3.8200%" height="15" fill="rgb(235,213,38)" fg:x="7678" fg:w="360"/><text x="81.7228%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (217 samples, 2.30%)</title><rect x="82.9902%" y="180" width="2.3026%" height="15" fill="rgb(237,122,38)" fg:x="7821" fg:w="217"/><text x="83.2402%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (31 samples, 0.33%)</title><rect x="86.0250%" y="164" width="0.3289%" height="15" fill="rgb(244,218,35)" fg:x="8107" fg:w="31"/><text x="86.2750%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (106 samples, 1.12%)</title><rect x="85.2929%" y="148" width="1.1248%" height="15" fill="rgb(240,68,47)" fg:x="8038" fg:w="106"/><text x="85.5429%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="86.7360%" y="164" width="0.1804%" height="15" fill="rgb(210,16,53)" fg:x="8174" fg:w="17"/><text x="86.9860%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (91 samples, 0.97%)</title><rect x="86.4177%" y="148" width="0.9656%" height="15" fill="rgb(235,124,12)" fg:x="8144" fg:w="91"/><text x="86.6677%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (44 samples, 0.47%)</title><rect x="86.9164%" y="164" width="0.4669%" height="15" fill="rgb(224,169,11)" fg:x="8191" fg:w="44"/><text x="87.1664%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (142 samples, 1.51%)</title><rect x="87.3833%" y="148" width="1.5068%" height="15" fill="rgb(250,166,2)" fg:x="8235" fg:w="142"/><text x="87.6333%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.30%)</title><rect x="88.5930%" y="164" width="0.2971%" height="15" fill="rgb(242,216,29)" fg:x="8349" fg:w="28"/><text x="88.8430%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (61 samples, 0.65%)</title><rect x="88.8901%" y="148" width="0.6473%" height="15" fill="rgb(230,116,27)" fg:x="8377" fg:w="61"/><text x="89.1401%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (86 samples, 0.91%)</title><rect x="89.5374%" y="148" width="0.9126%" height="15" fill="rgb(228,99,48)" fg:x="8438" fg:w="86"/><text x="89.7874%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.16%)</title><rect x="93.8879%" y="180" width="0.1592%" height="15" fill="rgb(253,11,6)" fg:x="8848" fg:w="15"/><text x="94.1379%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (133 samples, 1.41%)</title><rect x="92.8587%" y="164" width="1.4113%" height="15" fill="rgb(247,143,39)" fg:x="8751" fg:w="133"/><text x="93.1087%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.22%)</title><rect x="94.0471%" y="180" width="0.2228%" height="15" fill="rgb(236,97,10)" fg:x="8863" fg:w="21"/><text x="94.2971%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (372 samples, 3.95%)</title><rect x="90.4499%" y="148" width="3.9474%" height="15" fill="rgb(233,208,19)" fg:x="8524" fg:w="372"/><text x="90.6999%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (43 samples, 0.46%)</title><rect x="94.4079%" y="148" width="0.4563%" height="15" fill="rgb(216,164,2)" fg:x="8897" fg:w="43"/><text x="94.6579%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (14 samples, 0.15%)</title><rect x="94.8642%" y="148" width="0.1486%" height="15" fill="rgb(220,129,5)" fg:x="8940" fg:w="14"/><text x="95.1142%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,503 samples, 90.23%)</title><rect x="4.8281%" y="132" width="90.2271%" height="15" fill="rgb(242,17,10)" fg:x="455" fg:w="8503"/><text x="5.0781%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (39 samples, 0.41%)</title><rect x="95.0552%" y="132" width="0.4138%" height="15" fill="rgb(242,107,0)" fg:x="8958" fg:w="39"/><text x="95.3052%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (11 samples, 0.12%)</title><rect x="95.4690%" y="132" width="0.1167%" height="15" fill="rgb(251,28,31)" fg:x="8997" fg:w="11"/><text x="95.7190%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="97.9733%" y="148" width="0.1167%" height="15" fill="rgb(233,223,10)" fg:x="9233" fg:w="11"/><text x="98.2233%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (255 samples, 2.71%)</title><rect x="95.6812%" y="132" width="2.7059%" height="15" fill="rgb(215,21,27)" fg:x="9017" fg:w="255"/><text x="95.9312%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.30%)</title><rect x="98.0900%" y="148" width="0.2971%" height="15" fill="rgb(232,23,21)" fg:x="9244" fg:w="28"/><text x="98.3400%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,292 samples, 98.60%)</title><rect x="0.6685%" y="100" width="98.5993%" height="15" fill="rgb(244,5,23)" fg:x="63" fg:w="9292"/><text x="0.9185%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,909 samples, 94.54%)</title><rect x="4.7326%" y="116" width="94.5352%" height="15" fill="rgb(226,81,46)" fg:x="446" fg:w="8909"/><text x="4.9826%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (83 samples, 0.88%)</title><rect x="98.3871%" y="132" width="0.8807%" height="15" fill="rgb(247,70,30)" fg:x="9272" fg:w="83"/><text x="98.6371%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,350 samples, 99.21%)</title><rect x="0.0637%" y="68" width="99.2148%" height="15" fill="rgb(212,68,19)" fg:x="6" fg:w="9350"/><text x="0.3137%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,334 samples, 99.04%)</title><rect x="0.2334%" y="84" width="99.0450%" height="15" fill="rgb(240,187,13)" fg:x="22" fg:w="9334"/><text x="0.4834%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:96) (15 samples, 0.16%)</title><rect x="99.3633%" y="68" width="0.1592%" height="15" fill="rgb(223,113,26)" fg:x="9364" fg:w="15"/><text x="99.6133%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (12 samples, 0.13%)</title><rect x="99.5225%" y="68" width="0.1273%" height="15" fill="rgb(206,192,2)" fg:x="9379" fg:w="12"/><text x="99.7725%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (20 samples, 0.21%)</title><rect x="99.6498%" y="68" width="0.2122%" height="15" fill="rgb(241,108,4)" fg:x="9391" fg:w="20"/><text x="99.8998%" y="78.50"></text></g><g><title>all (9,424 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="9424"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (13 samples, 0.14%)</title><rect x="99.8621%" y="68" width="0.1379%" height="15" fill="rgb(224,114,35)" fg:x="9411" fg:w="13"/><text x="100.1121%" y="78.50"></text></g></svg></svg>