<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 7099d3e</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11986"><g><title>update (kappybara/system.py:69) (17 samples, 0.14%)</title><rect x="0.0834%" y="84" width="0.1418%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="17"/><text x="0.3334%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (17 samples, 0.14%)</title><rect x="0.0834%" y="100" width="0.1418%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="17"/><text x="0.3334%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (15 samples, 0.13%)</title><rect x="0.1001%" y="116" width="0.1251%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="15"/><text x="0.3501%" y="126.50"></text></g><g><title>select (kappybara/rule.py:104) (32 samples, 0.27%)</title><rect x="0.2753%" y="116" width="0.2670%" height="15" fill="rgb(248,212,6)" fg:x="33" fg:w="32"/><text x="0.5253%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (40 samples, 0.33%)</title><rect x="0.2503%" y="100" width="0.3337%" height="15" fill="rgb(208,68,35)" fg:x="30" fg:w="40"/><text x="0.5003%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (19 samples, 0.16%)</title><rect x="0.7092%" y="164" width="0.1585%" height="15" fill="rgb(232,128,0)" fg:x="85" fg:w="19"/><text x="0.9592%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (47 samples, 0.39%)</title><rect x="0.7008%" y="148" width="0.3921%" height="15" fill="rgb(207,160,47)" fg:x="84" fg:w="47"/><text x="0.9508%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (27 samples, 0.23%)</title><rect x="0.8677%" y="164" width="0.2253%" height="15" fill="rgb(228,23,34)" fg:x="104" fg:w="27"/><text x="1.1177%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (54 samples, 0.45%)</title><rect x="1.1680%" y="164" width="0.4505%" height="15" fill="rgb(218,30,26)" fg:x="140" fg:w="54"/><text x="1.4180%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:64) (17 samples, 0.14%)</title><rect x="1.4767%" y="180" width="0.1418%" height="15" fill="rgb(220,122,19)" fg:x="177" fg:w="17"/><text x="1.7267%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (32 samples, 0.27%)</title><rect x="1.8438%" y="180" width="0.2670%" height="15" fill="rgb(250,228,42)" fg:x="221" fg:w="32"/><text x="2.0938%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (21 samples, 0.18%)</title><rect x="2.1108%" y="180" width="0.1752%" height="15" fill="rgb(240,193,28)" fg:x="253" fg:w="21"/><text x="2.3608%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (16 samples, 0.13%)</title><rect x="2.2860%" y="180" width="0.1335%" height="15" fill="rgb(216,20,37)" fg:x="274" fg:w="16"/><text x="2.5360%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (44 samples, 0.37%)</title><rect x="2.4195%" y="180" width="0.3671%" height="15" fill="rgb(206,188,39)" fg:x="290" fg:w="44"/><text x="2.6695%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (223 samples, 1.86%)</title><rect x="1.0929%" y="148" width="1.8605%" height="15" fill="rgb(217,207,13)" fg:x="131" fg:w="223"/><text x="1.3429%" y="158.50">_..</text></g><g><title>create_index (kappybara/indexed_set.py:196) (159 samples, 1.33%)</title><rect x="1.6269%" y="164" width="1.3265%" height="15" fill="rgb(231,73,38)" fg:x="195" fg:w="159"/><text x="1.8769%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:136) (20 samples, 0.17%)</title><rect x="2.7866%" y="180" width="0.1669%" height="15" fill="rgb(225,20,46)" fg:x="334" fg:w="20"/><text x="3.0366%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (12 samples, 0.10%)</title><rect x="2.9701%" y="148" width="0.1001%" height="15" fill="rgb(210,31,41)" fg:x="356" fg:w="12"/><text x="3.2201%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (79 samples, 0.66%)</title><rect x="3.0702%" y="148" width="0.6591%" height="15" fill="rgb(221,200,47)" fg:x="368" fg:w="79"/><text x="3.3202%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.12%)</title><rect x="3.6125%" y="164" width="0.1168%" height="15" fill="rgb(226,26,5)" fg:x="433" fg:w="14"/><text x="3.8625%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (21 samples, 0.18%)</title><rect x="3.7294%" y="148" width="0.1752%" height="15" fill="rgb(249,33,26)" fg:x="447" fg:w="21"/><text x="3.9794%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (68 samples, 0.57%)</title><rect x="4.8807%" y="180" width="0.5673%" height="15" fill="rgb(235,183,28)" fg:x="585" fg:w="68"/><text x="5.1307%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (42 samples, 0.35%)</title><rect x="5.0976%" y="196" width="0.3504%" height="15" fill="rgb(221,5,38)" fg:x="611" fg:w="42"/><text x="5.3476%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (606 samples, 5.06%)</title><rect x="0.6508%" y="132" width="5.0559%" height="15" fill="rgb(247,18,42)" fg:x="78" fg:w="606"/><text x="0.9008%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (214 samples, 1.79%)</title><rect x="3.9212%" y="148" width="1.7854%" height="15" fill="rgb(241,131,45)" fg:x="470" fg:w="214"/><text x="4.1712%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:122) (175 samples, 1.46%)</title><rect x="4.2466%" y="164" width="1.4600%" height="15" fill="rgb(249,31,29)" fg:x="509" fg:w="175"/><text x="4.4966%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (28 samples, 0.23%)</title><rect x="5.4731%" y="180" width="0.2336%" height="15" fill="rgb(225,111,53)" fg:x="656" fg:w="28"/><text x="5.7231%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (615 samples, 5.13%)</title><rect x="0.5840%" y="116" width="5.1310%" height="15" fill="rgb(238,160,17)" fg:x="70" fg:w="615"/><text x="0.8340%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:261) (54 samples, 0.45%)</title><rect x="6.3741%" y="180" width="0.4505%" height="15" fill="rgb(214,148,48)" fg:x="764" fg:w="54"/><text x="6.6241%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.14%)</title><rect x="14.7339%" y="196" width="0.1418%" height="15" fill="rgb(232,36,49)" fg:x="1766" fg:w="17"/><text x="14.9839%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (1,015 samples, 8.47%)</title><rect x="6.8246%" y="180" width="8.4682%" height="15" fill="rgb(209,103,24)" fg:x="818" fg:w="1015"/><text x="7.0746%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (50 samples, 0.42%)</title><rect x="14.8757%" y="196" width="0.4172%" height="15" fill="rgb(229,88,8)" fg:x="1783" fg:w="50"/><text x="15.1257%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.10%)</title><rect x="17.9209%" y="196" width="0.1001%" height="15" fill="rgb(213,181,19)" fg:x="2148" fg:w="12"/><text x="18.1709%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (352 samples, 2.94%)</title><rect x="15.2928%" y="180" width="2.9368%" height="15" fill="rgb(254,191,54)" fg:x="1833" fg:w="352"/><text x="15.5428%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="18.0210%" y="196" width="0.2086%" height="15" fill="rgb(241,83,37)" fg:x="2160" fg:w="25"/><text x="18.2710%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (74 samples, 0.62%)</title><rect x="18.2713%" y="180" width="0.6174%" height="15" fill="rgb(233,36,39)" fg:x="2190" fg:w="74"/><text x="18.5213%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (91 samples, 0.76%)</title><rect x="18.8887%" y="180" width="0.7592%" height="15" fill="rgb(226,3,54)" fg:x="2264" fg:w="91"/><text x="19.1387%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.15%)</title><rect x="22.0507%" y="196" width="0.1502%" height="15" fill="rgb(245,192,40)" fg:x="2643" fg:w="18"/><text x="22.3007%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (351 samples, 2.93%)</title><rect x="19.6479%" y="180" width="2.9284%" height="15" fill="rgb(238,167,29)" fg:x="2355" fg:w="351"/><text x="19.8979%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (45 samples, 0.38%)</title><rect x="22.2009%" y="196" width="0.3754%" height="15" fill="rgb(232,182,51)" fg:x="2661" fg:w="45"/><text x="22.4509%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (253 samples, 2.11%)</title><rect x="22.5763%" y="180" width="2.1108%" height="15" fill="rgb(231,60,39)" fg:x="2706" fg:w="253"/><text x="22.8263%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (19 samples, 0.16%)</title><rect x="25.9469%" y="196" width="0.1585%" height="15" fill="rgb(208,69,12)" fg:x="3110" fg:w="19"/><text x="26.1969%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (86 samples, 0.72%)</title><rect x="26.1055%" y="196" width="0.7175%" height="15" fill="rgb(235,93,37)" fg:x="3129" fg:w="86"/><text x="26.3555%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (121 samples, 1.01%)</title><rect x="28.5416%" y="212" width="1.0095%" height="15" fill="rgb(213,116,39)" fg:x="3421" fg:w="121"/><text x="28.7916%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (131 samples, 1.09%)</title><rect x="31.0362%" y="228" width="1.0929%" height="15" fill="rgb(222,207,29)" fg:x="3720" fg:w="131"/><text x="31.2862%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,000 samples, 8.34%)</title><rect x="26.8396%" y="196" width="8.3431%" height="15" fill="rgb(206,96,30)" fg:x="3217" fg:w="1000"/><text x="27.0896%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (675 samples, 5.63%)</title><rect x="29.5511%" y="212" width="5.6316%" height="15" fill="rgb(218,138,4)" fg:x="3542" fg:w="675"/><text x="29.8011%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (366 samples, 3.05%)</title><rect x="32.1292%" y="228" width="3.0536%" height="15" fill="rgb(250,191,14)" fg:x="3851" fg:w="366"/><text x="32.3792%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (132 samples, 1.10%)</title><rect x="35.1827%" y="196" width="1.1013%" height="15" fill="rgb(239,60,40)" fg:x="4217" fg:w="132"/><text x="35.4327%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (15 samples, 0.13%)</title><rect x="37.1266%" y="212" width="0.1251%" height="15" fill="rgb(206,27,48)" fg:x="4450" fg:w="15"/><text x="37.3766%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (175 samples, 1.46%)</title><rect x="36.3341%" y="196" width="1.4600%" height="15" fill="rgb(225,35,8)" fg:x="4355" fg:w="175"/><text x="36.5841%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (65 samples, 0.54%)</title><rect x="37.2518%" y="212" width="0.5423%" height="15" fill="rgb(250,213,24)" fg:x="4465" fg:w="65"/><text x="37.5018%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (203 samples, 1.69%)</title><rect x="45.8952%" y="212" width="1.6936%" height="15" fill="rgb(247,123,22)" fg:x="5501" fg:w="203"/><text x="46.1452%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (14 samples, 0.12%)</title><rect x="47.5889%" y="212" width="0.1168%" height="15" fill="rgb(231,138,38)" fg:x="5704" fg:w="14"/><text x="47.8389%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (21 samples, 0.18%)</title><rect x="48.0894%" y="228" width="0.1752%" height="15" fill="rgb(231,145,46)" fg:x="5764" fg:w="21"/><text x="48.3394%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (158 samples, 1.32%)</title><rect x="47.7057%" y="212" width="1.3182%" height="15" fill="rgb(251,118,11)" fg:x="5718" fg:w="158"/><text x="47.9557%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (91 samples, 0.76%)</title><rect x="48.2646%" y="228" width="0.7592%" height="15" fill="rgb(217,147,25)" fg:x="5785" fg:w="91"/><text x="48.5146%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (14 samples, 0.12%)</title><rect x="49.8582%" y="228" width="0.1168%" height="15" fill="rgb(247,81,37)" fg:x="5976" fg:w="14"/><text x="50.1082%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.10%)</title><rect x="51.5685%" y="244" width="0.1001%" height="15" fill="rgb(209,12,38)" fg:x="6181" fg:w="12"/><text x="51.8185%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (469 samples, 3.91%)</title><rect x="49.9750%" y="228" width="3.9129%" height="15" fill="rgb(227,1,9)" fg:x="5990" fg:w="469"/><text x="50.2250%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (266 samples, 2.22%)</title><rect x="51.6686%" y="244" width="2.2193%" height="15" fill="rgb(248,47,43)" fg:x="6193" fg:w="266"/><text x="51.9186%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (57 samples, 0.48%)</title><rect x="53.4123%" y="260" width="0.4756%" height="15" fill="rgb(221,10,30)" fg:x="6402" fg:w="57"/><text x="53.6623%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (285 samples, 2.38%)</title><rect x="53.8879%" y="228" width="2.3778%" height="15" fill="rgb(210,229,1)" fg:x="6459" fg:w="285"/><text x="54.1379%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (91 samples, 0.76%)</title><rect x="56.2656%" y="228" width="0.7592%" height="15" fill="rgb(222,148,37)" fg:x="6744" fg:w="91"/><text x="56.5156%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (997 samples, 8.32%)</title><rect x="49.0239%" y="212" width="8.3180%" height="15" fill="rgb(234,67,33)" fg:x="5876" fg:w="997"/><text x="49.2739%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (33 samples, 0.28%)</title><rect x="57.0666%" y="228" width="0.2753%" height="15" fill="rgb(247,98,35)" fg:x="6840" fg:w="33"/><text x="57.3166%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (17 samples, 0.14%)</title><rect x="57.3669%" y="212" width="0.1418%" height="15" fill="rgb(247,138,52)" fg:x="6876" fg:w="17"/><text x="57.6169%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (296 samples, 2.47%)</title><rect x="57.5088%" y="212" width="2.4695%" height="15" fill="rgb(213,79,30)" fg:x="6893" fg:w="296"/><text x="57.7588%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (188 samples, 1.57%)</title><rect x="58.4098%" y="228" width="1.5685%" height="15" fill="rgb(246,177,23)" fg:x="7001" fg:w="188"/><text x="58.6598%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.24%)</title><rect x="59.7364%" y="244" width="0.2419%" height="15" fill="rgb(230,62,27)" fg:x="7160" fg:w="29"/><text x="59.9864%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.12%)</title><rect x="61.2047%" y="228" width="0.1168%" height="15" fill="rgb(216,154,8)" fg:x="7336" fg:w="14"/><text x="61.4547%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (476 samples, 3.97%)</title><rect x="59.9783%" y="212" width="3.9713%" height="15" fill="rgb(244,35,45)" fg:x="7189" fg:w="476"/><text x="60.2283%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (315 samples, 2.63%)</title><rect x="61.3215%" y="228" width="2.6281%" height="15" fill="rgb(251,115,12)" fg:x="7350" fg:w="315"/><text x="61.5715%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (64 samples, 0.53%)</title><rect x="63.4157%" y="244" width="0.5340%" height="15" fill="rgb(240,54,50)" fg:x="7601" fg:w="64"/><text x="63.6657%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (83 samples, 0.69%)</title><rect x="63.9496%" y="212" width="0.6925%" height="15" fill="rgb(233,84,52)" fg:x="7665" fg:w="83"/><text x="64.1996%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (176 samples, 1.47%)</title><rect x="64.6504%" y="212" width="1.4684%" height="15" fill="rgb(207,117,47)" fg:x="7749" fg:w="176"/><text x="64.9004%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (68 samples, 0.57%)</title><rect x="66.1188%" y="212" width="0.5673%" height="15" fill="rgb(249,43,39)" fg:x="7925" fg:w="68"/><text x="66.3688%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (20 samples, 0.17%)</title><rect x="66.6861%" y="212" width="0.1669%" height="15" fill="rgb(209,38,44)" fg:x="7993" fg:w="20"/><text x="66.9361%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,811 samples, 31.80%)</title><rect x="37.7941%" y="196" width="31.7954%" height="15" fill="rgb(236,212,23)" fg:x="4530" fg:w="3811"/><text x="38.0441%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (328 samples, 2.74%)</title><rect x="66.8530%" y="212" width="2.7365%" height="15" fill="rgb(242,79,21)" fg:x="8013" fg:w="328"/><text x="67.1030%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,430 samples, 45.30%)</title><rect x="24.6871%" y="180" width="45.3029%" height="15" fill="rgb(211,96,35)" fg:x="2959" fg:w="5430"/><text x="24.9371%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (48 samples, 0.40%)</title><rect x="69.5895%" y="196" width="0.4005%" height="15" fill="rgb(253,215,40)" fg:x="8341" fg:w="48"/><text x="69.8395%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (70 samples, 0.58%)</title><rect x="70.9745%" y="196" width="0.5840%" height="15" fill="rgb(211,81,21)" fg:x="8507" fg:w="70"/><text x="71.2245%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (47 samples, 0.39%)</title><rect x="72.4345%" y="212" width="0.3921%" height="15" fill="rgb(208,190,38)" fg:x="8682" fg:w="47"/><text x="72.6845%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (579 samples, 4.83%)</title><rect x="70.0651%" y="180" width="4.8306%" height="15" fill="rgb(235,213,38)" fg:x="8398" fg:w="579"/><text x="70.3151%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (400 samples, 3.34%)</title><rect x="71.5585%" y="196" width="3.3372%" height="15" fill="rgb(237,122,38)" fg:x="8577" fg:w="400"/><text x="71.8085%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (248 samples, 2.07%)</title><rect x="72.8266%" y="212" width="2.0691%" height="15" fill="rgb(244,218,35)" fg:x="8729" fg:w="248"/><text x="73.0766%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (97 samples, 0.81%)</title><rect x="74.8957%" y="180" width="0.8093%" height="15" fill="rgb(240,68,47)" fg:x="8977" fg:w="97"/><text x="75.1457%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (40 samples, 0.33%)</title><rect x="75.3713%" y="196" width="0.3337%" height="15" fill="rgb(210,16,53)" fg:x="9034" fg:w="40"/><text x="75.6213%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (18 samples, 0.15%)</title><rect x="76.0137%" y="196" width="0.1502%" height="15" fill="rgb(235,124,12)" fg:x="9111" fg:w="18"/><text x="76.2637%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (106 samples, 0.88%)</title><rect x="75.7050%" y="180" width="0.8844%" height="15" fill="rgb(224,169,11)" fg:x="9074" fg:w="106"/><text x="75.9550%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (51 samples, 0.43%)</title><rect x="76.1639%" y="196" width="0.4255%" height="15" fill="rgb(250,166,2)" fg:x="9129" fg:w="51"/><text x="76.4139%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (176 samples, 1.47%)</title><rect x="76.5894%" y="180" width="1.4684%" height="15" fill="rgb(242,216,29)" fg:x="9180" fg:w="176"/><text x="76.8394%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.23%)</title><rect x="77.8325%" y="196" width="0.2253%" height="15" fill="rgb(230,116,27)" fg:x="9329" fg:w="27"/><text x="78.0825%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (71 samples, 0.59%)</title><rect x="78.0577%" y="180" width="0.5924%" height="15" fill="rgb(228,99,48)" fg:x="9356" fg:w="71"/><text x="78.3077%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (87 samples, 0.73%)</title><rect x="78.6501%" y="180" width="0.7258%" height="15" fill="rgb(253,11,6)" fg:x="9427" fg:w="87"/><text x="78.9001%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (122 samples, 1.02%)</title><rect x="81.2782%" y="196" width="1.0179%" height="15" fill="rgb(247,143,39)" fg:x="9742" fg:w="122"/><text x="81.5282%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.13%)</title><rect x="82.1625%" y="212" width="0.1335%" height="15" fill="rgb(236,97,10)" fg:x="9848" fg:w="16"/><text x="82.4125%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (364 samples, 3.04%)</title><rect x="79.3759%" y="180" width="3.0369%" height="15" fill="rgb(233,208,19)" fg:x="9514" fg:w="364"/><text x="79.6259%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (41 samples, 0.34%)</title><rect x="82.4128%" y="180" width="0.3421%" height="15" fill="rgb(216,164,2)" fg:x="9878" fg:w="41"/><text x="82.6628%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:117) (9,229 samples, 77.00%)</title><rect x="5.9069%" y="164" width="76.9982%" height="15" fill="rgb(220,129,5)" fg:x="708" fg:w="9229"/><text x="6.1569%" y="174.50">__init__ (kappybara/indexed_set.py:117)</text></g><g><title>__init__ (kappybara/indexed_set.py:119) (101 samples, 0.84%)</title><rect x="82.9051%" y="164" width="0.8426%" height="15" fill="rgb(242,17,10)" fg:x="9937" fg:w="101"/><text x="83.1551%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (25 samples, 0.21%)</title><rect x="83.5391%" y="180" width="0.2086%" height="15" fill="rgb(242,107,0)" fg:x="10013" fg:w="25"/><text x="83.7891%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,481 samples, 79.10%)</title><rect x="5.8318%" y="148" width="79.1006%" height="15" fill="rgb(251,28,31)" fg:x="699" fg:w="9481"/><text x="6.0818%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>__init__ (kappybara/indexed_set.py:122) (138 samples, 1.15%)</title><rect x="83.7811%" y="164" width="1.1513%" height="15" fill="rgb(233,223,10)" fg:x="10042" fg:w="138"/><text x="84.0311%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (20 samples, 0.17%)</title><rect x="84.7656%" y="180" width="0.1669%" height="15" fill="rgb(215,21,27)" fg:x="10160" fg:w="20"/><text x="85.0156%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:192) (19 samples, 0.16%)</title><rect x="85.0159%" y="164" width="0.1585%" height="15" fill="rgb(232,23,21)" fg:x="10190" fg:w="19"/><text x="85.2659%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:167) (45 samples, 0.38%)</title><rect x="88.9454%" y="212" width="0.3754%" height="15" fill="rgb(244,5,23)" fg:x="10661" fg:w="45"/><text x="89.1954%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:168) (154 samples, 1.28%)</title><rect x="89.3209%" y="212" width="1.2848%" height="15" fill="rgb(226,81,46)" fg:x="10706" fg:w="154"/><text x="89.5709%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="90.3971%" y="228" width="0.2086%" height="15" fill="rgb(247,70,30)" fg:x="10835" fg:w="25"/><text x="90.6471%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:171) (29 samples, 0.24%)</title><rect x="90.6975%" y="212" width="0.2419%" height="15" fill="rgb(212,68,19)" fg:x="10871" fg:w="29"/><text x="90.9475%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (755 samples, 6.30%)</title><rect x="85.1744%" y="164" width="6.2990%" height="15" fill="rgb(240,187,13)" fg:x="10209" fg:w="755"/><text x="85.4244%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:64) (545 samples, 4.55%)</title><rect x="86.9264%" y="180" width="4.5470%" height="15" fill="rgb(223,113,26)" fg:x="10419" fg:w="545"/><text x="87.1764%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (486 samples, 4.05%)</title><rect x="87.4187%" y="196" width="4.0547%" height="15" fill="rgb(206,192,2)" fg:x="10478" fg:w="486"/><text x="87.6687%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:172) (64 samples, 0.53%)</title><rect x="90.9394%" y="212" width="0.5340%" height="15" fill="rgb(241,108,4)" fg:x="10900" fg:w="64"/><text x="91.1894%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.22%)</title><rect x="92.9501%" y="180" width="0.2169%" height="15" fill="rgb(247,173,49)" fg:x="11141" fg:w="26"/><text x="93.2001%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:127) (15 samples, 0.13%)</title><rect x="93.3506%" y="180" width="0.1251%" height="15" fill="rgb(224,114,35)" fg:x="11189" fg:w="15"/><text x="93.6006%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (167 samples, 1.39%)</title><rect x="93.4757%" y="180" width="1.3933%" height="15" fill="rgb(245,159,27)" fg:x="11204" fg:w="167"/><text x="93.7257%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (42 samples, 0.35%)</title><rect x="94.5186%" y="196" width="0.3504%" height="15" fill="rgb(245,172,44)" fg:x="11329" fg:w="42"/><text x="94.7686%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (151 samples, 1.26%)</title><rect x="94.8690%" y="180" width="1.2598%" height="15" fill="rgb(236,23,11)" fg:x="11371" fg:w="151"/><text x="95.1190%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (24 samples, 0.20%)</title><rect x="95.9286%" y="196" width="0.2002%" height="15" fill="rgb(205,117,38)" fg:x="11498" fg:w="24"/><text x="96.1786%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (63 samples, 0.53%)</title><rect x="96.1288%" y="180" width="0.5256%" height="15" fill="rgb(237,72,25)" fg:x="11522" fg:w="63"/><text x="96.3788%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (183 samples, 1.53%)</title><rect x="96.6544%" y="180" width="1.5268%" height="15" fill="rgb(244,70,9)" fg:x="11585" fg:w="183"/><text x="96.9044%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.19%)</title><rect x="97.9893%" y="196" width="0.1919%" height="15" fill="rgb(217,125,39)" fg:x="11745" fg:w="23"/><text x="98.2393%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,658 samples, 13.83%)</title><rect x="84.9324%" y="148" width="13.8328%" height="15" fill="rgb(235,36,10)" fg:x="10180" fg:w="1658"/><text x="85.1824%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:196) (870 samples, 7.26%)</title><rect x="91.5068%" y="164" width="7.2585%" height="15" fill="rgb(251,123,47)" fg:x="10968" fg:w="870"/><text x="91.7568%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:136) (70 samples, 0.58%)</title><rect x="98.1812%" y="180" width="0.5840%" height="15" fill="rgb(221,13,13)" fg:x="11768" fg:w="70"/><text x="98.4312%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (11,880 samples, 99.12%)</title><rect x="0.5840%" y="100" width="99.1156%" height="15" fill="rgb(238,131,9)" fg:x="70" fg:w="11880"/><text x="0.8340%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,256 samples, 93.91%)</title><rect x="5.7901%" y="116" width="93.9096%" height="15" fill="rgb(211,50,8)" fg:x="694" fg:w="11256"/><text x="6.0401%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,254 samples, 93.89%)</title><rect x="5.8068%" y="132" width="93.8929%" height="15" fill="rgb(245,182,24)" fg:x="696" fg:w="11254"/><text x="6.0568%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (103 samples, 0.86%)</title><rect x="98.8403%" y="148" width="0.8593%" height="15" fill="rgb(242,14,37)" fg:x="11847" fg:w="103"/><text x="99.0903%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (11,942 samples, 99.63%)</title><rect x="0.0834%" y="68" width="99.6329%" height="15" fill="rgb(246,228,12)" fg:x="10" fg:w="11942"/><text x="0.3334%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,925 samples, 99.49%)</title><rect x="0.2253%" y="84" width="99.4911%" height="15" fill="rgb(213,55,15)" fg:x="27" fg:w="11925"/><text x="0.4753%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (13 samples, 0.11%)</title><rect x="99.7163%" y="68" width="0.1085%" height="15" fill="rgb(209,9,3)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.11%)</title><rect x="99.7163%" y="84" width="0.1085%" height="15" fill="rgb(230,59,30)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.11%)</title><rect x="99.7163%" y="100" width="0.1085%" height="15" fill="rgb(209,121,21)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.11%)</title><rect x="99.7163%" y="116" width="0.1085%" height="15" fill="rgb(220,109,13)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.11%)</title><rect x="99.7163%" y="132" width="0.1085%" height="15" fill="rgb(232,18,1)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.11%)</title><rect x="99.7163%" y="148" width="0.1085%" height="15" fill="rgb(215,41,42)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (13 samples, 0.11%)</title><rect x="99.7163%" y="164" width="0.1085%" height="15" fill="rgb(224,123,36)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.11%)</title><rect x="99.7163%" y="180" width="0.1085%" height="15" fill="rgb(240,125,3)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.11%)</title><rect x="99.7163%" y="196" width="0.1085%" height="15" fill="rgb(205,98,50)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.11%)</title><rect x="99.7163%" y="212" width="0.1085%" height="15" fill="rgb(205,185,37)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.11%)</title><rect x="99.7163%" y="228" width="0.1085%" height="15" fill="rgb(238,207,15)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.11%)</title><rect x="99.7163%" y="244" width="0.1085%" height="15" fill="rgb(213,199,42)" fg:x="11952" fg:w="13"/><text x="99.9663%" y="254.50"></text></g><g><title>all (11,986 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(235,201,11)" fg:x="0" fg:w="11986"/><text x="0.2500%" y="62.50"></text></g></svg></svg>