<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 7099d3e</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="8300"><g><title>__init__ (kappybara/mixture.py:50) (9 samples, 0.11%)</title><rect x="0.0482%" y="100" width="0.1084%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="9"/><text x="0.2982%" y="110.50"></text></g><g><title>instantiate (kappybara/mixture.py:58) (9 samples, 0.11%)</title><rect x="0.0482%" y="116" width="0.1084%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="9"/><text x="0.2982%" y="126.50"></text></g><g><title>heterodimerization_system (kappybara/examples.py:15) (11 samples, 0.13%)</title><rect x="0.0482%" y="84" width="0.1325%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="11"/><text x="0.2982%" y="94.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (13 samples, 0.16%)</title><rect x="0.0361%" y="68" width="0.1566%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="13"/><text x="0.2861%" y="78.50"></text></g><g><title>act (kappybara/system.py:63) (17 samples, 0.20%)</title><rect x="0.2530%" y="100" width="0.2048%" height="15" fill="rgb(208,68,35)" fg:x="21" fg:w="17"/><text x="0.5030%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (52 samples, 0.63%)</title><rect x="0.8554%" y="180" width="0.6265%" height="15" fill="rgb(232,128,0)" fg:x="71" fg:w="52"/><text x="1.1054%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (541 samples, 6.52%)</title><rect x="1.4819%" y="180" width="6.5181%" height="15" fill="rgb(207,160,47)" fg:x="123" fg:w="541"/><text x="1.7319%" y="190.50">embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.33%)</title><rect x="7.6747%" y="196" width="0.3253%" height="15" fill="rgb(228,23,34)" fg:x="637" fg:w="27"/><text x="7.9247%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.11%)</title><rect x="9.7229%" y="196" width="0.1084%" height="15" fill="rgb(218,30,26)" fg:x="807" fg:w="9"/><text x="9.9729%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (160 samples, 1.93%)</title><rect x="8.0000%" y="180" width="1.9277%" height="15" fill="rgb(220,122,19)" fg:x="664" fg:w="160"/><text x="8.2500%" y="190.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:267) (40 samples, 0.48%)</title><rect x="9.9398%" y="180" width="0.4819%" height="15" fill="rgb(250,228,42)" fg:x="825" fg:w="40"/><text x="10.1898%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (38 samples, 0.46%)</title><rect x="10.4217%" y="180" width="0.4578%" height="15" fill="rgb(240,193,28)" fg:x="865" fg:w="38"/><text x="10.6717%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (155 samples, 1.87%)</title><rect x="10.8795%" y="180" width="1.8675%" height="15" fill="rgb(216,20,37)" fg:x="903" fg:w="155"/><text x="11.1295%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.13%)</title><rect x="12.6145%" y="196" width="0.1325%" height="15" fill="rgb(206,188,39)" fg:x="1047" fg:w="11"/><text x="12.8645%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (127 samples, 1.53%)</title><rect x="12.7470%" y="180" width="1.5301%" height="15" fill="rgb(217,207,13)" fg:x="1058" fg:w="127"/><text x="12.9970%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (16 samples, 0.19%)</title><rect x="15.1325%" y="196" width="0.1928%" height="15" fill="rgb(231,73,38)" fg:x="1256" fg:w="16"/><text x="15.3825%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (71 samples, 0.86%)</title><rect x="15.3253%" y="196" width="0.8554%" height="15" fill="rgb(225,20,46)" fg:x="1272" fg:w="71"/><text x="15.5753%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (65 samples, 0.78%)</title><rect x="17.3012%" y="212" width="0.7831%" height="15" fill="rgb(210,31,41)" fg:x="1436" fg:w="65"/><text x="17.5512%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (42 samples, 0.51%)</title><rect x="19.0120%" y="228" width="0.5060%" height="15" fill="rgb(221,200,47)" fg:x="1578" fg:w="42"/><text x="19.2620%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (504 samples, 6.07%)</title><rect x="16.1928%" y="196" width="6.0723%" height="15" fill="rgb(226,26,5)" fg:x="1344" fg:w="504"/><text x="16.4428%" y="206.50">embeds_i..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (347 samples, 4.18%)</title><rect x="18.0843%" y="212" width="4.1807%" height="15" fill="rgb(249,33,26)" fg:x="1501" fg:w="347"/><text x="18.3343%" y="222.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (228 samples, 2.75%)</title><rect x="19.5181%" y="228" width="2.7470%" height="15" fill="rgb(235,183,28)" fg:x="1620" fg:w="228"/><text x="19.7681%" y="238.50">si..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (101 samples, 1.22%)</title><rect x="22.2651%" y="196" width="1.2169%" height="15" fill="rgb(221,5,38)" fg:x="1848" fg:w="101"/><text x="22.5151%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (44 samples, 0.53%)</title><rect x="24.0361%" y="212" width="0.5301%" height="15" fill="rgb(247,18,42)" fg:x="1995" fg:w="44"/><text x="24.2861%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (120 samples, 1.45%)</title><rect x="23.5181%" y="196" width="1.4458%" height="15" fill="rgb(241,131,45)" fg:x="1952" fg:w="120"/><text x="23.7681%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (33 samples, 0.40%)</title><rect x="24.5663%" y="212" width="0.3976%" height="15" fill="rgb(249,31,29)" fg:x="2039" fg:w="33"/><text x="24.8163%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (97 samples, 1.17%)</title><rect x="30.6627%" y="212" width="1.1687%" height="15" fill="rgb(225,111,53)" fg:x="2545" fg:w="97"/><text x="30.9127%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (11 samples, 0.13%)</title><rect x="32.2530%" y="228" width="0.1325%" height="15" fill="rgb(238,160,17)" fg:x="2677" fg:w="11"/><text x="32.5030%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (107 samples, 1.29%)</title><rect x="31.9277%" y="212" width="1.2892%" height="15" fill="rgb(214,148,48)" fg:x="2650" fg:w="107"/><text x="32.1777%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (69 samples, 0.83%)</title><rect x="32.3855%" y="228" width="0.8313%" height="15" fill="rgb(232,36,49)" fg:x="2688" fg:w="69"/><text x="32.6355%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.16%)</title><rect x="35.2410%" y="244" width="0.1566%" height="15" fill="rgb(209,103,24)" fg:x="2925" fg:w="13"/><text x="35.4910%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (280 samples, 3.37%)</title><rect x="33.7229%" y="228" width="3.3735%" height="15" fill="rgb(229,88,8)" fg:x="2799" fg:w="280"/><text x="33.9729%" y="238.50">bou..</text></g><g><title>__eq__ (kappybara/utils.py:33) (141 samples, 1.70%)</title><rect x="35.3976%" y="244" width="1.6988%" height="15" fill="rgb(213,181,19)" fg:x="2938" fg:w="141"/><text x="35.6476%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.36%)</title><rect x="36.7349%" y="260" width="0.3614%" height="15" fill="rgb(254,191,54)" fg:x="3049" fg:w="30"/><text x="36.9849%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (137 samples, 1.65%)</title><rect x="37.0964%" y="228" width="1.6506%" height="15" fill="rgb(241,83,37)" fg:x="3079" fg:w="137"/><text x="37.3464%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:61) (43 samples, 0.52%)</title><rect x="38.7470%" y="228" width="0.5181%" height="15" fill="rgb(233,36,39)" fg:x="3216" fg:w="43"/><text x="38.9970%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (557 samples, 6.71%)</title><rect x="33.2169%" y="212" width="6.7108%" height="15" fill="rgb(226,3,54)" fg:x="2757" fg:w="557"/><text x="33.4669%" y="222.50">embeds_in..</text></g><g><title>coupled (kappybara/pattern.py:66) (48 samples, 0.58%)</title><rect x="39.3494%" y="228" width="0.5783%" height="15" fill="rgb(245,192,40)" fg:x="3266" fg:w="48"/><text x="39.5994%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (72 samples, 0.87%)</title><rect x="39.9880%" y="212" width="0.8675%" height="15" fill="rgb(238,167,29)" fg:x="3319" fg:w="72"/><text x="40.2380%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (37 samples, 0.45%)</title><rect x="40.4096%" y="228" width="0.4458%" height="15" fill="rgb(232,182,51)" fg:x="3354" fg:w="37"/><text x="40.6596%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.11%)</title><rect x="40.7470%" y="244" width="0.1084%" height="15" fill="rgb(231,60,39)" fg:x="3382" fg:w="9"/><text x="40.9970%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (78 samples, 0.94%)</title><rect x="40.8554%" y="212" width="0.9398%" height="15" fill="rgb(208,69,12)" fg:x="3391" fg:w="78"/><text x="41.1054%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (41 samples, 0.49%)</title><rect x="41.3012%" y="228" width="0.4940%" height="15" fill="rgb(235,93,37)" fg:x="3428" fg:w="41"/><text x="41.5512%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.19%)</title><rect x="41.6024%" y="244" width="0.1928%" height="15" fill="rgb(213,116,39)" fg:x="3453" fg:w="16"/><text x="41.8524%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (29 samples, 0.35%)</title><rect x="41.7952%" y="212" width="0.3494%" height="15" fill="rgb(222,207,29)" fg:x="3469" fg:w="29"/><text x="42.0452%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (50 samples, 0.60%)</title><rect x="42.1446%" y="212" width="0.6024%" height="15" fill="rgb(206,96,30)" fg:x="3498" fg:w="50"/><text x="42.3946%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (26 samples, 0.31%)</title><rect x="42.7470%" y="212" width="0.3133%" height="15" fill="rgb(218,138,4)" fg:x="3548" fg:w="26"/><text x="42.9970%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,634 samples, 19.69%)</title><rect x="24.9639%" y="196" width="19.6867%" height="15" fill="rgb(250,191,14)" fg:x="2072" fg:w="1634"/><text x="25.2139%" y="206.50">embeds_in (kappybara/pattern.py..</text></g><g><title>sites (kappybara/pattern.py:113) (129 samples, 1.55%)</title><rect x="43.0964%" y="212" width="1.5542%" height="15" fill="rgb(239,60,40)" fg:x="3577" fg:w="129"/><text x="43.3464%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (2,566 samples, 30.92%)</title><rect x="14.2771%" y="180" width="30.9157%" height="15" fill="rgb(206,27,48)" fg:x="1185" fg:w="2566"/><text x="14.5271%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (45 samples, 0.54%)</title><rect x="44.6506%" y="196" width="0.5422%" height="15" fill="rgb(225,35,8)" fg:x="3706" fg:w="45"/><text x="44.9006%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (40 samples, 0.48%)</title><rect x="45.8795%" y="196" width="0.4819%" height="15" fill="rgb(250,213,24)" fg:x="3808" fg:w="40"/><text x="46.1295%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (23 samples, 0.28%)</title><rect x="47.0602%" y="212" width="0.2771%" height="15" fill="rgb(247,123,22)" fg:x="3906" fg:w="23"/><text x="47.3102%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (307 samples, 3.70%)</title><rect x="45.2651%" y="180" width="3.6988%" height="15" fill="rgb(231,138,38)" fg:x="3757" fg:w="307"/><text x="45.5151%" y="190.50">embe..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (216 samples, 2.60%)</title><rect x="46.3614%" y="196" width="2.6024%" height="15" fill="rgb(231,145,46)" fg:x="3848" fg:w="216"/><text x="46.6114%" y="206.50">__..</text></g><g><title>sites (kappybara/pattern.py:113) (135 samples, 1.63%)</title><rect x="47.3373%" y="212" width="1.6265%" height="15" fill="rgb(251,118,11)" fg:x="3929" fg:w="135"/><text x="47.5873%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (64 samples, 0.77%)</title><rect x="48.9639%" y="180" width="0.7711%" height="15" fill="rgb(217,147,25)" fg:x="4064" fg:w="64"/><text x="49.2139%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (22 samples, 0.27%)</title><rect x="49.4699%" y="196" width="0.2651%" height="15" fill="rgb(247,81,37)" fg:x="4106" fg:w="22"/><text x="49.7199%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (61 samples, 0.73%)</title><rect x="49.7349%" y="180" width="0.7349%" height="15" fill="rgb(209,12,38)" fg:x="4128" fg:w="61"/><text x="49.9849%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (42 samples, 0.51%)</title><rect x="49.9639%" y="196" width="0.5060%" height="15" fill="rgb(227,1,9)" fg:x="4147" fg:w="42"/><text x="50.2139%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (67 samples, 0.81%)</title><rect x="50.4699%" y="180" width="0.8072%" height="15" fill="rgb(248,47,43)" fg:x="4189" fg:w="67"/><text x="50.7199%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.11%)</title><rect x="51.1687%" y="196" width="0.1084%" height="15" fill="rgb(221,10,30)" fg:x="4247" fg:w="9"/><text x="51.4187%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (14 samples, 0.17%)</title><rect x="51.2771%" y="180" width="0.1687%" height="15" fill="rgb(210,229,1)" fg:x="4256" fg:w="14"/><text x="51.5271%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (36 samples, 0.43%)</title><rect x="51.4458%" y="180" width="0.4337%" height="15" fill="rgb(222,148,37)" fg:x="4270" fg:w="36"/><text x="51.6958%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (31 samples, 0.37%)</title><rect x="52.8313%" y="196" width="0.3735%" height="15" fill="rgb(234,67,33)" fg:x="4385" fg:w="31"/><text x="53.0813%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (112 samples, 1.35%)</title><rect x="51.8795%" y="180" width="1.3494%" height="15" fill="rgb(247,98,35)" fg:x="4306" fg:w="112"/><text x="52.1295%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (27 samples, 0.33%)</title><rect x="53.2530%" y="180" width="0.3253%" height="15" fill="rgb(247,138,52)" fg:x="4420" fg:w="27"/><text x="53.5030%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (34 samples, 0.41%)</title><rect x="53.5783%" y="180" width="0.4096%" height="15" fill="rgb(213,79,30)" fg:x="4447" fg:w="34"/><text x="53.8283%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:117) (4,432 samples, 53.40%)</title><rect x="0.6506%" y="164" width="53.3976%" height="15" fill="rgb(246,177,23)" fg:x="54" fg:w="4432"/><text x="0.9006%" y="174.50">__init__ (kappybara/indexed_set.py:117)</text></g><g><title>__init__ (kappybara/indexed_set.py:119) (100 samples, 1.20%)</title><rect x="54.0482%" y="164" width="1.2048%" height="15" fill="rgb(230,62,27)" fg:x="4486" fg:w="100"/><text x="54.2982%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (19 samples, 0.23%)</title><rect x="55.0241%" y="180" width="0.2289%" height="15" fill="rgb(216,154,8)" fg:x="4567" fg:w="19"/><text x="55.2741%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (9 samples, 0.11%)</title><rect x="56.2289%" y="180" width="0.1084%" height="15" fill="rgb(244,35,45)" fg:x="4667" fg:w="9"/><text x="56.4789%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (116 samples, 1.40%)</title><rect x="55.2651%" y="164" width="1.3976%" height="15" fill="rgb(251,115,12)" fg:x="4587" fg:w="116"/><text x="55.5151%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (27 samples, 0.33%)</title><rect x="56.3373%" y="180" width="0.3253%" height="15" fill="rgb(240,54,50)" fg:x="4676" fg:w="27"/><text x="56.5873%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (4,652 samples, 56.05%)</title><rect x="0.6386%" y="148" width="56.0482%" height="15" fill="rgb(233,84,52)" fg:x="53" fg:w="4652"/><text x="0.8886%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:192) (17 samples, 0.20%)</title><rect x="56.7108%" y="164" width="0.2048%" height="15" fill="rgb(207,117,47)" fg:x="4707" fg:w="17"/><text x="56.9608%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:167) (33 samples, 0.40%)</title><rect x="61.5783%" y="212" width="0.3976%" height="15" fill="rgb(249,43,39)" fg:x="5111" fg:w="33"/><text x="61.8283%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:168) (128 samples, 1.54%)</title><rect x="61.9759%" y="212" width="1.5422%" height="15" fill="rgb(209,38,44)" fg:x="5144" fg:w="128"/><text x="62.2259%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.28%)</title><rect x="63.2410%" y="228" width="0.2771%" height="15" fill="rgb(236,212,23)" fg:x="5249" fg:w="23"/><text x="63.4910%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (11 samples, 0.13%)</title><rect x="63.5181%" y="212" width="0.1325%" height="15" fill="rgb(242,79,21)" fg:x="5272" fg:w="11"/><text x="63.7681%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:171) (17 samples, 0.20%)</title><rect x="63.6506%" y="212" width="0.2048%" height="15" fill="rgb(211,96,35)" fg:x="5283" fg:w="17"/><text x="63.9006%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (648 samples, 7.81%)</title><rect x="56.9157%" y="164" width="7.8072%" height="15" fill="rgb(253,215,40)" fg:x="4724" fg:w="648"/><text x="57.1657%" y="174.50">create_inde..</text></g><g><title>__call__ (kappybara/indexed_set.py:64) (474 samples, 5.71%)</title><rect x="59.0120%" y="180" width="5.7108%" height="15" fill="rgb(211,81,21)" fg:x="4898" fg:w="474"/><text x="59.2620%" y="190.50">__call_..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (418 samples, 5.04%)</title><rect x="59.6867%" y="196" width="5.0361%" height="15" fill="rgb(208,190,38)" fg:x="4954" fg:w="418"/><text x="59.9367%" y="206.50">&lt;lambd..</text></g><g><title>lookup (kappybara/indexed_set.py:172) (72 samples, 0.87%)</title><rect x="63.8554%" y="212" width="0.8675%" height="15" fill="rgb(235,213,38)" fg:x="5300" fg:w="72"/><text x="64.1054%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (121 samples, 1.46%)</title><rect x="69.2651%" y="180" width="1.4578%" height="15" fill="rgb(237,122,38)" fg:x="5749" fg:w="121"/><text x="69.5151%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.37%)</title><rect x="70.7229%" y="180" width="0.3735%" height="15" fill="rgb(244,218,35)" fg:x="5870" fg:w="31"/><text x="70.9729%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:116) (324 samples, 3.90%)</title><rect x="71.0964%" y="180" width="3.9036%" height="15" fill="rgb(240,68,47)" fg:x="5901" fg:w="324"/><text x="71.3464%" y="190.50">__in..</text></g><g><title>__init__ (kappybara/indexed_set.py:117) (70 samples, 0.84%)</title><rect x="75.0000%" y="180" width="0.8434%" height="15" fill="rgb(210,16,53)" fg:x="6225" fg:w="70"/><text x="75.2500%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (548 samples, 6.60%)</title><rect x="75.8434%" y="180" width="6.6024%" height="15" fill="rgb(235,124,12)" fg:x="6295" fg:w="548"/><text x="76.0934%" y="190.50">__init__ ..</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (112 samples, 1.35%)</title><rect x="82.4458%" y="180" width="1.3494%" height="15" fill="rgb(224,169,11)" fg:x="6843" fg:w="112"/><text x="82.6958%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (366 samples, 4.41%)</title><rect x="83.7952%" y="180" width="4.4096%" height="15" fill="rgb(250,166,2)" fg:x="6955" fg:w="366"/><text x="84.0452%" y="190.50">__ini..</text></g><g><title>__init__ (kappybara/indexed_set.py:124) (44 samples, 0.53%)</title><rect x="88.2048%" y="180" width="0.5301%" height="15" fill="rgb(242,216,29)" fg:x="7321" fg:w="44"/><text x="88.4548%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:125) (27 samples, 0.33%)</title><rect x="88.7349%" y="180" width="0.3253%" height="15" fill="rgb(230,116,27)" fg:x="7365" fg:w="27"/><text x="88.9849%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (11 samples, 0.13%)</title><rect x="90.5181%" y="196" width="0.1325%" height="15" fill="rgb(228,99,48)" fg:x="7513" fg:w="11"/><text x="90.7681%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (151 samples, 1.82%)</title><rect x="89.1566%" y="180" width="1.8193%" height="15" fill="rgb(253,11,6)" fg:x="7400" fg:w="151"/><text x="89.4066%" y="190.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (27 samples, 0.33%)</title><rect x="90.6506%" y="196" width="0.3253%" height="15" fill="rgb(247,143,39)" fg:x="7524" fg:w="27"/><text x="90.9006%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (132 samples, 1.59%)</title><rect x="90.9759%" y="180" width="1.5904%" height="15" fill="rgb(236,97,10)" fg:x="7551" fg:w="132"/><text x="91.2259%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (24 samples, 0.29%)</title><rect x="92.2771%" y="196" width="0.2892%" height="15" fill="rgb(233,208,19)" fg:x="7659" fg:w="24"/><text x="92.5271%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (55 samples, 0.66%)</title><rect x="92.5663%" y="180" width="0.6627%" height="15" fill="rgb(216,164,2)" fg:x="7683" fg:w="55"/><text x="92.8163%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (165 samples, 1.99%)</title><rect x="93.2289%" y="180" width="1.9880%" height="15" fill="rgb(220,129,5)" fg:x="7738" fg:w="165"/><text x="93.4789%" y="190.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (26 samples, 0.31%)</title><rect x="94.9036%" y="196" width="0.3133%" height="15" fill="rgb(242,17,10)" fg:x="7877" fg:w="26"/><text x="95.1536%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (3,247 samples, 39.12%)</title><rect x="56.6867%" y="148" width="39.1205%" height="15" fill="rgb(242,107,0)" fg:x="4705" fg:w="3247"/><text x="56.9367%" y="158.50">track_component (kappybara/mixture.py:94)</text></g><g><title>create_index (kappybara/indexed_set.py:196) (2,576 samples, 31.04%)</title><rect x="64.7711%" y="164" width="31.0361%" height="15" fill="rgb(251,28,31)" fg:x="5376" fg:w="2576"/><text x="65.0211%" y="174.50">create_index (kappybara/indexed_set.py:196)</text></g><g><title>add (kappybara/indexed_set.py:136) (49 samples, 0.59%)</title><rect x="95.2169%" y="180" width="0.5904%" height="15" fill="rgb(233,223,10)" fg:x="7903" fg:w="49"/><text x="95.4669%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (8,269 samples, 99.63%)</title><rect x="0.1928%" y="68" width="99.6265%" height="15" fill="rgb(215,21,27)" fg:x="16" fg:w="8269"/><text x="0.4428%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (8,264 samples, 99.57%)</title><rect x="0.2530%" y="84" width="99.5663%" height="15" fill="rgb(232,23,21)" fg:x="21" fg:w="8264"/><text x="0.5030%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,247 samples, 99.36%)</title><rect x="0.4578%" y="100" width="99.3614%" height="15" fill="rgb(244,5,23)" fg:x="38" fg:w="8247"/><text x="0.7078%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (8,233 samples, 99.19%)</title><rect x="0.6265%" y="116" width="99.1928%" height="15" fill="rgb(226,81,46)" fg:x="52" fg:w="8233"/><text x="0.8765%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (8,233 samples, 99.19%)</title><rect x="0.6265%" y="132" width="99.1928%" height="15" fill="rgb(247,70,30)" fg:x="52" fg:w="8233"/><text x="0.8765%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (330 samples, 3.98%)</title><rect x="95.8434%" y="148" width="3.9759%" height="15" fill="rgb(212,68,19)" fg:x="7955" fg:w="330"/><text x="96.0934%" y="158.50">trac..</text></g><g><title>all (8,300 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="8300"/><text x="0.2500%" y="62.50"></text></g></svg></svg>