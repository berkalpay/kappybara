<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 7099d3e</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11881"><g><title>n_embeddings (kappybara/rule.py:185) (15 samples, 0.13%)</title><rect x="0.1683%" y="180" width="0.1263%" height="15" fill="rgb(227,0,7)" fg:x="20" fg:w="15"/><text x="0.4183%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (51 samples, 0.43%)</title><rect x="0.0589%" y="84" width="0.4293%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="51"/><text x="0.3089%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (51 samples, 0.43%)</title><rect x="0.0589%" y="100" width="0.4293%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="51"/><text x="0.3089%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (49 samples, 0.41%)</title><rect x="0.0758%" y="116" width="0.4124%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="49"/><text x="0.3258%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (45 samples, 0.38%)</title><rect x="0.1094%" y="132" width="0.3788%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="45"/><text x="0.3594%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (45 samples, 0.38%)</title><rect x="0.1094%" y="148" width="0.3788%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="45"/><text x="0.3594%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (44 samples, 0.37%)</title><rect x="0.1178%" y="164" width="0.3703%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="44"/><text x="0.3678%" y="174.50"></text></g><g><title>act (kappybara/system.py:62) (12 samples, 0.10%)</title><rect x="0.4966%" y="100" width="0.1010%" height="15" fill="rgb(228,23,34)" fg:x="59" fg:w="12"/><text x="0.7466%" y="110.50"></text></g><g><title>select (kappybara/rule.py:104) (15 samples, 0.13%)</title><rect x="0.6228%" y="116" width="0.1263%" height="15" fill="rgb(218,30,26)" fg:x="74" fg:w="15"/><text x="0.8728%" y="126.50"></text></g><g><title>select (kappybara/rule.py:218) (21 samples, 0.18%)</title><rect x="0.7912%" y="116" width="0.1768%" height="15" fill="rgb(220,122,19)" fg:x="94" fg:w="21"/><text x="1.0412%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (52 samples, 0.44%)</title><rect x="0.5976%" y="100" width="0.4377%" height="15" fill="rgb(250,228,42)" fg:x="71" fg:w="52"/><text x="0.8476%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (20 samples, 0.17%)</title><rect x="1.1279%" y="164" width="0.1683%" height="15" fill="rgb(240,193,28)" fg:x="134" fg:w="20"/><text x="1.3779%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (43 samples, 0.36%)</title><rect x="1.1279%" y="148" width="0.3619%" height="15" fill="rgb(216,20,37)" fg:x="134" fg:w="43"/><text x="1.3779%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (23 samples, 0.19%)</title><rect x="1.2962%" y="164" width="0.1936%" height="15" fill="rgb(206,188,39)" fg:x="154" fg:w="23"/><text x="1.5462%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (44 samples, 0.37%)</title><rect x="1.5403%" y="164" width="0.3703%" height="15" fill="rgb(217,207,13)" fg:x="183" fg:w="44"/><text x="1.7903%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (21 samples, 0.18%)</title><rect x="2.1631%" y="180" width="0.1768%" height="15" fill="rgb(231,73,38)" fg:x="257" fg:w="21"/><text x="2.4131%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (27 samples, 0.23%)</title><rect x="2.3399%" y="180" width="0.2273%" height="15" fill="rgb(225,20,46)" fg:x="278" fg:w="27"/><text x="2.5899%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (14 samples, 0.12%)</title><rect x="2.5671%" y="180" width="0.1178%" height="15" fill="rgb(210,31,41)" fg:x="305" fg:w="14"/><text x="2.8171%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (31 samples, 0.26%)</title><rect x="2.6850%" y="180" width="0.2609%" height="15" fill="rgb(221,200,47)" fg:x="319" fg:w="31"/><text x="2.9350%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (190 samples, 1.60%)</title><rect x="1.4898%" y="148" width="1.5992%" height="15" fill="rgb(226,26,5)" fg:x="177" fg:w="190"/><text x="1.7398%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:196) (138 samples, 1.16%)</title><rect x="1.9274%" y="164" width="1.1615%" height="15" fill="rgb(249,33,26)" fg:x="229" fg:w="138"/><text x="2.1774%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:136) (17 samples, 0.14%)</title><rect x="2.9459%" y="180" width="0.1431%" height="15" fill="rgb(235,183,28)" fg:x="350" fg:w="17"/><text x="3.1959%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (79 samples, 0.66%)</title><rect x="3.1395%" y="148" width="0.6649%" height="15" fill="rgb(221,5,38)" fg:x="373" fg:w="79"/><text x="3.3895%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.13%)</title><rect x="3.6697%" y="164" width="0.1347%" height="15" fill="rgb(247,18,42)" fg:x="436" fg:w="16"/><text x="3.9197%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (25 samples, 0.21%)</title><rect x="3.8044%" y="148" width="0.2104%" height="15" fill="rgb(241,131,45)" fg:x="452" fg:w="25"/><text x="4.0544%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (65 samples, 0.55%)</title><rect x="4.6713%" y="180" width="0.5471%" height="15" fill="rgb(249,31,29)" fg:x="555" fg:w="65"/><text x="4.9213%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (35 samples, 0.29%)</title><rect x="4.9238%" y="196" width="0.2946%" height="15" fill="rgb(225,111,53)" fg:x="585" fg:w="35"/><text x="5.1738%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (542 samples, 4.56%)</title><rect x="1.0353%" y="116" width="4.5619%" height="15" fill="rgb(238,160,17)" fg:x="123" fg:w="542"/><text x="1.2853%" y="126.50">apply..</text></g><g><title>_remove_edge (kappybara/mixture.py:191) (535 samples, 4.50%)</title><rect x="1.0942%" y="132" width="4.5030%" height="15" fill="rgb(214,148,48)" fg:x="130" fg:w="535"/><text x="1.3442%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (184 samples, 1.55%)</title><rect x="4.0485%" y="148" width="1.5487%" height="15" fill="rgb(232,36,49)" fg:x="481" fg:w="184"/><text x="4.2985%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (164 samples, 1.38%)</title><rect x="4.2168%" y="164" width="1.3804%" height="15" fill="rgb(209,103,24)" fg:x="501" fg:w="164"/><text x="4.4668%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (37 samples, 0.31%)</title><rect x="5.2858%" y="180" width="0.3114%" height="15" fill="rgb(229,88,8)" fg:x="628" fg:w="37"/><text x="5.5358%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (81 samples, 0.68%)</title><rect x="6.0853%" y="180" width="0.6818%" height="15" fill="rgb(213,181,19)" fg:x="723" fg:w="81"/><text x="6.3353%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.11%)</title><rect x="14.6284%" y="196" width="0.1094%" height="15" fill="rgb(254,191,54)" fg:x="1738" fg:w="13"/><text x="14.8784%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (986 samples, 8.30%)</title><rect x="6.7671%" y="180" width="8.2990%" height="15" fill="rgb(241,83,37)" fg:x="804" fg:w="986"/><text x="7.0171%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.33%)</title><rect x="14.7378%" y="196" width="0.3283%" height="15" fill="rgb(233,36,39)" fg:x="1751" fg:w="39"/><text x="14.9878%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.13%)</title><rect x="17.6248%" y="196" width="0.1347%" height="15" fill="rgb(226,3,54)" fg:x="2094" fg:w="16"/><text x="17.8748%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (353 samples, 2.97%)</title><rect x="15.0661%" y="180" width="2.9711%" height="15" fill="rgb(245,192,40)" fg:x="1790" fg:w="353"/><text x="15.3161%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="17.7594%" y="196" width="0.2778%" height="15" fill="rgb(238,167,29)" fg:x="2110" fg:w="33"/><text x="18.0094%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (86 samples, 0.72%)</title><rect x="18.0625%" y="180" width="0.7238%" height="15" fill="rgb(232,182,51)" fg:x="2146" fg:w="86"/><text x="18.3125%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (63 samples, 0.53%)</title><rect x="18.7863%" y="180" width="0.5303%" height="15" fill="rgb(231,60,39)" fg:x="2232" fg:w="63"/><text x="19.0363%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.15%)</title><rect x="21.6480%" y="196" width="0.1515%" height="15" fill="rgb(208,69,12)" fg:x="2572" fg:w="18"/><text x="21.8980%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (337 samples, 2.84%)</title><rect x="19.3166%" y="180" width="2.8365%" height="15" fill="rgb(235,93,37)" fg:x="2295" fg:w="337"/><text x="19.5666%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.35%)</title><rect x="21.7995%" y="196" width="0.3535%" height="15" fill="rgb(213,116,39)" fg:x="2590" fg:w="42"/><text x="22.0495%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (295 samples, 2.48%)</title><rect x="22.1530%" y="180" width="2.4830%" height="15" fill="rgb(222,207,29)" fg:x="2632" fg:w="295"/><text x="22.4030%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (24 samples, 0.20%)</title><rect x="25.8396%" y="196" width="0.2020%" height="15" fill="rgb(206,96,30)" fg:x="3070" fg:w="24"/><text x="26.0896%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (97 samples, 0.82%)</title><rect x="26.0416%" y="196" width="0.8164%" height="15" fill="rgb(218,138,4)" fg:x="3094" fg:w="97"/><text x="26.2916%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (132 samples, 1.11%)</title><rect x="28.4740%" y="212" width="1.1110%" height="15" fill="rgb(250,191,14)" fg:x="3383" fg:w="132"/><text x="28.7240%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (116 samples, 0.98%)</title><rect x="31.0412%" y="228" width="0.9763%" height="15" fill="rgb(239,60,40)" fg:x="3688" fg:w="116"/><text x="31.2912%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (973 samples, 8.19%)</title><rect x="26.8917%" y="196" width="8.1895%" height="15" fill="rgb(206,27,48)" fg:x="3195" fg:w="973"/><text x="27.1417%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (653 samples, 5.50%)</title><rect x="29.5851%" y="212" width="5.4962%" height="15" fill="rgb(225,35,8)" fg:x="3515" fg:w="653"/><text x="29.8351%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (364 samples, 3.06%)</title><rect x="32.0175%" y="228" width="3.0637%" height="15" fill="rgb(250,213,24)" fg:x="3804" fg:w="364"/><text x="32.2675%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (118 samples, 0.99%)</title><rect x="35.0812%" y="196" width="0.9932%" height="15" fill="rgb(247,123,22)" fg:x="4168" fg:w="118"/><text x="35.3312%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (14 samples, 0.12%)</title><rect x="37.0171%" y="212" width="0.1178%" height="15" fill="rgb(231,138,38)" fg:x="4398" fg:w="14"/><text x="37.2671%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (201 samples, 1.69%)</title><rect x="36.1502%" y="196" width="1.6918%" height="15" fill="rgb(231,145,46)" fg:x="4295" fg:w="201"/><text x="36.4002%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (84 samples, 0.71%)</title><rect x="37.1349%" y="212" width="0.7070%" height="15" fill="rgb(251,118,11)" fg:x="4412" fg:w="84"/><text x="37.3849%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (189 samples, 1.59%)</title><rect x="46.1072%" y="212" width="1.5908%" height="15" fill="rgb(217,147,25)" fg:x="5478" fg:w="189"/><text x="46.3572%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (15 samples, 0.13%)</title><rect x="48.2030%" y="228" width="0.1263%" height="15" fill="rgb(247,81,37)" fg:x="5727" fg:w="15"/><text x="48.4530%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (166 samples, 1.40%)</title><rect x="47.7822%" y="212" width="1.3972%" height="15" fill="rgb(209,12,38)" fg:x="5677" fg:w="166"/><text x="48.0322%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (101 samples, 0.85%)</title><rect x="48.3293%" y="228" width="0.8501%" height="15" fill="rgb(227,1,9)" fg:x="5742" fg:w="101"/><text x="48.5793%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (23 samples, 0.19%)</title><rect x="49.9874%" y="228" width="0.1936%" height="15" fill="rgb(248,47,43)" fg:x="5939" fg:w="23"/><text x="50.2374%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:59) (433 samples, 3.64%)</title><rect x="50.1810%" y="228" width="3.6445%" height="15" fill="rgb(221,10,30)" fg:x="5962" fg:w="433"/><text x="50.4310%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (231 samples, 1.94%)</title><rect x="51.8812%" y="244" width="1.9443%" height="15" fill="rgb(210,229,1)" fg:x="6164" fg:w="231"/><text x="52.1312%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.31%)</title><rect x="53.5140%" y="260" width="0.3114%" height="15" fill="rgb(222,148,37)" fg:x="6358" fg:w="37"/><text x="53.7640%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (266 samples, 2.24%)</title><rect x="53.8254%" y="228" width="2.2389%" height="15" fill="rgb(234,67,33)" fg:x="6395" fg:w="266"/><text x="54.0754%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (94 samples, 0.79%)</title><rect x="56.0643%" y="228" width="0.7912%" height="15" fill="rgb(247,98,35)" fg:x="6661" fg:w="94"/><text x="56.3143%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (960 samples, 8.08%)</title><rect x="49.1794%" y="212" width="8.0801%" height="15" fill="rgb(247,138,52)" fg:x="5843" fg:w="960"/><text x="49.4294%" y="222.50">embeds_in (..</text></g><g><title>coupled (kappybara/pattern.py:66) (41 samples, 0.35%)</title><rect x="56.9144%" y="228" width="0.3451%" height="15" fill="rgb(213,79,30)" fg:x="6762" fg:w="41"/><text x="57.1644%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (23 samples, 0.19%)</title><rect x="57.2763%" y="212" width="0.1936%" height="15" fill="rgb(246,177,23)" fg:x="6805" fg:w="23"/><text x="57.5263%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.16%)</title><rect x="58.2274%" y="228" width="0.1599%" height="15" fill="rgb(230,62,27)" fg:x="6918" fg:w="19"/><text x="58.4774%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (279 samples, 2.35%)</title><rect x="57.4699%" y="212" width="2.3483%" height="15" fill="rgb(216,154,8)" fg:x="6828" fg:w="279"/><text x="57.7199%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (170 samples, 1.43%)</title><rect x="58.3873%" y="228" width="1.4309%" height="15" fill="rgb(244,35,45)" fg:x="6937" fg:w="170"/><text x="58.6373%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.20%)</title><rect x="59.6162%" y="244" width="0.2020%" height="15" fill="rgb(251,115,12)" fg:x="7083" fg:w="24"/><text x="59.8662%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.13%)</title><rect x="61.0134%" y="228" width="0.1347%" height="15" fill="rgb(240,54,50)" fg:x="7249" fg:w="16"/><text x="61.2634%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (438 samples, 3.69%)</title><rect x="59.8182%" y="212" width="3.6866%" height="15" fill="rgb(233,84,52)" fg:x="7107" fg:w="438"/><text x="60.0682%" y="222.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (280 samples, 2.36%)</title><rect x="61.1481%" y="228" width="2.3567%" height="15" fill="rgb(207,117,47)" fg:x="7265" fg:w="280"/><text x="61.3981%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (68 samples, 0.57%)</title><rect x="62.9324%" y="244" width="0.5723%" height="15" fill="rgb(249,43,39)" fg:x="7477" fg:w="68"/><text x="63.1824%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (74 samples, 0.62%)</title><rect x="63.5048%" y="212" width="0.6228%" height="15" fill="rgb(209,38,44)" fg:x="7545" fg:w="74"/><text x="63.7548%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (172 samples, 1.45%)</title><rect x="64.1276%" y="212" width="1.4477%" height="15" fill="rgb(236,212,23)" fg:x="7619" fg:w="172"/><text x="64.3776%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (77 samples, 0.65%)</title><rect x="65.5753%" y="212" width="0.6481%" height="15" fill="rgb(242,79,21)" fg:x="7791" fg:w="77"/><text x="65.8253%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (27 samples, 0.23%)</title><rect x="66.2234%" y="212" width="0.2273%" height="15" fill="rgb(211,96,35)" fg:x="7868" fg:w="27"/><text x="66.4734%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,689 samples, 31.05%)</title><rect x="37.8419%" y="196" width="31.0496%" height="15" fill="rgb(253,215,40)" fg:x="4496" fg:w="3689"/><text x="38.0919%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (290 samples, 2.44%)</title><rect x="66.4506%" y="212" width="2.4409%" height="15" fill="rgb(211,81,21)" fg:x="7895" fg:w="290"/><text x="66.7006%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,303 samples, 44.63%)</title><rect x="24.6360%" y="180" width="44.6343%" height="15" fill="rgb(208,190,38)" fg:x="2927" fg:w="5303"/><text x="24.8860%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (45 samples, 0.38%)</title><rect x="68.8915%" y="196" width="0.3788%" height="15" fill="rgb(235,213,38)" fg:x="8185" fg:w="45"/><text x="69.1415%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (68 samples, 0.57%)</title><rect x="70.3897%" y="196" width="0.5723%" height="15" fill="rgb(237,122,38)" fg:x="8363" fg:w="68"/><text x="70.6397%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (62 samples, 0.52%)</title><rect x="71.9300%" y="212" width="0.5218%" height="15" fill="rgb(244,218,35)" fg:x="8546" fg:w="62"/><text x="72.1800%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (604 samples, 5.08%)</title><rect x="69.3713%" y="180" width="5.0837%" height="15" fill="rgb(240,68,47)" fg:x="8242" fg:w="604"/><text x="69.6213%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (415 samples, 3.49%)</title><rect x="70.9620%" y="196" width="3.4930%" height="15" fill="rgb(210,16,53)" fg:x="8431" fg:w="415"/><text x="71.2120%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (238 samples, 2.00%)</title><rect x="72.4518%" y="212" width="2.0032%" height="15" fill="rgb(235,124,12)" fg:x="8608" fg:w="238"/><text x="72.7018%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (94 samples, 0.79%)</title><rect x="74.4550%" y="180" width="0.7912%" height="15" fill="rgb(224,169,11)" fg:x="8846" fg:w="94"/><text x="74.7050%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (35 samples, 0.29%)</title><rect x="74.9516%" y="196" width="0.2946%" height="15" fill="rgb(250,166,2)" fg:x="8905" fg:w="35"/><text x="75.2016%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (20 samples, 0.17%)</title><rect x="75.5408%" y="196" width="0.1683%" height="15" fill="rgb(242,216,29)" fg:x="8975" fg:w="20"/><text x="75.7908%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (96 samples, 0.81%)</title><rect x="75.2462%" y="180" width="0.8080%" height="15" fill="rgb(230,116,27)" fg:x="8940" fg:w="96"/><text x="75.4962%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (41 samples, 0.35%)</title><rect x="75.7091%" y="196" width="0.3451%" height="15" fill="rgb(228,99,48)" fg:x="8995" fg:w="41"/><text x="75.9591%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (231 samples, 1.94%)</title><rect x="76.0542%" y="180" width="1.9443%" height="15" fill="rgb(253,11,6)" fg:x="9036" fg:w="231"/><text x="76.3042%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="77.8301%" y="196" width="0.1683%" height="15" fill="rgb(247,143,39)" fg:x="9247" fg:w="20"/><text x="78.0801%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (58 samples, 0.49%)</title><rect x="77.9985%" y="180" width="0.4882%" height="15" fill="rgb(236,97,10)" fg:x="9267" fg:w="58"/><text x="78.2485%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (80 samples, 0.67%)</title><rect x="78.4867%" y="180" width="0.6733%" height="15" fill="rgb(233,208,19)" fg:x="9325" fg:w="80"/><text x="78.7367%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (134 samples, 1.13%)</title><rect x="81.0706%" y="196" width="1.1279%" height="15" fill="rgb(216,164,2)" fg:x="9632" fg:w="134"/><text x="81.3206%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.10%)</title><rect x="82.0975%" y="212" width="0.1010%" height="15" fill="rgb(220,129,5)" fg:x="9754" fg:w="12"/><text x="82.3475%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (372 samples, 3.13%)</title><rect x="79.1600%" y="180" width="3.1310%" height="15" fill="rgb(242,17,10)" fg:x="9405" fg:w="372"/><text x="79.4100%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (38 samples, 0.32%)</title><rect x="82.3079%" y="180" width="0.3198%" height="15" fill="rgb(242,107,0)" fg:x="9779" fg:w="38"/><text x="82.5579%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:117) (9,156 samples, 77.06%)</title><rect x="5.7571%" y="164" width="77.0642%" height="15" fill="rgb(251,28,31)" fg:x="684" fg:w="9156"/><text x="6.0071%" y="174.50">__init__ (kappybara/indexed_set.py:117)</text></g><g><title>embeddings (kappybara/pattern.py:290) (16 samples, 0.13%)</title><rect x="82.6866%" y="180" width="0.1347%" height="15" fill="rgb(233,223,10)" fg:x="9824" fg:w="16"/><text x="82.9366%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (113 samples, 0.95%)</title><rect x="82.8213%" y="164" width="0.9511%" height="15" fill="rgb(215,21,27)" fg:x="9840" fg:w="113"/><text x="83.0713%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (25 samples, 0.21%)</title><rect x="83.5620%" y="180" width="0.2104%" height="15" fill="rgb(232,23,21)" fg:x="9928" fg:w="25"/><text x="83.8120%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:122) (135 samples, 1.14%)</title><rect x="83.8061%" y="164" width="1.1363%" height="15" fill="rgb(244,5,23)" fg:x="9957" fg:w="135"/><text x="84.0561%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (22 samples, 0.19%)</title><rect x="84.7572%" y="180" width="0.1852%" height="15" fill="rgb(226,81,46)" fg:x="10070" fg:w="22"/><text x="85.0072%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,422 samples, 79.30%)</title><rect x="5.6645%" y="148" width="79.3031%" height="15" fill="rgb(247,70,30)" fg:x="673" fg:w="9422"/><text x="5.9145%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:192) (23 samples, 0.19%)</title><rect x="85.0518%" y="164" width="0.1936%" height="15" fill="rgb(212,68,19)" fg:x="10105" fg:w="23"/><text x="85.3018%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:167) (32 samples, 0.27%)</title><rect x="89.1592%" y="212" width="0.2693%" height="15" fill="rgb(240,187,13)" fg:x="10593" fg:w="32"/><text x="89.4092%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:168) (126 samples, 1.06%)</title><rect x="89.4285%" y="212" width="1.0605%" height="15" fill="rgb(223,113,26)" fg:x="10625" fg:w="126"/><text x="89.6785%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.16%)</title><rect x="90.3291%" y="228" width="0.1599%" height="15" fill="rgb(206,192,2)" fg:x="10732" fg:w="19"/><text x="90.5791%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:171) (25 samples, 0.21%)</title><rect x="90.5648%" y="212" width="0.2104%" height="15" fill="rgb(241,108,4)" fg:x="10760" fg:w="25"/><text x="90.8148%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:193) (724 samples, 6.09%)</title><rect x="85.2453%" y="164" width="6.0938%" height="15" fill="rgb(247,173,49)" fg:x="10128" fg:w="724"/><text x="85.4953%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:64) (516 samples, 4.34%)</title><rect x="86.9960%" y="180" width="4.3431%" height="15" fill="rgb(224,114,35)" fg:x="10336" fg:w="516"/><text x="87.2460%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (462 samples, 3.89%)</title><rect x="87.4506%" y="196" width="3.8886%" height="15" fill="rgb(245,159,27)" fg:x="10390" fg:w="462"/><text x="87.7006%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:172) (67 samples, 0.56%)</title><rect x="90.7752%" y="212" width="0.5639%" height="15" fill="rgb(245,172,44)" fg:x="10785" fg:w="67"/><text x="91.0252%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="92.8962%" y="180" width="0.2104%" height="15" fill="rgb(236,23,11)" fg:x="11037" fg:w="25"/><text x="93.1462%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:127) (16 samples, 0.13%)</title><rect x="93.3086%" y="180" width="0.1347%" height="15" fill="rgb(205,117,38)" fg:x="11086" fg:w="16"/><text x="93.5586%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:128) (142 samples, 1.20%)</title><rect x="93.4433%" y="180" width="1.1952%" height="15" fill="rgb(237,72,25)" fg:x="11102" fg:w="142"/><text x="93.6933%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (38 samples, 0.32%)</title><rect x="94.3187%" y="196" width="0.3198%" height="15" fill="rgb(244,70,9)" fg:x="11206" fg:w="38"/><text x="94.5687%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (167 samples, 1.41%)</title><rect x="94.6385%" y="180" width="1.4056%" height="15" fill="rgb(217,125,39)" fg:x="11244" fg:w="167"/><text x="94.8885%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.19%)</title><rect x="95.8505%" y="196" width="0.1936%" height="15" fill="rgb(235,36,10)" fg:x="11388" fg:w="23"/><text x="96.1005%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:132) (57 samples, 0.48%)</title><rect x="96.0441%" y="180" width="0.4798%" height="15" fill="rgb(251,123,47)" fg:x="11411" fg:w="57"/><text x="96.2941%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:133) (192 samples, 1.62%)</title><rect x="96.5239%" y="180" width="1.6160%" height="15" fill="rgb(221,13,13)" fg:x="11468" fg:w="192"/><text x="96.7739%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (32 samples, 0.27%)</title><rect x="97.8705%" y="196" width="0.2693%" height="15" fill="rgb(238,131,9)" fg:x="11628" fg:w="32"/><text x="98.1205%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,639 samples, 13.80%)</title><rect x="84.9676%" y="148" width="13.7951%" height="15" fill="rgb(211,50,8)" fg:x="10095" fg:w="1639"/><text x="85.2176%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:196) (875 samples, 7.36%)</title><rect x="91.3980%" y="164" width="7.3647%" height="15" fill="rgb(245,182,24)" fg:x="10859" fg:w="875"/><text x="91.6480%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:136) (74 samples, 0.62%)</title><rect x="98.1399%" y="180" width="0.6228%" height="15" fill="rgb(242,14,37)" fg:x="11660" fg:w="74"/><text x="98.3899%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,832 samples, 99.59%)</title><rect x="0.0589%" y="68" width="99.5876%" height="15" fill="rgb(246,228,12)" fg:x="7" fg:w="11832"/><text x="0.3089%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,781 samples, 99.16%)</title><rect x="0.4882%" y="84" width="99.1583%" height="15" fill="rgb(213,55,15)" fg:x="58" fg:w="11781"/><text x="0.7382%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (11,716 samples, 98.61%)</title><rect x="1.0353%" y="100" width="98.6112%" height="15" fill="rgb(209,9,3)" fg:x="123" fg:w="11716"/><text x="1.2853%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,170 samples, 94.02%)</title><rect x="5.6308%" y="116" width="94.0157%" height="15" fill="rgb(230,59,30)" fg:x="669" fg:w="11170"/><text x="5.8808%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,168 samples, 94.00%)</title><rect x="5.6477%" y="132" width="93.9988%" height="15" fill="rgb(209,121,21)" fg:x="671" fg:w="11168"/><text x="5.8977%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (97 samples, 0.82%)</title><rect x="98.8301%" y="148" width="0.8164%" height="15" fill="rgb(220,109,13)" fg:x="11742" fg:w="97"/><text x="99.0801%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (14 samples, 0.12%)</title><rect x="99.6465%" y="68" width="0.1178%" height="15" fill="rgb(232,18,1)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.12%)</title><rect x="99.6465%" y="84" width="0.1178%" height="15" fill="rgb(215,41,42)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.12%)</title><rect x="99.6465%" y="100" width="0.1178%" height="15" fill="rgb(224,123,36)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.12%)</title><rect x="99.6465%" y="116" width="0.1178%" height="15" fill="rgb(240,125,3)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.12%)</title><rect x="99.6465%" y="132" width="0.1178%" height="15" fill="rgb(205,98,50)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.12%)</title><rect x="99.6465%" y="148" width="0.1178%" height="15" fill="rgb(205,185,37)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.12%)</title><rect x="99.6465%" y="164" width="0.1178%" height="15" fill="rgb(238,207,15)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.12%)</title><rect x="99.6465%" y="180" width="0.1178%" height="15" fill="rgb(213,199,42)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.12%)</title><rect x="99.6465%" y="196" width="0.1178%" height="15" fill="rgb(235,201,11)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.12%)</title><rect x="99.6465%" y="212" width="0.1178%" height="15" fill="rgb(207,46,11)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.12%)</title><rect x="99.6465%" y="228" width="0.1178%" height="15" fill="rgb(241,35,35)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.12%)</title><rect x="99.6465%" y="244" width="0.1178%" height="15" fill="rgb(243,32,47)" fg:x="11839" fg:w="14"/><text x="99.8965%" y="254.50"></text></g><g><title>all (11,881 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,202,23)" fg:x="0" fg:w="11881"/><text x="0.2500%" y="62.50"></text></g></svg></svg>