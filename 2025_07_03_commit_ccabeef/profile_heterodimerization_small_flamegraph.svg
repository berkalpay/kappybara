<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit ccabeef</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="8025"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (15 samples, 0.19%)</title><rect x="0.0000%" y="68" width="0.1869%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="15"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.19%)</title><rect x="0.0000%" y="84" width="0.1869%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="15"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.19%)</title><rect x="0.0000%" y="100" width="0.1869%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="15"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.19%)</title><rect x="0.0000%" y="116" width="0.1869%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="15"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.19%)</title><rect x="0.0000%" y="132" width="0.1869%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="15"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.19%)</title><rect x="0.0000%" y="148" width="0.1869%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="15"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.17%)</title><rect x="0.0125%" y="164" width="0.1745%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="14"/><text x="0.2625%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.17%)</title><rect x="0.0125%" y="180" width="0.1745%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="14"/><text x="0.2625%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.17%)</title><rect x="0.0125%" y="196" width="0.1745%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="14"/><text x="0.2625%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.17%)</title><rect x="0.0125%" y="212" width="0.1745%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="14"/><text x="0.2625%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.17%)</title><rect x="0.0125%" y="228" width="0.1745%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="14"/><text x="0.2625%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.17%)</title><rect x="0.0125%" y="244" width="0.1745%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="14"/><text x="0.2625%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (44 samples, 0.55%)</title><rect x="0.8723%" y="180" width="0.5483%" height="15" fill="rgb(216,20,37)" fg:x="70" fg:w="44"/><text x="1.1223%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (520 samples, 6.48%)</title><rect x="1.4206%" y="180" width="6.4798%" height="15" fill="rgb(206,188,39)" fg:x="114" fg:w="520"/><text x="1.6706%" y="190.50">embeddin..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.11%)</title><rect x="7.7882%" y="196" width="0.1121%" height="15" fill="rgb(217,207,13)" fg:x="625" fg:w="9"/><text x="8.0382%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.21%)</title><rect x="10.1308%" y="196" width="0.2118%" height="15" fill="rgb(231,73,38)" fg:x="813" fg:w="17"/><text x="10.3808%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (211 samples, 2.63%)</title><rect x="7.9003%" y="180" width="2.6293%" height="15" fill="rgb(225,20,46)" fg:x="634" fg:w="211"/><text x="8.1503%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.19%)</title><rect x="10.3427%" y="196" width="0.1869%" height="15" fill="rgb(210,31,41)" fg:x="830" fg:w="15"/><text x="10.5927%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (48 samples, 0.60%)</title><rect x="10.5545%" y="180" width="0.5981%" height="15" fill="rgb(221,200,47)" fg:x="847" fg:w="48"/><text x="10.8045%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (43 samples, 0.54%)</title><rect x="11.1526%" y="180" width="0.5358%" height="15" fill="rgb(226,26,5)" fg:x="895" fg:w="43"/><text x="11.4026%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.11%)</title><rect x="13.2336%" y="196" width="0.1121%" height="15" fill="rgb(249,33,26)" fg:x="1062" fg:w="9"/><text x="13.4836%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (142 samples, 1.77%)</title><rect x="11.6885%" y="180" width="1.7695%" height="15" fill="rgb(235,183,28)" fg:x="938" fg:w="142"/><text x="11.9385%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.11%)</title><rect x="13.3458%" y="196" width="0.1121%" height="15" fill="rgb(221,5,38)" fg:x="1071" fg:w="9"/><text x="13.5958%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (132 samples, 1.64%)</title><rect x="13.4579%" y="180" width="1.6449%" height="15" fill="rgb(247,18,42)" fg:x="1080" fg:w="132"/><text x="13.7079%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (12 samples, 0.15%)</title><rect x="16.1994%" y="196" width="0.1495%" height="15" fill="rgb(241,131,45)" fg:x="1300" fg:w="12"/><text x="16.4494%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (40 samples, 0.50%)</title><rect x="16.3489%" y="196" width="0.4984%" height="15" fill="rgb(249,31,29)" fg:x="1312" fg:w="40"/><text x="16.5989%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (56 samples, 0.70%)</title><rect x="18.2305%" y="212" width="0.6978%" height="15" fill="rgb(225,111,53)" fg:x="1463" fg:w="56"/><text x="18.4805%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (30 samples, 0.37%)</title><rect x="20.0498%" y="228" width="0.3738%" height="15" fill="rgb(238,160,17)" fg:x="1609" fg:w="30"/><text x="20.2998%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (504 samples, 6.28%)</title><rect x="16.8598%" y="196" width="6.2804%" height="15" fill="rgb(214,148,48)" fg:x="1353" fg:w="504"/><text x="17.1098%" y="206.50">embeds_i..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (338 samples, 4.21%)</title><rect x="18.9283%" y="212" width="4.2118%" height="15" fill="rgb(232,36,49)" fg:x="1519" fg:w="338"/><text x="19.1783%" y="222.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (218 samples, 2.72%)</title><rect x="20.4237%" y="228" width="2.7165%" height="15" fill="rgb(209,103,24)" fg:x="1639" fg:w="218"/><text x="20.6737%" y="238.50">si..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (83 samples, 1.03%)</title><rect x="23.1402%" y="196" width="1.0343%" height="15" fill="rgb(229,88,8)" fg:x="1857" fg:w="83"/><text x="23.3902%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (49 samples, 0.61%)</title><rect x="24.8100%" y="212" width="0.6106%" height="15" fill="rgb(213,181,19)" fg:x="1991" fg:w="49"/><text x="25.0600%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (133 samples, 1.66%)</title><rect x="24.2368%" y="196" width="1.6573%" height="15" fill="rgb(254,191,54)" fg:x="1945" fg:w="133"/><text x="24.4868%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (38 samples, 0.47%)</title><rect x="25.4206%" y="212" width="0.4735%" height="15" fill="rgb(241,83,37)" fg:x="2040" fg:w="38"/><text x="25.6706%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (107 samples, 1.33%)</title><rect x="31.0779%" y="212" width="1.3333%" height="15" fill="rgb(233,36,39)" fg:x="2494" fg:w="107"/><text x="31.3279%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (70 samples, 0.87%)</title><rect x="32.4860%" y="212" width="0.8723%" height="15" fill="rgb(226,3,54)" fg:x="2607" fg:w="70"/><text x="32.7360%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (45 samples, 0.56%)</title><rect x="32.7975%" y="228" width="0.5607%" height="15" fill="rgb(245,192,40)" fg:x="2632" fg:w="45"/><text x="33.0475%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.12%)</title><rect x="35.4393%" y="244" width="0.1246%" height="15" fill="rgb(238,167,29)" fg:x="2844" fg:w="10"/><text x="35.6893%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.12%)</title><rect x="36.9346%" y="260" width="0.1246%" height="15" fill="rgb(232,182,51)" fg:x="2964" fg:w="10"/><text x="37.1846%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (245 samples, 3.05%)</title><rect x="34.2430%" y="228" width="3.0530%" height="15" fill="rgb(231,60,39)" fg:x="2748" fg:w="245"/><text x="34.4930%" y="238.50">bou..</text></g><g><title>__eq__ (kappybara/utils.py:33) (139 samples, 1.73%)</title><rect x="35.5639%" y="244" width="1.7321%" height="15" fill="rgb(208,69,12)" fg:x="2854" fg:w="139"/><text x="35.8139%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.24%)</title><rect x="37.0592%" y="260" width="0.2368%" height="15" fill="rgb(235,93,37)" fg:x="2974" fg:w="19"/><text x="37.3092%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (119 samples, 1.48%)</title><rect x="37.2960%" y="228" width="1.4829%" height="15" fill="rgb(213,116,39)" fg:x="2993" fg:w="119"/><text x="37.5460%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:61) (51 samples, 0.64%)</title><rect x="38.7788%" y="228" width="0.6355%" height="15" fill="rgb(222,207,29)" fg:x="3112" fg:w="51"/><text x="39.0288%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (530 samples, 6.60%)</title><rect x="33.3583%" y="212" width="6.6044%" height="15" fill="rgb(206,96,30)" fg:x="2677" fg:w="530"/><text x="33.6083%" y="222.50">embeds_in..</text></g><g><title>coupled (kappybara/pattern.py:66) (40 samples, 0.50%)</title><rect x="39.4642%" y="228" width="0.4984%" height="15" fill="rgb(218,138,4)" fg:x="3167" fg:w="40"/><text x="39.7142%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (81 samples, 1.01%)</title><rect x="40.0748%" y="212" width="1.0093%" height="15" fill="rgb(250,191,14)" fg:x="3216" fg:w="81"/><text x="40.3248%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (47 samples, 0.59%)</title><rect x="40.4984%" y="228" width="0.5857%" height="15" fill="rgb(239,60,40)" fg:x="3250" fg:w="47"/><text x="40.7484%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (94 samples, 1.17%)</title><rect x="41.0841%" y="212" width="1.1713%" height="15" fill="rgb(206,27,48)" fg:x="3297" fg:w="94"/><text x="41.3341%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (53 samples, 0.66%)</title><rect x="41.5950%" y="228" width="0.6604%" height="15" fill="rgb(225,35,8)" fg:x="3338" fg:w="53"/><text x="41.8450%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.16%)</title><rect x="42.0935%" y="244" width="0.1620%" height="15" fill="rgb(250,213,24)" fg:x="3378" fg:w="13"/><text x="42.3435%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (19 samples, 0.24%)</title><rect x="42.2555%" y="212" width="0.2368%" height="15" fill="rgb(247,123,22)" fg:x="3391" fg:w="19"/><text x="42.5055%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (58 samples, 0.72%)</title><rect x="42.5047%" y="212" width="0.7227%" height="15" fill="rgb(231,138,38)" fg:x="3411" fg:w="58"/><text x="42.7547%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (29 samples, 0.36%)</title><rect x="43.2274%" y="212" width="0.3614%" height="15" fill="rgb(231,145,46)" fg:x="3469" fg:w="29"/><text x="43.4774%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,572 samples, 19.59%)</title><rect x="25.8941%" y="196" width="19.5888%" height="15" fill="rgb(251,118,11)" fg:x="2078" fg:w="1572"/><text x="26.1441%" y="206.50">embeds_in (kappybara/pattern.py..</text></g><g><title>sites (kappybara/pattern.py:113) (148 samples, 1.84%)</title><rect x="43.6386%" y="212" width="1.8442%" height="15" fill="rgb(217,147,25)" fg:x="3502" fg:w="148"/><text x="43.8886%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,466 samples, 30.73%)</title><rect x="15.1028%" y="180" width="30.7290%" height="15" fill="rgb(247,81,37)" fg:x="1212" fg:w="2466"/><text x="15.3528%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (28 samples, 0.35%)</title><rect x="45.4829%" y="196" width="0.3489%" height="15" fill="rgb(209,12,38)" fg:x="3650" fg:w="28"/><text x="45.7329%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (40 samples, 0.50%)</title><rect x="46.8785%" y="196" width="0.4984%" height="15" fill="rgb(227,1,9)" fg:x="3762" fg:w="40"/><text x="47.1285%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (20 samples, 0.25%)</title><rect x="48.1495%" y="212" width="0.2492%" height="15" fill="rgb(248,47,43)" fg:x="3864" fg:w="20"/><text x="48.3995%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (317 samples, 3.95%)</title><rect x="45.8567%" y="180" width="3.9502%" height="15" fill="rgb(221,10,30)" fg:x="3680" fg:w="317"/><text x="46.1067%" y="190.50">embe..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (195 samples, 2.43%)</title><rect x="47.3769%" y="196" width="2.4299%" height="15" fill="rgb(210,229,1)" fg:x="3802" fg:w="195"/><text x="47.6269%" y="206.50">__..</text></g><g><title>sites (kappybara/pattern.py:113) (113 samples, 1.41%)</title><rect x="48.3988%" y="212" width="1.4081%" height="15" fill="rgb(222,148,37)" fg:x="3884" fg:w="113"/><text x="48.6488%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (58 samples, 0.72%)</title><rect x="49.8069%" y="180" width="0.7227%" height="15" fill="rgb(234,67,33)" fg:x="3997" fg:w="58"/><text x="50.0569%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (16 samples, 0.20%)</title><rect x="50.3302%" y="196" width="0.1994%" height="15" fill="rgb(247,98,35)" fg:x="4039" fg:w="16"/><text x="50.5802%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (64 samples, 0.80%)</title><rect x="50.5296%" y="180" width="0.7975%" height="15" fill="rgb(247,138,52)" fg:x="4055" fg:w="64"/><text x="50.7796%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (40 samples, 0.50%)</title><rect x="50.8287%" y="196" width="0.4984%" height="15" fill="rgb(213,79,30)" fg:x="4079" fg:w="40"/><text x="51.0787%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (52 samples, 0.65%)</title><rect x="51.3271%" y="180" width="0.6480%" height="15" fill="rgb(246,177,23)" fg:x="4119" fg:w="52"/><text x="51.5771%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (17 samples, 0.21%)</title><rect x="51.9751%" y="180" width="0.2118%" height="15" fill="rgb(230,62,27)" fg:x="4171" fg:w="17"/><text x="52.2251%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (22 samples, 0.27%)</title><rect x="52.1869%" y="180" width="0.2741%" height="15" fill="rgb(216,154,8)" fg:x="4188" fg:w="22"/><text x="52.4369%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (33 samples, 0.41%)</title><rect x="53.1963%" y="196" width="0.4112%" height="15" fill="rgb(244,35,45)" fg:x="4269" fg:w="33"/><text x="53.4463%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (93 samples, 1.16%)</title><rect x="52.4611%" y="180" width="1.1589%" height="15" fill="rgb(251,115,12)" fg:x="4210" fg:w="93"/><text x="52.7111%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (31 samples, 0.39%)</title><rect x="53.6324%" y="180" width="0.3863%" height="15" fill="rgb(240,54,50)" fg:x="4304" fg:w="31"/><text x="53.8824%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (32 samples, 0.40%)</title><rect x="54.0187%" y="180" width="0.3988%" height="15" fill="rgb(233,84,52)" fg:x="4335" fg:w="32"/><text x="54.2687%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (4,330 samples, 53.96%)</title><rect x="0.5358%" y="164" width="53.9564%" height="15" fill="rgb(207,117,47)" fg:x="43" fg:w="4330"/><text x="0.7858%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__init__ (kappybara/indexed_set.py:53) (63 samples, 0.79%)</title><rect x="54.4922%" y="164" width="0.7850%" height="15" fill="rgb(249,43,39)" fg:x="4373" fg:w="63"/><text x="54.7422%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (4,507 samples, 56.16%)</title><rect x="0.5109%" y="148" width="56.1620%" height="15" fill="rgb(209,38,44)" fg:x="41" fg:w="4507"/><text x="0.7609%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (109 samples, 1.36%)</title><rect x="55.3146%" y="164" width="1.3583%" height="15" fill="rgb(236,212,23)" fg:x="4439" fg:w="109"/><text x="55.5646%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (18 samples, 0.22%)</title><rect x="56.4486%" y="180" width="0.2243%" height="15" fill="rgb(242,79,21)" fg:x="4530" fg:w="18"/><text x="56.6986%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:126) (20 samples, 0.25%)</title><rect x="56.6978%" y="164" width="0.2492%" height="15" fill="rgb(211,96,35)" fg:x="4550" fg:w="20"/><text x="56.9478%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (29 samples, 0.36%)</title><rect x="61.8567%" y="212" width="0.3614%" height="15" fill="rgb(253,215,40)" fg:x="4964" fg:w="29"/><text x="62.1067%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (123 samples, 1.53%)</title><rect x="62.2181%" y="212" width="1.5327%" height="15" fill="rgb(211,81,21)" fg:x="4993" fg:w="123"/><text x="62.4681%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.20%)</title><rect x="63.5514%" y="228" width="0.1994%" height="15" fill="rgb(208,190,38)" fg:x="5100" fg:w="16"/><text x="63.8014%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:104) (10 samples, 0.12%)</title><rect x="63.7508%" y="212" width="0.1246%" height="15" fill="rgb(235,213,38)" fg:x="5116" fg:w="10"/><text x="64.0008%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (27 samples, 0.34%)</title><rect x="63.8754%" y="212" width="0.3364%" height="15" fill="rgb(237,122,38)" fg:x="5126" fg:w="27"/><text x="64.1254%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (639 samples, 7.96%)</title><rect x="56.9470%" y="164" width="7.9626%" height="15" fill="rgb(244,218,35)" fg:x="4570" fg:w="639"/><text x="57.1970%" y="174.50">create_inde..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (459 samples, 5.72%)</title><rect x="59.1900%" y="180" width="5.7196%" height="15" fill="rgb(240,68,47)" fg:x="4750" fg:w="459"/><text x="59.4400%" y="190.50">__call_..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (408 samples, 5.08%)</title><rect x="59.8255%" y="196" width="5.0841%" height="15" fill="rgb(210,16,53)" fg:x="4801" fg:w="408"/><text x="60.0755%" y="206.50">&lt;lambd..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (56 samples, 0.70%)</title><rect x="64.2118%" y="212" width="0.6978%" height="15" fill="rgb(235,124,12)" fg:x="5153" fg:w="56"/><text x="64.4618%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (104 samples, 1.30%)</title><rect x="69.5078%" y="180" width="1.2960%" height="15" fill="rgb(224,169,11)" fg:x="5578" fg:w="104"/><text x="69.7578%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.54%)</title><rect x="70.8037%" y="180" width="0.5358%" height="15" fill="rgb(250,166,2)" fg:x="5682" fg:w="43"/><text x="71.0537%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:50) (305 samples, 3.80%)</title><rect x="71.3396%" y="180" width="3.8006%" height="15" fill="rgb(242,216,29)" fg:x="5725" fg:w="305"/><text x="71.5896%" y="190.50">__in..</text></g><g><title>__init__ (kappybara/indexed_set.py:51) (75 samples, 0.93%)</title><rect x="75.1402%" y="180" width="0.9346%" height="15" fill="rgb(230,116,27)" fg:x="6030" fg:w="75"/><text x="75.3902%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (478 samples, 5.96%)</title><rect x="76.0748%" y="180" width="5.9564%" height="15" fill="rgb(228,99,48)" fg:x="6105" fg:w="478"/><text x="76.3248%" y="190.50">__init__..</text></g><g><title>__init__ (kappybara/indexed_set.py:55) (107 samples, 1.33%)</title><rect x="82.0312%" y="180" width="1.3333%" height="15" fill="rgb(253,11,6)" fg:x="6583" fg:w="107"/><text x="82.2812%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (359 samples, 4.47%)</title><rect x="83.3645%" y="180" width="4.4735%" height="15" fill="rgb(247,143,39)" fg:x="6690" fg:w="359"/><text x="83.6145%" y="190.50">__ini..</text></g><g><title>__init__ (kappybara/indexed_set.py:58) (63 samples, 0.79%)</title><rect x="87.8380%" y="180" width="0.7850%" height="15" fill="rgb(236,97,10)" fg:x="7049" fg:w="63"/><text x="88.0880%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:59) (35 samples, 0.44%)</title><rect x="88.6231%" y="180" width="0.4361%" height="15" fill="rgb(233,208,19)" fg:x="7112" fg:w="35"/><text x="88.8731%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (9 samples, 0.11%)</title><rect x="89.0592%" y="180" width="0.1121%" height="15" fill="rgb(216,164,2)" fg:x="7147" fg:w="9"/><text x="89.3092%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (111 samples, 1.38%)</title><rect x="89.1713%" y="180" width="1.3832%" height="15" fill="rgb(220,129,5)" fg:x="7156" fg:w="111"/><text x="89.4213%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (27 samples, 0.34%)</title><rect x="90.2181%" y="196" width="0.3364%" height="15" fill="rgb(242,17,10)" fg:x="7240" fg:w="27"/><text x="90.4681%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (151 samples, 1.88%)</title><rect x="90.5545%" y="180" width="1.8816%" height="15" fill="rgb(242,107,0)" fg:x="7267" fg:w="151"/><text x="90.8045%" y="190.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (19 samples, 0.24%)</title><rect x="92.1994%" y="196" width="0.2368%" height="15" fill="rgb(251,28,31)" fg:x="7399" fg:w="19"/><text x="92.4494%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (70 samples, 0.87%)</title><rect x="92.4361%" y="180" width="0.8723%" height="15" fill="rgb(233,223,10)" fg:x="7418" fg:w="70"/><text x="92.6861%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (143 samples, 1.78%)</title><rect x="93.3084%" y="180" width="1.7819%" height="15" fill="rgb(215,21,27)" fg:x="7488" fg:w="143"/><text x="93.5584%" y="190.50">a..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.29%)</title><rect x="94.8037%" y="196" width="0.2866%" height="15" fill="rgb(232,23,21)" fg:x="7608" fg:w="23"/><text x="95.0537%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (3,145 samples, 39.19%)</title><rect x="56.6729%" y="148" width="39.1900%" height="15" fill="rgb(244,5,23)" fg:x="4548" fg:w="3145"/><text x="56.9229%" y="158.50">track_component (kappybara/mixture.py:94)</text></g><g><title>create_index (kappybara/indexed_set.py:130) (2,477 samples, 30.87%)</title><rect x="64.9969%" y="164" width="30.8660%" height="15" fill="rgb(226,81,46)" fg:x="5216" fg:w="2477"/><text x="65.2469%" y="174.50">create_index (kappybara/indexed_set.py:130)</text></g><g><title>add (kappybara/indexed_set.py:70) (62 samples, 0.77%)</title><rect x="95.0903%" y="180" width="0.7726%" height="15" fill="rgb(247,70,30)" fg:x="7631" fg:w="62"/><text x="95.3403%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (7,979 samples, 99.43%)</title><rect x="0.2866%" y="68" width="99.4268%" height="15" fill="rgb(212,68,19)" fg:x="23" fg:w="7979"/><text x="0.5366%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (7,979 samples, 99.43%)</title><rect x="0.2866%" y="84" width="99.4268%" height="15" fill="rgb(240,187,13)" fg:x="23" fg:w="7979"/><text x="0.5366%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (7,968 samples, 99.29%)</title><rect x="0.4237%" y="100" width="99.2897%" height="15" fill="rgb(223,113,26)" fg:x="34" fg:w="7968"/><text x="0.6737%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (7,961 samples, 99.20%)</title><rect x="0.5109%" y="116" width="99.2025%" height="15" fill="rgb(206,192,2)" fg:x="41" fg:w="7961"/><text x="0.7609%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (7,961 samples, 99.20%)</title><rect x="0.5109%" y="132" width="99.2025%" height="15" fill="rgb(241,108,4)" fg:x="41" fg:w="7961"/><text x="0.7609%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (307 samples, 3.83%)</title><rect x="95.8879%" y="148" width="3.8255%" height="15" fill="rgb(247,173,49)" fg:x="7695" fg:w="307"/><text x="96.1379%" y="158.50">trac..</text></g><g><title>all (8,025 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="8025"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:113) (11 samples, 0.14%)</title><rect x="99.8629%" y="68" width="0.1371%" height="15" fill="rgb(245,159,27)" fg:x="8014" fg:w="11"/><text x="100.1129%" y="78.50"></text></g></svg></svg>