<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 7b5974c</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9512"><g><title>update (kappybara/system.py:69) (48 samples, 0.50%)</title><rect x="0.0631%" y="84" width="0.5046%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="48"/><text x="0.3131%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (47 samples, 0.49%)</title><rect x="0.0736%" y="100" width="0.4941%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="47"/><text x="0.3236%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (43 samples, 0.45%)</title><rect x="0.1156%" y="116" width="0.4521%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="43"/><text x="0.3656%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (42 samples, 0.44%)</title><rect x="0.1262%" y="132" width="0.4415%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="42"/><text x="0.3762%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (42 samples, 0.44%)</title><rect x="0.1262%" y="148" width="0.4415%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="42"/><text x="0.3762%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (42 samples, 0.44%)</title><rect x="0.1262%" y="164" width="0.4415%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="42"/><text x="0.3762%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (26 samples, 0.27%)</title><rect x="0.7254%" y="116" width="0.2733%" height="15" fill="rgb(207,160,47)" fg:x="69" fg:w="26"/><text x="0.9754%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (53 samples, 0.56%)</title><rect x="0.6308%" y="100" width="0.5572%" height="15" fill="rgb(228,23,34)" fg:x="60" fg:w="53"/><text x="0.8808%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (16 samples, 0.17%)</title><rect x="1.0198%" y="116" width="0.1682%" height="15" fill="rgb(218,30,26)" fg:x="97" fg:w="16"/><text x="1.2698%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (19 samples, 0.20%)</title><rect x="1.3036%" y="148" width="0.1997%" height="15" fill="rgb(220,122,19)" fg:x="124" fg:w="19"/><text x="1.5536%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (76 samples, 0.80%)</title><rect x="1.5454%" y="148" width="0.7990%" height="15" fill="rgb(250,228,42)" fg:x="147" fg:w="76"/><text x="1.7954%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (16 samples, 0.17%)</title><rect x="2.3444%" y="148" width="0.1682%" height="15" fill="rgb(240,193,28)" fg:x="223" fg:w="16"/><text x="2.5944%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (13 samples, 0.14%)</title><rect x="3.5429%" y="180" width="0.1367%" height="15" fill="rgb(216,20,37)" fg:x="337" fg:w="13"/><text x="3.7929%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (66 samples, 0.69%)</title><rect x="3.6796%" y="180" width="0.6939%" height="15" fill="rgb(206,188,39)" fg:x="350" fg:w="66"/><text x="3.9296%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (43 samples, 0.45%)</title><rect x="3.9214%" y="196" width="0.4521%" height="15" fill="rgb(217,207,13)" fg:x="373" fg:w="43"/><text x="4.1714%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (328 samples, 3.45%)</title><rect x="1.2511%" y="132" width="3.4483%" height="15" fill="rgb(231,73,38)" fg:x="119" fg:w="328"/><text x="1.5011%" y="142.50">_re..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (205 samples, 2.16%)</title><rect x="2.5442%" y="148" width="2.1552%" height="15" fill="rgb(225,20,46)" fg:x="242" fg:w="205"/><text x="2.7942%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (165 samples, 1.73%)</title><rect x="2.9647%" y="164" width="1.7347%" height="15" fill="rgb(210,31,41)" fg:x="282" fg:w="165"/><text x="3.2147%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (29 samples, 0.30%)</title><rect x="4.3944%" y="180" width="0.3049%" height="15" fill="rgb(221,200,47)" fg:x="418" fg:w="29"/><text x="4.6444%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (34 samples, 0.36%)</title><rect x="4.6993%" y="132" width="0.3574%" height="15" fill="rgb(226,26,5)" fg:x="447" fg:w="34"/><text x="4.9493%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (23 samples, 0.24%)</title><rect x="4.8150%" y="148" width="0.2418%" height="15" fill="rgb(249,33,26)" fg:x="458" fg:w="23"/><text x="5.0650%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (369 samples, 3.88%)</title><rect x="1.1880%" y="116" width="3.8793%" height="15" fill="rgb(235,183,28)" fg:x="113" fg:w="369"/><text x="1.4380%" y="126.50">appl..</text></g><g><title>embeddings (kappybara/pattern.py:256) (49 samples, 0.52%)</title><rect x="5.5088%" y="148" width="0.5151%" height="15" fill="rgb(221,5,38)" fg:x="524" fg:w="49"/><text x="5.7588%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.22%)</title><rect x="9.7246%" y="164" width="0.2208%" height="15" fill="rgb(247,18,42)" fg:x="925" fg:w="21"/><text x="9.9746%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (410 samples, 4.31%)</title><rect x="6.0240%" y="148" width="4.3103%" height="15" fill="rgb(241,131,45)" fg:x="573" fg:w="410"/><text x="6.2740%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.39%)</title><rect x="9.9453%" y="164" width="0.3890%" height="15" fill="rgb(249,31,29)" fg:x="946" fg:w="37"/><text x="10.1953%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="13.0992%" y="164" width="0.1156%" height="15" fill="rgb(225,111,53)" fg:x="1246" fg:w="11"/><text x="13.3492%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (292 samples, 3.07%)</title><rect x="10.3343%" y="148" width="3.0698%" height="15" fill="rgb(238,160,17)" fg:x="983" fg:w="292"/><text x="10.5843%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.19%)</title><rect x="13.2149%" y="164" width="0.1892%" height="15" fill="rgb(214,148,48)" fg:x="1257" fg:w="18"/><text x="13.4649%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (85 samples, 0.89%)</title><rect x="13.4146%" y="148" width="0.8936%" height="15" fill="rgb(232,36,49)" fg:x="1276" fg:w="85"/><text x="13.6646%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (74 samples, 0.78%)</title><rect x="14.3082%" y="148" width="0.7780%" height="15" fill="rgb(209,103,24)" fg:x="1361" fg:w="74"/><text x="14.5582%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.24%)</title><rect x="17.3360%" y="164" width="0.2418%" height="15" fill="rgb(229,88,8)" fg:x="1649" fg:w="23"/><text x="17.5860%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (285 samples, 3.00%)</title><rect x="15.0862%" y="148" width="2.9962%" height="15" fill="rgb(213,181,19)" fg:x="1435" fg:w="285"/><text x="15.3362%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.50%)</title><rect x="17.5778%" y="164" width="0.5046%" height="15" fill="rgb(254,191,54)" fg:x="1672" fg:w="48"/><text x="17.8278%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (247 samples, 2.60%)</title><rect x="18.0824%" y="148" width="2.5967%" height="15" fill="rgb(241,83,37)" fg:x="1720" fg:w="247"/><text x="18.3324%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (18 samples, 0.19%)</title><rect x="23.2653%" y="164" width="0.1892%" height="15" fill="rgb(233,36,39)" fg:x="2213" fg:w="18"/><text x="23.5153%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (111 samples, 1.17%)</title><rect x="23.4546%" y="164" width="1.1669%" height="15" fill="rgb(226,3,54)" fg:x="2231" fg:w="111"/><text x="23.7046%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (149 samples, 1.57%)</title><rect x="26.7557%" y="180" width="1.5664%" height="15" fill="rgb(245,192,40)" fg:x="2545" fg:w="149"/><text x="27.0057%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (86 samples, 0.90%)</title><rect x="30.2670%" y="196" width="0.9041%" height="15" fill="rgb(238,167,29)" fg:x="2879" fg:w="86"/><text x="30.5170%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (919 samples, 9.66%)</title><rect x="24.6636%" y="164" width="9.6615%" height="15" fill="rgb(232,182,51)" fg:x="2346" fg:w="919"/><text x="24.9136%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (571 samples, 6.00%)</title><rect x="28.3221%" y="180" width="6.0029%" height="15" fill="rgb(231,60,39)" fg:x="2694" fg:w="571"/><text x="28.5721%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (300 samples, 3.15%)</title><rect x="31.1712%" y="196" width="3.1539%" height="15" fill="rgb(208,69,12)" fg:x="2965" fg:w="300"/><text x="31.4212%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (128 samples, 1.35%)</title><rect x="34.3251%" y="164" width="1.3457%" height="15" fill="rgb(235,93,37)" fg:x="3265" fg:w="128"/><text x="34.5751%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (87 samples, 0.91%)</title><rect x="36.9218%" y="180" width="0.9146%" height="15" fill="rgb(213,116,39)" fg:x="3512" fg:w="87"/><text x="37.1718%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (214 samples, 2.25%)</title><rect x="35.7128%" y="164" width="2.2498%" height="15" fill="rgb(222,207,29)" fg:x="3397" fg:w="214"/><text x="35.9628%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (12 samples, 0.13%)</title><rect x="37.8364%" y="180" width="0.1262%" height="15" fill="rgb(206,96,30)" fg:x="3599" fg:w="12"/><text x="38.0864%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (232 samples, 2.44%)</title><rect x="48.2653%" y="180" width="2.4390%" height="15" fill="rgb(218,138,4)" fg:x="4591" fg:w="232"/><text x="48.5153%" y="190.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (21 samples, 0.22%)</title><rect x="50.7044%" y="180" width="0.2208%" height="15" fill="rgb(250,191,14)" fg:x="4823" fg:w="21"/><text x="50.9544%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (33 samples, 0.35%)</title><rect x="51.5559%" y="196" width="0.3469%" height="15" fill="rgb(239,60,40)" fg:x="4904" fg:w="33"/><text x="51.8059%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (190 samples, 2.00%)</title><rect x="50.9251%" y="180" width="1.9975%" height="15" fill="rgb(206,27,48)" fg:x="4844" fg:w="190"/><text x="51.1751%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (97 samples, 1.02%)</title><rect x="51.9029%" y="196" width="1.0198%" height="15" fill="rgb(225,35,8)" fg:x="4937" fg:w="97"/><text x="52.1529%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (15 samples, 0.16%)</title><rect x="54.2788%" y="196" width="0.1577%" height="15" fill="rgb(250,213,24)" fg:x="5163" fg:w="15"/><text x="54.5288%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (25 samples, 0.26%)</title><rect x="56.8124%" y="212" width="0.2628%" height="15" fill="rgb(247,123,22)" fg:x="5404" fg:w="25"/><text x="57.0624%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="59.2935%" y="228" width="0.1262%" height="15" fill="rgb(231,138,38)" fg:x="5640" fg:w="12"/><text x="59.5435%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (504 samples, 5.30%)</title><rect x="54.4365%" y="196" width="5.2986%" height="15" fill="rgb(231,145,46)" fg:x="5178" fg:w="504"/><text x="54.6865%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (253 samples, 2.66%)</title><rect x="57.0753%" y="212" width="2.6598%" height="15" fill="rgb(251,118,11)" fg:x="5429" fg:w="253"/><text x="57.3253%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.32%)</title><rect x="59.4197%" y="228" width="0.3154%" height="15" fill="rgb(217,147,25)" fg:x="5652" fg:w="30"/><text x="59.6697%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (212 samples, 2.23%)</title><rect x="59.7351%" y="196" width="2.2288%" height="15" fill="rgb(247,81,37)" fg:x="5682" fg:w="212"/><text x="59.9851%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (104 samples, 1.09%)</title><rect x="61.9638%" y="196" width="1.0934%" height="15" fill="rgb(209,12,38)" fg:x="5894" fg:w="104"/><text x="62.2138%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (16 samples, 0.17%)</title><rect x="63.0572%" y="196" width="0.1682%" height="15" fill="rgb(227,1,9)" fg:x="5998" fg:w="16"/><text x="63.3072%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,013 samples, 10.65%)</title><rect x="52.9226%" y="180" width="10.6497%" height="15" fill="rgb(248,47,43)" fg:x="5034" fg:w="1013"/><text x="53.1726%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (33 samples, 0.35%)</title><rect x="63.2254%" y="196" width="0.3469%" height="15" fill="rgb(221,10,30)" fg:x="6014" fg:w="33"/><text x="63.4754%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (11 samples, 0.12%)</title><rect x="63.5723%" y="180" width="0.1156%" height="15" fill="rgb(210,229,1)" fg:x="6047" fg:w="11"/><text x="63.8223%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (37 samples, 0.39%)</title><rect x="63.6880%" y="180" width="0.3890%" height="15" fill="rgb(222,148,37)" fg:x="6058" fg:w="37"/><text x="63.9380%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (25 samples, 0.26%)</title><rect x="65.1808%" y="196" width="0.2628%" height="15" fill="rgb(234,67,33)" fg:x="6200" fg:w="25"/><text x="65.4308%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (287 samples, 3.02%)</title><rect x="64.0770%" y="180" width="3.0172%" height="15" fill="rgb(247,98,35)" fg:x="6095" fg:w="287"/><text x="64.3270%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (157 samples, 1.65%)</title><rect x="65.4437%" y="196" width="1.6505%" height="15" fill="rgb(247,138,52)" fg:x="6225" fg:w="157"/><text x="65.6937%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.23%)</title><rect x="66.8629%" y="212" width="0.2313%" height="15" fill="rgb(213,79,30)" fg:x="6360" fg:w="22"/><text x="67.1129%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="70.1535%" y="212" width="0.1472%" height="15" fill="rgb(246,177,23)" fg:x="6673" fg:w="14"/><text x="70.4035%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (348 samples, 3.66%)</title><rect x="67.0942%" y="180" width="3.6585%" height="15" fill="rgb(230,62,27)" fg:x="6382" fg:w="348"/><text x="67.3442%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (229 samples, 2.41%)</title><rect x="68.3452%" y="196" width="2.4075%" height="15" fill="rgb(216,154,8)" fg:x="6501" fg:w="229"/><text x="68.5952%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.45%)</title><rect x="70.3007%" y="212" width="0.4521%" height="15" fill="rgb(244,35,45)" fg:x="6687" fg:w="43"/><text x="70.5507%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (102 samples, 1.07%)</title><rect x="70.7527%" y="180" width="1.0723%" height="15" fill="rgb(251,115,12)" fg:x="6730" fg:w="102"/><text x="71.0027%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (172 samples, 1.81%)</title><rect x="71.8251%" y="180" width="1.8082%" height="15" fill="rgb(240,54,50)" fg:x="6832" fg:w="172"/><text x="72.0751%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (103 samples, 1.08%)</title><rect x="73.6333%" y="180" width="1.0828%" height="15" fill="rgb(233,84,52)" fg:x="7004" fg:w="103"/><text x="73.8833%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (27 samples, 0.28%)</title><rect x="74.7161%" y="180" width="0.2839%" height="15" fill="rgb(207,117,47)" fg:x="7107" fg:w="27"/><text x="74.9661%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,839 samples, 40.36%)</title><rect x="37.9626%" y="164" width="40.3595%" height="15" fill="rgb(249,43,39)" fg:x="3611" fg:w="3839"/><text x="38.2126%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (316 samples, 3.32%)</title><rect x="75.0000%" y="180" width="3.3221%" height="15" fill="rgb(209,38,44)" fg:x="7134" fg:w="316"/><text x="75.2500%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,532 samples, 58.16%)</title><rect x="20.6791%" y="148" width="58.1581%" height="15" fill="rgb(236,212,23)" fg:x="1967" fg:w="5532"/><text x="20.9291%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (49 samples, 0.52%)</title><rect x="78.3221%" y="164" width="0.5151%" height="15" fill="rgb(242,79,21)" fg:x="7450" fg:w="49"/><text x="78.5721%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (62 samples, 0.65%)</title><rect x="80.3511%" y="164" width="0.6518%" height="15" fill="rgb(211,96,35)" fg:x="7643" fg:w="62"/><text x="80.6011%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (71 samples, 0.75%)</title><rect x="82.1804%" y="180" width="0.7464%" height="15" fill="rgb(253,215,40)" fg:x="7817" fg:w="71"/><text x="82.4304%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (594 samples, 6.24%)</title><rect x="78.9108%" y="148" width="6.2447%" height="15" fill="rgb(211,81,21)" fg:x="7506" fg:w="594"/><text x="79.1608%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (395 samples, 4.15%)</title><rect x="81.0029%" y="164" width="4.1526%" height="15" fill="rgb(208,190,38)" fg:x="7705" fg:w="395"/><text x="81.2529%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (212 samples, 2.23%)</title><rect x="82.9268%" y="180" width="2.2288%" height="15" fill="rgb(235,213,38)" fg:x="7888" fg:w="212"/><text x="83.1768%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (51 samples, 0.54%)</title><rect x="85.9125%" y="164" width="0.5362%" height="15" fill="rgb(237,122,38)" fg:x="8172" fg:w="51"/><text x="86.1625%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (142 samples, 1.49%)</title><rect x="85.1556%" y="148" width="1.4929%" height="15" fill="rgb(244,218,35)" fg:x="8100" fg:w="142"/><text x="85.4056%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.20%)</title><rect x="86.4487%" y="164" width="0.1997%" height="15" fill="rgb(240,68,47)" fg:x="8223" fg:w="19"/><text x="86.6987%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (18 samples, 0.19%)</title><rect x="86.9638%" y="164" width="0.1892%" height="15" fill="rgb(210,16,53)" fg:x="8272" fg:w="18"/><text x="87.2138%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (86 samples, 0.90%)</title><rect x="86.6484%" y="148" width="0.9041%" height="15" fill="rgb(235,124,12)" fg:x="8242" fg:w="86"/><text x="86.8984%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (38 samples, 0.40%)</title><rect x="87.1531%" y="164" width="0.3995%" height="15" fill="rgb(224,169,11)" fg:x="8290" fg:w="38"/><text x="87.4031%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="88.9508%" y="164" width="0.1156%" height="15" fill="rgb(250,166,2)" fg:x="8461" fg:w="11"/><text x="89.2008%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (182 samples, 1.91%)</title><rect x="87.5526%" y="148" width="1.9134%" height="15" fill="rgb(242,216,29)" fg:x="8328" fg:w="182"/><text x="87.8026%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.40%)</title><rect x="89.0664%" y="164" width="0.3995%" height="15" fill="rgb(230,116,27)" fg:x="8472" fg:w="38"/><text x="89.3164%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (61 samples, 0.64%)</title><rect x="89.4659%" y="148" width="0.6413%" height="15" fill="rgb(228,99,48)" fg:x="8510" fg:w="61"/><text x="89.7159%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (72 samples, 0.76%)</title><rect x="90.1072%" y="148" width="0.7569%" height="15" fill="rgb(253,11,6)" fg:x="8571" fg:w="72"/><text x="90.3572%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.19%)</title><rect x="94.2389%" y="180" width="0.1892%" height="15" fill="rgb(247,143,39)" fg:x="8964" fg:w="18"/><text x="94.4889%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (157 samples, 1.65%)</title><rect x="92.9773%" y="164" width="1.6505%" height="15" fill="rgb(236,97,10)" fg:x="8844" fg:w="157"/><text x="93.2273%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.20%)</title><rect x="94.4281%" y="180" width="0.1997%" height="15" fill="rgb(233,208,19)" fg:x="8982" fg:w="19"/><text x="94.6781%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="94.6278%" y="164" width="0.1262%" height="15" fill="rgb(216,164,2)" fg:x="9001" fg:w="12"/><text x="94.8778%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (372 samples, 3.91%)</title><rect x="90.8642%" y="148" width="3.9108%" height="15" fill="rgb(220,129,5)" fg:x="8643" fg:w="372"/><text x="91.1142%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (31 samples, 0.33%)</title><rect x="94.7750%" y="148" width="0.3259%" height="15" fill="rgb(242,17,10)" fg:x="9015" fg:w="31"/><text x="95.0250%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (10 samples, 0.11%)</title><rect x="95.1009%" y="148" width="0.1051%" height="15" fill="rgb(242,107,0)" fg:x="9046" fg:w="10"/><text x="95.3509%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,569 samples, 90.09%)</title><rect x="5.1619%" y="132" width="90.0862%" height="15" fill="rgb(251,28,31)" fg:x="491" fg:w="8569"/><text x="5.4119%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (28 samples, 0.29%)</title><rect x="95.2481%" y="132" width="0.2944%" height="15" fill="rgb(233,223,10)" fg:x="9060" fg:w="28"/><text x="95.4981%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (14 samples, 0.15%)</title><rect x="95.6161%" y="132" width="0.1472%" height="15" fill="rgb(215,21,27)" fg:x="9095" fg:w="14"/><text x="95.8661%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (240 samples, 2.52%)</title><rect x="95.7632%" y="132" width="2.5231%" height="15" fill="rgb(232,23,21)" fg:x="9109" fg:w="240"/><text x="96.0132%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.27%)</title><rect x="98.0130%" y="148" width="0.2733%" height="15" fill="rgb(244,5,23)" fg:x="9323" fg:w="26"/><text x="98.2630%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="99.0643%" y="148" width="0.1262%" height="15" fill="rgb(226,81,46)" fg:x="9423" fg:w="12"/><text x="99.3143%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (8,958 samples, 94.18%)</title><rect x="5.0988%" y="116" width="94.1758%" height="15" fill="rgb(247,70,30)" fg:x="485" fg:w="8958"/><text x="5.3488%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (94 samples, 0.99%)</title><rect x="98.2864%" y="132" width="0.9882%" height="15" fill="rgb(212,68,19)" fg:x="9349" fg:w="94"/><text x="98.5364%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,438 samples, 99.22%)</title><rect x="0.0631%" y="68" width="99.2220%" height="15" fill="rgb(240,187,13)" fg:x="6" fg:w="9438"/><text x="0.3131%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,390 samples, 98.72%)</title><rect x="0.5677%" y="84" width="98.7174%" height="15" fill="rgb(223,113,26)" fg:x="54" fg:w="9390"/><text x="0.8177%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (9,331 samples, 98.10%)</title><rect x="1.1880%" y="100" width="98.0971%" height="15" fill="rgb(206,192,2)" fg:x="113" fg:w="9331"/><text x="1.4380%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (15 samples, 0.16%)</title><rect x="99.2851%" y="68" width="0.1577%" height="15" fill="rgb(241,108,4)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.16%)</title><rect x="99.2851%" y="84" width="0.1577%" height="15" fill="rgb(247,173,49)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.16%)</title><rect x="99.2851%" y="100" width="0.1577%" height="15" fill="rgb(224,114,35)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.16%)</title><rect x="99.2851%" y="116" width="0.1577%" height="15" fill="rgb(245,159,27)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.16%)</title><rect x="99.2851%" y="132" width="0.1577%" height="15" fill="rgb(245,172,44)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.16%)</title><rect x="99.2851%" y="148" width="0.1577%" height="15" fill="rgb(236,23,11)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (15 samples, 0.16%)</title><rect x="99.2851%" y="164" width="0.1577%" height="15" fill="rgb(205,117,38)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (15 samples, 0.16%)</title><rect x="99.2851%" y="180" width="0.1577%" height="15" fill="rgb(237,72,25)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (15 samples, 0.16%)</title><rect x="99.2851%" y="196" width="0.1577%" height="15" fill="rgb(244,70,9)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (15 samples, 0.16%)</title><rect x="99.2851%" y="212" width="0.1577%" height="15" fill="rgb(217,125,39)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (15 samples, 0.16%)</title><rect x="99.2851%" y="228" width="0.1577%" height="15" fill="rgb(235,36,10)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (15 samples, 0.16%)</title><rect x="99.2851%" y="244" width="0.1577%" height="15" fill="rgb(251,123,47)" fg:x="9444" fg:w="15"/><text x="99.5351%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (15 samples, 0.16%)</title><rect x="99.4428%" y="68" width="0.1577%" height="15" fill="rgb(221,13,13)" fg:x="9459" fg:w="15"/><text x="99.6928%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (16 samples, 0.17%)</title><rect x="99.6005%" y="68" width="0.1682%" height="15" fill="rgb(238,131,9)" fg:x="9474" fg:w="16"/><text x="99.8505%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (14 samples, 0.15%)</title><rect x="99.7687%" y="68" width="0.1472%" height="15" fill="rgb(211,50,8)" fg:x="9490" fg:w="14"/><text x="100.0187%" y="78.50"></text></g><g><title>all (9,512 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="9512"/><text x="0.2500%" y="62.50"></text></g></svg></svg>