<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_disperse_flamegraph.svg -- python profile_uni_bi_disperse.py # commit 7b5974c</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9286"><g><title>n_embeddings (kappybara/rule.py:169) (13 samples, 0.14%)</title><rect x="0.1400%" y="180" width="0.1400%" height="15" fill="rgb(227,0,7)" fg:x="13" fg:w="13"/><text x="0.3900%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:170) (34 samples, 0.37%)</title><rect x="1.6261%" y="196" width="0.3661%" height="15" fill="rgb(217,0,24)" fg:x="151" fg:w="34"/><text x="1.8761%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="3.5968%" y="228" width="0.1508%" height="15" fill="rgb(221,193,54)" fg:x="334" fg:w="14"/><text x="3.8468%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (172 samples, 1.85%)</title><rect x="1.9922%" y="196" width="1.8523%" height="15" fill="rgb(248,212,6)" fg:x="185" fg:w="172"/><text x="2.2422%" y="206.50">&lt;..</text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (131 samples, 1.41%)</title><rect x="2.4338%" y="212" width="1.4107%" height="15" fill="rgb(208,68,35)" fg:x="226" fg:w="131"/><text x="2.6838%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:170) (337 samples, 3.63%)</title><rect x="0.2800%" y="180" width="3.6291%" height="15" fill="rgb(232,128,0)" fg:x="26" fg:w="337"/><text x="0.5300%" y="190.50">n_em..</text></g><g><title>n_embeddings (kappybara/rule.py:172) (34 samples, 0.37%)</title><rect x="3.9091%" y="180" width="0.3661%" height="15" fill="rgb(207,160,47)" fg:x="363" fg:w="34"/><text x="4.1591%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:174) (47 samples, 0.51%)</title><rect x="4.2753%" y="180" width="0.5061%" height="15" fill="rgb(228,23,34)" fg:x="397" fg:w="47"/><text x="4.5253%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:219) (16 samples, 0.17%)</title><rect x="4.9645%" y="180" width="0.1723%" height="15" fill="rgb(218,30,26)" fg:x="461" fg:w="16"/><text x="5.2145%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (104 samples, 1.12%)</title><rect x="5.1691%" y="180" width="1.1200%" height="15" fill="rgb(220,122,19)" fg:x="480" fg:w="104"/><text x="5.4191%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (60 samples, 0.65%)</title><rect x="5.6429%" y="196" width="0.6461%" height="15" fill="rgb(250,228,42)" fg:x="524" fg:w="60"/><text x="5.8929%" y="206.50"></text></g><g><title>embeddings (kappybara/mixture.py:76) (31 samples, 0.33%)</title><rect x="6.9890%" y="196" width="0.3338%" height="15" fill="rgb(240,193,28)" fg:x="649" fg:w="31"/><text x="7.2390%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (142 samples, 1.53%)</title><rect x="6.2890%" y="180" width="1.5292%" height="15" fill="rgb(216,20,37)" fg:x="584" fg:w="142"/><text x="6.5390%" y="190.50"></text></g><g><title>embeddings (kappybara/mixture.py:78) (46 samples, 0.50%)</title><rect x="7.3229%" y="196" width="0.4954%" height="15" fill="rgb(206,188,39)" fg:x="680" fg:w="46"/><text x="7.5729%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (90 samples, 0.97%)</title><rect x="7.8182%" y="180" width="0.9692%" height="15" fill="rgb(217,207,13)" fg:x="726" fg:w="90"/><text x="8.0682%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (59 samples, 0.64%)</title><rect x="8.1521%" y="196" width="0.6354%" height="15" fill="rgb(231,73,38)" fg:x="757" fg:w="59"/><text x="8.4021%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:227) (12 samples, 0.13%)</title><rect x="8.7874%" y="180" width="0.1292%" height="15" fill="rgb(225,20,46)" fg:x="816" fg:w="12"/><text x="9.0374%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:228) (48 samples, 0.52%)</title><rect x="8.9166%" y="180" width="0.5169%" height="15" fill="rgb(210,31,41)" fg:x="828" fg:w="48"/><text x="9.1666%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:229) (13 samples, 0.14%)</title><rect x="9.4336%" y="180" width="0.1400%" height="15" fill="rgb(221,200,47)" fg:x="876" fg:w="13"/><text x="9.6836%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (887 samples, 9.55%)</title><rect x="0.0862%" y="84" width="9.5520%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="887"/><text x="0.3362%" y="94.50">update (kappyb..</text></g><g><title>wait (kappybara/system.py:58) (887 samples, 9.55%)</title><rect x="0.0862%" y="100" width="9.5520%" height="15" fill="rgb(249,33,26)" fg:x="8" fg:w="887"/><text x="0.3362%" y="110.50">wait (kappybar..</text></g><g><title>reactivity (kappybara/system.py:55) (886 samples, 9.54%)</title><rect x="0.0969%" y="116" width="9.5412%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="886"/><text x="0.3469%" y="126.50">reactivity (ka..</text></g><g><title>__get__ (functools.py:998) (885 samples, 9.53%)</title><rect x="0.1077%" y="132" width="9.5305%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="885"/><text x="0.3577%" y="142.50">__get__ (funct..</text></g><g><title>rule_reactivities (kappybara/system.py:51) (885 samples, 9.53%)</title><rect x="0.1077%" y="148" width="9.5305%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="885"/><text x="0.3577%" y="158.50">rule_reactivit..</text></g><g><title>reactivity (kappybara/rule.py:18) (885 samples, 9.53%)</title><rect x="0.1077%" y="164" width="9.5305%" height="15" fill="rgb(241,131,45)" fg:x="10" fg:w="885"/><text x="0.3577%" y="174.50">reactivity (ka..</text></g><g><title>act (kappybara/system.py:63) (27 samples, 0.29%)</title><rect x="9.6920%" y="100" width="0.2908%" height="15" fill="rgb(249,31,29)" fg:x="900" fg:w="27"/><text x="9.9420%" y="110.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (50 samples, 0.54%)</title><rect x="10.0689%" y="132" width="0.5384%" height="15" fill="rgb(225,111,53)" fg:x="935" fg:w="50"/><text x="10.3189%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (41 samples, 0.44%)</title><rect x="10.9089%" y="148" width="0.4415%" height="15" fill="rgb(238,160,17)" fg:x="1013" fg:w="41"/><text x="11.1589%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.22%)</title><rect x="15.0980%" y="164" width="0.2154%" height="15" fill="rgb(214,148,48)" fg:x="1402" fg:w="20"/><text x="15.3480%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (415 samples, 4.47%)</title><rect x="11.3504%" y="148" width="4.4691%" height="15" fill="rgb(232,36,49)" fg:x="1054" fg:w="415"/><text x="11.6004%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.51%)</title><rect x="15.3134%" y="164" width="0.5061%" height="15" fill="rgb(209,103,24)" fg:x="1422" fg:w="47"/><text x="15.5634%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.22%)</title><rect x="19.2333%" y="164" width="0.2154%" height="15" fill="rgb(229,88,8)" fg:x="1786" fg:w="20"/><text x="19.4833%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (354 samples, 3.81%)</title><rect x="15.8195%" y="148" width="3.8122%" height="15" fill="rgb(213,181,19)" fg:x="1469" fg:w="354"/><text x="16.0695%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.18%)</title><rect x="19.4486%" y="164" width="0.1831%" height="15" fill="rgb(254,191,54)" fg:x="1806" fg:w="17"/><text x="19.6986%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (72 samples, 0.78%)</title><rect x="19.6425%" y="148" width="0.7754%" height="15" fill="rgb(241,83,37)" fg:x="1824" fg:w="72"/><text x="19.8925%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (89 samples, 0.96%)</title><rect x="20.4178%" y="148" width="0.9584%" height="15" fill="rgb(233,36,39)" fg:x="1896" fg:w="89"/><text x="20.6678%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (29 samples, 0.31%)</title><rect x="23.4977%" y="164" width="0.3123%" height="15" fill="rgb(226,3,54)" fg:x="2182" fg:w="29"/><text x="23.7477%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (276 samples, 2.97%)</title><rect x="21.3763%" y="148" width="2.9722%" height="15" fill="rgb(245,192,40)" fg:x="1985" fg:w="276"/><text x="21.6263%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (50 samples, 0.54%)</title><rect x="23.8100%" y="164" width="0.5384%" height="15" fill="rgb(238,167,29)" fg:x="2211" fg:w="50"/><text x="24.0600%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (230 samples, 2.48%)</title><rect x="24.3485%" y="148" width="2.4768%" height="15" fill="rgb(232,182,51)" fg:x="2261" fg:w="230"/><text x="24.5985%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (20 samples, 0.22%)</title><rect x="29.0868%" y="164" width="0.2154%" height="15" fill="rgb(231,60,39)" fg:x="2701" fg:w="20"/><text x="29.3368%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (84 samples, 0.90%)</title><rect x="29.3022%" y="164" width="0.9046%" height="15" fill="rgb(208,69,12)" fg:x="2721" fg:w="84"/><text x="29.5522%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (123 samples, 1.32%)</title><rect x="32.2852%" y="180" width="1.3246%" height="15" fill="rgb(235,93,37)" fg:x="2998" fg:w="123"/><text x="32.5352%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (94 samples, 1.01%)</title><rect x="35.8174%" y="196" width="1.0123%" height="15" fill="rgb(213,116,39)" fg:x="3326" fg:w="94"/><text x="36.0674%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,021 samples, 11.00%)</title><rect x="30.2606%" y="164" width="10.9950%" height="15" fill="rgb(222,207,29)" fg:x="2810" fg:w="1021"/><text x="30.5106%" y="174.50">embeds_in (kappy..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (710 samples, 7.65%)</title><rect x="33.6097%" y="180" width="7.6459%" height="15" fill="rgb(206,96,30)" fg:x="3121" fg:w="710"/><text x="33.8597%" y="190.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:111) (411 samples, 4.43%)</title><rect x="36.8296%" y="196" width="4.4260%" height="15" fill="rgb(218,138,4)" fg:x="3420" fg:w="411"/><text x="37.0796%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (119 samples, 1.28%)</title><rect x="41.2557%" y="164" width="1.2815%" height="15" fill="rgb(250,191,14)" fg:x="3831" fg:w="119"/><text x="41.5057%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (110 samples, 1.18%)</title><rect x="43.5925%" y="180" width="1.1846%" height="15" fill="rgb(239,60,40)" fg:x="4048" fg:w="110"/><text x="43.8425%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (240 samples, 2.58%)</title><rect x="42.5910%" y="164" width="2.5845%" height="15" fill="rgb(206,27,48)" fg:x="3955" fg:w="240"/><text x="42.8410%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (37 samples, 0.40%)</title><rect x="44.7771%" y="180" width="0.3984%" height="15" fill="rgb(225,35,8)" fg:x="4158" fg:w="37"/><text x="45.0271%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (174 samples, 1.87%)</title><rect x="54.1568%" y="180" width="1.8738%" height="15" fill="rgb(250,213,24)" fg:x="5029" fg:w="174"/><text x="54.4068%" y="190.50">_..</text></g><g><title>stated (kappybara/pattern.py:50) (28 samples, 0.30%)</title><rect x="56.6444%" y="196" width="0.3015%" height="15" fill="rgb(247,123,22)" fg:x="5260" fg:w="28"/><text x="56.8944%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (172 samples, 1.85%)</title><rect x="56.1275%" y="180" width="1.8523%" height="15" fill="rgb(231,138,38)" fg:x="5212" fg:w="172"/><text x="56.3775%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (96 samples, 1.03%)</title><rect x="56.9459%" y="196" width="1.0338%" height="15" fill="rgb(231,145,46)" fg:x="5288" fg:w="96"/><text x="57.1959%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (23 samples, 0.25%)</title><rect x="59.0782%" y="196" width="0.2477%" height="15" fill="rgb(251,118,11)" fg:x="5486" fg:w="23"/><text x="59.3282%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (20 samples, 0.22%)</title><rect x="61.1781%" y="212" width="0.2154%" height="15" fill="rgb(217,147,25)" fg:x="5681" fg:w="20"/><text x="61.4281%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="63.0950%" y="228" width="0.1400%" height="15" fill="rgb(247,81,37)" fg:x="5859" fg:w="13"/><text x="63.3450%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (399 samples, 4.30%)</title><rect x="59.3259%" y="196" width="4.2968%" height="15" fill="rgb(209,12,38)" fg:x="5509" fg:w="399"/><text x="59.5759%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (207 samples, 2.23%)</title><rect x="61.3935%" y="212" width="2.2292%" height="15" fill="rgb(227,1,9)" fg:x="5701" fg:w="207"/><text x="61.6435%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.39%)</title><rect x="63.2350%" y="228" width="0.3877%" height="15" fill="rgb(248,47,43)" fg:x="5872" fg:w="36"/><text x="63.4850%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (199 samples, 2.14%)</title><rect x="63.6227%" y="196" width="2.1430%" height="15" fill="rgb(221,10,30)" fg:x="5908" fg:w="199"/><text x="63.8727%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (92 samples, 0.99%)</title><rect x="65.7657%" y="196" width="0.9907%" height="15" fill="rgb(210,229,1)" fg:x="6107" fg:w="92"/><text x="66.0157%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (865 samples, 9.32%)</title><rect x="57.9798%" y="180" width="9.3151%" height="15" fill="rgb(222,148,37)" fg:x="5384" fg:w="865"/><text x="58.2298%" y="190.50">embeds_in (ka..</text></g><g><title>coupled (kappybara/pattern.py:64) (43 samples, 0.46%)</title><rect x="66.8318%" y="196" width="0.4631%" height="15" fill="rgb(234,67,33)" fg:x="6206" fg:w="43"/><text x="67.0818%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (17 samples, 0.18%)</title><rect x="67.3487%" y="180" width="0.1831%" height="15" fill="rgb(247,98,35)" fg:x="6254" fg:w="17"/><text x="67.5987%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (130 samples, 1.40%)</title><rect x="67.5318%" y="180" width="1.4000%" height="15" fill="rgb(247,138,52)" fg:x="6271" fg:w="130"/><text x="67.7818%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (73 samples, 0.79%)</title><rect x="68.1456%" y="196" width="0.7861%" height="15" fill="rgb(213,79,30)" fg:x="6328" fg:w="73"/><text x="68.3956%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.13%)</title><rect x="68.8025%" y="212" width="0.1292%" height="15" fill="rgb(246,177,23)" fg:x="6389" fg:w="12"/><text x="69.0525%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (202 samples, 2.18%)</title><rect x="68.9317%" y="180" width="2.1753%" height="15" fill="rgb(230,62,27)" fg:x="6401" fg:w="202"/><text x="69.1817%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (123 samples, 1.32%)</title><rect x="69.7825%" y="196" width="1.3246%" height="15" fill="rgb(216,154,8)" fg:x="6480" fg:w="123"/><text x="70.0325%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.22%)</title><rect x="70.8917%" y="212" width="0.2154%" height="15" fill="rgb(244,35,45)" fg:x="6583" fg:w="20"/><text x="71.1417%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (43 samples, 0.46%)</title><rect x="71.1070%" y="180" width="0.4631%" height="15" fill="rgb(251,115,12)" fg:x="6603" fg:w="43"/><text x="71.3570%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (60 samples, 0.65%)</title><rect x="71.5701%" y="180" width="0.6461%" height="15" fill="rgb(240,54,50)" fg:x="6646" fg:w="60"/><text x="71.8201%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (32 samples, 0.34%)</title><rect x="72.2162%" y="180" width="0.3446%" height="15" fill="rgb(233,84,52)" fg:x="6706" fg:w="32"/><text x="72.4662%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (2,835 samples, 30.53%)</title><rect x="45.1755%" y="164" width="30.5298%" height="15" fill="rgb(207,117,47)" fg:x="4195" fg:w="2835"/><text x="45.4255%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (286 samples, 3.08%)</title><rect x="72.6255%" y="180" width="3.0799%" height="15" fill="rgb(249,43,39)" fg:x="6744" fg:w="286"/><text x="72.8755%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,592 samples, 49.45%)</title><rect x="26.8253%" y="148" width="49.4508%" height="15" fill="rgb(209,38,44)" fg:x="2491" fg:w="4592"/><text x="27.0753%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (53 samples, 0.57%)</title><rect x="75.7054%" y="164" width="0.5708%" height="15" fill="rgb(236,212,23)" fg:x="7030" fg:w="53"/><text x="75.9554%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (58 samples, 0.62%)</title><rect x="77.7515%" y="164" width="0.6246%" height="15" fill="rgb(242,79,21)" fg:x="7220" fg:w="58"/><text x="78.0015%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (61 samples, 0.66%)</title><rect x="79.7545%" y="180" width="0.6569%" height="15" fill="rgb(211,96,35)" fg:x="7406" fg:w="61"/><text x="80.0045%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (624 samples, 6.72%)</title><rect x="76.3730%" y="148" width="6.7198%" height="15" fill="rgb(253,215,40)" fg:x="7092" fg:w="624"/><text x="76.6230%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (438 samples, 4.72%)</title><rect x="78.3760%" y="164" width="4.7168%" height="15" fill="rgb(211,81,21)" fg:x="7278" fg:w="438"/><text x="78.6260%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (249 samples, 2.68%)</title><rect x="80.4114%" y="180" width="2.6815%" height="15" fill="rgb(208,190,38)" fg:x="7467" fg:w="249"/><text x="80.6614%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (29 samples, 0.31%)</title><rect x="83.6851%" y="164" width="0.3123%" height="15" fill="rgb(235,213,38)" fg:x="7771" fg:w="29"/><text x="83.9351%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (94 samples, 1.01%)</title><rect x="83.0928%" y="148" width="1.0123%" height="15" fill="rgb(237,122,38)" fg:x="7716" fg:w="94"/><text x="83.3428%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (10 samples, 0.11%)</title><rect x="83.9974%" y="164" width="0.1077%" height="15" fill="rgb(244,218,35)" fg:x="7800" fg:w="10"/><text x="84.2474%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (12 samples, 0.13%)</title><rect x="84.4282%" y="164" width="0.1292%" height="15" fill="rgb(240,68,47)" fg:x="7840" fg:w="12"/><text x="84.6782%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (105 samples, 1.13%)</title><rect x="84.1051%" y="148" width="1.1307%" height="15" fill="rgb(210,16,53)" fg:x="7810" fg:w="105"/><text x="84.3551%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (63 samples, 0.68%)</title><rect x="84.5574%" y="164" width="0.6784%" height="15" fill="rgb(235,124,12)" fg:x="7852" fg:w="63"/><text x="84.8074%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (64 samples, 0.69%)</title><rect x="85.2358%" y="148" width="0.6892%" height="15" fill="rgb(224,169,11)" fg:x="7915" fg:w="64"/><text x="85.4858%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (31 samples, 0.33%)</title><rect x="85.9250%" y="148" width="0.3338%" height="15" fill="rgb(250,166,2)" fg:x="7979" fg:w="31"/><text x="86.1750%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (37 samples, 0.40%)</title><rect x="86.2589%" y="148" width="0.3984%" height="15" fill="rgb(242,216,29)" fg:x="8010" fg:w="37"/><text x="86.5089%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (40 samples, 0.43%)</title><rect x="87.4219%" y="164" width="0.4308%" height="15" fill="rgb(230,116,27)" fg:x="8118" fg:w="40"/><text x="87.6719%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (112 samples, 1.21%)</title><rect x="86.6573%" y="148" width="1.2061%" height="15" fill="rgb(228,99,48)" fg:x="8047" fg:w="112"/><text x="86.9073%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (56 samples, 0.60%)</title><rect x="87.8635%" y="148" width="0.6031%" height="15" fill="rgb(253,11,6)" fg:x="8159" fg:w="56"/><text x="88.1135%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:111) (16 samples, 0.17%)</title><rect x="88.2942%" y="164" width="0.1723%" height="15" fill="rgb(247,143,39)" fg:x="8199" fg:w="16"/><text x="88.5442%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (21 samples, 0.23%)</title><rect x="88.5850%" y="148" width="0.2261%" height="15" fill="rgb(236,97,10)" fg:x="8226" fg:w="21"/><text x="88.8350%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (59 samples, 0.64%)</title><rect x="88.8111%" y="148" width="0.6354%" height="15" fill="rgb(233,208,19)" fg:x="8247" fg:w="59"/><text x="89.0611%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,337 samples, 79.01%)</title><rect x="10.6074%" y="132" width="79.0114%" height="15" fill="rgb(216,164,2)" fg:x="985" fg:w="7337"/><text x="10.8574%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (16 samples, 0.17%)</title><rect x="89.4465%" y="148" width="0.1723%" height="15" fill="rgb(220,129,5)" fg:x="8306" fg:w="16"/><text x="89.6965%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (55 samples, 0.59%)</title><rect x="89.6188%" y="132" width="0.5923%" height="15" fill="rgb(242,17,10)" fg:x="8322" fg:w="55"/><text x="89.8688%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (18 samples, 0.19%)</title><rect x="90.2111%" y="132" width="0.1938%" height="15" fill="rgb(242,107,0)" fg:x="8377" fg:w="18"/><text x="90.4611%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (15 samples, 0.16%)</title><rect x="90.4049%" y="132" width="0.1615%" height="15" fill="rgb(251,28,31)" fg:x="8395" fg:w="15"/><text x="90.6549%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (34 samples, 0.37%)</title><rect x="94.6694%" y="148" width="0.3661%" height="15" fill="rgb(233,223,10)" fg:x="8791" fg:w="34"/><text x="94.9194%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="95.0355%" y="148" width="0.1077%" height="15" fill="rgb(215,21,27)" fg:x="8825" fg:w="10"/><text x="95.2855%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (465 samples, 5.01%)</title><rect x="90.5664%" y="132" width="5.0075%" height="15" fill="rgb(232,23,21)" fg:x="8410" fg:w="465"/><text x="90.8164%" y="142.50">_updat..</text></g><g><title>__hash__ (kappybara/utils.py:30) (40 samples, 0.43%)</title><rect x="95.1432%" y="148" width="0.4308%" height="15" fill="rgb(244,5,23)" fg:x="8835" fg:w="40"/><text x="95.3932%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (35 samples, 0.38%)</title><rect x="98.8370%" y="148" width="0.3769%" height="15" fill="rgb(226,81,46)" fg:x="9178" fg:w="35"/><text x="99.0870%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_disperse.py:24) (9,221 samples, 99.30%)</title><rect x="0.0862%" y="68" width="99.3000%" height="15" fill="rgb(247,70,30)" fg:x="8" fg:w="9221"/><text x="0.3362%" y="78.50">&lt;module&gt; (profile_uni_bi_disperse.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,334 samples, 89.75%)</title><rect x="9.6382%" y="84" width="89.7480%" height="15" fill="rgb(212,68,19)" fg:x="895" fg:w="8334"/><text x="9.8882%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,302 samples, 89.40%)</title><rect x="9.9828%" y="100" width="89.4034%" height="15" fill="rgb(240,187,13)" fg:x="927" fg:w="8302"/><text x="10.2328%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,294 samples, 89.32%)</title><rect x="10.0689%" y="116" width="89.3173%" height="15" fill="rgb(223,113,26)" fg:x="935" fg:w="8294"/><text x="10.3189%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (354 samples, 3.81%)</title><rect x="95.5740%" y="132" width="3.8122%" height="15" fill="rgb(206,192,2)" fg:x="8875" fg:w="354"/><text x="95.8240%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.17%)</title><rect x="99.2139%" y="148" width="0.1723%" height="15" fill="rgb(241,108,4)" fg:x="9213" fg:w="16"/><text x="99.4639%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_disperse.py:3) (10 samples, 0.11%)</title><rect x="99.3862%" y="68" width="0.1077%" height="15" fill="rgb(247,173,49)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.3862%" y="84" width="0.1077%" height="15" fill="rgb(224,114,35)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.3862%" y="100" width="0.1077%" height="15" fill="rgb(245,159,27)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.3862%" y="116" width="0.1077%" height="15" fill="rgb(245,172,44)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.3862%" y="132" width="0.1077%" height="15" fill="rgb(236,23,11)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.3862%" y="148" width="0.1077%" height="15" fill="rgb(205,117,38)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.11%)</title><rect x="99.3862%" y="164" width="0.1077%" height="15" fill="rgb(237,72,25)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.3862%" y="180" width="0.1077%" height="15" fill="rgb(244,70,9)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.3862%" y="196" width="0.1077%" height="15" fill="rgb(217,125,39)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.3862%" y="212" width="0.1077%" height="15" fill="rgb(235,36,10)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.3862%" y="228" width="0.1077%" height="15" fill="rgb(251,123,47)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.3862%" y="244" width="0.1077%" height="15" fill="rgb(221,13,13)" fg:x="9229" fg:w="10"/><text x="99.6362%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (18 samples, 0.19%)</title><rect x="99.4939%" y="68" width="0.1938%" height="15" fill="rgb(238,131,9)" fg:x="9239" fg:w="18"/><text x="99.7439%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (15 samples, 0.16%)</title><rect x="99.6877%" y="68" width="0.1615%" height="15" fill="rgb(211,50,8)" fg:x="9257" fg:w="15"/><text x="99.9377%" y="78.50"></text></g><g><title>all (9,286 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,182,24)" fg:x="0" fg:w="9286"/><text x="0.2500%" y="62.50"></text></g></svg></svg>