<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 7b5974c</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9219"><g><title>update (kappybara/system.py:69) (16 samples, 0.17%)</title><rect x="0.0651%" y="84" width="0.1736%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="16"/><text x="0.3151%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (14 samples, 0.15%)</title><rect x="0.0868%" y="100" width="0.1519%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="14"/><text x="0.3368%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (13 samples, 0.14%)</title><rect x="0.0976%" y="116" width="0.1410%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="13"/><text x="0.3476%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (11 samples, 0.12%)</title><rect x="0.1193%" y="132" width="0.1193%" height="15" fill="rgb(248,212,6)" fg:x="11" fg:w="11"/><text x="0.3693%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (11 samples, 0.12%)</title><rect x="0.1193%" y="148" width="0.1193%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="11"/><text x="0.3693%" y="158.50"></text></g><g><title>act (kappybara/system.py:63) (37 samples, 0.40%)</title><rect x="0.2929%" y="100" width="0.4013%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="37"/><text x="0.5429%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (33 samples, 0.36%)</title><rect x="0.3363%" y="116" width="0.3580%" height="15" fill="rgb(207,160,47)" fg:x="31" fg:w="33"/><text x="0.5863%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (20 samples, 0.22%)</title><rect x="0.7810%" y="148" width="0.2169%" height="15" fill="rgb(228,23,34)" fg:x="72" fg:w="20"/><text x="1.0310%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (82 samples, 0.89%)</title><rect x="1.0522%" y="148" width="0.8895%" height="15" fill="rgb(218,30,26)" fg:x="97" fg:w="82"/><text x="1.3022%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (25 samples, 0.27%)</title><rect x="1.9416%" y="148" width="0.2712%" height="15" fill="rgb(220,122,19)" fg:x="179" fg:w="25"/><text x="2.1916%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (78 samples, 0.85%)</title><rect x="3.4602%" y="180" width="0.8461%" height="15" fill="rgb(250,228,42)" fg:x="319" fg:w="78"/><text x="3.7102%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (40 samples, 0.43%)</title><rect x="3.8724%" y="196" width="0.4339%" height="15" fill="rgb(240,193,28)" fg:x="357" fg:w="40"/><text x="4.1224%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (354 samples, 3.84%)</title><rect x="0.7376%" y="132" width="3.8399%" height="15" fill="rgb(216,20,37)" fg:x="68" fg:w="354"/><text x="0.9876%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (214 samples, 2.32%)</title><rect x="2.2562%" y="148" width="2.3213%" height="15" fill="rgb(206,188,39)" fg:x="208" fg:w="214"/><text x="2.5062%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (189 samples, 2.05%)</title><rect x="2.5274%" y="164" width="2.0501%" height="15" fill="rgb(217,207,13)" fg:x="233" fg:w="189"/><text x="2.7774%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (22 samples, 0.24%)</title><rect x="4.3389%" y="180" width="0.2386%" height="15" fill="rgb(231,73,38)" fg:x="400" fg:w="22"/><text x="4.5889%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (24 samples, 0.26%)</title><rect x="4.5775%" y="132" width="0.2603%" height="15" fill="rgb(225,20,46)" fg:x="422" fg:w="24"/><text x="4.8275%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (16 samples, 0.17%)</title><rect x="4.6643%" y="148" width="0.1736%" height="15" fill="rgb(210,31,41)" fg:x="430" fg:w="16"/><text x="4.9143%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (382 samples, 4.14%)</title><rect x="0.7051%" y="116" width="4.1436%" height="15" fill="rgb(221,200,47)" fg:x="65" fg:w="382"/><text x="0.9551%" y="126.50">apply..</text></g><g><title>embeddings (kappybara/pattern.py:256) (56 samples, 0.61%)</title><rect x="5.2934%" y="148" width="0.6074%" height="15" fill="rgb(226,26,5)" fg:x="488" fg:w="56"/><text x="5.5434%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.24%)</title><rect x="10.1096%" y="164" width="0.2386%" height="15" fill="rgb(249,33,26)" fg:x="932" fg:w="22"/><text x="10.3596%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (457 samples, 4.96%)</title><rect x="5.9009%" y="148" width="4.9572%" height="15" fill="rgb(235,183,28)" fg:x="544" fg:w="457"/><text x="6.1509%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.51%)</title><rect x="10.3482%" y="164" width="0.5098%" height="15" fill="rgb(221,5,38)" fg:x="954" fg:w="47"/><text x="10.5982%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (351 samples, 3.81%)</title><rect x="10.8580%" y="148" width="3.8074%" height="15" fill="rgb(247,18,42)" fg:x="1001" fg:w="351"/><text x="11.1080%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.29%)</title><rect x="14.3725%" y="164" width="0.2929%" height="15" fill="rgb(241,131,45)" fg:x="1325" fg:w="27"/><text x="14.6225%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (80 samples, 0.87%)</title><rect x="14.6871%" y="148" width="0.8678%" height="15" fill="rgb(249,31,29)" fg:x="1354" fg:w="80"/><text x="14.9371%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (76 samples, 0.82%)</title><rect x="15.5548%" y="148" width="0.8244%" height="15" fill="rgb(225,111,53)" fg:x="1434" fg:w="76"/><text x="15.8048%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.22%)</title><rect x="18.7547%" y="164" width="0.2169%" height="15" fill="rgb(238,160,17)" fg:x="1729" fg:w="20"/><text x="19.0047%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (282 samples, 3.06%)</title><rect x="16.3792%" y="148" width="3.0589%" height="15" fill="rgb(214,148,48)" fg:x="1510" fg:w="282"/><text x="16.6292%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (43 samples, 0.47%)</title><rect x="18.9717%" y="164" width="0.4664%" height="15" fill="rgb(232,36,49)" fg:x="1749" fg:w="43"/><text x="19.2217%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (235 samples, 2.55%)</title><rect x="19.4381%" y="148" width="2.5491%" height="15" fill="rgb(209,103,24)" fg:x="1792" fg:w="235"/><text x="19.6881%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (22 samples, 0.24%)</title><rect x="24.3953%" y="164" width="0.2386%" height="15" fill="rgb(229,88,8)" fg:x="2249" fg:w="22"/><text x="24.6453%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (97 samples, 1.05%)</title><rect x="24.6339%" y="164" width="1.0522%" height="15" fill="rgb(213,181,19)" fg:x="2271" fg:w="97"/><text x="24.8839%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (136 samples, 1.48%)</title><rect x="27.6169%" y="180" width="1.4752%" height="15" fill="rgb(254,191,54)" fg:x="2546" fg:w="136"/><text x="27.8669%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (102 samples, 1.11%)</title><rect x="31.0337%" y="196" width="1.1064%" height="15" fill="rgb(241,83,37)" fg:x="2861" fg:w="102"/><text x="31.2837%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (902 samples, 9.78%)</title><rect x="25.7403%" y="164" width="9.7841%" height="15" fill="rgb(233,36,39)" fg:x="2373" fg:w="902"/><text x="25.9903%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (593 samples, 6.43%)</title><rect x="29.0921%" y="180" width="6.4324%" height="15" fill="rgb(226,3,54)" fg:x="2682" fg:w="593"/><text x="29.3421%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (312 samples, 3.38%)</title><rect x="32.1401%" y="196" width="3.3843%" height="15" fill="rgb(245,192,40)" fg:x="2963" fg:w="312"/><text x="32.3901%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (130 samples, 1.41%)</title><rect x="35.5245%" y="164" width="1.4101%" height="15" fill="rgb(238,167,29)" fg:x="3275" fg:w="130"/><text x="35.7745%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (81 samples, 0.88%)</title><rect x="37.9759%" y="180" width="0.8786%" height="15" fill="rgb(232,182,51)" fg:x="3501" fg:w="81"/><text x="38.2259%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (186 samples, 2.02%)</title><rect x="37.0105%" y="164" width="2.0176%" height="15" fill="rgb(231,60,39)" fg:x="3412" fg:w="186"/><text x="37.2605%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (16 samples, 0.17%)</title><rect x="38.8545%" y="180" width="0.1736%" height="15" fill="rgb(208,69,12)" fg:x="3582" fg:w="16"/><text x="39.1045%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (236 samples, 2.56%)</title><rect x="49.7993%" y="180" width="2.5599%" height="15" fill="rgb(235,93,37)" fg:x="4591" fg:w="236"/><text x="50.0493%" y="190.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (14 samples, 0.15%)</title><rect x="52.3593%" y="180" width="0.1519%" height="15" fill="rgb(213,116,39)" fg:x="4827" fg:w="14"/><text x="52.6093%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (28 samples, 0.30%)</title><rect x="53.0969%" y="196" width="0.3037%" height="15" fill="rgb(222,207,29)" fg:x="4895" fg:w="28"/><text x="53.3469%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (180 samples, 1.95%)</title><rect x="52.5111%" y="180" width="1.9525%" height="15" fill="rgb(206,96,30)" fg:x="4841" fg:w="180"/><text x="52.7611%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (98 samples, 1.06%)</title><rect x="53.4006%" y="196" width="1.0630%" height="15" fill="rgb(218,138,4)" fg:x="4923" fg:w="98"/><text x="53.6506%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (17 samples, 0.18%)</title><rect x="55.7978%" y="196" width="0.1844%" height="15" fill="rgb(250,191,14)" fg:x="5144" fg:w="17"/><text x="56.0478%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (28 samples, 0.30%)</title><rect x="58.1191%" y="212" width="0.3037%" height="15" fill="rgb(239,60,40)" fg:x="5358" fg:w="28"/><text x="58.3691%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="60.6031%" y="228" width="0.1193%" height="15" fill="rgb(206,27,48)" fg:x="5587" fg:w="11"/><text x="60.8531%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (465 samples, 5.04%)</title><rect x="55.9822%" y="196" width="5.0439%" height="15" fill="rgb(225,35,8)" fg:x="5161" fg:w="465"/><text x="56.2322%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (240 samples, 2.60%)</title><rect x="58.4228%" y="212" width="2.6033%" height="15" fill="rgb(250,213,24)" fg:x="5386" fg:w="240"/><text x="58.6728%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.30%)</title><rect x="60.7224%" y="228" width="0.3037%" height="15" fill="rgb(247,123,22)" fg:x="5598" fg:w="28"/><text x="60.9724%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (238 samples, 2.58%)</title><rect x="61.0261%" y="196" width="2.5816%" height="15" fill="rgb(231,138,38)" fg:x="5626" fg:w="238"/><text x="61.2761%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (89 samples, 0.97%)</title><rect x="63.6078%" y="196" width="0.9654%" height="15" fill="rgb(231,145,46)" fg:x="5864" fg:w="89"/><text x="63.8578%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="64.5732%" y="196" width="0.1844%" height="15" fill="rgb(251,118,11)" fg:x="5953" fg:w="17"/><text x="64.8232%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (991 samples, 10.75%)</title><rect x="54.4636%" y="180" width="10.7495%" height="15" fill="rgb(217,147,25)" fg:x="5021" fg:w="991"/><text x="54.7136%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (42 samples, 0.46%)</title><rect x="64.7576%" y="196" width="0.4556%" height="15" fill="rgb(247,81,37)" fg:x="5970" fg:w="42"/><text x="65.0076%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (31 samples, 0.34%)</title><rect x="65.3108%" y="180" width="0.3363%" height="15" fill="rgb(209,12,38)" fg:x="6021" fg:w="31"/><text x="65.5608%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="66.5582%" y="196" width="0.1085%" height="15" fill="rgb(227,1,9)" fg:x="6136" fg:w="10"/><text x="66.8082%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (253 samples, 2.74%)</title><rect x="65.6470%" y="180" width="2.7443%" height="15" fill="rgb(248,47,43)" fg:x="6052" fg:w="253"/><text x="65.8970%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (159 samples, 1.72%)</title><rect x="66.6667%" y="196" width="1.7247%" height="15" fill="rgb(221,10,30)" fg:x="6146" fg:w="159"/><text x="66.9167%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.25%)</title><rect x="68.1419%" y="212" width="0.2495%" height="15" fill="rgb(210,229,1)" fg:x="6282" fg:w="23"/><text x="68.3919%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="69.3785%" y="196" width="0.1085%" height="15" fill="rgb(222,148,37)" fg:x="6396" fg:w="10"/><text x="69.6285%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.21%)</title><rect x="71.1357%" y="212" width="0.2061%" height="15" fill="rgb(234,67,33)" fg:x="6558" fg:w="19"/><text x="71.3857%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (303 samples, 3.29%)</title><rect x="68.3914%" y="180" width="3.2867%" height="15" fill="rgb(247,98,35)" fg:x="6305" fg:w="303"/><text x="68.6414%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (202 samples, 2.19%)</title><rect x="69.4869%" y="196" width="2.1911%" height="15" fill="rgb(247,138,52)" fg:x="6406" fg:w="202"/><text x="69.7369%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.34%)</title><rect x="71.3418%" y="212" width="0.3363%" height="15" fill="rgb(213,79,30)" fg:x="6577" fg:w="31"/><text x="71.5918%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (97 samples, 1.05%)</title><rect x="71.6781%" y="180" width="1.0522%" height="15" fill="rgb(246,177,23)" fg:x="6608" fg:w="97"/><text x="71.9281%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (190 samples, 2.06%)</title><rect x="72.7302%" y="180" width="2.0610%" height="15" fill="rgb(230,62,27)" fg:x="6705" fg:w="190"/><text x="72.9802%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (95 samples, 1.03%)</title><rect x="74.7912%" y="180" width="1.0305%" height="15" fill="rgb(216,154,8)" fg:x="6895" fg:w="95"/><text x="75.0412%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (32 samples, 0.35%)</title><rect x="75.8217%" y="180" width="0.3471%" height="15" fill="rgb(244,35,45)" fg:x="6990" fg:w="32"/><text x="76.0717%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,730 samples, 40.46%)</title><rect x="39.0281%" y="164" width="40.4599%" height="15" fill="rgb(251,115,12)" fg:x="3598" fg:w="3730"/><text x="39.2781%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (306 samples, 3.32%)</title><rect x="76.1688%" y="180" width="3.3192%" height="15" fill="rgb(240,54,50)" fg:x="7022" fg:w="306"/><text x="76.4188%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,342 samples, 57.95%)</title><rect x="21.9872%" y="148" width="57.9455%" height="15" fill="rgb(233,84,52)" fg:x="2027" fg:w="5342"/><text x="22.2372%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (41 samples, 0.44%)</title><rect x="79.4880%" y="164" width="0.4447%" height="15" fill="rgb(207,117,47)" fg:x="7328" fg:w="41"/><text x="79.7380%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (19 samples, 0.21%)</title><rect x="79.9327%" y="148" width="0.2061%" height="15" fill="rgb(249,43,39)" fg:x="7369" fg:w="19"/><text x="80.1827%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (51 samples, 0.55%)</title><rect x="81.4405%" y="164" width="0.5532%" height="15" fill="rgb(209,38,44)" fg:x="7508" fg:w="51"/><text x="81.6905%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (54 samples, 0.59%)</title><rect x="83.1652%" y="180" width="0.5857%" height="15" fill="rgb(236,212,23)" fg:x="7667" fg:w="54"/><text x="83.4152%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (527 samples, 5.72%)</title><rect x="80.1822%" y="148" width="5.7165%" height="15" fill="rgb(242,79,21)" fg:x="7392" fg:w="527"/><text x="80.4322%" y="158.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (360 samples, 3.90%)</title><rect x="81.9937%" y="164" width="3.9050%" height="15" fill="rgb(211,96,35)" fg:x="7559" fg:w="360"/><text x="82.2437%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (198 samples, 2.15%)</title><rect x="83.7509%" y="180" width="2.1477%" height="15" fill="rgb(253,215,40)" fg:x="7721" fg:w="198"/><text x="84.0009%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (45 samples, 0.49%)</title><rect x="86.6363%" y="164" width="0.4881%" height="15" fill="rgb(211,81,21)" fg:x="7987" fg:w="45"/><text x="86.8863%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (126 samples, 1.37%)</title><rect x="85.8987%" y="148" width="1.3667%" height="15" fill="rgb(208,190,38)" fg:x="7919" fg:w="126"/><text x="86.1487%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (13 samples, 0.14%)</title><rect x="87.1244%" y="164" width="0.1410%" height="15" fill="rgb(235,213,38)" fg:x="8032" fg:w="13"/><text x="87.3744%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (19 samples, 0.21%)</title><rect x="87.6017%" y="164" width="0.2061%" height="15" fill="rgb(237,122,38)" fg:x="8076" fg:w="19"/><text x="87.8517%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (84 samples, 0.91%)</title><rect x="87.2654%" y="148" width="0.9112%" height="15" fill="rgb(244,218,35)" fg:x="8045" fg:w="84"/><text x="87.5154%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (34 samples, 0.37%)</title><rect x="87.8078%" y="164" width="0.3688%" height="15" fill="rgb(240,68,47)" fg:x="8095" fg:w="34"/><text x="88.0578%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="89.3481%" y="164" width="0.1519%" height="15" fill="rgb(210,16,53)" fg:x="8237" fg:w="14"/><text x="89.5981%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (147 samples, 1.59%)</title><rect x="88.1766%" y="148" width="1.5945%" height="15" fill="rgb(235,124,12)" fg:x="8129" fg:w="147"/><text x="88.4266%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.27%)</title><rect x="89.4999%" y="164" width="0.2712%" height="15" fill="rgb(224,169,11)" fg:x="8251" fg:w="25"/><text x="89.7499%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (50 samples, 0.54%)</title><rect x="89.7711%" y="148" width="0.5424%" height="15" fill="rgb(250,166,2)" fg:x="8276" fg:w="50"/><text x="90.0211%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (72 samples, 0.78%)</title><rect x="90.3135%" y="148" width="0.7810%" height="15" fill="rgb(242,216,29)" fg:x="8326" fg:w="72"/><text x="90.5635%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="94.4679%" y="180" width="0.1302%" height="15" fill="rgb(230,116,27)" fg:x="8709" fg:w="12"/><text x="94.7179%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (134 samples, 1.45%)</title><rect x="93.2856%" y="164" width="1.4535%" height="15" fill="rgb(228,99,48)" fg:x="8600" fg:w="134"/><text x="93.5356%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.14%)</title><rect x="94.5981%" y="180" width="0.1410%" height="15" fill="rgb(253,11,6)" fg:x="8721" fg:w="13"/><text x="94.8481%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (344 samples, 3.73%)</title><rect x="91.0945%" y="148" width="3.7314%" height="15" fill="rgb(247,143,39)" fg:x="8398" fg:w="344"/><text x="91.3445%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (31 samples, 0.34%)</title><rect x="94.8476%" y="148" width="0.3363%" height="15" fill="rgb(236,97,10)" fg:x="8744" fg:w="31"/><text x="95.0976%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (15 samples, 0.16%)</title><rect x="95.1839%" y="148" width="0.1627%" height="15" fill="rgb(233,208,19)" fg:x="8775" fg:w="15"/><text x="95.4339%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,339 samples, 90.45%)</title><rect x="4.9897%" y="132" width="90.4545%" height="15" fill="rgb(216,164,2)" fg:x="460" fg:w="8339"/><text x="5.2397%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (36 samples, 0.39%)</title><rect x="95.4442%" y="132" width="0.3905%" height="15" fill="rgb(220,129,5)" fg:x="8799" fg:w="36"/><text x="95.6942%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="98.1560%" y="148" width="0.1302%" height="15" fill="rgb(242,17,10)" fg:x="9049" fg:w="12"/><text x="98.4060%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (234 samples, 2.54%)</title><rect x="95.9974%" y="132" width="2.5382%" height="15" fill="rgb(242,107,0)" fg:x="8850" fg:w="234"/><text x="96.2474%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.25%)</title><rect x="98.2861%" y="148" width="0.2495%" height="15" fill="rgb(251,28,31)" fg:x="9061" fg:w="23"/><text x="98.5361%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (8,718 samples, 94.57%)</title><rect x="4.9029%" y="116" width="94.5656%" height="15" fill="rgb(233,223,10)" fg:x="452" fg:w="8718"/><text x="5.1529%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (86 samples, 0.93%)</title><rect x="98.5356%" y="132" width="0.9329%" height="15" fill="rgb(215,21,27)" fg:x="9084" fg:w="86"/><text x="98.7856%" y="142.50"></text></g><g><title>act (kappybara/system.py:65) (9,108 samples, 98.80%)</title><rect x="0.6942%" y="100" width="98.7960%" height="15" fill="rgb(232,23,21)" fg:x="64" fg:w="9108"/><text x="0.9442%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,168 samples, 99.45%)</title><rect x="0.0542%" y="68" width="99.4468%" height="15" fill="rgb(244,5,23)" fg:x="5" fg:w="9168"/><text x="0.3042%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,151 samples, 99.26%)</title><rect x="0.2386%" y="84" width="99.2624%" height="15" fill="rgb(226,81,46)" fg:x="22" fg:w="9151"/><text x="0.4886%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (10 samples, 0.11%)</title><rect x="99.5010%" y="68" width="0.1085%" height="15" fill="rgb(247,70,30)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.5010%" y="84" width="0.1085%" height="15" fill="rgb(212,68,19)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.5010%" y="100" width="0.1085%" height="15" fill="rgb(240,187,13)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.5010%" y="116" width="0.1085%" height="15" fill="rgb(223,113,26)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.5010%" y="132" width="0.1085%" height="15" fill="rgb(206,192,2)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.5010%" y="148" width="0.1085%" height="15" fill="rgb(241,108,4)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.11%)</title><rect x="99.5010%" y="164" width="0.1085%" height="15" fill="rgb(247,173,49)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.5010%" y="180" width="0.1085%" height="15" fill="rgb(224,114,35)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.5010%" y="196" width="0.1085%" height="15" fill="rgb(245,159,27)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.5010%" y="212" width="0.1085%" height="15" fill="rgb(245,172,44)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.5010%" y="228" width="0.1085%" height="15" fill="rgb(236,23,11)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.5010%" y="244" width="0.1085%" height="15" fill="rgb(205,117,38)" fg:x="9173" fg:w="10"/><text x="99.7510%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (12 samples, 0.13%)</title><rect x="99.6746%" y="68" width="0.1302%" height="15" fill="rgb(237,72,25)" fg:x="9189" fg:w="12"/><text x="99.9246%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (10 samples, 0.11%)</title><rect x="99.8048%" y="68" width="0.1085%" height="15" fill="rgb(244,70,9)" fg:x="9201" fg:w="10"/><text x="100.0548%" y="78.50"></text></g><g><title>all (9,219 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="9219"/><text x="0.2500%" y="62.50"></text></g></svg></svg>