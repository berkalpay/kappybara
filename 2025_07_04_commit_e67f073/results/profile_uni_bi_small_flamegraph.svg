<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit e67f073</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="8646"><g><title>n_embeddings (kappybara/rule.py:170) (46 samples, 0.53%)</title><rect x="0.2082%" y="180" width="0.5320%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="46"/><text x="0.4582%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (21 samples, 0.24%)</title><rect x="0.4973%" y="196" width="0.2429%" height="15" fill="rgb(217,0,24)" fg:x="43" fg:w="21"/><text x="0.7473%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (18 samples, 0.21%)</title><rect x="0.5320%" y="212" width="0.2082%" height="15" fill="rgb(221,193,54)" fg:x="46" fg:w="18"/><text x="0.7820%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (14 samples, 0.16%)</title><rect x="0.9022%" y="180" width="0.1619%" height="15" fill="rgb(248,212,6)" fg:x="78" fg:w="14"/><text x="1.1522%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (16 samples, 0.19%)</title><rect x="1.0641%" y="180" width="0.1851%" height="15" fill="rgb(208,68,35)" fg:x="92" fg:w="16"/><text x="1.3141%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (12 samples, 0.14%)</title><rect x="1.2491%" y="180" width="0.1388%" height="15" fill="rgb(232,128,0)" fg:x="108" fg:w="12"/><text x="1.4991%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (123 samples, 1.42%)</title><rect x="0.0578%" y="84" width="1.4226%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="123"/><text x="0.3078%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (123 samples, 1.42%)</title><rect x="0.0578%" y="100" width="1.4226%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="123"/><text x="0.3078%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (120 samples, 1.39%)</title><rect x="0.0925%" y="116" width="1.3879%" height="15" fill="rgb(218,30,26)" fg:x="8" fg:w="120"/><text x="0.3425%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (119 samples, 1.38%)</title><rect x="0.1041%" y="132" width="1.3764%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="119"/><text x="0.3541%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (119 samples, 1.38%)</title><rect x="0.1041%" y="148" width="1.3764%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="119"/><text x="0.3541%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (118 samples, 1.36%)</title><rect x="0.1157%" y="164" width="1.3648%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="118"/><text x="0.3657%" y="174.50"></text></g><g><title>select (kappybara/rule.py:245) (9 samples, 0.10%)</title><rect x="1.7233%" y="116" width="0.1041%" height="15" fill="rgb(216,20,37)" fg:x="149" fg:w="9"/><text x="1.9733%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (36 samples, 0.42%)</title><rect x="1.5267%" y="100" width="0.4164%" height="15" fill="rgb(206,188,39)" fg:x="132" fg:w="36"/><text x="1.7767%" y="110.50"></text></g><g><title>select (kappybara/rule.py:252) (10 samples, 0.12%)</title><rect x="1.8274%" y="116" width="0.1157%" height="15" fill="rgb(217,207,13)" fg:x="158" fg:w="10"/><text x="2.0774%" y="126.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (13 samples, 0.15%)</title><rect x="2.4404%" y="180" width="0.1504%" height="15" fill="rgb(231,73,38)" fg:x="211" fg:w="13"/><text x="2.6904%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (63 samples, 0.73%)</title><rect x="1.9662%" y="132" width="0.7287%" height="15" fill="rgb(225,20,46)" fg:x="170" fg:w="63"/><text x="2.2162%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (44 samples, 0.51%)</title><rect x="2.1860%" y="148" width="0.5089%" height="15" fill="rgb(210,31,41)" fg:x="189" fg:w="44"/><text x="2.4360%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (33 samples, 0.38%)</title><rect x="2.3132%" y="164" width="0.3817%" height="15" fill="rgb(221,200,47)" fg:x="200" fg:w="33"/><text x="2.5632%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (9 samples, 0.10%)</title><rect x="2.5908%" y="180" width="0.1041%" height="15" fill="rgb(226,26,5)" fg:x="224" fg:w="9"/><text x="2.8408%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.19%)</title><rect x="4.7305%" y="148" width="0.1851%" height="15" fill="rgb(249,33,26)" fg:x="409" fg:w="16"/><text x="4.9805%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (29 samples, 0.34%)</title><rect x="8.7208%" y="164" width="0.3354%" height="15" fill="rgb(235,183,28)" fg:x="754" fg:w="29"/><text x="8.9708%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (618 samples, 7.15%)</title><rect x="2.7990%" y="132" width="7.1478%" height="15" fill="rgb(221,5,38)" fg:x="242" fg:w="618"/><text x="3.0490%" y="142.50">_remove_ed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (435 samples, 5.03%)</title><rect x="4.9156%" y="148" width="5.0312%" height="15" fill="rgb(247,18,42)" fg:x="425" fg:w="435"/><text x="5.1656%" y="158.50">__eq__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (77 samples, 0.89%)</title><rect x="9.0562%" y="164" width="0.8906%" height="15" fill="rgb(241,131,45)" fg:x="783" fg:w="77"/><text x="9.3062%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (695 samples, 8.04%)</title><rect x="1.9431%" y="116" width="8.0384%" height="15" fill="rgb(249,31,29)" fg:x="168" fg:w="695"/><text x="2.1931%" y="126.50">apply_updat..</text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (13 samples, 0.15%)</title><rect x="10.0972%" y="132" width="0.1504%" height="15" fill="rgb(225,111,53)" fg:x="873" fg:w="13"/><text x="10.3472%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (32 samples, 0.37%)</title><rect x="10.6523%" y="148" width="0.3701%" height="15" fill="rgb(238,160,17)" fg:x="921" fg:w="32"/><text x="10.9023%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="14.9665%" y="164" width="0.1041%" height="15" fill="rgb(214,148,48)" fg:x="1294" fg:w="9"/><text x="15.2165%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (372 samples, 4.30%)</title><rect x="11.0224%" y="148" width="4.3026%" height="15" fill="rgb(232,36,49)" fg:x="953" fg:w="372"/><text x="11.2724%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.25%)</title><rect x="15.0706%" y="164" width="0.2545%" height="15" fill="rgb(209,103,24)" fg:x="1303" fg:w="22"/><text x="15.3206%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.16%)</title><rect x="18.4825%" y="164" width="0.1619%" height="15" fill="rgb(229,88,8)" fg:x="1598" fg:w="14"/><text x="18.7325%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (309 samples, 3.57%)</title><rect x="15.3250%" y="148" width="3.5739%" height="15" fill="rgb(213,181,19)" fg:x="1325" fg:w="309"/><text x="15.5750%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.25%)</title><rect x="18.6445%" y="164" width="0.2545%" height="15" fill="rgb(254,191,54)" fg:x="1612" fg:w="22"/><text x="18.8945%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (75 samples, 0.87%)</title><rect x="18.9220%" y="148" width="0.8675%" height="15" fill="rgb(241,83,37)" fg:x="1636" fg:w="75"/><text x="19.1720%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (75 samples, 0.87%)</title><rect x="19.7895%" y="148" width="0.8675%" height="15" fill="rgb(233,36,39)" fg:x="1711" fg:w="75"/><text x="20.0395%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.15%)</title><rect x="22.7388%" y="164" width="0.1504%" height="15" fill="rgb(226,3,54)" fg:x="1966" fg:w="13"/><text x="22.9888%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (242 samples, 2.80%)</title><rect x="20.6570%" y="148" width="2.7990%" height="15" fill="rgb(245,192,40)" fg:x="1786" fg:w="242"/><text x="20.9070%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (49 samples, 0.57%)</title><rect x="22.8892%" y="164" width="0.5667%" height="15" fill="rgb(238,167,29)" fg:x="1979" fg:w="49"/><text x="23.1392%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (230 samples, 2.66%)</title><rect x="23.4559%" y="148" width="2.6602%" height="15" fill="rgb(232,182,51)" fg:x="2028" fg:w="230"/><text x="23.7059%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (17 samples, 0.20%)</title><rect x="27.9898%" y="164" width="0.1966%" height="15" fill="rgb(231,60,39)" fg:x="2420" fg:w="17"/><text x="28.2398%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (74 samples, 0.86%)</title><rect x="28.1864%" y="164" width="0.8559%" height="15" fill="rgb(208,69,12)" fg:x="2437" fg:w="74"/><text x="28.4364%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (131 samples, 1.52%)</title><rect x="30.7657%" y="180" width="1.5152%" height="15" fill="rgb(235,93,37)" fg:x="2660" fg:w="131"/><text x="31.0157%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (88 samples, 1.02%)</title><rect x="34.0273%" y="196" width="1.0178%" height="15" fill="rgb(213,116,39)" fg:x="2942" fg:w="88"/><text x="34.2773%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (865 samples, 10.00%)</title><rect x="29.1002%" y="164" width="10.0046%" height="15" fill="rgb(222,207,29)" fg:x="2516" fg:w="865"/><text x="29.3502%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (590 samples, 6.82%)</title><rect x="32.2808%" y="180" width="6.8240%" height="15" fill="rgb(206,96,30)" fg:x="2791" fg:w="590"/><text x="32.5308%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (351 samples, 4.06%)</title><rect x="35.0451%" y="196" width="4.0597%" height="15" fill="rgb(218,138,4)" fg:x="3030" fg:w="351"/><text x="35.2951%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (122 samples, 1.41%)</title><rect x="39.1048%" y="164" width="1.4111%" height="15" fill="rgb(250,191,14)" fg:x="3381" fg:w="122"/><text x="39.3548%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (52 samples, 0.60%)</title><rect x="41.6724%" y="180" width="0.6014%" height="15" fill="rgb(239,60,40)" fg:x="3603" fg:w="52"/><text x="41.9224%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (165 samples, 1.91%)</title><rect x="40.5852%" y="164" width="1.9084%" height="15" fill="rgb(206,27,48)" fg:x="3509" fg:w="165"/><text x="40.8352%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.22%)</title><rect x="42.2739%" y="180" width="0.2198%" height="15" fill="rgb(225,35,8)" fg:x="3655" fg:w="19"/><text x="42.5239%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (197 samples, 2.28%)</title><rect x="52.1397%" y="180" width="2.2785%" height="15" fill="rgb(250,213,24)" fg:x="4508" fg:w="197"/><text x="52.3897%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (18 samples, 0.21%)</title><rect x="54.4182%" y="180" width="0.2082%" height="15" fill="rgb(247,123,22)" fg:x="4705" fg:w="18"/><text x="54.6682%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (10 samples, 0.12%)</title><rect x="55.0081%" y="196" width="0.1157%" height="15" fill="rgb(231,138,38)" fg:x="4756" fg:w="10"/><text x="55.2581%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (133 samples, 1.54%)</title><rect x="54.6264%" y="180" width="1.5383%" height="15" fill="rgb(231,145,46)" fg:x="4723" fg:w="133"/><text x="54.8764%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (90 samples, 1.04%)</title><rect x="55.1238%" y="196" width="1.0409%" height="15" fill="rgb(251,118,11)" fg:x="4766" fg:w="90"/><text x="55.3738%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (16 samples, 0.19%)</title><rect x="57.1478%" y="196" width="0.1851%" height="15" fill="rgb(217,147,25)" fg:x="4941" fg:w="16"/><text x="57.3978%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.13%)</title><rect x="59.6345%" y="212" width="0.1272%" height="15" fill="rgb(247,81,37)" fg:x="5156" fg:w="11"/><text x="59.8845%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (427 samples, 4.94%)</title><rect x="57.3329%" y="196" width="4.9387%" height="15" fill="rgb(209,12,38)" fg:x="4957" fg:w="427"/><text x="57.5829%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (217 samples, 2.51%)</title><rect x="59.7617%" y="212" width="2.5098%" height="15" fill="rgb(227,1,9)" fg:x="5167" fg:w="217"/><text x="60.0117%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (50 samples, 0.58%)</title><rect x="61.6933%" y="228" width="0.5783%" height="15" fill="rgb(248,47,43)" fg:x="5334" fg:w="50"/><text x="61.9433%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (214 samples, 2.48%)</title><rect x="62.2716%" y="196" width="2.4751%" height="15" fill="rgb(221,10,30)" fg:x="5384" fg:w="214"/><text x="62.5216%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (111 samples, 1.28%)</title><rect x="64.7467%" y="196" width="1.2838%" height="15" fill="rgb(210,229,1)" fg:x="5598" fg:w="111"/><text x="64.9967%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (12 samples, 0.14%)</title><rect x="66.0305%" y="196" width="0.1388%" height="15" fill="rgb(222,148,37)" fg:x="5709" fg:w="12"/><text x="66.2805%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (895 samples, 10.35%)</title><rect x="56.1647%" y="180" width="10.3516%" height="15" fill="rgb(234,67,33)" fg:x="4856" fg:w="895"/><text x="56.4147%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (30 samples, 0.35%)</title><rect x="66.1693%" y="196" width="0.3470%" height="15" fill="rgb(247,98,35)" fg:x="5721" fg:w="30"/><text x="66.4193%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (17 samples, 0.20%)</title><rect x="66.5510%" y="180" width="0.1966%" height="15" fill="rgb(247,138,52)" fg:x="5754" fg:w="17"/><text x="66.8010%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (218 samples, 2.52%)</title><rect x="66.7476%" y="180" width="2.5214%" height="15" fill="rgb(213,79,30)" fg:x="5771" fg:w="218"/><text x="66.9976%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (143 samples, 1.65%)</title><rect x="67.6151%" y="196" width="1.6539%" height="15" fill="rgb(246,177,23)" fg:x="5846" fg:w="143"/><text x="67.8651%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.23%)</title><rect x="69.0377%" y="212" width="0.2313%" height="15" fill="rgb(230,62,27)" fg:x="5969" fg:w="20"/><text x="69.2877%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (286 samples, 3.31%)</title><rect x="69.2690%" y="180" width="3.3079%" height="15" fill="rgb(216,154,8)" fg:x="5989" fg:w="286"/><text x="69.5190%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (192 samples, 2.22%)</title><rect x="70.3562%" y="196" width="2.2207%" height="15" fill="rgb(244,35,45)" fg:x="6083" fg:w="192"/><text x="70.6062%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (49 samples, 0.57%)</title><rect x="72.0102%" y="212" width="0.5667%" height="15" fill="rgb(251,115,12)" fg:x="6226" fg:w="49"/><text x="72.2602%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (52 samples, 0.60%)</title><rect x="72.5769%" y="180" width="0.6014%" height="15" fill="rgb(240,54,50)" fg:x="6275" fg:w="52"/><text x="72.8269%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (107 samples, 1.24%)</title><rect x="73.2015%" y="180" width="1.2376%" height="15" fill="rgb(233,84,52)" fg:x="6329" fg:w="107"/><text x="73.4515%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (55 samples, 0.64%)</title><rect x="74.4390%" y="180" width="0.6361%" height="15" fill="rgb(207,117,47)" fg:x="6436" fg:w="55"/><text x="74.6890%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (9 samples, 0.10%)</title><rect x="75.0752%" y="180" width="0.1041%" height="15" fill="rgb(249,43,39)" fg:x="6491" fg:w="9"/><text x="75.3252%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,076 samples, 35.58%)</title><rect x="42.4936%" y="164" width="35.5771%" height="15" fill="rgb(209,38,44)" fg:x="3674" fg:w="3076"/><text x="42.7436%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (250 samples, 2.89%)</title><rect x="75.1793%" y="180" width="2.8915%" height="15" fill="rgb(236,212,23)" fg:x="6500" fg:w="250"/><text x="75.4293%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,537 samples, 52.48%)</title><rect x="26.1161%" y="148" width="52.4751%" height="15" fill="rgb(242,79,21)" fg:x="2258" fg:w="4537"/><text x="26.3661%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (45 samples, 0.52%)</title><rect x="78.0708%" y="164" width="0.5205%" height="15" fill="rgb(211,96,35)" fg:x="6750" fg:w="45"/><text x="78.3208%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (61 samples, 0.71%)</title><rect x="80.0717%" y="164" width="0.7055%" height="15" fill="rgb(253,215,40)" fg:x="6923" fg:w="61"/><text x="80.3217%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (54 samples, 0.62%)</title><rect x="82.0148%" y="180" width="0.6246%" height="15" fill="rgb(211,81,21)" fg:x="7091" fg:w="54"/><text x="82.2648%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (548 samples, 6.34%)</title><rect x="78.7069%" y="148" width="6.3382%" height="15" fill="rgb(208,190,38)" fg:x="6805" fg:w="548"/><text x="78.9569%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (369 samples, 4.27%)</title><rect x="80.7772%" y="164" width="4.2679%" height="15" fill="rgb(235,213,38)" fg:x="6984" fg:w="369"/><text x="81.0272%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (208 samples, 2.41%)</title><rect x="82.6394%" y="180" width="2.4057%" height="15" fill="rgb(237,122,38)" fg:x="7145" fg:w="208"/><text x="82.8894%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (38 samples, 0.44%)</title><rect x="85.6350%" y="164" width="0.4395%" height="15" fill="rgb(244,218,35)" fg:x="7404" fg:w="38"/><text x="85.8850%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (96 samples, 1.11%)</title><rect x="85.0451%" y="148" width="1.1103%" height="15" fill="rgb(240,68,47)" fg:x="7353" fg:w="96"/><text x="85.2951%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (13 samples, 0.15%)</title><rect x="86.5024%" y="164" width="0.1504%" height="15" fill="rgb(210,16,53)" fg:x="7479" fg:w="13"/><text x="86.7524%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (101 samples, 1.17%)</title><rect x="86.1554%" y="148" width="1.1682%" height="15" fill="rgb(235,124,12)" fg:x="7449" fg:w="101"/><text x="86.4054%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (58 samples, 0.67%)</title><rect x="86.6528%" y="164" width="0.6708%" height="15" fill="rgb(224,169,11)" fg:x="7492" fg:w="58"/><text x="86.9028%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (113 samples, 1.31%)</title><rect x="87.3236%" y="148" width="1.3070%" height="15" fill="rgb(250,166,2)" fg:x="7550" fg:w="113"/><text x="87.5736%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.13%)</title><rect x="88.5034%" y="164" width="0.1272%" height="15" fill="rgb(242,216,29)" fg:x="7652" fg:w="11"/><text x="88.7534%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (49 samples, 0.57%)</title><rect x="88.6306%" y="148" width="0.5667%" height="15" fill="rgb(230,116,27)" fg:x="7663" fg:w="49"/><text x="88.8806%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (43 samples, 0.50%)</title><rect x="89.1973%" y="148" width="0.4973%" height="15" fill="rgb(228,99,48)" fg:x="7712" fg:w="43"/><text x="89.4473%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (92 samples, 1.06%)</title><rect x="91.4296%" y="164" width="1.0641%" height="15" fill="rgb(253,11,6)" fg:x="7905" fg:w="92"/><text x="91.6796%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.17%)</title><rect x="92.3201%" y="180" width="0.1735%" height="15" fill="rgb(247,143,39)" fg:x="7982" fg:w="15"/><text x="92.5701%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (253 samples, 2.93%)</title><rect x="89.6947%" y="148" width="2.9262%" height="15" fill="rgb(236,97,10)" fg:x="7755" fg:w="253"/><text x="89.9447%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.12%)</title><rect x="92.5052%" y="164" width="0.1157%" height="15" fill="rgb(233,208,19)" fg:x="7998" fg:w="10"/><text x="92.7552%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (11 samples, 0.13%)</title><rect x="92.6209%" y="148" width="0.1272%" height="15" fill="rgb(216,164,2)" fg:x="8008" fg:w="11"/><text x="92.8709%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (48 samples, 0.56%)</title><rect x="92.7481%" y="148" width="0.5552%" height="15" fill="rgb(220,129,5)" fg:x="8019" fg:w="48"/><text x="92.9981%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,190 samples, 83.16%)</title><rect x="10.2591%" y="132" width="83.1598%" height="15" fill="rgb(242,17,10)" fg:x="887" fg:w="7190"/><text x="10.5091%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (61 samples, 0.71%)</title><rect x="93.4189%" y="132" width="0.7055%" height="15" fill="rgb(242,107,0)" fg:x="8077" fg:w="61"/><text x="93.6689%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (12 samples, 0.14%)</title><rect x="94.1245%" y="132" width="0.1388%" height="15" fill="rgb(251,28,31)" fg:x="8138" fg:w="12"/><text x="94.3745%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (11 samples, 0.13%)</title><rect x="94.2632%" y="132" width="0.1272%" height="15" fill="rgb(233,223,10)" fg:x="8150" fg:w="11"/><text x="94.5132%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.15%)</title><rect x="97.4786%" y="148" width="0.1504%" height="15" fill="rgb(215,21,27)" fg:x="8428" fg:w="13"/><text x="97.7286%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (334 samples, 3.86%)</title><rect x="94.3905%" y="132" width="3.8631%" height="15" fill="rgb(232,23,21)" fg:x="8161" fg:w="334"/><text x="94.6405%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (54 samples, 0.62%)</title><rect x="97.6290%" y="148" width="0.6246%" height="15" fill="rgb(244,5,23)" fg:x="8441" fg:w="54"/><text x="97.8790%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (8,439 samples, 97.61%)</title><rect x="1.9431%" y="100" width="97.6058%" height="15" fill="rgb(226,81,46)" fg:x="168" fg:w="8439"/><text x="2.1931%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (7,736 samples, 89.47%)</title><rect x="10.0740%" y="116" width="89.4749%" height="15" fill="rgb(247,70,30)" fg:x="871" fg:w="7736"/><text x="10.3240%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (112 samples, 1.30%)</title><rect x="98.2535%" y="132" width="1.2954%" height="15" fill="rgb(212,68,19)" fg:x="8495" fg:w="112"/><text x="98.5035%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.17%)</title><rect x="99.3754%" y="148" width="0.1735%" height="15" fill="rgb(240,187,13)" fg:x="8592" fg:w="15"/><text x="99.6254%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,603 samples, 99.50%)</title><rect x="0.0578%" y="68" width="99.5027%" height="15" fill="rgb(223,113,26)" fg:x="5" fg:w="8603"/><text x="0.3078%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,480 samples, 98.08%)</title><rect x="1.4805%" y="84" width="98.0800%" height="15" fill="rgb(206,192,2)" fg:x="128" fg:w="8480"/><text x="1.7305%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (9 samples, 0.10%)</title><rect x="99.5605%" y="260" width="0.1041%" height="15" fill="rgb(241,108,4)" fg:x="8608" fg:w="9"/><text x="99.8105%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (9 samples, 0.10%)</title><rect x="99.5605%" y="276" width="0.1041%" height="15" fill="rgb(247,173,49)" fg:x="8608" fg:w="9"/><text x="99.8105%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (9 samples, 0.10%)</title><rect x="99.5605%" y="292" width="0.1041%" height="15" fill="rgb(224,114,35)" fg:x="8608" fg:w="9"/><text x="99.8105%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (12 samples, 0.14%)</title><rect x="99.5605%" y="68" width="0.1388%" height="15" fill="rgb(245,159,27)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.14%)</title><rect x="99.5605%" y="84" width="0.1388%" height="15" fill="rgb(245,172,44)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.14%)</title><rect x="99.5605%" y="100" width="0.1388%" height="15" fill="rgb(236,23,11)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.14%)</title><rect x="99.5605%" y="116" width="0.1388%" height="15" fill="rgb(205,117,38)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.14%)</title><rect x="99.5605%" y="132" width="0.1388%" height="15" fill="rgb(237,72,25)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.14%)</title><rect x="99.5605%" y="148" width="0.1388%" height="15" fill="rgb(244,70,9)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (12 samples, 0.14%)</title><rect x="99.5605%" y="164" width="0.1388%" height="15" fill="rgb(217,125,39)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.14%)</title><rect x="99.5605%" y="180" width="0.1388%" height="15" fill="rgb(235,36,10)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.14%)</title><rect x="99.5605%" y="196" width="0.1388%" height="15" fill="rgb(251,123,47)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.14%)</title><rect x="99.5605%" y="212" width="0.1388%" height="15" fill="rgb(221,13,13)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.14%)</title><rect x="99.5605%" y="228" width="0.1388%" height="15" fill="rgb(238,131,9)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.14%)</title><rect x="99.5605%" y="244" width="0.1388%" height="15" fill="rgb(211,50,8)" fg:x="8608" fg:w="12"/><text x="99.8105%" y="254.50"></text></g><g><title>sites (kappybara/pattern.py:109) (13 samples, 0.15%)</title><rect x="99.8381%" y="68" width="0.1504%" height="15" fill="rgb(245,182,24)" fg:x="8632" fg:w="13"/><text x="100.0881%" y="78.50"></text></g><g><title>all (8,646 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="8646"/><text x="0.2500%" y="62.50"></text></g></svg></svg>