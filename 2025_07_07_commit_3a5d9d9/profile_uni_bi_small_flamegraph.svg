<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 3a5d9d9</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9620"><g><title>n_embeddings (kappybara/rule.py:170) (15 samples, 0.16%)</title><rect x="0.2287%" y="180" width="0.1559%" height="15" fill="rgb(227,0,7)" fg:x="22" fg:w="15"/><text x="0.4787%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (42 samples, 0.44%)</title><rect x="0.1040%" y="84" width="0.4366%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="42"/><text x="0.3540%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (42 samples, 0.44%)</title><rect x="0.1040%" y="100" width="0.4366%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="42"/><text x="0.3540%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (38 samples, 0.40%)</title><rect x="0.1455%" y="116" width="0.3950%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="38"/><text x="0.3955%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (36 samples, 0.37%)</title><rect x="0.1663%" y="132" width="0.3742%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="36"/><text x="0.4163%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (36 samples, 0.37%)</title><rect x="0.1663%" y="148" width="0.3742%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="36"/><text x="0.4163%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (35 samples, 0.36%)</title><rect x="0.1767%" y="164" width="0.3638%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="35"/><text x="0.4267%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (14 samples, 0.15%)</title><rect x="0.6549%" y="116" width="0.1455%" height="15" fill="rgb(228,23,34)" fg:x="63" fg:w="14"/><text x="0.9049%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (37 samples, 0.38%)</title><rect x="0.5925%" y="100" width="0.3846%" height="15" fill="rgb(218,30,26)" fg:x="57" fg:w="37"/><text x="0.8425%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (10 samples, 0.10%)</title><rect x="0.8732%" y="116" width="0.1040%" height="15" fill="rgb(220,122,19)" fg:x="84" fg:w="10"/><text x="1.1232%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (23 samples, 0.24%)</title><rect x="1.1538%" y="148" width="0.2391%" height="15" fill="rgb(250,228,42)" fg:x="111" fg:w="23"/><text x="1.4038%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (80 samples, 0.83%)</title><rect x="1.4657%" y="148" width="0.8316%" height="15" fill="rgb(240,193,28)" fg:x="141" fg:w="80"/><text x="1.7157%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (13 samples, 0.14%)</title><rect x="2.2973%" y="148" width="0.1351%" height="15" fill="rgb(216,20,37)" fg:x="221" fg:w="13"/><text x="2.5473%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (60 samples, 0.62%)</title><rect x="3.5031%" y="180" width="0.6237%" height="15" fill="rgb(206,188,39)" fg:x="337" fg:w="60"/><text x="3.7531%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (39 samples, 0.41%)</title><rect x="3.7214%" y="196" width="0.4054%" height="15" fill="rgb(217,207,13)" fg:x="358" fg:w="39"/><text x="3.9714%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (323 samples, 3.36%)</title><rect x="1.0187%" y="132" width="3.3576%" height="15" fill="rgb(231,73,38)" fg:x="98" fg:w="323"/><text x="1.2687%" y="142.50">_re..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (184 samples, 1.91%)</title><rect x="2.4636%" y="148" width="1.9127%" height="15" fill="rgb(225,20,46)" fg:x="237" fg:w="184"/><text x="2.7136%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (165 samples, 1.72%)</title><rect x="2.6611%" y="164" width="1.7152%" height="15" fill="rgb(210,31,41)" fg:x="256" fg:w="165"/><text x="2.9111%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (22 samples, 0.23%)</title><rect x="4.1476%" y="180" width="0.2287%" height="15" fill="rgb(221,200,47)" fg:x="399" fg:w="22"/><text x="4.3976%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (348 samples, 3.62%)</title><rect x="0.9875%" y="116" width="3.6175%" height="15" fill="rgb(226,26,5)" fg:x="95" fg:w="348"/><text x="1.2375%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (22 samples, 0.23%)</title><rect x="4.3763%" y="132" width="0.2287%" height="15" fill="rgb(249,33,26)" fg:x="421" fg:w="22"/><text x="4.6263%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (13 samples, 0.14%)</title><rect x="4.4699%" y="148" width="0.1351%" height="15" fill="rgb(235,183,28)" fg:x="430" fg:w="13"/><text x="4.7199%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (28 samples, 0.29%)</title><rect x="5.2391%" y="148" width="0.2911%" height="15" fill="rgb(221,5,38)" fg:x="504" fg:w="28"/><text x="5.4891%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.17%)</title><rect x="9.3243%" y="164" width="0.1663%" height="15" fill="rgb(247,18,42)" fg:x="897" fg:w="16"/><text x="9.5743%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (413 samples, 4.29%)</title><rect x="5.5301%" y="148" width="4.2931%" height="15" fill="rgb(241,131,45)" fg:x="532" fg:w="413"/><text x="5.7801%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.33%)</title><rect x="9.4906%" y="164" width="0.3326%" height="15" fill="rgb(249,31,29)" fg:x="913" fg:w="32"/><text x="9.7406%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (295 samples, 3.07%)</title><rect x="9.8233%" y="148" width="3.0665%" height="15" fill="rgb(225,111,53)" fg:x="945" fg:w="295"/><text x="10.0733%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.22%)</title><rect x="12.6715%" y="164" width="0.2183%" height="15" fill="rgb(238,160,17)" fg:x="1219" fg:w="21"/><text x="12.9215%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (84 samples, 0.87%)</title><rect x="12.9418%" y="148" width="0.8732%" height="15" fill="rgb(214,148,48)" fg:x="1245" fg:w="84"/><text x="13.1918%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (84 samples, 0.87%)</title><rect x="13.8150%" y="148" width="0.8732%" height="15" fill="rgb(232,36,49)" fg:x="1329" fg:w="84"/><text x="14.0650%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.23%)</title><rect x="17.1414%" y="164" width="0.2287%" height="15" fill="rgb(209,103,24)" fg:x="1649" fg:w="22"/><text x="17.3914%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (292 samples, 3.04%)</title><rect x="14.6881%" y="148" width="3.0353%" height="15" fill="rgb(229,88,8)" fg:x="1413" fg:w="292"/><text x="14.9381%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.35%)</title><rect x="17.3701%" y="164" width="0.3534%" height="15" fill="rgb(213,181,19)" fg:x="1671" fg:w="34"/><text x="17.6201%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (252 samples, 2.62%)</title><rect x="17.7235%" y="148" width="2.6195%" height="15" fill="rgb(254,191,54)" fg:x="1705" fg:w="252"/><text x="17.9735%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (22 samples, 0.23%)</title><rect x="22.4532%" y="164" width="0.2287%" height="15" fill="rgb(241,83,37)" fg:x="2160" fg:w="22"/><text x="22.7032%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (78 samples, 0.81%)</title><rect x="22.6819%" y="164" width="0.8108%" height="15" fill="rgb(233,36,39)" fg:x="2182" fg:w="78"/><text x="22.9319%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (125 samples, 1.30%)</title><rect x="25.5925%" y="180" width="1.2994%" height="15" fill="rgb(226,3,54)" fg:x="2462" fg:w="125"/><text x="25.8425%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (95 samples, 0.99%)</title><rect x="28.8981%" y="196" width="0.9875%" height="15" fill="rgb(245,192,40)" fg:x="2780" fg:w="95"/><text x="29.1481%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,014 samples, 10.54%)</title><rect x="23.5031%" y="164" width="10.5405%" height="15" fill="rgb(238,167,29)" fg:x="2261" fg:w="1014"/><text x="23.7531%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (688 samples, 7.15%)</title><rect x="26.8919%" y="180" width="7.1518%" height="15" fill="rgb(232,182,51)" fg:x="2587" fg:w="688"/><text x="27.1419%" y="190.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:111) (400 samples, 4.16%)</title><rect x="29.8857%" y="196" width="4.1580%" height="15" fill="rgb(231,60,39)" fg:x="2875" fg:w="400"/><text x="30.1357%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (132 samples, 1.37%)</title><rect x="34.0437%" y="164" width="1.3721%" height="15" fill="rgb(208,69,12)" fg:x="3275" fg:w="132"/><text x="34.2937%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (96 samples, 1.00%)</title><rect x="36.4969%" y="180" width="0.9979%" height="15" fill="rgb(235,93,37)" fg:x="3511" fg:w="96"/><text x="36.7469%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (217 samples, 2.26%)</title><rect x="35.4886%" y="164" width="2.2557%" height="15" fill="rgb(213,116,39)" fg:x="3414" fg:w="217"/><text x="35.7386%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (24 samples, 0.25%)</title><rect x="37.4948%" y="180" width="0.2495%" height="15" fill="rgb(222,207,29)" fg:x="3607" fg:w="24"/><text x="37.7448%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (213 samples, 2.21%)</title><rect x="47.6091%" y="180" width="2.2141%" height="15" fill="rgb(206,96,30)" fg:x="4580" fg:w="213"/><text x="47.8591%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (22 samples, 0.23%)</title><rect x="49.8233%" y="180" width="0.2287%" height="15" fill="rgb(218,138,4)" fg:x="4793" fg:w="22"/><text x="50.0733%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (11 samples, 0.11%)</title><rect x="50.7069%" y="196" width="0.1143%" height="15" fill="rgb(250,191,14)" fg:x="4878" fg:w="11"/><text x="50.9569%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (192 samples, 2.00%)</title><rect x="50.0520%" y="180" width="1.9958%" height="15" fill="rgb(239,60,40)" fg:x="4815" fg:w="192"/><text x="50.3020%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (118 samples, 1.23%)</title><rect x="50.8212%" y="196" width="1.2266%" height="15" fill="rgb(206,27,48)" fg:x="4889" fg:w="118"/><text x="51.0712%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (36 samples, 0.37%)</title><rect x="53.5863%" y="196" width="0.3742%" height="15" fill="rgb(225,35,8)" fg:x="5155" fg:w="36"/><text x="53.8363%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.15%)</title><rect x="56.5177%" y="212" width="0.1455%" height="15" fill="rgb(250,213,24)" fg:x="5437" fg:w="14"/><text x="56.7677%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (467 samples, 4.85%)</title><rect x="53.9605%" y="196" width="4.8545%" height="15" fill="rgb(247,123,22)" fg:x="5191" fg:w="467"/><text x="54.2105%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (207 samples, 2.15%)</title><rect x="56.6632%" y="212" width="2.1518%" height="15" fill="rgb(231,138,38)" fg:x="5451" fg:w="207"/><text x="56.9132%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.25%)</title><rect x="58.5655%" y="228" width="0.2495%" height="15" fill="rgb(231,145,46)" fg:x="5634" fg:w="24"/><text x="58.8155%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (246 samples, 2.56%)</title><rect x="58.8150%" y="196" width="2.5572%" height="15" fill="rgb(251,118,11)" fg:x="5658" fg:w="246"/><text x="59.0650%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (95 samples, 0.99%)</title><rect x="61.3721%" y="196" width="0.9875%" height="15" fill="rgb(217,147,25)" fg:x="5904" fg:w="95"/><text x="61.6221%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (20 samples, 0.21%)</title><rect x="62.3597%" y="196" width="0.2079%" height="15" fill="rgb(247,81,37)" fg:x="5999" fg:w="20"/><text x="62.6097%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,045 samples, 10.86%)</title><rect x="52.0478%" y="180" width="10.8628%" height="15" fill="rgb(209,12,38)" fg:x="5007" fg:w="1045"/><text x="52.2978%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (33 samples, 0.34%)</title><rect x="62.5676%" y="196" width="0.3430%" height="15" fill="rgb(227,1,9)" fg:x="6019" fg:w="33"/><text x="62.8176%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (29 samples, 0.30%)</title><rect x="62.9314%" y="180" width="0.3015%" height="15" fill="rgb(248,47,43)" fg:x="6054" fg:w="29"/><text x="63.1814%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.16%)</title><rect x="64.3763%" y="196" width="0.1559%" height="15" fill="rgb(221,10,30)" fg:x="6193" fg:w="15"/><text x="64.6263%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (331 samples, 3.44%)</title><rect x="63.2328%" y="180" width="3.4407%" height="15" fill="rgb(210,229,1)" fg:x="6083" fg:w="331"/><text x="63.4828%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (206 samples, 2.14%)</title><rect x="64.5322%" y="196" width="2.1414%" height="15" fill="rgb(222,148,37)" fg:x="6208" fg:w="206"/><text x="64.7822%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.20%)</title><rect x="66.4761%" y="212" width="0.1975%" height="15" fill="rgb(234,67,33)" fg:x="6395" fg:w="19"/><text x="66.7261%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.11%)</title><rect x="68.0146%" y="196" width="0.1143%" height="15" fill="rgb(247,98,35)" fg:x="6543" fg:w="11"/><text x="68.2646%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (398 samples, 4.14%)</title><rect x="66.6736%" y="180" width="4.1372%" height="15" fill="rgb(247,138,52)" fg:x="6414" fg:w="398"/><text x="66.9236%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (258 samples, 2.68%)</title><rect x="68.1289%" y="196" width="2.6819%" height="15" fill="rgb(213,79,30)" fg:x="6554" fg:w="258"/><text x="68.3789%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.43%)</title><rect x="70.3846%" y="212" width="0.4262%" height="15" fill="rgb(246,177,23)" fg:x="6771" fg:w="41"/><text x="70.6346%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (77 samples, 0.80%)</title><rect x="70.8108%" y="180" width="0.8004%" height="15" fill="rgb(230,62,27)" fg:x="6812" fg:w="77"/><text x="71.0608%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (179 samples, 1.86%)</title><rect x="71.6216%" y="180" width="1.8607%" height="15" fill="rgb(216,154,8)" fg:x="6890" fg:w="179"/><text x="71.8716%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (84 samples, 0.87%)</title><rect x="73.4823%" y="180" width="0.8732%" height="15" fill="rgb(244,35,45)" fg:x="7069" fg:w="84"/><text x="73.7323%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (21 samples, 0.22%)</title><rect x="74.3555%" y="180" width="0.2183%" height="15" fill="rgb(251,115,12)" fg:x="7153" fg:w="21"/><text x="74.6055%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,886 samples, 40.40%)</title><rect x="37.7443%" y="164" width="40.3950%" height="15" fill="rgb(240,54,50)" fg:x="3631" fg:w="3886"/><text x="37.9943%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (343 samples, 3.57%)</title><rect x="74.5738%" y="180" width="3.5655%" height="15" fill="rgb(233,84,52)" fg:x="7174" fg:w="343"/><text x="74.8238%" y="190.50">site..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,625 samples, 58.47%)</title><rect x="20.3430%" y="148" width="58.4719%" height="15" fill="rgb(207,117,47)" fg:x="1957" fg:w="5625"/><text x="20.5930%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (65 samples, 0.68%)</title><rect x="78.1393%" y="164" width="0.6757%" height="15" fill="rgb(249,43,39)" fg:x="7517" fg:w="65"/><text x="78.3893%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (11 samples, 0.11%)</title><rect x="78.8150%" y="148" width="0.1143%" height="15" fill="rgb(209,38,44)" fg:x="7582" fg:w="11"/><text x="79.0650%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (48 samples, 0.50%)</title><rect x="80.1247%" y="164" width="0.4990%" height="15" fill="rgb(236,212,23)" fg:x="7708" fg:w="48"/><text x="80.3747%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (66 samples, 0.69%)</title><rect x="81.9023%" y="180" width="0.6861%" height="15" fill="rgb(242,79,21)" fg:x="7879" fg:w="66"/><text x="82.1523%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (586 samples, 6.09%)</title><rect x="78.9293%" y="148" width="6.0915%" height="15" fill="rgb(211,96,35)" fg:x="7593" fg:w="586"/><text x="79.1793%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (423 samples, 4.40%)</title><rect x="80.6237%" y="164" width="4.3971%" height="15" fill="rgb(253,215,40)" fg:x="7756" fg:w="423"/><text x="80.8737%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (234 samples, 2.43%)</title><rect x="82.5884%" y="180" width="2.4324%" height="15" fill="rgb(211,81,21)" fg:x="7945" fg:w="234"/><text x="82.8384%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (40 samples, 0.42%)</title><rect x="85.8108%" y="164" width="0.4158%" height="15" fill="rgb(208,190,38)" fg:x="8255" fg:w="40"/><text x="86.0608%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (122 samples, 1.27%)</title><rect x="85.0208%" y="148" width="1.2682%" height="15" fill="rgb(235,213,38)" fg:x="8179" fg:w="122"/><text x="85.2708%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (14 samples, 0.15%)</title><rect x="86.7568%" y="164" width="0.1455%" height="15" fill="rgb(237,122,38)" fg:x="8346" fg:w="14"/><text x="87.0068%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (104 samples, 1.08%)</title><rect x="86.2890%" y="148" width="1.0811%" height="15" fill="rgb(244,218,35)" fg:x="8301" fg:w="104"/><text x="86.5390%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (45 samples, 0.47%)</title><rect x="86.9023%" y="164" width="0.4678%" height="15" fill="rgb(240,68,47)" fg:x="8360" fg:w="45"/><text x="87.1523%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (187 samples, 1.94%)</title><rect x="87.3701%" y="148" width="1.9439%" height="15" fill="rgb(210,16,53)" fg:x="8405" fg:w="187"/><text x="87.6201%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.36%)</title><rect x="88.9501%" y="164" width="0.3638%" height="15" fill="rgb(235,124,12)" fg:x="8557" fg:w="35"/><text x="89.2001%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (79 samples, 0.82%)</title><rect x="89.3139%" y="148" width="0.8212%" height="15" fill="rgb(224,169,11)" fg:x="8592" fg:w="79"/><text x="89.5639%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (82 samples, 0.85%)</title><rect x="90.1351%" y="148" width="0.8524%" height="15" fill="rgb(250,166,2)" fg:x="8671" fg:w="82"/><text x="90.3851%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (130 samples, 1.35%)</title><rect x="92.9418%" y="164" width="1.3514%" height="15" fill="rgb(242,216,29)" fg:x="8941" fg:w="130"/><text x="93.1918%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (327 samples, 3.40%)</title><rect x="90.9875%" y="148" width="3.3992%" height="15" fill="rgb(230,116,27)" fg:x="8753" fg:w="327"/><text x="91.2375%" y="158.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:282) (53 samples, 0.55%)</title><rect x="94.3867%" y="148" width="0.5509%" height="15" fill="rgb(228,99,48)" fg:x="9080" fg:w="53"/><text x="94.6367%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,693 samples, 90.36%)</title><rect x="4.7505%" y="132" width="90.3638%" height="15" fill="rgb(253,11,6)" fg:x="457" fg:w="8693"/><text x="5.0005%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (11 samples, 0.11%)</title><rect x="95.0000%" y="148" width="0.1143%" height="15" fill="rgb(247,143,39)" fg:x="9139" fg:w="11"/><text x="95.2500%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (43 samples, 0.45%)</title><rect x="95.1143%" y="132" width="0.4470%" height="15" fill="rgb(236,97,10)" fg:x="9150" fg:w="43"/><text x="95.3643%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="98.1185%" y="148" width="0.1455%" height="15" fill="rgb(233,208,19)" fg:x="9439" fg:w="14"/><text x="98.3685%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (272 samples, 2.83%)</title><rect x="95.6653%" y="132" width="2.8274%" height="15" fill="rgb(216,164,2)" fg:x="9203" fg:w="272"/><text x="95.9153%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.23%)</title><rect x="98.2640%" y="148" width="0.2287%" height="15" fill="rgb(220,129,5)" fg:x="9453" fg:w="22"/><text x="98.5140%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,472 samples, 98.46%)</title><rect x="0.9771%" y="100" width="98.4615%" height="15" fill="rgb(242,17,10)" fg:x="94" fg:w="9472"/><text x="1.2271%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (9,118 samples, 94.78%)</title><rect x="4.6570%" y="116" width="94.7817%" height="15" fill="rgb(242,107,0)" fg:x="448" fg:w="9118"/><text x="4.9070%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (91 samples, 0.95%)</title><rect x="98.4927%" y="132" width="0.9459%" height="15" fill="rgb(251,28,31)" fg:x="9475" fg:w="91"/><text x="98.7427%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (9,557 samples, 99.35%)</title><rect x="0.1040%" y="68" width="99.3451%" height="15" fill="rgb(233,223,10)" fg:x="10" fg:w="9557"/><text x="0.3540%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,515 samples, 98.91%)</title><rect x="0.5405%" y="84" width="98.9085%" height="15" fill="rgb(215,21,27)" fg:x="52" fg:w="9515"/><text x="0.7905%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (13 samples, 0.14%)</title><rect x="99.4491%" y="68" width="0.1351%" height="15" fill="rgb(232,23,21)" fg:x="9567" fg:w="13"/><text x="99.6991%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (13 samples, 0.14%)</title><rect x="99.4491%" y="84" width="0.1351%" height="15" fill="rgb(244,5,23)" fg:x="9567" fg:w="13"/><text x="99.6991%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (13 samples, 0.14%)</title><rect x="99.4491%" y="100" width="0.1351%" height="15" fill="rgb(226,81,46)" fg:x="9567" fg:w="13"/><text x="99.6991%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (13 samples, 0.14%)</title><rect x="99.4491%" y="116" width="0.1351%" height="15" fill="rgb(247,70,30)" fg:x="9567" fg:w="13"/><text x="99.6991%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (13 samples, 0.14%)</title><rect x="99.4491%" y="132" width="0.1351%" height="15" fill="rgb(212,68,19)" fg:x="9567" fg:w="13"/><text x="99.6991%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (13 samples, 0.14%)</title><rect x="99.4491%" y="148" width="0.1351%" height="15" fill="rgb(240,187,13)" fg:x="9567" fg:w="13"/><text x="99.6991%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (13 samples, 0.14%)</title><rect x="99.4491%" y="164" width="0.1351%" height="15" fill="rgb(223,113,26)" fg:x="9567" fg:w="13"/><text x="99.6991%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.12%)</title><rect x="99.4595%" y="180" width="0.1247%" height="15" fill="rgb(206,192,2)" fg:x="9568" fg:w="12"/><text x="99.7095%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.12%)</title><rect x="99.4595%" y="196" width="0.1247%" height="15" fill="rgb(241,108,4)" fg:x="9568" fg:w="12"/><text x="99.7095%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.12%)</title><rect x="99.4595%" y="212" width="0.1247%" height="15" fill="rgb(247,173,49)" fg:x="9568" fg:w="12"/><text x="99.7095%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.12%)</title><rect x="99.4595%" y="228" width="0.1247%" height="15" fill="rgb(224,114,35)" fg:x="9568" fg:w="12"/><text x="99.7095%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.12%)</title><rect x="99.4595%" y="244" width="0.1247%" height="15" fill="rgb(245,159,27)" fg:x="9568" fg:w="12"/><text x="99.7095%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (15 samples, 0.16%)</title><rect x="99.6674%" y="68" width="0.1559%" height="15" fill="rgb(245,172,44)" fg:x="9588" fg:w="15"/><text x="99.9174%" y="78.50"></text></g><g><title>all (9,620 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="9620"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (10 samples, 0.10%)</title><rect x="99.8960%" y="68" width="0.1040%" height="15" fill="rgb(205,117,38)" fg:x="9610" fg:w="10"/><text x="100.1460%" y="78.50"></text></g></svg></svg>