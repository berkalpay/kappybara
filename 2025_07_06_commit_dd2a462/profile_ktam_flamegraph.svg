<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit dd2a462</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9661"><g><title>n_embeddings (kappybara/rule.py:62) (12 samples, 0.12%)</title><rect x="0.1863%" y="180" width="0.1242%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="12"/><text x="0.4363%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (31 samples, 0.32%)</title><rect x="0.0621%" y="84" width="0.3209%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="31"/><text x="0.3121%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (31 samples, 0.32%)</title><rect x="0.0621%" y="100" width="0.3209%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="31"/><text x="0.3121%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (25 samples, 0.26%)</title><rect x="0.1242%" y="116" width="0.2588%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="25"/><text x="0.3742%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (23 samples, 0.24%)</title><rect x="0.1449%" y="132" width="0.2381%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="23"/><text x="0.3949%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (23 samples, 0.24%)</title><rect x="0.1449%" y="148" width="0.2381%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="23"/><text x="0.3949%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (22 samples, 0.23%)</title><rect x="0.1553%" y="164" width="0.2277%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="22"/><text x="0.4053%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (38 samples, 0.39%)</title><rect x="0.4968%" y="100" width="0.3933%" height="15" fill="rgb(228,23,34)" fg:x="48" fg:w="38"/><text x="0.7468%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (32 samples, 0.33%)</title><rect x="0.5589%" y="116" width="0.3312%" height="15" fill="rgb(218,30,26)" fg:x="54" fg:w="32"/><text x="0.8089%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (24 samples, 0.25%)</title><rect x="1.0661%" y="148" width="0.2484%" height="15" fill="rgb(220,122,19)" fg:x="103" fg:w="24"/><text x="1.3161%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (64 samples, 0.66%)</title><rect x="1.3456%" y="148" width="0.6625%" height="15" fill="rgb(250,228,42)" fg:x="130" fg:w="64"/><text x="1.5956%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (17 samples, 0.18%)</title><rect x="2.0081%" y="148" width="0.1760%" height="15" fill="rgb(240,193,28)" fg:x="194" fg:w="17"/><text x="2.2581%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (15 samples, 0.16%)</title><rect x="3.1881%" y="180" width="0.1553%" height="15" fill="rgb(216,20,37)" fg:x="308" fg:w="15"/><text x="3.4381%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (11 samples, 0.11%)</title><rect x="3.5090%" y="196" width="0.1139%" height="15" fill="rgb(206,188,39)" fg:x="339" fg:w="11"/><text x="3.7590%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (77 samples, 0.80%)</title><rect x="3.3433%" y="180" width="0.7970%" height="15" fill="rgb(217,207,13)" fg:x="323" fg:w="77"/><text x="3.5933%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (50 samples, 0.52%)</title><rect x="3.6228%" y="196" width="0.5175%" height="15" fill="rgb(231,73,38)" fg:x="350" fg:w="50"/><text x="3.8728%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (335 samples, 3.47%)</title><rect x="0.9316%" y="132" width="3.4675%" height="15" fill="rgb(225,20,46)" fg:x="90" fg:w="335"/><text x="1.1816%" y="142.50">_re..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (210 samples, 2.17%)</title><rect x="2.2254%" y="148" width="2.1737%" height="15" fill="rgb(210,31,41)" fg:x="215" fg:w="210"/><text x="2.4754%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (184 samples, 1.90%)</title><rect x="2.4946%" y="164" width="1.9046%" height="15" fill="rgb(221,200,47)" fg:x="241" fg:w="184"/><text x="2.7446%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (23 samples, 0.24%)</title><rect x="4.1611%" y="180" width="0.2381%" height="15" fill="rgb(226,26,5)" fg:x="402" fg:w="23"/><text x="4.4111%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (18 samples, 0.19%)</title><rect x="4.3991%" y="132" width="0.1863%" height="15" fill="rgb(249,33,26)" fg:x="425" fg:w="18"/><text x="4.6491%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (10 samples, 0.10%)</title><rect x="4.4819%" y="148" width="0.1035%" height="15" fill="rgb(235,183,28)" fg:x="433" fg:w="10"/><text x="4.7319%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (359 samples, 3.72%)</title><rect x="0.9005%" y="116" width="3.7160%" height="15" fill="rgb(221,5,38)" fg:x="87" fg:w="359"/><text x="1.1505%" y="126.50">appl..</text></g><g><title>embeddings (kappybara/pattern.py:256) (45 samples, 0.47%)</title><rect x="5.2479%" y="148" width="0.4658%" height="15" fill="rgb(247,18,42)" fg:x="507" fg:w="45"/><text x="5.4979%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.17%)</title><rect x="9.6677%" y="164" width="0.1656%" height="15" fill="rgb(241,131,45)" fg:x="934" fg:w="16"/><text x="9.9177%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (446 samples, 4.62%)</title><rect x="5.7137%" y="148" width="4.6165%" height="15" fill="rgb(249,31,29)" fg:x="552" fg:w="446"/><text x="5.9637%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.50%)</title><rect x="9.8334%" y="164" width="0.4968%" height="15" fill="rgb(225,111,53)" fg:x="950" fg:w="48"/><text x="10.0834%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.11%)</title><rect x="12.8662%" y="164" width="0.1139%" height="15" fill="rgb(238,160,17)" fg:x="1243" fg:w="11"/><text x="13.1162%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (289 samples, 2.99%)</title><rect x="10.3302%" y="148" width="2.9914%" height="15" fill="rgb(214,148,48)" fg:x="998" fg:w="289"/><text x="10.5802%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.34%)</title><rect x="12.9800%" y="164" width="0.3416%" height="15" fill="rgb(232,36,49)" fg:x="1254" fg:w="33"/><text x="13.2300%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (79 samples, 0.82%)</title><rect x="13.3630%" y="148" width="0.8177%" height="15" fill="rgb(209,103,24)" fg:x="1291" fg:w="79"/><text x="13.6130%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (86 samples, 0.89%)</title><rect x="14.1807%" y="148" width="0.8902%" height="15" fill="rgb(229,88,8)" fg:x="1370" fg:w="86"/><text x="14.4307%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.18%)</title><rect x="17.2653%" y="164" width="0.1760%" height="15" fill="rgb(213,181,19)" fg:x="1668" fg:w="17"/><text x="17.5153%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (267 samples, 2.76%)</title><rect x="15.0709%" y="148" width="2.7637%" height="15" fill="rgb(254,191,54)" fg:x="1456" fg:w="267"/><text x="15.3209%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.39%)</title><rect x="17.4413%" y="164" width="0.3933%" height="15" fill="rgb(241,83,37)" fg:x="1685" fg:w="38"/><text x="17.6913%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (262 samples, 2.71%)</title><rect x="17.8346%" y="148" width="2.7119%" height="15" fill="rgb(233,36,39)" fg:x="1723" fg:w="262"/><text x="18.0846%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (17 samples, 0.18%)</title><rect x="22.4614%" y="164" width="0.1760%" height="15" fill="rgb(226,3,54)" fg:x="2170" fg:w="17"/><text x="22.7114%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (72 samples, 0.75%)</title><rect x="22.6374%" y="164" width="0.7453%" height="15" fill="rgb(245,192,40)" fg:x="2187" fg:w="72"/><text x="22.8874%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (154 samples, 1.59%)</title><rect x="25.1216%" y="180" width="1.5940%" height="15" fill="rgb(238,167,29)" fg:x="2427" fg:w="154"/><text x="25.3716%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (111 samples, 1.15%)</title><rect x="28.7755%" y="196" width="1.1489%" height="15" fill="rgb(232,182,51)" fg:x="2780" fg:w="111"/><text x="29.0255%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,043 samples, 10.80%)</title><rect x="23.4655%" y="164" width="10.7960%" height="15" fill="rgb(231,60,39)" fg:x="2267" fg:w="1043"/><text x="23.7155%" y="174.50">embeds_in (kappy..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (729 samples, 7.55%)</title><rect x="26.7157%" y="180" width="7.5458%" height="15" fill="rgb(208,69,12)" fg:x="2581" fg:w="729"/><text x="26.9657%" y="190.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:111) (419 samples, 4.34%)</title><rect x="29.9244%" y="196" width="4.3370%" height="15" fill="rgb(235,93,37)" fg:x="2891" fg:w="419"/><text x="30.1744%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (130 samples, 1.35%)</title><rect x="34.2615%" y="164" width="1.3456%" height="15" fill="rgb(213,116,39)" fg:x="3310" fg:w="130"/><text x="34.5115%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (72 samples, 0.75%)</title><rect x="36.8595%" y="180" width="0.7453%" height="15" fill="rgb(222,207,29)" fg:x="3561" fg:w="72"/><text x="37.1095%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (217 samples, 2.25%)</title><rect x="35.6795%" y="164" width="2.2461%" height="15" fill="rgb(206,96,30)" fg:x="3447" fg:w="217"/><text x="35.9295%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (31 samples, 0.32%)</title><rect x="37.6048%" y="180" width="0.3209%" height="15" fill="rgb(218,138,4)" fg:x="3633" fg:w="31"/><text x="37.8548%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (215 samples, 2.23%)</title><rect x="48.0903%" y="180" width="2.2254%" height="15" fill="rgb(250,191,14)" fg:x="4646" fg:w="215"/><text x="48.3403%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (11 samples, 0.11%)</title><rect x="50.3157%" y="180" width="0.1139%" height="15" fill="rgb(239,60,40)" fg:x="4861" fg:w="11"/><text x="50.5657%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (20 samples, 0.21%)</title><rect x="50.8436%" y="196" width="0.2070%" height="15" fill="rgb(206,27,48)" fg:x="4912" fg:w="20"/><text x="51.0936%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (168 samples, 1.74%)</title><rect x="50.4296%" y="180" width="1.7390%" height="15" fill="rgb(225,35,8)" fg:x="4872" fg:w="168"/><text x="50.6796%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (108 samples, 1.12%)</title><rect x="51.0506%" y="196" width="1.1179%" height="15" fill="rgb(250,213,24)" fg:x="4932" fg:w="108"/><text x="51.3006%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (22 samples, 0.23%)</title><rect x="53.2140%" y="196" width="0.2277%" height="15" fill="rgb(247,123,22)" fg:x="5141" fg:w="22"/><text x="53.4640%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (21 samples, 0.22%)</title><rect x="55.8327%" y="212" width="0.2174%" height="15" fill="rgb(231,138,38)" fg:x="5394" fg:w="21"/><text x="56.0827%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.11%)</title><rect x="57.7787%" y="228" width="0.1139%" height="15" fill="rgb(231,145,46)" fg:x="5582" fg:w="11"/><text x="58.0287%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (485 samples, 5.02%)</title><rect x="53.4417%" y="196" width="5.0202%" height="15" fill="rgb(251,118,11)" fg:x="5163" fg:w="485"/><text x="53.6917%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (233 samples, 2.41%)</title><rect x="56.0501%" y="212" width="2.4118%" height="15" fill="rgb(217,147,25)" fg:x="5415" fg:w="233"/><text x="56.3001%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (55 samples, 0.57%)</title><rect x="57.8926%" y="228" width="0.5693%" height="15" fill="rgb(247,81,37)" fg:x="5593" fg:w="55"/><text x="58.1426%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (258 samples, 2.67%)</title><rect x="58.4619%" y="196" width="2.6705%" height="15" fill="rgb(209,12,38)" fg:x="5648" fg:w="258"/><text x="58.7119%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (121 samples, 1.25%)</title><rect x="61.1324%" y="196" width="1.2525%" height="15" fill="rgb(227,1,9)" fg:x="5906" fg:w="121"/><text x="61.3824%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (16 samples, 0.17%)</title><rect x="62.3848%" y="196" width="0.1656%" height="15" fill="rgb(248,47,43)" fg:x="6027" fg:w="16"/><text x="62.6348%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,044 samples, 10.81%)</title><rect x="52.1685%" y="180" width="10.8063%" height="15" fill="rgb(221,10,30)" fg:x="5040" fg:w="1044"/><text x="52.4185%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (41 samples, 0.42%)</title><rect x="62.5505%" y="196" width="0.4244%" height="15" fill="rgb(210,229,1)" fg:x="6043" fg:w="41"/><text x="62.8005%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (21 samples, 0.22%)</title><rect x="62.9852%" y="180" width="0.2174%" height="15" fill="rgb(222,148,37)" fg:x="6085" fg:w="21"/><text x="63.2352%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.14%)</title><rect x="64.4033%" y="196" width="0.1449%" height="15" fill="rgb(234,67,33)" fg:x="6222" fg:w="14"/><text x="64.6533%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (365 samples, 3.78%)</title><rect x="63.2026%" y="180" width="3.7781%" height="15" fill="rgb(247,98,35)" fg:x="6106" fg:w="365"/><text x="63.4526%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (235 samples, 2.43%)</title><rect x="64.5482%" y="196" width="2.4325%" height="15" fill="rgb(247,138,52)" fg:x="6236" fg:w="235"/><text x="64.7982%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.28%)</title><rect x="66.7012%" y="212" width="0.2795%" height="15" fill="rgb(213,79,30)" fg:x="6444" fg:w="27"/><text x="66.9512%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.10%)</title><rect x="67.9122%" y="196" width="0.1035%" height="15" fill="rgb(246,177,23)" fg:x="6561" fg:w="10"/><text x="68.1622%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (373 samples, 3.86%)</title><rect x="66.9806%" y="180" width="3.8609%" height="15" fill="rgb(230,62,27)" fg:x="6471" fg:w="373"/><text x="67.2306%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (273 samples, 2.83%)</title><rect x="68.0157%" y="196" width="2.8258%" height="15" fill="rgb(216,154,8)" fg:x="6571" fg:w="273"/><text x="68.2657%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (79 samples, 0.82%)</title><rect x="70.0238%" y="212" width="0.8177%" height="15" fill="rgb(244,35,45)" fg:x="6765" fg:w="79"/><text x="70.2738%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (85 samples, 0.88%)</title><rect x="70.8415%" y="180" width="0.8798%" height="15" fill="rgb(251,115,12)" fg:x="6844" fg:w="85"/><text x="71.0915%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (185 samples, 1.91%)</title><rect x="71.7214%" y="180" width="1.9149%" height="15" fill="rgb(240,54,50)" fg:x="6929" fg:w="185"/><text x="71.9714%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (90 samples, 0.93%)</title><rect x="73.6363%" y="180" width="0.9316%" height="15" fill="rgb(233,84,52)" fg:x="7114" fg:w="90"/><text x="73.8863%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (15 samples, 0.16%)</title><rect x="74.5679%" y="180" width="0.1553%" height="15" fill="rgb(207,117,47)" fg:x="7204" fg:w="15"/><text x="74.8179%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,875 samples, 40.11%)</title><rect x="37.9257%" y="164" width="40.1097%" height="15" fill="rgb(249,43,39)" fg:x="3664" fg:w="3875"/><text x="38.1757%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (320 samples, 3.31%)</title><rect x="74.7231%" y="180" width="3.3123%" height="15" fill="rgb(209,38,44)" fg:x="7219" fg:w="320"/><text x="74.9731%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,611 samples, 58.08%)</title><rect x="20.5465%" y="148" width="58.0789%" height="15" fill="rgb(236,212,23)" fg:x="1985" fg:w="5611"/><text x="20.7965%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (57 samples, 0.59%)</title><rect x="78.0354%" y="164" width="0.5900%" height="15" fill="rgb(242,79,21)" fg:x="7539" fg:w="57"/><text x="78.2854%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (55 samples, 0.57%)</title><rect x="80.0642%" y="164" width="0.5693%" height="15" fill="rgb(211,96,35)" fg:x="7735" fg:w="55"/><text x="80.3142%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (66 samples, 0.68%)</title><rect x="82.0205%" y="180" width="0.6832%" height="15" fill="rgb(253,215,40)" fg:x="7924" fg:w="66"/><text x="82.2705%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (621 samples, 6.43%)</title><rect x="78.7289%" y="148" width="6.4279%" height="15" fill="rgb(211,81,21)" fg:x="7606" fg:w="621"/><text x="78.9789%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (437 samples, 4.52%)</title><rect x="80.6335%" y="164" width="4.5233%" height="15" fill="rgb(208,190,38)" fg:x="7790" fg:w="437"/><text x="80.8835%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (237 samples, 2.45%)</title><rect x="82.7037%" y="180" width="2.4532%" height="15" fill="rgb(235,213,38)" fg:x="7990" fg:w="237"/><text x="82.9537%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (34 samples, 0.35%)</title><rect x="85.8089%" y="164" width="0.3519%" height="15" fill="rgb(237,122,38)" fg:x="8290" fg:w="34"/><text x="86.0589%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (104 samples, 1.08%)</title><rect x="85.1568%" y="148" width="1.0765%" height="15" fill="rgb(244,218,35)" fg:x="8227" fg:w="104"/><text x="85.4068%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (18 samples, 0.19%)</title><rect x="86.4817%" y="164" width="0.1863%" height="15" fill="rgb(240,68,47)" fg:x="8355" fg:w="18"/><text x="86.7317%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (75 samples, 0.78%)</title><rect x="86.2333%" y="148" width="0.7763%" height="15" fill="rgb(210,16,53)" fg:x="8331" fg:w="75"/><text x="86.4833%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (33 samples, 0.34%)</title><rect x="86.6680%" y="164" width="0.3416%" height="15" fill="rgb(235,124,12)" fg:x="8373" fg:w="33"/><text x="86.9180%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.19%)</title><rect x="88.3656%" y="164" width="0.1863%" height="15" fill="rgb(224,169,11)" fg:x="8537" fg:w="18"/><text x="88.6156%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (174 samples, 1.80%)</title><rect x="87.0096%" y="148" width="1.8011%" height="15" fill="rgb(250,166,2)" fg:x="8406" fg:w="174"/><text x="87.2596%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.26%)</title><rect x="88.5519%" y="164" width="0.2588%" height="15" fill="rgb(242,216,29)" fg:x="8555" fg:w="25"/><text x="88.8019%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (69 samples, 0.71%)</title><rect x="88.8107%" y="148" width="0.7142%" height="15" fill="rgb(230,116,27)" fg:x="8580" fg:w="69"/><text x="89.0607%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.11%)</title><rect x="89.4110%" y="164" width="0.1139%" height="15" fill="rgb(228,99,48)" fg:x="8638" fg:w="11"/><text x="89.6610%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (85 samples, 0.88%)</title><rect x="89.5249%" y="148" width="0.8798%" height="15" fill="rgb(253,11,6)" fg:x="8649" fg:w="85"/><text x="89.7749%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.12%)</title><rect x="92.4749%" y="164" width="0.1242%" height="15" fill="rgb(247,143,39)" fg:x="8934" fg:w="12"/><text x="92.7249%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (139 samples, 1.44%)</title><rect x="92.5991%" y="164" width="1.4388%" height="15" fill="rgb(236,97,10)" fg:x="8946" fg:w="139"/><text x="92.8491%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.21%)</title><rect x="93.8309%" y="180" width="0.2070%" height="15" fill="rgb(233,208,19)" fg:x="9065" fg:w="20"/><text x="94.0809%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (364 samples, 3.77%)</title><rect x="90.4047%" y="148" width="3.7677%" height="15" fill="rgb(216,164,2)" fg:x="8734" fg:w="364"/><text x="90.6547%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.11%)</title><rect x="94.0586%" y="164" width="0.1139%" height="15" fill="rgb(220,129,5)" fg:x="9087" fg:w="11"/><text x="94.3086%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (48 samples, 0.50%)</title><rect x="94.1724%" y="148" width="0.4968%" height="15" fill="rgb(242,17,10)" fg:x="9098" fg:w="48"/><text x="94.4224%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,719 samples, 90.25%)</title><rect x="4.7200%" y="132" width="90.2495%" height="15" fill="rgb(242,107,0)" fg:x="456" fg:w="8719"/><text x="4.9700%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (20 samples, 0.21%)</title><rect x="94.7624%" y="148" width="0.2070%" height="15" fill="rgb(251,28,31)" fg:x="9155" fg:w="20"/><text x="95.0124%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (68 samples, 0.70%)</title><rect x="94.9695%" y="132" width="0.7039%" height="15" fill="rgb(233,223,10)" fg:x="9175" fg:w="68"/><text x="95.2195%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (13 samples, 0.13%)</title><rect x="95.6733%" y="132" width="0.1346%" height="15" fill="rgb(215,21,27)" fg:x="9243" fg:w="13"/><text x="95.9233%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.13%)</title><rect x="98.0644%" y="148" width="0.1346%" height="15" fill="rgb(232,23,21)" fg:x="9474" fg:w="13"/><text x="98.3144%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (259 samples, 2.68%)</title><rect x="95.9010%" y="132" width="2.6809%" height="15" fill="rgb(244,5,23)" fg:x="9265" fg:w="259"/><text x="96.1510%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.38%)</title><rect x="98.1989%" y="148" width="0.3830%" height="15" fill="rgb(226,81,46)" fg:x="9487" fg:w="37"/><text x="98.4489%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.11%)</title><rect x="99.3272%" y="148" width="0.1139%" height="15" fill="rgb(247,70,30)" fg:x="9596" fg:w="11"/><text x="99.5772%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,529 samples, 98.63%)</title><rect x="0.8902%" y="100" width="98.6337%" height="15" fill="rgb(212,68,19)" fg:x="86" fg:w="9529"/><text x="1.1402%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (9,165 samples, 94.87%)</title><rect x="4.6579%" y="116" width="94.8660%" height="15" fill="rgb(240,187,13)" fg:x="450" fg:w="9165"/><text x="4.9079%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (91 samples, 0.94%)</title><rect x="98.5819%" y="132" width="0.9419%" height="15" fill="rgb(223,113,26)" fg:x="9524" fg:w="91"/><text x="98.8319%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,611 samples, 99.48%)</title><rect x="0.0518%" y="68" width="99.4825%" height="15" fill="rgb(206,192,2)" fg:x="5" fg:w="9611"/><text x="0.3018%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,579 samples, 99.15%)</title><rect x="0.3830%" y="84" width="99.1512%" height="15" fill="rgb(241,108,4)" fg:x="37" fg:w="9579"/><text x="0.6330%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (10 samples, 0.10%)</title><rect x="99.5342%" y="68" width="0.1035%" height="15" fill="rgb(247,173,49)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.10%)</title><rect x="99.5342%" y="84" width="0.1035%" height="15" fill="rgb(224,114,35)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.10%)</title><rect x="99.5342%" y="100" width="0.1035%" height="15" fill="rgb(245,159,27)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.10%)</title><rect x="99.5342%" y="116" width="0.1035%" height="15" fill="rgb(245,172,44)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.10%)</title><rect x="99.5342%" y="132" width="0.1035%" height="15" fill="rgb(236,23,11)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.10%)</title><rect x="99.5342%" y="148" width="0.1035%" height="15" fill="rgb(205,117,38)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.10%)</title><rect x="99.5342%" y="164" width="0.1035%" height="15" fill="rgb(237,72,25)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.10%)</title><rect x="99.5342%" y="180" width="0.1035%" height="15" fill="rgb(244,70,9)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.10%)</title><rect x="99.5342%" y="196" width="0.1035%" height="15" fill="rgb(217,125,39)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.10%)</title><rect x="99.5342%" y="212" width="0.1035%" height="15" fill="rgb(235,36,10)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.10%)</title><rect x="99.5342%" y="228" width="0.1035%" height="15" fill="rgb(251,123,47)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.10%)</title><rect x="99.5342%" y="244" width="0.1035%" height="15" fill="rgb(221,13,13)" fg:x="9616" fg:w="10"/><text x="99.7842%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (12 samples, 0.12%)</title><rect x="99.6998%" y="68" width="0.1242%" height="15" fill="rgb(238,131,9)" fg:x="9632" fg:w="12"/><text x="99.9498%" y="78.50"></text></g><g><title>all (9,661 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="9661"/><text x="0.2500%" y="62.50"></text></g></svg></svg>