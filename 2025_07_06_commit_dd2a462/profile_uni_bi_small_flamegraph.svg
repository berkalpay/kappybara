<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit dd2a462</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="11296"><g><title>update (kappybara/system.py:69) (69 samples, 0.61%)</title><rect x="0.0443%" y="84" width="0.6108%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="69"/><text x="0.2943%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (69 samples, 0.61%)</title><rect x="0.0443%" y="100" width="0.6108%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="69"/><text x="0.2943%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (68 samples, 0.60%)</title><rect x="0.0531%" y="116" width="0.6020%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="68"/><text x="0.3031%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (64 samples, 0.57%)</title><rect x="0.0885%" y="132" width="0.5666%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="64"/><text x="0.3385%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (64 samples, 0.57%)</title><rect x="0.0885%" y="148" width="0.5666%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="64"/><text x="0.3385%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (59 samples, 0.52%)</title><rect x="0.1328%" y="164" width="0.5223%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="59"/><text x="0.3828%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (18 samples, 0.16%)</title><rect x="0.8853%" y="116" width="0.1593%" height="15" fill="rgb(207,160,47)" fg:x="100" fg:w="18"/><text x="1.1353%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (54 samples, 0.48%)</title><rect x="0.7525%" y="100" width="0.4780%" height="15" fill="rgb(228,23,34)" fg:x="85" fg:w="54"/><text x="1.0025%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (13 samples, 0.12%)</title><rect x="1.1154%" y="116" width="0.1151%" height="15" fill="rgb(218,30,26)" fg:x="126" fg:w="13"/><text x="1.3654%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (26 samples, 0.23%)</title><rect x="1.3545%" y="148" width="0.2302%" height="15" fill="rgb(220,122,19)" fg:x="153" fg:w="26"/><text x="1.6045%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:128) (20 samples, 0.18%)</title><rect x="1.6200%" y="148" width="0.1771%" height="15" fill="rgb(250,228,42)" fg:x="183" fg:w="20"/><text x="1.8700%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (145 samples, 1.28%)</title><rect x="1.7971%" y="148" width="1.2836%" height="15" fill="rgb(240,193,28)" fg:x="203" fg:w="145"/><text x="2.0471%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.15%)</title><rect x="2.9302%" y="164" width="0.1505%" height="15" fill="rgb(216,20,37)" fg:x="331" fg:w="17"/><text x="3.1802%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (27 samples, 0.24%)</title><rect x="3.0807%" y="148" width="0.2390%" height="15" fill="rgb(206,188,39)" fg:x="348" fg:w="27"/><text x="3.3307%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (12 samples, 0.11%)</title><rect x="4.6211%" y="180" width="0.1062%" height="15" fill="rgb(217,207,13)" fg:x="522" fg:w="12"/><text x="4.8711%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (79 samples, 0.70%)</title><rect x="4.7273%" y="180" width="0.6994%" height="15" fill="rgb(231,73,38)" fg:x="534" fg:w="79"/><text x="4.9773%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (57 samples, 0.50%)</title><rect x="4.9221%" y="196" width="0.5046%" height="15" fill="rgb(225,20,46)" fg:x="556" fg:w="57"/><text x="5.1721%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (505 samples, 4.47%)</title><rect x="1.2659%" y="132" width="4.4706%" height="15" fill="rgb(210,31,41)" fg:x="143" fg:w="505"/><text x="1.5159%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (267 samples, 2.36%)</title><rect x="3.3729%" y="148" width="2.3637%" height="15" fill="rgb(221,200,47)" fg:x="381" fg:w="267"/><text x="3.6229%" y="158.50">de..</text></g><g><title>neighbors (kappybara/pattern.py:120) (213 samples, 1.89%)</title><rect x="3.8509%" y="164" width="1.8856%" height="15" fill="rgb(226,26,5)" fg:x="435" fg:w="213"/><text x="4.1009%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (32 samples, 0.28%)</title><rect x="5.4533%" y="180" width="0.2833%" height="15" fill="rgb(249,33,26)" fg:x="616" fg:w="32"/><text x="5.7033%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (40 samples, 0.35%)</title><rect x="5.7365%" y="132" width="0.3541%" height="15" fill="rgb(235,183,28)" fg:x="648" fg:w="40"/><text x="5.9865%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (31 samples, 0.27%)</title><rect x="5.8162%" y="148" width="0.2744%" height="15" fill="rgb(221,5,38)" fg:x="657" fg:w="31"/><text x="6.0662%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (553 samples, 4.90%)</title><rect x="1.2305%" y="116" width="4.8955%" height="15" fill="rgb(247,18,42)" fg:x="139" fg:w="553"/><text x="1.4805%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:256) (52 samples, 0.46%)</title><rect x="6.7458%" y="148" width="0.4603%" height="15" fill="rgb(241,131,45)" fg:x="762" fg:w="52"/><text x="6.9958%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.17%)</title><rect x="10.9508%" y="164" width="0.1682%" height="15" fill="rgb(249,31,29)" fg:x="1237" fg:w="19"/><text x="11.2008%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (493 samples, 4.36%)</title><rect x="7.2061%" y="148" width="4.3644%" height="15" fill="rgb(225,111,53)" fg:x="814" fg:w="493"/><text x="7.4561%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (51 samples, 0.45%)</title><rect x="11.1190%" y="164" width="0.4515%" height="15" fill="rgb(238,160,17)" fg:x="1256" fg:w="51"/><text x="11.3690%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.20%)</title><rect x="14.3856%" y="164" width="0.2036%" height="15" fill="rgb(214,148,48)" fg:x="1625" fg:w="23"/><text x="14.6356%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (367 samples, 3.25%)</title><rect x="11.5705%" y="148" width="3.2489%" height="15" fill="rgb(232,36,49)" fg:x="1307" fg:w="367"/><text x="11.8205%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.23%)</title><rect x="14.5892%" y="164" width="0.2302%" height="15" fill="rgb(209,103,24)" fg:x="1648" fg:w="26"/><text x="14.8392%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (110 samples, 0.97%)</title><rect x="14.8371%" y="148" width="0.9738%" height="15" fill="rgb(229,88,8)" fg:x="1676" fg:w="110"/><text x="15.0871%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (73 samples, 0.65%)</title><rect x="15.8109%" y="148" width="0.6462%" height="15" fill="rgb(213,181,19)" fg:x="1786" fg:w="73"/><text x="16.0609%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.13%)</title><rect x="18.4047%" y="164" width="0.1328%" height="15" fill="rgb(254,191,54)" fg:x="2079" fg:w="15"/><text x="18.6547%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (274 samples, 2.43%)</title><rect x="16.4572%" y="148" width="2.4256%" height="15" fill="rgb(241,83,37)" fg:x="1859" fg:w="274"/><text x="16.7072%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (39 samples, 0.35%)</title><rect x="18.5375%" y="164" width="0.3453%" height="15" fill="rgb(233,36,39)" fg:x="2094" fg:w="39"/><text x="18.7875%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (289 samples, 2.56%)</title><rect x="18.8828%" y="148" width="2.5584%" height="15" fill="rgb(226,3,54)" fg:x="2133" fg:w="289"/><text x="19.1328%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (95 samples, 0.84%)</title><rect x="23.4950%" y="164" width="0.8410%" height="15" fill="rgb(245,192,40)" fg:x="2654" fg:w="95"/><text x="23.7450%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (124 samples, 1.10%)</title><rect x="24.3360%" y="164" width="1.0977%" height="15" fill="rgb(238,167,29)" fg:x="2749" fg:w="124"/><text x="24.5860%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:172) (14 samples, 0.12%)</title><rect x="25.4338%" y="164" width="0.1239%" height="15" fill="rgb(232,182,51)" fg:x="2873" fg:w="14"/><text x="25.6838%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (194 samples, 1.72%)</title><rect x="27.6558%" y="180" width="1.7174%" height="15" fill="rgb(231,60,39)" fg:x="3124" fg:w="194"/><text x="27.9058%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (130 samples, 1.15%)</title><rect x="31.0907%" y="196" width="1.1508%" height="15" fill="rgb(208,69,12)" fg:x="3512" fg:w="130"/><text x="31.3407%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (1,167 samples, 10.33%)</title><rect x="25.5577%" y="164" width="10.3311%" height="15" fill="rgb(235,93,37)" fg:x="2887" fg:w="1167"/><text x="25.8077%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (736 samples, 6.52%)</title><rect x="29.3732%" y="180" width="6.5156%" height="15" fill="rgb(213,116,39)" fg:x="3318" fg:w="736"/><text x="29.6232%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (412 samples, 3.65%)</title><rect x="32.2415%" y="196" width="3.6473%" height="15" fill="rgb(222,207,29)" fg:x="3642" fg:w="412"/><text x="32.4915%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (152 samples, 1.35%)</title><rect x="35.8888%" y="164" width="1.3456%" height="15" fill="rgb(206,96,30)" fg:x="4054" fg:w="152"/><text x="36.1388%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (80 samples, 0.71%)</title><rect x="38.6243%" y="180" width="0.7082%" height="15" fill="rgb(218,138,4)" fg:x="4363" fg:w="80"/><text x="38.8743%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (276 samples, 2.44%)</title><rect x="37.2964%" y="164" width="2.4433%" height="15" fill="rgb(250,191,14)" fg:x="4213" fg:w="276"/><text x="37.5464%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (46 samples, 0.41%)</title><rect x="39.3325%" y="180" width="0.4072%" height="15" fill="rgb(239,60,40)" fg:x="4443" fg:w="46"/><text x="39.5825%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (238 samples, 2.11%)</title><rect x="49.7610%" y="180" width="2.1069%" height="15" fill="rgb(206,27,48)" fg:x="5621" fg:w="238"/><text x="50.0110%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (46 samples, 0.41%)</title><rect x="51.8679%" y="180" width="0.4072%" height="15" fill="rgb(225,35,8)" fg:x="5859" fg:w="46"/><text x="52.1179%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (19 samples, 0.17%)</title><rect x="52.6824%" y="196" width="0.1682%" height="15" fill="rgb(250,213,24)" fg:x="5951" fg:w="19"/><text x="52.9324%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (168 samples, 1.49%)</title><rect x="52.2751%" y="180" width="1.4873%" height="15" fill="rgb(247,123,22)" fg:x="5905" fg:w="168"/><text x="52.5251%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (103 samples, 0.91%)</title><rect x="52.8506%" y="196" width="0.9118%" height="15" fill="rgb(231,138,38)" fg:x="5970" fg:w="103"/><text x="53.1006%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (22 samples, 0.19%)</title><rect x="54.7096%" y="196" width="0.1948%" height="15" fill="rgb(231,145,46)" fg:x="6180" fg:w="22"/><text x="54.9596%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (24 samples, 0.21%)</title><rect x="57.0290%" y="212" width="0.2125%" height="15" fill="rgb(251,118,11)" fg:x="6442" fg:w="24"/><text x="57.2790%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (575 samples, 5.09%)</title><rect x="54.9044%" y="196" width="5.0903%" height="15" fill="rgb(217,147,25)" fg:x="6202" fg:w="575"/><text x="55.1544%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (311 samples, 2.75%)</title><rect x="57.2415%" y="212" width="2.7532%" height="15" fill="rgb(247,81,37)" fg:x="6466" fg:w="311"/><text x="57.4915%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (59 samples, 0.52%)</title><rect x="59.4724%" y="228" width="0.5223%" height="15" fill="rgb(209,12,38)" fg:x="6718" fg:w="59"/><text x="59.7224%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (232 samples, 2.05%)</title><rect x="59.9947%" y="196" width="2.0538%" height="15" fill="rgb(227,1,9)" fg:x="6777" fg:w="232"/><text x="60.2447%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (107 samples, 0.95%)</title><rect x="62.0485%" y="196" width="0.9472%" height="15" fill="rgb(248,47,43)" fg:x="7009" fg:w="107"/><text x="62.2985%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,100 samples, 9.74%)</title><rect x="53.7624%" y="180" width="9.7380%" height="15" fill="rgb(221,10,30)" fg:x="6073" fg:w="1100"/><text x="54.0124%" y="190.50">embeds_in (kap..</text></g><g><title>coupled (kappybara/pattern.py:64) (46 samples, 0.41%)</title><rect x="63.0931%" y="196" width="0.4072%" height="15" fill="rgb(210,229,1)" fg:x="7127" fg:w="46"/><text x="63.3431%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (29 samples, 0.26%)</title><rect x="63.5004%" y="180" width="0.2567%" height="15" fill="rgb(222,148,37)" fg:x="7173" fg:w="29"/><text x="63.7504%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (15 samples, 0.13%)</title><rect x="63.7571%" y="180" width="0.1328%" height="15" fill="rgb(234,67,33)" fg:x="7202" fg:w="15"/><text x="64.0071%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.12%)</title><rect x="64.7574%" y="196" width="0.1239%" height="15" fill="rgb(247,98,35)" fg:x="7315" fg:w="14"/><text x="65.0074%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (356 samples, 3.15%)</title><rect x="63.8899%" y="180" width="3.1516%" height="15" fill="rgb(247,138,52)" fg:x="7217" fg:w="356"/><text x="64.1399%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (244 samples, 2.16%)</title><rect x="64.8814%" y="196" width="2.1601%" height="15" fill="rgb(213,79,30)" fg:x="7329" fg:w="244"/><text x="65.1314%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.34%)</title><rect x="66.7050%" y="212" width="0.3364%" height="15" fill="rgb(246,177,23)" fg:x="7535" fg:w="38"/><text x="66.9550%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.12%)</title><rect x="68.2542%" y="196" width="0.1151%" height="15" fill="rgb(230,62,27)" fg:x="7710" fg:w="13"/><text x="68.5042%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (478 samples, 4.23%)</title><rect x="67.0414%" y="180" width="4.2316%" height="15" fill="rgb(216,154,8)" fg:x="7573" fg:w="478"/><text x="67.2914%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (328 samples, 2.90%)</title><rect x="68.3693%" y="196" width="2.9037%" height="15" fill="rgb(244,35,45)" fg:x="7723" fg:w="328"/><text x="68.6193%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (82 samples, 0.73%)</title><rect x="70.5471%" y="212" width="0.7259%" height="15" fill="rgb(251,115,12)" fg:x="7969" fg:w="82"/><text x="70.7971%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (110 samples, 0.97%)</title><rect x="71.2730%" y="180" width="0.9738%" height="15" fill="rgb(240,54,50)" fg:x="8051" fg:w="110"/><text x="71.5230%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (193 samples, 1.71%)</title><rect x="72.2734%" y="180" width="1.7086%" height="15" fill="rgb(233,84,52)" fg:x="8164" fg:w="193"/><text x="72.5234%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (108 samples, 0.96%)</title><rect x="73.9819%" y="180" width="0.9561%" height="15" fill="rgb(207,117,47)" fg:x="8357" fg:w="108"/><text x="74.2319%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (35 samples, 0.31%)</title><rect x="74.9380%" y="180" width="0.3098%" height="15" fill="rgb(249,43,39)" fg:x="8465" fg:w="35"/><text x="75.1880%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (4,317 samples, 38.22%)</title><rect x="39.7397%" y="164" width="38.2171%" height="15" fill="rgb(209,38,44)" fg:x="4489" fg:w="4317"/><text x="39.9897%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (306 samples, 2.71%)</title><rect x="75.2479%" y="180" width="2.7089%" height="15" fill="rgb(236,212,23)" fg:x="8500" fg:w="306"/><text x="75.4979%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (6,455 samples, 57.14%)</title><rect x="21.4412%" y="148" width="57.1441%" height="15" fill="rgb(242,79,21)" fg:x="2422" fg:w="6455"/><text x="21.6912%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (71 samples, 0.63%)</title><rect x="77.9568%" y="164" width="0.6285%" height="15" fill="rgb(211,96,35)" fg:x="8806" fg:w="71"/><text x="78.2068%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (74 samples, 0.66%)</title><rect x="79.7982%" y="164" width="0.6551%" height="15" fill="rgb(253,215,40)" fg:x="9014" fg:w="74"/><text x="80.0482%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (98 samples, 0.87%)</title><rect x="81.5598%" y="180" width="0.8676%" height="15" fill="rgb(211,81,21)" fg:x="9213" fg:w="98"/><text x="81.8098%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (641 samples, 5.67%)</title><rect x="78.7181%" y="148" width="5.6746%" height="15" fill="rgb(208,190,38)" fg:x="8892" fg:w="641"/><text x="78.9681%" y="158.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (445 samples, 3.94%)</title><rect x="80.4533%" y="164" width="3.9394%" height="15" fill="rgb(235,213,38)" fg:x="9088" fg:w="445"/><text x="80.7033%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (222 samples, 1.97%)</title><rect x="82.4274%" y="180" width="1.9653%" height="15" fill="rgb(237,122,38)" fg:x="9311" fg:w="222"/><text x="82.6774%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (51 samples, 0.45%)</title><rect x="85.0832%" y="164" width="0.4515%" height="15" fill="rgb(244,218,35)" fg:x="9611" fg:w="51"/><text x="85.3332%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (175 samples, 1.55%)</title><rect x="84.3927%" y="148" width="1.5492%" height="15" fill="rgb(240,68,47)" fg:x="9533" fg:w="175"/><text x="84.6427%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (46 samples, 0.41%)</title><rect x="85.5347%" y="164" width="0.4072%" height="15" fill="rgb(210,16,53)" fg:x="9662" fg:w="46"/><text x="85.7847%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (49 samples, 0.43%)</title><rect x="86.3934%" y="164" width="0.4338%" height="15" fill="rgb(235,124,12)" fg:x="9759" fg:w="49"/><text x="86.6434%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (159 samples, 1.41%)</title><rect x="85.9419%" y="148" width="1.4076%" height="15" fill="rgb(224,169,11)" fg:x="9708" fg:w="159"/><text x="86.1919%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (59 samples, 0.52%)</title><rect x="86.8272%" y="164" width="0.5223%" height="15" fill="rgb(250,166,2)" fg:x="9808" fg:w="59"/><text x="87.0772%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (172 samples, 1.52%)</title><rect x="87.3495%" y="148" width="1.5227%" height="15" fill="rgb(242,216,29)" fg:x="9867" fg:w="172"/><text x="87.5995%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.23%)</title><rect x="88.6420%" y="164" width="0.2302%" height="15" fill="rgb(230,116,27)" fg:x="10013" fg:w="26"/><text x="88.8920%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (89 samples, 0.79%)</title><rect x="88.8722%" y="148" width="0.7879%" height="15" fill="rgb(228,99,48)" fg:x="10039" fg:w="89"/><text x="89.1222%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.14%)</title><rect x="89.5184%" y="164" width="0.1416%" height="15" fill="rgb(253,11,6)" fg:x="10112" fg:w="16"/><text x="89.7684%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (119 samples, 1.05%)</title><rect x="89.6601%" y="148" width="1.0535%" height="15" fill="rgb(247,143,39)" fg:x="10128" fg:w="119"/><text x="89.9101%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (164 samples, 1.45%)</title><rect x="92.7674%" y="164" width="1.4518%" height="15" fill="rgb(236,97,10)" fg:x="10479" fg:w="164"/><text x="93.0174%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.25%)</title><rect x="93.9713%" y="180" width="0.2479%" height="15" fill="rgb(233,208,19)" fg:x="10615" fg:w="28"/><text x="94.2213%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (415 samples, 3.67%)</title><rect x="90.7135%" y="148" width="3.6739%" height="15" fill="rgb(216,164,2)" fg:x="10247" fg:w="415"/><text x="90.9635%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.11%)</title><rect x="94.2812%" y="164" width="0.1062%" height="15" fill="rgb(220,129,5)" fg:x="10650" fg:w="12"/><text x="94.5312%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (49 samples, 0.43%)</title><rect x="94.3962%" y="148" width="0.4338%" height="15" fill="rgb(242,17,10)" fg:x="10663" fg:w="49"/><text x="94.6462%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (14 samples, 0.12%)</title><rect x="94.8300%" y="148" width="0.1239%" height="15" fill="rgb(242,107,0)" fg:x="10712" fg:w="14"/><text x="95.0800%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (10,033 samples, 88.82%)</title><rect x="6.2500%" y="132" width="88.8191%" height="15" fill="rgb(251,28,31)" fg:x="706" fg:w="10033"/><text x="6.5000%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (13 samples, 0.12%)</title><rect x="94.9540%" y="148" width="0.1151%" height="15" fill="rgb(233,223,10)" fg:x="10726" fg:w="13"/><text x="95.2040%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (67 samples, 0.59%)</title><rect x="95.0691%" y="132" width="0.5931%" height="15" fill="rgb(215,21,27)" fg:x="10739" fg:w="67"/><text x="95.3191%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (47 samples, 0.42%)</title><rect x="97.9373%" y="148" width="0.4161%" height="15" fill="rgb(232,23,21)" fg:x="11063" fg:w="47"/><text x="98.1873%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (331 samples, 2.93%)</title><rect x="95.8127%" y="132" width="2.9302%" height="15" fill="rgb(244,5,23)" fg:x="10823" fg:w="331"/><text x="96.0627%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (44 samples, 0.39%)</title><rect x="98.3534%" y="148" width="0.3895%" height="15" fill="rgb(226,81,46)" fg:x="11110" fg:w="44"/><text x="98.6034%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (11,109 samples, 98.34%)</title><rect x="1.2305%" y="100" width="98.3445%" height="15" fill="rgb(247,70,30)" fg:x="139" fg:w="11109"/><text x="1.4805%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (10,551 samples, 93.40%)</title><rect x="6.1703%" y="116" width="93.4047%" height="15" fill="rgb(212,68,19)" fg:x="697" fg:w="10551"/><text x="6.4203%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (94 samples, 0.83%)</title><rect x="98.7429%" y="132" width="0.8322%" height="15" fill="rgb(240,187,13)" fg:x="11154" fg:w="94"/><text x="98.9929%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (18 samples, 0.16%)</title><rect x="99.4157%" y="148" width="0.1593%" height="15" fill="rgb(223,113,26)" fg:x="11230" fg:w="18"/><text x="99.6657%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,247 samples, 99.57%)</title><rect x="0.0443%" y="68" width="99.5662%" height="15" fill="rgb(206,192,2)" fg:x="5" fg:w="11247"/><text x="0.2943%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,178 samples, 98.96%)</title><rect x="0.6551%" y="84" width="98.9554%" height="15" fill="rgb(241,108,4)" fg:x="74" fg:w="11178"/><text x="0.9051%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:97) (12 samples, 0.11%)</title><rect x="99.7167%" y="68" width="0.1062%" height="15" fill="rgb(247,173,49)" fg:x="11264" fg:w="12"/><text x="99.9667%" y="78.50"></text></g><g><title>all (11,296 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="11296"/><text x="0.2500%" y="62.50"></text></g></svg></svg>