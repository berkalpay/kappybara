<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 638b42b</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="9176"><g><title>n_embeddings (kappybara/rule.py:62) (11 samples, 0.12%)</title><rect x="0.1417%" y="180" width="0.1199%" height="15" fill="rgb(227,0,7)" fg:x="13" fg:w="11"/><text x="0.3917%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (17 samples, 0.19%)</title><rect x="0.0872%" y="84" width="0.1853%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="17"/><text x="0.3372%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (17 samples, 0.19%)</title><rect x="0.0872%" y="100" width="0.1853%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="17"/><text x="0.3372%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (16 samples, 0.17%)</title><rect x="0.0981%" y="116" width="0.1744%" height="15" fill="rgb(248,212,6)" fg:x="9" fg:w="16"/><text x="0.3481%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (14 samples, 0.15%)</title><rect x="0.1199%" y="132" width="0.1526%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="14"/><text x="0.3699%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (13 samples, 0.14%)</title><rect x="0.1308%" y="148" width="0.1417%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="13"/><text x="0.3808%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (12 samples, 0.13%)</title><rect x="0.1417%" y="164" width="0.1308%" height="15" fill="rgb(207,160,47)" fg:x="13" fg:w="12"/><text x="0.3917%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (35 samples, 0.38%)</title><rect x="0.3378%" y="100" width="0.3814%" height="15" fill="rgb(228,23,34)" fg:x="31" fg:w="35"/><text x="0.5878%" y="110.50"></text></g><g><title>select (kappybara/rule.py:90) (23 samples, 0.25%)</title><rect x="0.4686%" y="116" width="0.2507%" height="15" fill="rgb(218,30,26)" fg:x="43" fg:w="23"/><text x="0.7186%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (68 samples, 0.74%)</title><rect x="1.1988%" y="180" width="0.7411%" height="15" fill="rgb(220,122,19)" fg:x="110" fg:w="68"/><text x="1.4488%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.20%)</title><rect x="11.3884%" y="196" width="0.1962%" height="15" fill="rgb(250,228,42)" fg:x="1045" fg:w="18"/><text x="11.6384%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (912 samples, 9.94%)</title><rect x="1.9398%" y="180" width="9.9390%" height="15" fill="rgb(240,193,28)" fg:x="178" fg:w="912"/><text x="2.1898%" y="190.50">embeddings (ka..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.29%)</title><rect x="11.5846%" y="196" width="0.2942%" height="15" fill="rgb(216,20,37)" fg:x="1063" fg:w="27"/><text x="11.8346%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="14.8431%" y="196" width="0.1417%" height="15" fill="rgb(206,188,39)" fg:x="1362" fg:w="13"/><text x="15.0931%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (318 samples, 3.47%)</title><rect x="11.8788%" y="180" width="3.4656%" height="15" fill="rgb(217,207,13)" fg:x="1090" fg:w="318"/><text x="12.1288%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.36%)</title><rect x="14.9847%" y="196" width="0.3596%" height="15" fill="rgb(231,73,38)" fg:x="1375" fg:w="33"/><text x="15.2347%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (93 samples, 1.01%)</title><rect x="15.3553%" y="180" width="1.0135%" height="15" fill="rgb(225,20,46)" fg:x="1409" fg:w="93"/><text x="15.6053%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (69 samples, 0.75%)</title><rect x="16.3688%" y="180" width="0.7520%" height="15" fill="rgb(210,31,41)" fg:x="1502" fg:w="69"/><text x="16.6188%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.19%)</title><rect x="19.9542%" y="196" width="0.1853%" height="15" fill="rgb(221,200,47)" fg:x="1831" fg:w="17"/><text x="20.2042%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (302 samples, 3.29%)</title><rect x="17.1207%" y="180" width="3.2912%" height="15" fill="rgb(226,26,5)" fg:x="1571" fg:w="302"/><text x="17.3707%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.27%)</title><rect x="20.1395%" y="196" width="0.2724%" height="15" fill="rgb(249,33,26)" fg:x="1848" fg:w="25"/><text x="20.3895%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (285 samples, 3.11%)</title><rect x="20.4119%" y="180" width="3.1059%" height="15" fill="rgb(235,183,28)" fg:x="1873" fg:w="285"/><text x="20.6619%" y="190.50">emb..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (21 samples, 0.23%)</title><rect x="25.7411%" y="196" width="0.2289%" height="15" fill="rgb(221,5,38)" fg:x="2362" fg:w="21"/><text x="25.9911%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (100 samples, 1.09%)</title><rect x="25.9699%" y="196" width="1.0898%" height="15" fill="rgb(247,18,42)" fg:x="2383" fg:w="100"/><text x="26.2199%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (104 samples, 1.13%)</title><rect x="28.8797%" y="212" width="1.1334%" height="15" fill="rgb(241,131,45)" fg:x="2650" fg:w="104"/><text x="29.1297%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (106 samples, 1.16%)</title><rect x="31.9093%" y="228" width="1.1552%" height="15" fill="rgb(249,31,29)" fg:x="2928" fg:w="106"/><text x="32.1593%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (886 samples, 9.66%)</title><rect x="27.0924%" y="196" width="9.6556%" height="15" fill="rgb(225,111,53)" fg:x="2486" fg:w="886"/><text x="27.3424%" y="206.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (618 samples, 6.73%)</title><rect x="30.0131%" y="212" width="6.7350%" height="15" fill="rgb(238,160,17)" fg:x="2754" fg:w="618"/><text x="30.2631%" y="222.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:113) (338 samples, 3.68%)</title><rect x="33.0645%" y="228" width="3.6835%" height="15" fill="rgb(214,148,48)" fg:x="3034" fg:w="338"/><text x="33.3145%" y="238.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (111 samples, 1.21%)</title><rect x="36.7480%" y="196" width="1.2097%" height="15" fill="rgb(232,36,49)" fg:x="3372" fg:w="111"/><text x="36.9980%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (19 samples, 0.21%)</title><rect x="39.1456%" y="212" width="0.2071%" height="15" fill="rgb(209,103,24)" fg:x="3592" fg:w="19"/><text x="39.3956%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (208 samples, 2.27%)</title><rect x="37.9904%" y="196" width="2.2668%" height="15" fill="rgb(229,88,8)" fg:x="3486" fg:w="208"/><text x="38.2404%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (83 samples, 0.90%)</title><rect x="39.3527%" y="212" width="0.9045%" height="15" fill="rgb(213,181,19)" fg:x="3611" fg:w="83"/><text x="39.6027%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (219 samples, 2.39%)</title><rect x="49.8910%" y="212" width="2.3867%" height="15" fill="rgb(254,191,54)" fg:x="4578" fg:w="219"/><text x="50.1410%" y="222.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (18 samples, 0.20%)</title><rect x="52.2777%" y="212" width="0.1962%" height="15" fill="rgb(241,83,37)" fg:x="4797" fg:w="18"/><text x="52.5277%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (23 samples, 0.25%)</title><rect x="53.0623%" y="228" width="0.2507%" height="15" fill="rgb(233,36,39)" fg:x="4869" fg:w="23"/><text x="53.3123%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (179 samples, 1.95%)</title><rect x="52.4738%" y="212" width="1.9507%" height="15" fill="rgb(226,3,54)" fg:x="4815" fg:w="179"/><text x="52.7238%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (102 samples, 1.11%)</title><rect x="53.3130%" y="228" width="1.1116%" height="15" fill="rgb(245,192,40)" fg:x="4892" fg:w="102"/><text x="53.5630%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (10 samples, 0.11%)</title><rect x="55.5798%" y="228" width="0.1090%" height="15" fill="rgb(238,167,29)" fg:x="5100" fg:w="10"/><text x="55.8298%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.17%)</title><rect x="57.5305%" y="244" width="0.1744%" height="15" fill="rgb(232,182,51)" fg:x="5279" fg:w="16"/><text x="57.7805%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="59.8409%" y="260" width="0.1090%" height="15" fill="rgb(231,60,39)" fg:x="5491" fg:w="10"/><text x="60.0909%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (415 samples, 4.52%)</title><rect x="55.6888%" y="228" width="4.5227%" height="15" fill="rgb(208,69,12)" fg:x="5110" fg:w="415"/><text x="55.9388%" y="238.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (230 samples, 2.51%)</title><rect x="57.7049%" y="244" width="2.5065%" height="15" fill="rgb(235,93,37)" fg:x="5295" fg:w="230"/><text x="57.9549%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.26%)</title><rect x="59.9499%" y="260" width="0.2616%" height="15" fill="rgb(213,116,39)" fg:x="5501" fg:w="24"/><text x="60.1999%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (246 samples, 2.68%)</title><rect x="60.2114%" y="228" width="2.6809%" height="15" fill="rgb(222,207,29)" fg:x="5525" fg:w="246"/><text x="60.4614%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (90 samples, 0.98%)</title><rect x="62.8923%" y="228" width="0.9808%" height="15" fill="rgb(206,96,30)" fg:x="5771" fg:w="90"/><text x="63.1423%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (913 samples, 9.95%)</title><rect x="54.4246%" y="212" width="9.9499%" height="15" fill="rgb(218,138,4)" fg:x="4994" fg:w="913"/><text x="54.6746%" y="222.50">embeds_in (kap..</text></g><g><title>coupled (kappybara/pattern.py:66) (37 samples, 0.40%)</title><rect x="63.9712%" y="228" width="0.4032%" height="15" fill="rgb(250,191,14)" fg:x="5870" fg:w="37"/><text x="64.2212%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (30 samples, 0.33%)</title><rect x="64.4398%" y="212" width="0.3269%" height="15" fill="rgb(239,60,40)" fg:x="5913" fg:w="30"/><text x="64.6898%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (20 samples, 0.22%)</title><rect x="65.7585%" y="228" width="0.2180%" height="15" fill="rgb(206,27,48)" fg:x="6034" fg:w="20"/><text x="66.0085%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="67.3823%" y="244" width="0.1090%" height="15" fill="rgb(225,35,8)" fg:x="6183" fg:w="10"/><text x="67.6323%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (280 samples, 3.05%)</title><rect x="64.7668%" y="212" width="3.0514%" height="15" fill="rgb(250,213,24)" fg:x="5943" fg:w="280"/><text x="65.0168%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (169 samples, 1.84%)</title><rect x="65.9765%" y="228" width="1.8418%" height="15" fill="rgb(247,123,22)" fg:x="6054" fg:w="169"/><text x="66.2265%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.33%)</title><rect x="67.4913%" y="244" width="0.3269%" height="15" fill="rgb(231,138,38)" fg:x="6193" fg:w="30"/><text x="67.7413%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.13%)</title><rect x="69.2459%" y="228" width="0.1308%" height="15" fill="rgb(231,145,46)" fg:x="6354" fg:w="12"/><text x="69.4959%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.17%)</title><rect x="71.5780%" y="244" width="0.1744%" height="15" fill="rgb(251,118,11)" fg:x="6568" fg:w="16"/><text x="71.8280%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (408 samples, 4.45%)</title><rect x="67.8182%" y="212" width="4.4464%" height="15" fill="rgb(217,147,25)" fg:x="6223" fg:w="408"/><text x="68.0682%" y="222.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (265 samples, 2.89%)</title><rect x="69.3766%" y="228" width="2.8880%" height="15" fill="rgb(247,81,37)" fg:x="6366" fg:w="265"/><text x="69.6266%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (47 samples, 0.51%)</title><rect x="71.7524%" y="244" width="0.5122%" height="15" fill="rgb(209,12,38)" fg:x="6584" fg:w="47"/><text x="72.0024%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (79 samples, 0.86%)</title><rect x="72.2646%" y="212" width="0.8609%" height="15" fill="rgb(227,1,9)" fg:x="6631" fg:w="79"/><text x="72.5146%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (153 samples, 1.67%)</title><rect x="73.1473%" y="212" width="1.6674%" height="15" fill="rgb(248,47,43)" fg:x="6712" fg:w="153"/><text x="73.3973%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (80 samples, 0.87%)</title><rect x="74.8147%" y="212" width="0.8718%" height="15" fill="rgb(221,10,30)" fg:x="6865" fg:w="80"/><text x="75.0647%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (13 samples, 0.14%)</title><rect x="75.6866%" y="212" width="0.1417%" height="15" fill="rgb(210,229,1)" fg:x="6945" fg:w="13"/><text x="75.9366%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,498 samples, 38.12%)</title><rect x="40.2572%" y="196" width="38.1212%" height="15" fill="rgb(222,148,37)" fg:x="3694" fg:w="3498"/><text x="40.5072%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (234 samples, 2.55%)</title><rect x="75.8282%" y="212" width="2.5501%" height="15" fill="rgb(234,67,33)" fg:x="6958" fg:w="234"/><text x="76.0782%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,100 samples, 55.58%)</title><rect x="23.5179%" y="180" width="55.5798%" height="15" fill="rgb(247,98,35)" fg:x="2158" fg:w="5100"/><text x="23.7679%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (66 samples, 0.72%)</title><rect x="78.3784%" y="196" width="0.7193%" height="15" fill="rgb(247,138,52)" fg:x="7192" fg:w="66"/><text x="78.6284%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (10 samples, 0.11%)</title><rect x="79.0976%" y="180" width="0.1090%" height="15" fill="rgb(213,79,30)" fg:x="7258" fg:w="10"/><text x="79.3476%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (46 samples, 0.50%)</title><rect x="80.5362%" y="196" width="0.5013%" height="15" fill="rgb(246,177,23)" fg:x="7390" fg:w="46"/><text x="80.7862%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (43 samples, 0.47%)</title><rect x="82.3126%" y="212" width="0.4686%" height="15" fill="rgb(230,62,27)" fg:x="7553" fg:w="43"/><text x="82.5626%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (561 samples, 6.11%)</title><rect x="79.2611%" y="180" width="6.1138%" height="15" fill="rgb(216,154,8)" fg:x="7273" fg:w="561"/><text x="79.5111%" y="190.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (398 samples, 4.34%)</title><rect x="81.0375%" y="196" width="4.3374%" height="15" fill="rgb(244,35,45)" fg:x="7436" fg:w="398"/><text x="81.2875%" y="206.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (238 samples, 2.59%)</title><rect x="82.7812%" y="212" width="2.5937%" height="15" fill="rgb(251,115,12)" fg:x="7596" fg:w="238"/><text x="83.0312%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:277) (112 samples, 1.22%)</title><rect x="85.3749%" y="180" width="1.2206%" height="15" fill="rgb(240,54,50)" fg:x="7834" fg:w="112"/><text x="85.6249%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (44 samples, 0.48%)</title><rect x="86.1160%" y="196" width="0.4795%" height="15" fill="rgb(233,84,52)" fg:x="7902" fg:w="44"/><text x="86.3660%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (89 samples, 0.97%)</title><rect x="86.5955%" y="180" width="0.9699%" height="15" fill="rgb(207,117,47)" fg:x="7946" fg:w="89"/><text x="86.8455%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (54 samples, 0.59%)</title><rect x="86.9769%" y="196" width="0.5885%" height="15" fill="rgb(249,43,39)" fg:x="7981" fg:w="54"/><text x="87.2269%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (199 samples, 2.17%)</title><rect x="87.5654%" y="180" width="2.1687%" height="15" fill="rgb(209,38,44)" fg:x="8035" fg:w="199"/><text x="87.8154%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.27%)</title><rect x="89.4616%" y="196" width="0.2724%" height="15" fill="rgb(236,212,23)" fg:x="8209" fg:w="25"/><text x="89.7116%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (61 samples, 0.66%)</title><rect x="89.7341%" y="180" width="0.6648%" height="15" fill="rgb(242,79,21)" fg:x="8234" fg:w="61"/><text x="89.9841%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (85 samples, 0.93%)</title><rect x="90.3989%" y="180" width="0.9263%" height="15" fill="rgb(211,96,35)" fg:x="8295" fg:w="85"/><text x="90.6489%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (23 samples, 0.25%)</title><rect x="93.6465%" y="196" width="0.2507%" height="15" fill="rgb(253,215,40)" fg:x="8593" fg:w="23"/><text x="93.8965%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.14%)</title><rect x="95.0087%" y="212" width="0.1417%" height="15" fill="rgb(211,81,21)" fg:x="8718" fg:w="13"/><text x="95.2587%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (129 samples, 1.41%)</title><rect x="93.8971%" y="196" width="1.4058%" height="15" fill="rgb(208,190,38)" fg:x="8616" fg:w="129"/><text x="94.1471%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.15%)</title><rect x="95.1504%" y="212" width="0.1526%" height="15" fill="rgb(235,213,38)" fg:x="8731" fg:w="14"/><text x="95.4004%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (373 samples, 4.06%)</title><rect x="91.3252%" y="180" width="4.0650%" height="15" fill="rgb(237,122,38)" fg:x="8380" fg:w="373"/><text x="91.5752%" y="190.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:287) (41 samples, 0.45%)</title><rect x="95.3901%" y="180" width="0.4468%" height="15" fill="rgb(244,218,35)" fg:x="8753" fg:w="41"/><text x="95.6401%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (8,739 samples, 95.24%)</title><rect x="0.8065%" y="164" width="95.2376%" height="15" fill="rgb(240,68,47)" fg:x="74" fg:w="8739"/><text x="1.0565%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>embeddings (kappybara/pattern.py:290) (12 samples, 0.13%)</title><rect x="95.9133%" y="180" width="0.1308%" height="15" fill="rgb(210,16,53)" fg:x="8801" fg:w="12"/><text x="96.1633%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (99 samples, 1.08%)</title><rect x="96.0440%" y="164" width="1.0789%" height="15" fill="rgb(235,124,12)" fg:x="8813" fg:w="99"/><text x="96.2940%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.13%)</title><rect x="96.9922%" y="180" width="0.1308%" height="15" fill="rgb(224,169,11)" fg:x="8900" fg:w="12"/><text x="97.2422%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (8,992 samples, 97.99%)</title><rect x="0.7302%" y="148" width="97.9948%" height="15" fill="rgb(250,166,2)" fg:x="67" fg:w="8992"/><text x="0.9802%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (141 samples, 1.54%)</title><rect x="97.1883%" y="164" width="1.5366%" height="15" fill="rgb(242,216,29)" fg:x="8918" fg:w="141"/><text x="97.4383%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (9,065 samples, 98.79%)</title><rect x="0.7193%" y="116" width="98.7903%" height="15" fill="rgb(230,116,27)" fg:x="66" fg:w="9065"/><text x="0.9693%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (9,064 samples, 98.78%)</title><rect x="0.7302%" y="132" width="98.7794%" height="15" fill="rgb(228,99,48)" fg:x="67" fg:w="9064"/><text x="0.9802%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (72 samples, 0.78%)</title><rect x="98.7249%" y="148" width="0.7847%" height="15" fill="rgb(253,11,6)" fg:x="9059" fg:w="72"/><text x="98.9749%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,068 samples, 98.82%)</title><rect x="0.7193%" y="100" width="98.8230%" height="15" fill="rgb(247,143,39)" fg:x="66" fg:w="9068"/><text x="0.9693%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,128 samples, 99.48%)</title><rect x="0.0763%" y="68" width="99.4769%" height="15" fill="rgb(236,97,10)" fg:x="7" fg:w="9128"/><text x="0.3263%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,110 samples, 99.28%)</title><rect x="0.2724%" y="84" width="99.2807%" height="15" fill="rgb(233,208,19)" fg:x="25" fg:w="9110"/><text x="0.5224%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (10 samples, 0.11%)</title><rect x="99.5532%" y="68" width="0.1090%" height="15" fill="rgb(216,164,2)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.5532%" y="84" width="0.1090%" height="15" fill="rgb(220,129,5)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.5532%" y="100" width="0.1090%" height="15" fill="rgb(242,17,10)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.5532%" y="116" width="0.1090%" height="15" fill="rgb(242,107,0)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.5532%" y="132" width="0.1090%" height="15" fill="rgb(251,28,31)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.5532%" y="148" width="0.1090%" height="15" fill="rgb(233,223,10)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.11%)</title><rect x="99.5532%" y="164" width="0.1090%" height="15" fill="rgb(215,21,27)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.5532%" y="180" width="0.1090%" height="15" fill="rgb(232,23,21)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.5532%" y="196" width="0.1090%" height="15" fill="rgb(244,5,23)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.5532%" y="212" width="0.1090%" height="15" fill="rgb(226,81,46)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.5532%" y="228" width="0.1090%" height="15" fill="rgb(247,70,30)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.5532%" y="244" width="0.1090%" height="15" fill="rgb(212,68,19)" fg:x="9135" fg:w="10"/><text x="99.8032%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (14 samples, 0.15%)</title><rect x="99.6622%" y="68" width="0.1526%" height="15" fill="rgb(240,187,13)" fg:x="9145" fg:w="14"/><text x="99.9122%" y="78.50"></text></g><g><title>all (9,176 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="9176"/><text x="0.2500%" y="62.50"></text></g></svg></svg>