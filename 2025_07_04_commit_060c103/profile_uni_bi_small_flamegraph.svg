<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 060c103</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="8584"><g><title>n_embeddings (kappybara/rule.py:170) (32 samples, 0.37%)</title><rect x="0.1747%" y="180" width="0.3728%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="32"/><text x="0.4247%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (13 samples, 0.15%)</title><rect x="0.3961%" y="196" width="0.1514%" height="15" fill="rgb(217,0,24)" fg:x="34" fg:w="13"/><text x="0.6461%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (10 samples, 0.12%)</title><rect x="0.6873%" y="180" width="0.1165%" height="15" fill="rgb(221,193,54)" fg:x="59" fg:w="10"/><text x="0.9373%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (14 samples, 0.16%)</title><rect x="0.8038%" y="180" width="0.1631%" height="15" fill="rgb(248,212,6)" fg:x="69" fg:w="14"/><text x="1.0538%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (14 samples, 0.16%)</title><rect x="0.9669%" y="180" width="0.1631%" height="15" fill="rgb(208,68,35)" fg:x="83" fg:w="14"/><text x="1.2169%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (101 samples, 1.18%)</title><rect x="0.1048%" y="84" width="1.1766%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="101"/><text x="0.3548%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (100 samples, 1.16%)</title><rect x="0.1165%" y="100" width="1.1650%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="100"/><text x="0.3665%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (100 samples, 1.16%)</title><rect x="0.1165%" y="116" width="1.1650%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="100"/><text x="0.3665%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (99 samples, 1.15%)</title><rect x="0.1281%" y="132" width="1.1533%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="99"/><text x="0.3781%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (98 samples, 1.14%)</title><rect x="0.1398%" y="148" width="1.1417%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="98"/><text x="0.3898%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (97 samples, 1.13%)</title><rect x="0.1514%" y="164" width="1.1300%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="97"/><text x="0.4014%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (19 samples, 0.22%)</title><rect x="1.3048%" y="100" width="0.2213%" height="15" fill="rgb(240,193,28)" fg:x="112" fg:w="19"/><text x="1.5548%" y="110.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (10 samples, 0.12%)</title><rect x="1.5610%" y="148" width="0.1165%" height="15" fill="rgb(216,20,37)" fg:x="134" fg:w="10"/><text x="1.8110%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (22 samples, 0.26%)</title><rect x="1.9338%" y="180" width="0.2563%" height="15" fill="rgb(206,188,39)" fg:x="166" fg:w="22"/><text x="2.1838%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (14 samples, 0.16%)</title><rect x="2.0270%" y="196" width="0.1631%" height="15" fill="rgb(217,207,13)" fg:x="174" fg:w="14"/><text x="2.2770%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:190) (60 samples, 0.70%)</title><rect x="1.5261%" y="132" width="0.6990%" height="15" fill="rgb(231,73,38)" fg:x="131" fg:w="60"/><text x="1.7761%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (41 samples, 0.48%)</title><rect x="1.7474%" y="148" width="0.4776%" height="15" fill="rgb(225,20,46)" fg:x="150" fg:w="41"/><text x="1.9974%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (37 samples, 0.43%)</title><rect x="1.7940%" y="164" width="0.4310%" height="15" fill="rgb(210,31,41)" fg:x="154" fg:w="37"/><text x="2.0440%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (35 samples, 0.41%)</title><rect x="4.5084%" y="148" width="0.4077%" height="15" fill="rgb(221,200,47)" fg:x="387" fg:w="35"/><text x="4.7584%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (33 samples, 0.38%)</title><rect x="8.5857%" y="164" width="0.3844%" height="15" fill="rgb(226,26,5)" fg:x="737" fg:w="33"/><text x="8.8357%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:194) (653 samples, 7.61%)</title><rect x="2.3066%" y="132" width="7.6072%" height="15" fill="rgb(249,33,26)" fg:x="198" fg:w="653"/><text x="2.5566%" y="142.50">_remove_ed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (429 samples, 5.00%)</title><rect x="4.9161%" y="148" width="4.9977%" height="15" fill="rgb(235,183,28)" fg:x="422" fg:w="429"/><text x="5.1661%" y="158.50">__eq__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (81 samples, 0.94%)</title><rect x="8.9702%" y="164" width="0.9436%" height="15" fill="rgb(221,5,38)" fg:x="770" fg:w="81"/><text x="9.2202%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:102) (722 samples, 8.41%)</title><rect x="1.5261%" y="116" width="8.4110%" height="15" fill="rgb(247,18,42)" fg:x="131" fg:w="722"/><text x="1.7761%" y="126.50">apply_update..</text></g><g><title>embeddings (kappybara/pattern.py:256) (39 samples, 0.45%)</title><rect x="10.5429%" y="148" width="0.4543%" height="15" fill="rgb(241,131,45)" fg:x="905" fg:w="39"/><text x="10.7929%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (24 samples, 0.28%)</title><rect x="14.9115%" y="164" width="0.2796%" height="15" fill="rgb(249,31,29)" fg:x="1280" fg:w="24"/><text x="15.1615%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (394 samples, 4.59%)</title><rect x="10.9972%" y="148" width="4.5899%" height="15" fill="rgb(225,111,53)" fg:x="944" fg:w="394"/><text x="11.2472%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.40%)</title><rect x="15.1911%" y="164" width="0.3961%" height="15" fill="rgb(238,160,17)" fg:x="1304" fg:w="34"/><text x="15.4411%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.13%)</title><rect x="18.9073%" y="164" width="0.1281%" height="15" fill="rgb(214,148,48)" fg:x="1623" fg:w="11"/><text x="19.1573%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (325 samples, 3.79%)</title><rect x="15.5871%" y="148" width="3.7861%" height="15" fill="rgb(232,36,49)" fg:x="1338" fg:w="325"/><text x="15.8371%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.34%)</title><rect x="19.0354%" y="164" width="0.3378%" height="15" fill="rgb(209,103,24)" fg:x="1634" fg:w="29"/><text x="19.2854%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (73 samples, 0.85%)</title><rect x="19.3849%" y="148" width="0.8504%" height="15" fill="rgb(229,88,8)" fg:x="1664" fg:w="73"/><text x="19.6349%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (75 samples, 0.87%)</title><rect x="20.2353%" y="148" width="0.8737%" height="15" fill="rgb(213,181,19)" fg:x="1737" fg:w="75"/><text x="20.4853%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.26%)</title><rect x="23.3108%" y="164" width="0.2563%" height="15" fill="rgb(254,191,54)" fg:x="2001" fg:w="22"/><text x="23.5608%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (253 samples, 2.95%)</title><rect x="21.1090%" y="148" width="2.9473%" height="15" fill="rgb(241,83,37)" fg:x="1812" fg:w="253"/><text x="21.3590%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.49%)</title><rect x="23.5671%" y="164" width="0.4893%" height="15" fill="rgb(233,36,39)" fg:x="2023" fg:w="42"/><text x="23.8171%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (256 samples, 2.98%)</title><rect x="24.0564%" y="148" width="2.9823%" height="15" fill="rgb(226,3,54)" fg:x="2065" fg:w="256"/><text x="24.3064%" y="158.50">emb..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (19 samples, 0.22%)</title><rect x="29.3569%" y="164" width="0.2213%" height="15" fill="rgb(245,192,40)" fg:x="2520" fg:w="19"/><text x="29.6069%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (98 samples, 1.14%)</title><rect x="29.5783%" y="164" width="1.1417%" height="15" fill="rgb(238,167,29)" fg:x="2539" fg:w="98"/><text x="29.8283%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (98 samples, 1.14%)</title><rect x="32.6188%" y="180" width="1.1417%" height="15" fill="rgb(232,182,51)" fg:x="2800" fg:w="98"/><text x="32.8688%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (72 samples, 0.84%)</title><rect x="35.9506%" y="196" width="0.8388%" height="15" fill="rgb(231,60,39)" fg:x="3086" fg:w="72"/><text x="36.2006%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (838 samples, 9.76%)</title><rect x="30.7549%" y="164" width="9.7623%" height="15" fill="rgb(208,69,12)" fg:x="2640" fg:w="838"/><text x="31.0049%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (580 samples, 6.76%)</title><rect x="33.7605%" y="180" width="6.7568%" height="15" fill="rgb(235,93,37)" fg:x="2898" fg:w="580"/><text x="34.0105%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (320 samples, 3.73%)</title><rect x="36.7894%" y="196" width="3.7279%" height="15" fill="rgb(213,116,39)" fg:x="3158" fg:w="320"/><text x="37.0394%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (112 samples, 1.30%)</title><rect x="40.5172%" y="164" width="1.3048%" height="15" fill="rgb(222,207,29)" fg:x="3478" fg:w="112"/><text x="40.7672%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (74 samples, 0.86%)</title><rect x="42.6491%" y="180" width="0.8621%" height="15" fill="rgb(206,96,30)" fg:x="3661" fg:w="74"/><text x="42.8991%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (163 samples, 1.90%)</title><rect x="41.9035%" y="164" width="1.8989%" height="15" fill="rgb(218,138,4)" fg:x="3597" fg:w="163"/><text x="42.1535%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (25 samples, 0.29%)</title><rect x="43.5112%" y="180" width="0.2912%" height="15" fill="rgb(250,191,14)" fg:x="3735" fg:w="25"/><text x="43.7612%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (146 samples, 1.70%)</title><rect x="53.6580%" y="180" width="1.7008%" height="15" fill="rgb(239,60,40)" fg:x="4606" fg:w="146"/><text x="53.9080%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (25 samples, 0.29%)</title><rect x="55.9296%" y="196" width="0.2912%" height="15" fill="rgb(206,27,48)" fg:x="4801" fg:w="25"/><text x="56.1796%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (170 samples, 1.98%)</title><rect x="55.4171%" y="180" width="1.9804%" height="15" fill="rgb(225,35,8)" fg:x="4757" fg:w="170"/><text x="55.6671%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (101 samples, 1.18%)</title><rect x="56.2209%" y="196" width="1.1766%" height="15" fill="rgb(250,213,24)" fg:x="4826" fg:w="101"/><text x="56.4709%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (28 samples, 0.33%)</title><rect x="58.6323%" y="196" width="0.3262%" height="15" fill="rgb(247,123,22)" fg:x="5033" fg:w="28"/><text x="58.8823%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.20%)</title><rect x="61.1253%" y="212" width="0.1980%" height="15" fill="rgb(231,138,38)" fg:x="5247" fg:w="17"/><text x="61.3753%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="63.0242%" y="228" width="0.1048%" height="15" fill="rgb(231,145,46)" fg:x="5410" fg:w="9"/><text x="63.2742%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (389 samples, 4.53%)</title><rect x="58.9585%" y="196" width="4.5317%" height="15" fill="rgb(251,118,11)" fg:x="5061" fg:w="389"/><text x="59.2085%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (186 samples, 2.17%)</title><rect x="61.3234%" y="212" width="2.1668%" height="15" fill="rgb(217,147,25)" fg:x="5264" fg:w="186"/><text x="61.5734%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.36%)</title><rect x="63.1291%" y="228" width="0.3611%" height="15" fill="rgb(247,81,37)" fg:x="5419" fg:w="31"/><text x="63.3791%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (215 samples, 2.50%)</title><rect x="63.4902%" y="196" width="2.5047%" height="15" fill="rgb(209,12,38)" fg:x="5450" fg:w="215"/><text x="63.7402%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (80 samples, 0.93%)</title><rect x="65.9949%" y="196" width="0.9320%" height="15" fill="rgb(227,1,9)" fg:x="5665" fg:w="80"/><text x="66.2449%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (10 samples, 0.12%)</title><rect x="66.9268%" y="196" width="0.1165%" height="15" fill="rgb(248,47,43)" fg:x="5745" fg:w="10"/><text x="67.1768%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (865 samples, 10.08%)</title><rect x="57.3975%" y="180" width="10.0769%" height="15" fill="rgb(221,10,30)" fg:x="4927" fg:w="865"/><text x="57.6475%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (37 samples, 0.43%)</title><rect x="67.0433%" y="196" width="0.4310%" height="15" fill="rgb(210,229,1)" fg:x="5755" fg:w="37"/><text x="67.2933%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (24 samples, 0.28%)</title><rect x="67.5210%" y="180" width="0.2796%" height="15" fill="rgb(222,148,37)" fg:x="5796" fg:w="24"/><text x="67.7710%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.13%)</title><rect x="68.3947%" y="196" width="0.1281%" height="15" fill="rgb(234,67,33)" fg:x="5871" fg:w="11"/><text x="68.6447%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (190 samples, 2.21%)</title><rect x="67.8006%" y="180" width="2.2134%" height="15" fill="rgb(247,98,35)" fg:x="5820" fg:w="190"/><text x="68.0506%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (128 samples, 1.49%)</title><rect x="68.5228%" y="196" width="1.4911%" height="15" fill="rgb(247,138,52)" fg:x="5882" fg:w="128"/><text x="68.7728%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.27%)</title><rect x="69.7460%" y="212" width="0.2679%" height="15" fill="rgb(213,79,30)" fg:x="5987" fg:w="23"/><text x="69.9960%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="72.4837%" y="212" width="0.1048%" height="15" fill="rgb(246,177,23)" fg:x="6222" fg:w="9"/><text x="72.7337%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (249 samples, 2.90%)</title><rect x="70.0140%" y="180" width="2.9007%" height="15" fill="rgb(230,62,27)" fg:x="6010" fg:w="249"/><text x="70.2640%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (157 samples, 1.83%)</title><rect x="71.0857%" y="196" width="1.8290%" height="15" fill="rgb(216,154,8)" fg:x="6102" fg:w="157"/><text x="71.3357%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.33%)</title><rect x="72.5885%" y="212" width="0.3262%" height="15" fill="rgb(244,35,45)" fg:x="6231" fg:w="28"/><text x="72.8385%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (59 samples, 0.69%)</title><rect x="72.9147%" y="180" width="0.6873%" height="15" fill="rgb(251,115,12)" fg:x="6259" fg:w="59"/><text x="73.1647%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (100 samples, 1.16%)</title><rect x="73.6137%" y="180" width="1.1650%" height="15" fill="rgb(240,54,50)" fg:x="6319" fg:w="100"/><text x="73.8637%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (67 samples, 0.78%)</title><rect x="74.7787%" y="180" width="0.7805%" height="15" fill="rgb(233,84,52)" fg:x="6419" fg:w="67"/><text x="75.0287%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (11 samples, 0.13%)</title><rect x="75.5592%" y="180" width="0.1281%" height="15" fill="rgb(207,117,47)" fg:x="6486" fg:w="11"/><text x="75.8092%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (2,983 samples, 34.75%)</title><rect x="43.8024%" y="164" width="34.7507%" height="15" fill="rgb(249,43,39)" fg:x="3760" fg:w="2983"/><text x="44.0524%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (246 samples, 2.87%)</title><rect x="75.6873%" y="180" width="2.8658%" height="15" fill="rgb(209,38,44)" fg:x="6497" fg:w="246"/><text x="75.9373%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,461 samples, 51.97%)</title><rect x="27.0387%" y="148" width="51.9688%" height="15" fill="rgb(236,212,23)" fg:x="2321" fg:w="4461"/><text x="27.2887%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (39 samples, 0.45%)</title><rect x="78.5531%" y="164" width="0.4543%" height="15" fill="rgb(242,79,21)" fg:x="6743" fg:w="39"/><text x="78.8031%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (45 samples, 0.52%)</title><rect x="80.2540%" y="164" width="0.5242%" height="15" fill="rgb(211,96,35)" fg:x="6889" fg:w="45"/><text x="80.5040%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (50 samples, 0.58%)</title><rect x="82.1295%" y="180" width="0.5825%" height="15" fill="rgb(253,215,40)" fg:x="7050" fg:w="50"/><text x="82.3795%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (522 samples, 6.08%)</title><rect x="79.0774%" y="148" width="6.0811%" height="15" fill="rgb(211,81,21)" fg:x="6788" fg:w="522"/><text x="79.3274%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (376 samples, 4.38%)</title><rect x="80.7782%" y="164" width="4.3802%" height="15" fill="rgb(208,190,38)" fg:x="6934" fg:w="376"/><text x="81.0282%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (210 samples, 2.45%)</title><rect x="82.7120%" y="180" width="2.4464%" height="15" fill="rgb(235,213,38)" fg:x="7100" fg:w="210"/><text x="82.9620%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (37 samples, 0.43%)</title><rect x="85.8341%" y="164" width="0.4310%" height="15" fill="rgb(237,122,38)" fg:x="7368" fg:w="37"/><text x="86.0841%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (105 samples, 1.22%)</title><rect x="85.1584%" y="148" width="1.2232%" height="15" fill="rgb(244,218,35)" fg:x="7310" fg:w="105"/><text x="85.4084%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (10 samples, 0.12%)</title><rect x="86.2651%" y="164" width="0.1165%" height="15" fill="rgb(240,68,47)" fg:x="7405" fg:w="10"/><text x="86.5151%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (13 samples, 0.15%)</title><rect x="86.6962%" y="164" width="0.1514%" height="15" fill="rgb(210,16,53)" fg:x="7442" fg:w="13"/><text x="86.9462%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (101 samples, 1.18%)</title><rect x="86.3816%" y="148" width="1.1766%" height="15" fill="rgb(235,124,12)" fg:x="7415" fg:w="101"/><text x="86.6316%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (61 samples, 0.71%)</title><rect x="86.8476%" y="164" width="0.7106%" height="15" fill="rgb(224,169,11)" fg:x="7455" fg:w="61"/><text x="87.0976%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.15%)</title><rect x="88.2922%" y="164" width="0.1514%" height="15" fill="rgb(250,166,2)" fg:x="7579" fg:w="13"/><text x="88.5422%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (93 samples, 1.08%)</title><rect x="87.5582%" y="148" width="1.0834%" height="15" fill="rgb(242,216,29)" fg:x="7516" fg:w="93"/><text x="87.8082%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.20%)</title><rect x="88.4436%" y="164" width="0.1980%" height="15" fill="rgb(230,116,27)" fg:x="7592" fg:w="17"/><text x="88.6936%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (24 samples, 0.28%)</title><rect x="88.6417%" y="148" width="0.2796%" height="15" fill="rgb(228,99,48)" fg:x="7609" fg:w="24"/><text x="88.8917%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (36 samples, 0.42%)</title><rect x="88.9212%" y="148" width="0.4194%" height="15" fill="rgb(253,11,6)" fg:x="7633" fg:w="36"/><text x="89.1712%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.12%)</title><rect x="90.8551%" y="164" width="0.1165%" height="15" fill="rgb(247,143,39)" fg:x="7799" fg:w="10"/><text x="91.1051%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (95 samples, 1.11%)</title><rect x="90.9716%" y="164" width="1.1067%" height="15" fill="rgb(236,97,10)" fg:x="7809" fg:w="95"/><text x="91.2216%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.10%)</title><rect x="91.9734%" y="180" width="0.1048%" height="15" fill="rgb(233,208,19)" fg:x="7895" fg:w="9"/><text x="92.2234%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (241 samples, 2.81%)</title><rect x="89.3406%" y="148" width="2.8075%" height="15" fill="rgb(216,164,2)" fg:x="7669" fg:w="241"/><text x="89.5906%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (18 samples, 0.21%)</title><rect x="92.1482%" y="148" width="0.2097%" height="15" fill="rgb(220,129,5)" fg:x="7910" fg:w="18"/><text x="92.3982%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (33 samples, 0.38%)</title><rect x="92.4045%" y="148" width="0.3844%" height="15" fill="rgb(242,17,10)" fg:x="7932" fg:w="33"/><text x="92.6545%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (9 samples, 0.10%)</title><rect x="92.7889%" y="148" width="0.1048%" height="15" fill="rgb(242,107,0)" fg:x="7965" fg:w="9"/><text x="93.0389%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (7,114 samples, 82.88%)</title><rect x="10.1002%" y="132" width="82.8751%" height="15" fill="rgb(251,28,31)" fg:x="867" fg:w="7114"/><text x="10.3502%" y="142.50">_update_embeddings (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (47 samples, 0.55%)</title><rect x="92.9753%" y="132" width="0.5475%" height="15" fill="rgb(233,223,10)" fg:x="7981" fg:w="47"/><text x="93.2253%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (13 samples, 0.15%)</title><rect x="93.5228%" y="132" width="0.1514%" height="15" fill="rgb(215,21,27)" fg:x="8028" fg:w="13"/><text x="93.7728%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.21%)</title><rect x="97.3089%" y="148" width="0.2097%" height="15" fill="rgb(232,23,21)" fg:x="8353" fg:w="18"/><text x="97.5589%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (354 samples, 4.12%)</title><rect x="93.7442%" y="132" width="4.1240%" height="15" fill="rgb(244,5,23)" fg:x="8047" fg:w="354"/><text x="93.9942%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.35%)</title><rect x="97.5186%" y="148" width="0.3495%" height="15" fill="rgb(226,81,46)" fg:x="8371" fg:w="30"/><text x="97.7686%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.16%)</title><rect x="99.1263%" y="148" width="0.1631%" height="15" fill="rgb(247,70,30)" fg:x="8509" fg:w="14"/><text x="99.3763%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,518 samples, 99.23%)</title><rect x="0.1048%" y="68" width="99.2311%" height="15" fill="rgb(212,68,19)" fg:x="9" fg:w="8518"/><text x="0.3548%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,417 samples, 98.05%)</title><rect x="1.2815%" y="84" width="98.0545%" height="15" fill="rgb(240,187,13)" fg:x="110" fg:w="8417"/><text x="1.5315%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,396 samples, 97.81%)</title><rect x="1.5261%" y="100" width="97.8099%" height="15" fill="rgb(223,113,26)" fg:x="131" fg:w="8396"/><text x="1.7761%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:112) (7,668 samples, 89.33%)</title><rect x="10.0070%" y="116" width="89.3290%" height="15" fill="rgb(206,192,2)" fg:x="859" fg:w="7668"/><text x="10.2570%" y="126.50">apply_update (kappybara/mixture.py:112)</text></g><g><title>_update_embeddings (kappybara/mixture.py:122) (126 samples, 1.47%)</title><rect x="97.8681%" y="132" width="1.4678%" height="15" fill="rgb(241,108,4)" fg:x="8401" fg:w="126"/><text x="98.1181%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (12 samples, 0.14%)</title><rect x="99.3360%" y="68" width="0.1398%" height="15" fill="rgb(247,173,49)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.14%)</title><rect x="99.3360%" y="84" width="0.1398%" height="15" fill="rgb(224,114,35)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.14%)</title><rect x="99.3360%" y="100" width="0.1398%" height="15" fill="rgb(245,159,27)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.14%)</title><rect x="99.3360%" y="116" width="0.1398%" height="15" fill="rgb(245,172,44)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.14%)</title><rect x="99.3360%" y="132" width="0.1398%" height="15" fill="rgb(236,23,11)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.14%)</title><rect x="99.3360%" y="148" width="0.1398%" height="15" fill="rgb(205,117,38)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (12 samples, 0.14%)</title><rect x="99.3360%" y="164" width="0.1398%" height="15" fill="rgb(237,72,25)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.14%)</title><rect x="99.3360%" y="180" width="0.1398%" height="15" fill="rgb(244,70,9)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.14%)</title><rect x="99.3360%" y="196" width="0.1398%" height="15" fill="rgb(217,125,39)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.14%)</title><rect x="99.3360%" y="212" width="0.1398%" height="15" fill="rgb(235,36,10)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.14%)</title><rect x="99.3360%" y="228" width="0.1398%" height="15" fill="rgb(251,123,47)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.14%)</title><rect x="99.3360%" y="244" width="0.1398%" height="15" fill="rgb(221,13,13)" fg:x="8527" fg:w="12"/><text x="99.5860%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (13 samples, 0.15%)</title><rect x="99.4758%" y="68" width="0.1514%" height="15" fill="rgb(238,131,9)" fg:x="8539" fg:w="13"/><text x="99.7258%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (9 samples, 0.10%)</title><rect x="99.6272%" y="68" width="0.1048%" height="15" fill="rgb(211,50,8)" fg:x="8552" fg:w="9"/><text x="99.8772%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (14 samples, 0.16%)</title><rect x="99.7321%" y="68" width="0.1631%" height="15" fill="rgb(245,182,24)" fg:x="8561" fg:w="14"/><text x="99.9821%" y="78.50"></text></g><g><title>all (8,584 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="8584"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (9 samples, 0.10%)</title><rect x="99.8952%" y="68" width="0.1048%" height="15" fill="rgb(246,228,12)" fg:x="8575" fg:w="9"/><text x="100.1452%" y="78.50"></text></g></svg></svg>