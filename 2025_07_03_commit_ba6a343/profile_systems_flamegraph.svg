<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="362" onload="init(evt)" viewBox="0 0 1200 362" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="362" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_systems_flamegraph.svg -- python profile_systems.py # commit ba6a343</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="351.00"> </text><svg id="frames" x="10" width="1180" total_samples="5072"><g><title>__init__ (lark/lark.py:357) (8 samples, 0.16%)</title><rect x="0.1183%" y="308" width="0.1577%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="8"/><text x="0.3683%" y="318.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1415) (8 samples, 0.16%)</title><rect x="0.1183%" y="324" width="0.1577%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="8"/><text x="0.3683%" y="334.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:1) (18 samples, 0.35%)</title><rect x="0.0000%" y="68" width="0.3549%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="18"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (18 samples, 0.35%)</title><rect x="0.0000%" y="84" width="0.3549%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="18"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (18 samples, 0.35%)</title><rect x="0.0000%" y="100" width="0.3549%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="18"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (18 samples, 0.35%)</title><rect x="0.0000%" y="116" width="0.3549%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="18"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (18 samples, 0.35%)</title><rect x="0.0000%" y="132" width="0.3549%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="18"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (18 samples, 0.35%)</title><rect x="0.0000%" y="148" width="0.3549%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="18"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.28%)</title><rect x="0.0789%" y="164" width="0.2760%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="14"/><text x="0.3289%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.28%)</title><rect x="0.0789%" y="180" width="0.2760%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="14"/><text x="0.3289%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.28%)</title><rect x="0.0789%" y="196" width="0.2760%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="14"/><text x="0.3289%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.28%)</title><rect x="0.0789%" y="212" width="0.2760%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="14"/><text x="0.3289%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.28%)</title><rect x="0.0789%" y="228" width="0.2760%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="14"/><text x="0.3289%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.28%)</title><rect x="0.0789%" y="244" width="0.2760%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="14"/><text x="0.3289%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (13 samples, 0.26%)</title><rect x="0.0986%" y="260" width="0.2563%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="13"/><text x="0.3486%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (13 samples, 0.26%)</title><rect x="0.0986%" y="276" width="0.2563%" height="15" fill="rgb(231,73,38)" fg:x="5" fg:w="13"/><text x="0.3486%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (12 samples, 0.24%)</title><rect x="0.1183%" y="292" width="0.2366%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="12"/><text x="0.3683%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:12) (9 samples, 0.18%)</title><rect x="0.3549%" y="68" width="0.1774%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="9"/><text x="0.6049%" y="78.50"></text></g><g><title>update (kappybara/system.py:69) (6 samples, 0.12%)</title><rect x="0.5718%" y="84" width="0.1183%" height="15" fill="rgb(221,200,47)" fg:x="29" fg:w="6"/><text x="0.8218%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (6 samples, 0.12%)</title><rect x="0.5718%" y="100" width="0.1183%" height="15" fill="rgb(226,26,5)" fg:x="29" fg:w="6"/><text x="0.8218%" y="110.50"></text></g><g><title>act (kappybara/system.py:63) (11 samples, 0.22%)</title><rect x="0.7295%" y="100" width="0.2169%" height="15" fill="rgb(249,33,26)" fg:x="37" fg:w="11"/><text x="0.9795%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (11 samples, 0.22%)</title><rect x="0.7295%" y="116" width="0.2169%" height="15" fill="rgb(235,183,28)" fg:x="37" fg:w="11"/><text x="0.9795%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (84 samples, 1.66%)</title><rect x="1.0252%" y="132" width="1.6562%" height="15" fill="rgb(221,5,38)" fg:x="52" fg:w="84"/><text x="1.2752%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (18 samples, 0.35%)</title><rect x="3.1349%" y="148" width="0.3549%" height="15" fill="rgb(247,18,42)" fg:x="159" fg:w="18"/><text x="3.3849%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.12%)</title><rect x="7.1569%" y="164" width="0.1183%" height="15" fill="rgb(241,131,45)" fg:x="363" fg:w="6"/><text x="7.4069%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (209 samples, 4.12%)</title><rect x="3.4897%" y="148" width="4.1207%" height="15" fill="rgb(249,31,29)" fg:x="177" fg:w="209"/><text x="3.7397%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.34%)</title><rect x="7.2752%" y="164" width="0.3352%" height="15" fill="rgb(225,111,53)" fg:x="369" fg:w="17"/><text x="7.5252%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.12%)</title><rect x="11.0213%" y="164" width="0.1183%" height="15" fill="rgb(238,160,17)" fg:x="559" fg:w="6"/><text x="11.2713%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (188 samples, 3.71%)</title><rect x="7.6104%" y="148" width="3.7066%" height="15" fill="rgb(214,148,48)" fg:x="386" fg:w="188"/><text x="7.8604%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.18%)</title><rect x="11.1396%" y="164" width="0.1774%" height="15" fill="rgb(232,36,49)" fg:x="565" fg:w="9"/><text x="11.3896%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (47 samples, 0.93%)</title><rect x="11.3565%" y="148" width="0.9267%" height="15" fill="rgb(209,103,24)" fg:x="576" fg:w="47"/><text x="11.6065%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (35 samples, 0.69%)</title><rect x="12.2831%" y="148" width="0.6901%" height="15" fill="rgb(229,88,8)" fg:x="623" fg:w="35"/><text x="12.5331%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.22%)</title><rect x="15.2011%" y="164" width="0.2169%" height="15" fill="rgb(213,181,19)" fg:x="771" fg:w="11"/><text x="15.4511%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (147 samples, 2.90%)</title><rect x="12.9732%" y="148" width="2.8983%" height="15" fill="rgb(254,191,54)" fg:x="658" fg:w="147"/><text x="13.2232%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.45%)</title><rect x="15.4180%" y="164" width="0.4535%" height="15" fill="rgb(241,83,37)" fg:x="782" fg:w="23"/><text x="15.6680%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (117 samples, 2.31%)</title><rect x="15.8715%" y="148" width="2.3068%" height="15" fill="rgb(233,36,39)" fg:x="805" fg:w="117"/><text x="16.1215%" y="158.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (61 samples, 1.20%)</title><rect x="20.5836%" y="164" width="1.2027%" height="15" fill="rgb(226,3,54)" fg:x="1044" fg:w="61"/><text x="20.8336%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (73 samples, 1.44%)</title><rect x="23.9945%" y="180" width="1.4393%" height="15" fill="rgb(245,192,40)" fg:x="1217" fg:w="73"/><text x="24.2445%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (46 samples, 0.91%)</title><rect x="27.3856%" y="196" width="0.9069%" height="15" fill="rgb(238,167,29)" fg:x="1389" fg:w="46"/><text x="27.6356%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (521 samples, 10.27%)</title><rect x="21.8454%" y="164" width="10.2721%" height="15" fill="rgb(232,182,51)" fg:x="1108" fg:w="521"/><text x="22.0954%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (339 samples, 6.68%)</title><rect x="25.4338%" y="180" width="6.6838%" height="15" fill="rgb(231,60,39)" fg:x="1290" fg:w="339"/><text x="25.6838%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (194 samples, 3.82%)</title><rect x="28.2926%" y="196" width="3.8249%" height="15" fill="rgb(208,69,12)" fg:x="1435" fg:w="194"/><text x="28.5426%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (94 samples, 1.85%)</title><rect x="32.1175%" y="164" width="1.8533%" height="15" fill="rgb(235,93,37)" fg:x="1629" fg:w="94"/><text x="32.3675%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (46 samples, 0.91%)</title><rect x="35.1538%" y="180" width="0.9069%" height="15" fill="rgb(213,116,39)" fg:x="1783" fg:w="46"/><text x="35.4038%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (127 samples, 2.50%)</title><rect x="33.9905%" y="164" width="2.5039%" height="15" fill="rgb(222,207,29)" fg:x="1724" fg:w="127"/><text x="34.2405%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (22 samples, 0.43%)</title><rect x="36.0607%" y="180" width="0.4338%" height="15" fill="rgb(206,96,30)" fg:x="1829" fg:w="22"/><text x="36.3107%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (101 samples, 1.99%)</title><rect x="44.7358%" y="180" width="1.9913%" height="15" fill="rgb(218,138,4)" fg:x="2269" fg:w="101"/><text x="44.9858%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (10 samples, 0.20%)</title><rect x="46.7271%" y="180" width="0.1972%" height="15" fill="rgb(250,191,14)" fg:x="2370" fg:w="10"/><text x="46.9771%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (12 samples, 0.24%)</title><rect x="47.5158%" y="196" width="0.2366%" height="15" fill="rgb(239,60,40)" fg:x="2410" fg:w="12"/><text x="47.7658%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (110 samples, 2.17%)</title><rect x="46.9243%" y="180" width="2.1688%" height="15" fill="rgb(206,27,48)" fg:x="2380" fg:w="110"/><text x="47.1743%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (68 samples, 1.34%)</title><rect x="47.7524%" y="196" width="1.3407%" height="15" fill="rgb(225,35,8)" fg:x="2422" fg:w="68"/><text x="48.0024%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (12 samples, 0.24%)</title><rect x="50.2366%" y="196" width="0.2366%" height="15" fill="rgb(250,213,24)" fg:x="2548" fg:w="12"/><text x="50.4866%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (6 samples, 0.12%)</title><rect x="52.2674%" y="212" width="0.1183%" height="15" fill="rgb(247,123,22)" fg:x="2651" fg:w="6"/><text x="52.5174%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.22%)</title><rect x="53.9826%" y="228" width="0.2169%" height="15" fill="rgb(231,138,38)" fg:x="2738" fg:w="11"/><text x="54.2326%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (205 samples, 4.04%)</title><rect x="50.4732%" y="196" width="4.0418%" height="15" fill="rgb(231,145,46)" fg:x="2560" fg:w="205"/><text x="50.7232%" y="206.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (108 samples, 2.13%)</title><rect x="52.3856%" y="212" width="2.1293%" height="15" fill="rgb(251,118,11)" fg:x="2657" fg:w="108"/><text x="52.6356%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.32%)</title><rect x="54.1995%" y="228" width="0.3155%" height="15" fill="rgb(217,147,25)" fg:x="2749" fg:w="16"/><text x="54.4495%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (128 samples, 2.52%)</title><rect x="54.5150%" y="196" width="2.5237%" height="15" fill="rgb(247,81,37)" fg:x="2765" fg:w="128"/><text x="54.7650%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (53 samples, 1.04%)</title><rect x="57.0386%" y="196" width="1.0450%" height="15" fill="rgb(209,12,38)" fg:x="2893" fg:w="53"/><text x="57.2886%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (14 samples, 0.28%)</title><rect x="58.0836%" y="196" width="0.2760%" height="15" fill="rgb(227,1,9)" fg:x="2946" fg:w="14"/><text x="58.3336%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (510 samples, 10.06%)</title><rect x="49.0931%" y="180" width="10.0552%" height="15" fill="rgb(248,47,43)" fg:x="2490" fg:w="510"/><text x="49.3431%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (40 samples, 0.79%)</title><rect x="58.3596%" y="196" width="0.7886%" height="15" fill="rgb(221,10,30)" fg:x="2960" fg:w="40"/><text x="58.6096%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (10 samples, 0.20%)</title><rect x="59.1877%" y="180" width="0.1972%" height="15" fill="rgb(210,229,1)" fg:x="3002" fg:w="10"/><text x="59.4377%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (89 samples, 1.75%)</title><rect x="59.3849%" y="180" width="1.7547%" height="15" fill="rgb(222,148,37)" fg:x="3012" fg:w="89"/><text x="59.6349%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (45 samples, 0.89%)</title><rect x="60.2524%" y="196" width="0.8872%" height="15" fill="rgb(234,67,33)" fg:x="3056" fg:w="45"/><text x="60.5024%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.14%)</title><rect x="61.0016%" y="212" width="0.1380%" height="15" fill="rgb(247,98,35)" fg:x="3094" fg:w="7"/><text x="61.2516%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (77 samples, 1.52%)</title><rect x="61.1396%" y="180" width="1.5181%" height="15" fill="rgb(247,138,52)" fg:x="3101" fg:w="77"/><text x="61.3896%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (43 samples, 0.85%)</title><rect x="61.8099%" y="196" width="0.8478%" height="15" fill="rgb(213,79,30)" fg:x="3135" fg:w="43"/><text x="62.0599%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (21 samples, 0.41%)</title><rect x="62.6577%" y="180" width="0.4140%" height="15" fill="rgb(246,177,23)" fg:x="3178" fg:w="21"/><text x="62.9077%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (40 samples, 0.79%)</title><rect x="63.0915%" y="180" width="0.7886%" height="15" fill="rgb(230,62,27)" fg:x="3200" fg:w="40"/><text x="63.3415%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (30 samples, 0.59%)</title><rect x="63.8801%" y="180" width="0.5915%" height="15" fill="rgb(216,154,8)" fg:x="3240" fg:w="30"/><text x="64.1301%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (8 samples, 0.16%)</title><rect x="64.4716%" y="180" width="0.1577%" height="15" fill="rgb(244,35,45)" fg:x="3270" fg:w="8"/><text x="64.7216%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,582 samples, 31.19%)</title><rect x="36.4945%" y="164" width="31.1909%" height="15" fill="rgb(251,115,12)" fg:x="1851" fg:w="1582"/><text x="36.7445%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (155 samples, 3.06%)</title><rect x="64.6293%" y="180" width="3.0560%" height="15" fill="rgb(240,54,50)" fg:x="3278" fg:w="155"/><text x="64.8793%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,554 samples, 50.35%)</title><rect x="18.1782%" y="148" width="50.3549%" height="15" fill="rgb(233,84,52)" fg:x="922" fg:w="2554"/><text x="18.4282%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (43 samples, 0.85%)</title><rect x="67.6853%" y="164" width="0.8478%" height="15" fill="rgb(207,117,47)" fg:x="3433" fg:w="43"/><text x="67.9353%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (42 samples, 0.83%)</title><rect x="70.1696%" y="164" width="0.8281%" height="15" fill="rgb(249,43,39)" fg:x="3559" fg:w="42"/><text x="70.4196%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (29 samples, 0.57%)</title><rect x="72.4369%" y="180" width="0.5718%" height="15" fill="rgb(209,38,44)" fg:x="3674" fg:w="29"/><text x="72.6869%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (335 samples, 6.60%)</title><rect x="68.6711%" y="148" width="6.6049%" height="15" fill="rgb(236,212,23)" fg:x="3483" fg:w="335"/><text x="68.9211%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (217 samples, 4.28%)</title><rect x="70.9976%" y="164" width="4.2784%" height="15" fill="rgb(242,79,21)" fg:x="3601" fg:w="217"/><text x="71.2476%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (115 samples, 2.27%)</title><rect x="73.0087%" y="180" width="2.2674%" height="15" fill="rgb(211,96,35)" fg:x="3703" fg:w="115"/><text x="73.2587%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (17 samples, 0.34%)</title><rect x="75.8872%" y="164" width="0.3352%" height="15" fill="rgb(253,215,40)" fg:x="3849" fg:w="17"/><text x="76.1372%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (53 samples, 1.04%)</title><rect x="75.2760%" y="148" width="1.0450%" height="15" fill="rgb(211,81,21)" fg:x="3818" fg:w="53"/><text x="75.5260%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (8 samples, 0.16%)</title><rect x="76.6562%" y="164" width="0.1577%" height="15" fill="rgb(208,190,38)" fg:x="3888" fg:w="8"/><text x="76.9062%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (52 samples, 1.03%)</title><rect x="76.3210%" y="148" width="1.0252%" height="15" fill="rgb(235,213,38)" fg:x="3871" fg:w="52"/><text x="76.5710%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (27 samples, 0.53%)</title><rect x="76.8139%" y="164" width="0.5323%" height="15" fill="rgb(237,122,38)" fg:x="3896" fg:w="27"/><text x="77.0639%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (40 samples, 0.79%)</title><rect x="77.3462%" y="148" width="0.7886%" height="15" fill="rgb(244,218,35)" fg:x="3923" fg:w="40"/><text x="77.5962%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.22%)</title><rect x="77.9180%" y="164" width="0.2169%" height="15" fill="rgb(240,68,47)" fg:x="3952" fg:w="11"/><text x="78.1680%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (26 samples, 0.51%)</title><rect x="78.1349%" y="148" width="0.5126%" height="15" fill="rgb(210,16,53)" fg:x="3963" fg:w="26"/><text x="78.3849%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (13 samples, 0.26%)</title><rect x="78.6475%" y="148" width="0.2563%" height="15" fill="rgb(235,124,12)" fg:x="3989" fg:w="13"/><text x="78.8975%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (45 samples, 0.89%)</title><rect x="79.9882%" y="164" width="0.8872%" height="15" fill="rgb(224,169,11)" fg:x="4057" fg:w="45"/><text x="80.2382%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.14%)</title><rect x="80.7374%" y="180" width="0.1380%" height="15" fill="rgb(250,166,2)" fg:x="4095" fg:w="7"/><text x="80.9874%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (106 samples, 2.09%)</title><rect x="78.9038%" y="148" width="2.0899%" height="15" fill="rgb(242,216,29)" fg:x="4002" fg:w="106"/><text x="79.1538%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (24 samples, 0.47%)</title><rect x="81.0331%" y="148" width="0.4732%" height="15" fill="rgb(230,116,27)" fg:x="4110" fg:w="24"/><text x="81.2831%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (49 samples, 0.97%)</title><rect x="81.5063%" y="148" width="0.9661%" height="15" fill="rgb(228,99,48)" fg:x="4134" fg:w="49"/><text x="81.7563%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (4,056 samples, 79.97%)</title><rect x="2.6814%" y="132" width="79.9685%" height="15" fill="rgb(253,11,6)" fg:x="136" fg:w="4056"/><text x="2.9314%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (9 samples, 0.18%)</title><rect x="82.4724%" y="148" width="0.1774%" height="15" fill="rgb(247,143,39)" fg:x="4183" fg:w="9"/><text x="82.7224%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (45 samples, 0.89%)</title><rect x="82.6498%" y="132" width="0.8872%" height="15" fill="rgb(236,97,10)" fg:x="4192" fg:w="45"/><text x="82.8998%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (7 samples, 0.14%)</title><rect x="83.5371%" y="132" width="0.1380%" height="15" fill="rgb(233,208,19)" fg:x="4237" fg:w="7"/><text x="83.7871%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (14 samples, 0.28%)</title><rect x="83.6751%" y="132" width="0.2760%" height="15" fill="rgb(216,164,2)" fg:x="4244" fg:w="14"/><text x="83.9251%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (141 samples, 2.78%)</title><rect x="90.6940%" y="148" width="2.7800%" height="15" fill="rgb(220,129,5)" fg:x="4600" fg:w="141"/><text x="90.9440%" y="158.50">&lt;l..</text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.16%)</title><rect x="93.4740%" y="148" width="0.1577%" height="15" fill="rgb(242,17,10)" fg:x="4741" fg:w="8"/><text x="93.7240%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (536 samples, 10.57%)</title><rect x="83.9511%" y="132" width="10.5678%" height="15" fill="rgb(242,107,0)" fg:x="4258" fg:w="536"/><text x="84.2011%" y="142.50">_update_embeddi..</text></g><g><title>__hash__ (kappybara/utils.py:30) (45 samples, 0.89%)</title><rect x="93.6317%" y="148" width="0.8872%" height="15" fill="rgb(251,28,31)" fg:x="4749" fg:w="45"/><text x="93.8817%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (44 samples, 0.87%)</title><rect x="98.5804%" y="148" width="0.8675%" height="15" fill="rgb(233,223,10)" fg:x="5000" fg:w="44"/><text x="98.8304%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:14) (5,022 samples, 99.01%)</title><rect x="0.5521%" y="68" width="99.0142%" height="15" fill="rgb(215,21,27)" fg:x="28" fg:w="5022"/><text x="0.8021%" y="78.50">&lt;module&gt; (profile_systems.py:14)</text></g><g><title>update (kappybara/system.py:70) (5,015 samples, 98.88%)</title><rect x="0.6901%" y="84" width="98.8762%" height="15" fill="rgb(232,23,21)" fg:x="35" fg:w="5015"/><text x="0.9401%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (5,002 samples, 98.62%)</title><rect x="0.9464%" y="100" width="98.6199%" height="15" fill="rgb(244,5,23)" fg:x="48" fg:w="5002"/><text x="1.1964%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (5,000 samples, 98.58%)</title><rect x="0.9858%" y="116" width="98.5804%" height="15" fill="rgb(226,81,46)" fg:x="50" fg:w="5000"/><text x="1.2358%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (256 samples, 5.05%)</title><rect x="94.5189%" y="132" width="5.0473%" height="15" fill="rgb(247,70,30)" fg:x="4794" fg:w="256"/><text x="94.7689%" y="142.50">_updat..</text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.12%)</title><rect x="99.4479%" y="148" width="0.1183%" height="15" fill="rgb(212,68,19)" fg:x="5044" fg:w="6"/><text x="99.6979%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (9 samples, 0.18%)</title><rect x="99.5662%" y="68" width="0.1774%" height="15" fill="rgb(240,187,13)" fg:x="5050" fg:w="9"/><text x="99.8162%" y="78.50"></text></g><g><title>all (5,072 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="5072"/><text x="0.2500%" y="62.50"></text></g></svg></svg>