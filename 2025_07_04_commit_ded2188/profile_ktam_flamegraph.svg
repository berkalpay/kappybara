<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="378" onload="init(evt)" viewBox="0 0 1200 378" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="378" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit ded2188</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="367.00"> </text><svg id="frames" x="10" width="1180" total_samples="2562"><g><title>&lt;module&gt; (profile_ktam.py:1) (3 samples, 0.12%)</title><rect x="0.0000%" y="68" width="0.1171%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="0.0000%" y="84" width="0.1171%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="3"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="0.0000%" y="100" width="0.1171%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="0.0000%" y="116" width="0.1171%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="3"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="0.0000%" y="132" width="0.1171%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="3"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="0.0000%" y="148" width="0.1171%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/mixture.py:1) (3 samples, 0.12%)</title><rect x="0.0000%" y="164" width="0.1171%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="0.0000%" y="180" width="0.1171%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="0.0000%" y="196" width="0.1171%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="0.0000%" y="212" width="0.1171%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="0.0000%" y="228" width="0.1171%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="0.0000%" y="244" width="0.1171%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="254.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:18) (3 samples, 0.12%)</title><rect x="0.1171%" y="68" width="0.1171%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="3"/><text x="0.3671%" y="78.50"></text></g><g><title>instantiate (kappybara/mixture.py:53) (3 samples, 0.12%)</title><rect x="0.1171%" y="84" width="0.1171%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="3"/><text x="0.3671%" y="94.50"></text></g><g><title>_instantiate_component (kappybara/mixture.py:56) (3 samples, 0.12%)</title><rect x="0.1171%" y="100" width="0.1171%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="3"/><text x="0.3671%" y="110.50"></text></g><g><title>n_embeddings (kappybara/rule.py:62) (5 samples, 0.20%)</title><rect x="0.3903%" y="180" width="0.1952%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="5"/><text x="0.6403%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:63) (3 samples, 0.12%)</title><rect x="0.4684%" y="196" width="0.1171%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="3"/><text x="0.7184%" y="206.50"></text></g><g><title>update (kappybara/system.py:69) (7 samples, 0.27%)</title><rect x="0.3903%" y="84" width="0.2732%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="7"/><text x="0.6403%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (7 samples, 0.27%)</title><rect x="0.3903%" y="100" width="0.2732%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="7"/><text x="0.6403%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (7 samples, 0.27%)</title><rect x="0.3903%" y="116" width="0.2732%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="7"/><text x="0.6403%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (7 samples, 0.27%)</title><rect x="0.3903%" y="132" width="0.2732%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="7"/><text x="0.6403%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (7 samples, 0.27%)</title><rect x="0.3903%" y="148" width="0.2732%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="7"/><text x="0.6403%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (7 samples, 0.27%)</title><rect x="0.3903%" y="164" width="0.2732%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="7"/><text x="0.6403%" y="174.50"></text></g><g><title>act (kappybara/system.py:62) (4 samples, 0.16%)</title><rect x="0.6635%" y="100" width="0.1561%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="4"/><text x="0.9135%" y="110.50"></text></g><g><title>_produce_update (kappybara/rule.py:148) (4 samples, 0.16%)</title><rect x="1.0148%" y="132" width="0.1561%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="4"/><text x="1.2648%" y="142.50"></text></g><g><title>connect_sites (kappybara/mixture.py:229) (4 samples, 0.16%)</title><rect x="1.0148%" y="148" width="0.1561%" height="15" fill="rgb(249,31,29)" fg:x="26" fg:w="4"/><text x="1.2648%" y="158.50"></text></g><g><title>act (kappybara/system.py:63) (10 samples, 0.39%)</title><rect x="0.8197%" y="100" width="0.3903%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="10"/><text x="1.0697%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (9 samples, 0.35%)</title><rect x="0.8587%" y="116" width="0.3513%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="9"/><text x="1.1087%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (5 samples, 0.20%)</title><rect x="1.3271%" y="148" width="0.1952%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="5"/><text x="1.5771%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (25 samples, 0.98%)</title><rect x="1.5222%" y="148" width="0.9758%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="25"/><text x="1.7722%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (4 samples, 0.16%)</title><rect x="2.4980%" y="148" width="0.1561%" height="15" fill="rgb(209,103,24)" fg:x="64" fg:w="4"/><text x="2.7480%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (15 samples, 0.59%)</title><rect x="3.7471%" y="180" width="0.5855%" height="15" fill="rgb(229,88,8)" fg:x="96" fg:w="15"/><text x="3.9971%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (12 samples, 0.47%)</title><rect x="3.8642%" y="196" width="0.4684%" height="15" fill="rgb(213,181,19)" fg:x="99" fg:w="12"/><text x="4.1142%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (92 samples, 3.59%)</title><rect x="1.2100%" y="132" width="3.5909%" height="15" fill="rgb(254,191,54)" fg:x="31" fg:w="92"/><text x="1.4600%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (54 samples, 2.11%)</title><rect x="2.6932%" y="148" width="2.1077%" height="15" fill="rgb(241,83,37)" fg:x="69" fg:w="54"/><text x="2.9432%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (50 samples, 1.95%)</title><rect x="2.8493%" y="164" width="1.9516%" height="15" fill="rgb(233,36,39)" fg:x="73" fg:w="50"/><text x="3.0993%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (11 samples, 0.43%)</title><rect x="4.3716%" y="180" width="0.4294%" height="15" fill="rgb(226,3,54)" fg:x="112" fg:w="11"/><text x="4.6216%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (97 samples, 3.79%)</title><rect x="1.2100%" y="116" width="3.7861%" height="15" fill="rgb(245,192,40)" fg:x="31" fg:w="97"/><text x="1.4600%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (5 samples, 0.20%)</title><rect x="4.8009%" y="132" width="0.1952%" height="15" fill="rgb(238,167,29)" fg:x="123" fg:w="5"/><text x="5.0509%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (4 samples, 0.16%)</title><rect x="4.8400%" y="148" width="0.1561%" height="15" fill="rgb(232,182,51)" fg:x="124" fg:w="4"/><text x="5.0900%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (14 samples, 0.55%)</title><rect x="5.4645%" y="148" width="0.5464%" height="15" fill="rgb(231,60,39)" fg:x="140" fg:w="14"/><text x="5.7145%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.20%)</title><rect x="9.4067%" y="164" width="0.1952%" height="15" fill="rgb(208,69,12)" fg:x="241" fg:w="5"/><text x="9.6567%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (105 samples, 4.10%)</title><rect x="6.0109%" y="148" width="4.0984%" height="15" fill="rgb(235,93,37)" fg:x="154" fg:w="105"/><text x="6.2609%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.51%)</title><rect x="9.6019%" y="164" width="0.5074%" height="15" fill="rgb(213,116,39)" fg:x="246" fg:w="13"/><text x="9.8519%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (98 samples, 3.83%)</title><rect x="10.1093%" y="148" width="3.8251%" height="15" fill="rgb(222,207,29)" fg:x="259" fg:w="98"/><text x="10.3593%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.35%)</title><rect x="13.5831%" y="164" width="0.3513%" height="15" fill="rgb(206,96,30)" fg:x="348" fg:w="9"/><text x="13.8331%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (30 samples, 1.17%)</title><rect x="13.9344%" y="148" width="1.1710%" height="15" fill="rgb(218,138,4)" fg:x="357" fg:w="30"/><text x="14.1844%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (13 samples, 0.51%)</title><rect x="15.1054%" y="148" width="0.5074%" height="15" fill="rgb(250,191,14)" fg:x="387" fg:w="13"/><text x="15.3554%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.27%)</title><rect x="17.9547%" y="164" width="0.2732%" height="15" fill="rgb(239,60,40)" fg:x="460" fg:w="7"/><text x="18.2047%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (73 samples, 2.85%)</title><rect x="15.6128%" y="148" width="2.8493%" height="15" fill="rgb(206,27,48)" fg:x="400" fg:w="73"/><text x="15.8628%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.23%)</title><rect x="18.2279%" y="164" width="0.2342%" height="15" fill="rgb(225,35,8)" fg:x="467" fg:w="6"/><text x="18.4779%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (63 samples, 2.46%)</title><rect x="18.4621%" y="148" width="2.4590%" height="15" fill="rgb(250,213,24)" fg:x="473" fg:w="63"/><text x="18.7121%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (6 samples, 0.23%)</title><rect x="23.1850%" y="164" width="0.2342%" height="15" fill="rgb(247,123,22)" fg:x="594" fg:w="6"/><text x="23.4350%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (31 samples, 1.21%)</title><rect x="23.4192%" y="164" width="1.2100%" height="15" fill="rgb(231,138,38)" fg:x="600" fg:w="31"/><text x="23.6692%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (37 samples, 1.44%)</title><rect x="26.9321%" y="180" width="1.4442%" height="15" fill="rgb(231,145,46)" fg:x="690" fg:w="37"/><text x="27.1821%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (22 samples, 0.86%)</title><rect x="30.4059%" y="196" width="0.8587%" height="15" fill="rgb(251,118,11)" fg:x="779" fg:w="22"/><text x="30.6559%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (277 samples, 10.81%)</title><rect x="24.7073%" y="164" width="10.8119%" height="15" fill="rgb(217,147,25)" fg:x="633" fg:w="277"/><text x="24.9573%" y="174.50">embeds_in (kappy..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (183 samples, 7.14%)</title><rect x="28.3763%" y="180" width="7.1429%" height="15" fill="rgb(247,81,37)" fg:x="727" fg:w="183"/><text x="28.6263%" y="190.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:111) (109 samples, 4.25%)</title><rect x="31.2646%" y="196" width="4.2545%" height="15" fill="rgb(209,12,38)" fg:x="801" fg:w="109"/><text x="31.5146%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (38 samples, 1.48%)</title><rect x="35.5191%" y="164" width="1.4832%" height="15" fill="rgb(227,1,9)" fg:x="910" fg:w="38"/><text x="35.7691%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (4 samples, 0.16%)</title><rect x="37.0023%" y="164" width="0.1561%" height="15" fill="rgb(248,47,43)" fg:x="948" fg:w="4"/><text x="37.2523%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (15 samples, 0.59%)</title><rect x="38.3685%" y="180" width="0.5855%" height="15" fill="rgb(221,10,30)" fg:x="983" fg:w="15"/><text x="38.6185%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (53 samples, 2.07%)</title><rect x="37.1585%" y="164" width="2.0687%" height="15" fill="rgb(210,229,1)" fg:x="952" fg:w="53"/><text x="37.4085%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (7 samples, 0.27%)</title><rect x="38.9539%" y="180" width="0.2732%" height="15" fill="rgb(222,148,37)" fg:x="998" fg:w="7"/><text x="39.2039%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (50 samples, 1.95%)</title><rect x="49.8048%" y="180" width="1.9516%" height="15" fill="rgb(234,67,33)" fg:x="1276" fg:w="50"/><text x="50.0548%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (5 samples, 0.20%)</title><rect x="51.7564%" y="180" width="0.1952%" height="15" fill="rgb(247,98,35)" fg:x="1326" fg:w="5"/><text x="52.0064%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (9 samples, 0.35%)</title><rect x="52.6932%" y="196" width="0.3513%" height="15" fill="rgb(247,138,52)" fg:x="1350" fg:w="9"/><text x="52.9432%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (49 samples, 1.91%)</title><rect x="51.9516%" y="180" width="1.9126%" height="15" fill="rgb(213,79,30)" fg:x="1331" fg:w="49"/><text x="52.2016%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (21 samples, 0.82%)</title><rect x="53.0445%" y="196" width="0.8197%" height="15" fill="rgb(246,177,23)" fg:x="1359" fg:w="21"/><text x="53.2945%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (5 samples, 0.20%)</title><rect x="55.1913%" y="196" width="0.1952%" height="15" fill="rgb(230,62,27)" fg:x="1414" fg:w="5"/><text x="55.4413%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (7 samples, 0.27%)</title><rect x="57.7674%" y="212" width="0.2732%" height="15" fill="rgb(216,154,8)" fg:x="1480" fg:w="7"/><text x="58.0174%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="59.7580%" y="228" width="0.1171%" height="15" fill="rgb(244,35,45)" fg:x="1531" fg:w="3"/><text x="60.0080%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (121 samples, 4.72%)</title><rect x="55.3864%" y="196" width="4.7229%" height="15" fill="rgb(251,115,12)" fg:x="1419" fg:w="121"/><text x="55.6364%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (53 samples, 2.07%)</title><rect x="58.0406%" y="212" width="2.0687%" height="15" fill="rgb(240,54,50)" fg:x="1487" fg:w="53"/><text x="58.2906%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.23%)</title><rect x="59.8751%" y="228" width="0.2342%" height="15" fill="rgb(233,84,52)" fg:x="1534" fg:w="6"/><text x="60.1251%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (62 samples, 2.42%)</title><rect x="60.1093%" y="196" width="2.4200%" height="15" fill="rgb(207,117,47)" fg:x="1540" fg:w="62"/><text x="60.3593%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (26 samples, 1.01%)</title><rect x="62.5293%" y="196" width="1.0148%" height="15" fill="rgb(249,43,39)" fg:x="1602" fg:w="26"/><text x="62.7793%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (8 samples, 0.31%)</title><rect x="63.5441%" y="196" width="0.3123%" height="15" fill="rgb(209,38,44)" fg:x="1628" fg:w="8"/><text x="63.7941%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (268 samples, 10.46%)</title><rect x="53.8642%" y="180" width="10.4606%" height="15" fill="rgb(236,212,23)" fg:x="1380" fg:w="268"/><text x="54.1142%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (12 samples, 0.47%)</title><rect x="63.8564%" y="196" width="0.4684%" height="15" fill="rgb(242,79,21)" fg:x="1636" fg:w="12"/><text x="64.1064%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (4 samples, 0.16%)</title><rect x="64.3247%" y="180" width="0.1561%" height="15" fill="rgb(211,96,35)" fg:x="1648" fg:w="4"/><text x="64.5747%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (7 samples, 0.27%)</title><rect x="64.4809%" y="180" width="0.2732%" height="15" fill="rgb(253,215,40)" fg:x="1652" fg:w="7"/><text x="64.7309%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.20%)</title><rect x="65.6909%" y="196" width="0.1952%" height="15" fill="rgb(211,81,21)" fg:x="1683" fg:w="5"/><text x="65.9409%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.20%)</title><rect x="67.6815%" y="212" width="0.1952%" height="15" fill="rgb(208,190,38)" fg:x="1734" fg:w="5"/><text x="67.9315%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (89 samples, 3.47%)</title><rect x="64.7541%" y="180" width="3.4738%" height="15" fill="rgb(235,213,38)" fg:x="1659" fg:w="89"/><text x="65.0041%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (60 samples, 2.34%)</title><rect x="65.8860%" y="196" width="2.3419%" height="15" fill="rgb(237,122,38)" fg:x="1688" fg:w="60"/><text x="66.1360%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.35%)</title><rect x="67.8767%" y="212" width="0.3513%" height="15" fill="rgb(244,218,35)" fg:x="1739" fg:w="9"/><text x="68.1267%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.20%)</title><rect x="69.5550%" y="196" width="0.1952%" height="15" fill="rgb(240,68,47)" fg:x="1782" fg:w="5"/><text x="69.8050%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (102 samples, 3.98%)</title><rect x="68.2279%" y="180" width="3.9813%" height="15" fill="rgb(210,16,53)" fg:x="1748" fg:w="102"/><text x="68.4779%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (63 samples, 2.46%)</title><rect x="69.7502%" y="196" width="2.4590%" height="15" fill="rgb(235,124,12)" fg:x="1787" fg:w="63"/><text x="70.0002%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.20%)</title><rect x="72.0141%" y="212" width="0.1952%" height="15" fill="rgb(224,169,11)" fg:x="1845" fg:w="5"/><text x="72.2641%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (21 samples, 0.82%)</title><rect x="72.2092%" y="180" width="0.8197%" height="15" fill="rgb(250,166,2)" fg:x="1850" fg:w="21"/><text x="72.4592%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (48 samples, 1.87%)</title><rect x="73.0289%" y="180" width="1.8735%" height="15" fill="rgb(242,216,29)" fg:x="1871" fg:w="48"/><text x="73.2789%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (23 samples, 0.90%)</title><rect x="74.9024%" y="180" width="0.8977%" height="15" fill="rgb(230,116,27)" fg:x="1919" fg:w="23"/><text x="75.1524%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (8 samples, 0.31%)</title><rect x="75.8002%" y="180" width="0.3123%" height="15" fill="rgb(228,99,48)" fg:x="1942" fg:w="8"/><text x="76.0502%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,031 samples, 40.24%)</title><rect x="39.2272%" y="164" width="40.2420%" height="15" fill="rgb(253,11,6)" fg:x="1005" fg:w="1031"/><text x="39.4772%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (86 samples, 3.36%)</title><rect x="76.1124%" y="180" width="3.3568%" height="15" fill="rgb(247,143,39)" fg:x="1950" fg:w="86"/><text x="76.3624%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (1,510 samples, 58.94%)</title><rect x="20.9212%" y="148" width="58.9383%" height="15" fill="rgb(236,97,10)" fg:x="536" fg:w="1510"/><text x="21.1712%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (10 samples, 0.39%)</title><rect x="79.4692%" y="164" width="0.3903%" height="15" fill="rgb(233,208,19)" fg:x="2036" fg:w="10"/><text x="79.7192%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (3 samples, 0.12%)</title><rect x="79.9375%" y="148" width="0.1171%" height="15" fill="rgb(216,164,2)" fg:x="2048" fg:w="3"/><text x="80.1875%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (17 samples, 0.66%)</title><rect x="81.3037%" y="164" width="0.6635%" height="15" fill="rgb(220,129,5)" fg:x="2083" fg:w="17"/><text x="81.5537%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (8 samples, 0.31%)</title><rect x="82.8259%" y="180" width="0.3123%" height="15" fill="rgb(242,17,10)" fg:x="2122" fg:w="8"/><text x="83.0759%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (145 samples, 5.66%)</title><rect x="80.0546%" y="148" width="5.6596%" height="15" fill="rgb(242,107,0)" fg:x="2051" fg:w="145"/><text x="80.3046%" y="158.50">embeddi..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (96 samples, 3.75%)</title><rect x="81.9672%" y="164" width="3.7471%" height="15" fill="rgb(251,28,31)" fg:x="2100" fg:w="96"/><text x="82.2172%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (66 samples, 2.58%)</title><rect x="83.1382%" y="180" width="2.5761%" height="15" fill="rgb(233,223,10)" fg:x="2130" fg:w="66"/><text x="83.3882%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (27 samples, 1.05%)</title><rect x="85.7143%" y="148" width="1.0539%" height="15" fill="rgb(215,21,27)" fg:x="2196" fg:w="27"/><text x="85.9643%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (13 samples, 0.51%)</title><rect x="86.2607%" y="164" width="0.5074%" height="15" fill="rgb(232,23,21)" fg:x="2210" fg:w="13"/><text x="86.5107%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (5 samples, 0.20%)</title><rect x="87.1194%" y="164" width="0.1952%" height="15" fill="rgb(244,5,23)" fg:x="2232" fg:w="5"/><text x="87.3694%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (29 samples, 1.13%)</title><rect x="86.7681%" y="148" width="1.1319%" height="15" fill="rgb(226,81,46)" fg:x="2223" fg:w="29"/><text x="87.0181%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (15 samples, 0.59%)</title><rect x="87.3146%" y="164" width="0.5855%" height="15" fill="rgb(247,70,30)" fg:x="2237" fg:w="15"/><text x="87.5646%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (4 samples, 0.16%)</title><rect x="89.2272%" y="164" width="0.1561%" height="15" fill="rgb(212,68,19)" fg:x="2286" fg:w="4"/><text x="89.4772%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (42 samples, 1.64%)</title><rect x="87.9001%" y="148" width="1.6393%" height="15" fill="rgb(240,187,13)" fg:x="2252" fg:w="42"/><text x="88.1501%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (4 samples, 0.16%)</title><rect x="89.3833%" y="164" width="0.1561%" height="15" fill="rgb(223,113,26)" fg:x="2290" fg:w="4"/><text x="89.6333%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (8 samples, 0.31%)</title><rect x="89.5394%" y="148" width="0.3123%" height="15" fill="rgb(206,192,2)" fg:x="2294" fg:w="8"/><text x="89.7894%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (21 samples, 0.82%)</title><rect x="89.8517%" y="148" width="0.8197%" height="15" fill="rgb(241,108,4)" fg:x="2302" fg:w="21"/><text x="90.1017%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (4 samples, 0.16%)</title><rect x="92.7010%" y="164" width="0.1561%" height="15" fill="rgb(247,173,49)" fg:x="2375" fg:w="4"/><text x="92.9510%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (4 samples, 0.16%)</title><rect x="94.3404%" y="180" width="0.1561%" height="15" fill="rgb(224,114,35)" fg:x="2417" fg:w="4"/><text x="94.5904%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (45 samples, 1.76%)</title><rect x="92.8571%" y="164" width="1.7564%" height="15" fill="rgb(245,159,27)" fg:x="2379" fg:w="45"/><text x="93.1071%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (3 samples, 0.12%)</title><rect x="94.4965%" y="180" width="0.1171%" height="15" fill="rgb(245,172,44)" fg:x="2421" fg:w="3"/><text x="94.7465%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (104 samples, 4.06%)</title><rect x="90.6714%" y="148" width="4.0593%" height="15" fill="rgb(236,23,11)" fg:x="2323" fg:w="104"/><text x="90.9214%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="94.6136%" y="164" width="0.1171%" height="15" fill="rgb(205,117,38)" fg:x="2424" fg:w="3"/><text x="94.8636%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (8 samples, 0.31%)</title><rect x="94.7307%" y="148" width="0.3123%" height="15" fill="rgb(237,72,25)" fg:x="2427" fg:w="8"/><text x="94.9807%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (2,309 samples, 90.12%)</title><rect x="5.0742%" y="132" width="90.1249%" height="15" fill="rgb(244,70,9)" fg:x="130" fg:w="2309"/><text x="5.3242%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:284) (4 samples, 0.16%)</title><rect x="95.0429%" y="148" width="0.1561%" height="15" fill="rgb(217,125,39)" fg:x="2435" fg:w="4"/><text x="95.2929%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (10 samples, 0.39%)</title><rect x="95.1991%" y="132" width="0.3903%" height="15" fill="rgb(235,36,10)" fg:x="2439" fg:w="10"/><text x="95.4491%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (3 samples, 0.12%)</title><rect x="95.5894%" y="132" width="0.1171%" height="15" fill="rgb(251,123,47)" fg:x="2449" fg:w="3"/><text x="95.8394%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="97.8142%" y="148" width="0.1171%" height="15" fill="rgb(221,13,13)" fg:x="2506" fg:w="3"/><text x="98.0642%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (58 samples, 2.26%)</title><rect x="95.7845%" y="132" width="2.2639%" height="15" fill="rgb(238,131,9)" fg:x="2454" fg:w="58"/><text x="96.0345%" y="142.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (3 samples, 0.12%)</title><rect x="97.9313%" y="148" width="0.1171%" height="15" fill="rgb(211,50,8)" fg:x="2509" fg:w="3"/><text x="98.1813%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="99.0242%" y="148" width="0.1171%" height="15" fill="rgb(245,182,24)" fg:x="2537" fg:w="3"/><text x="99.2742%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (2,531 samples, 98.79%)</title><rect x="0.3903%" y="68" width="98.7900%" height="15" fill="rgb(242,14,37)" fg:x="10" fg:w="2531"/><text x="0.6403%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (2,524 samples, 98.52%)</title><rect x="0.6635%" y="84" width="98.5168%" height="15" fill="rgb(246,228,12)" fg:x="17" fg:w="2524"/><text x="0.9135%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (2,510 samples, 97.97%)</title><rect x="1.2100%" y="100" width="97.9703%" height="15" fill="rgb(213,55,15)" fg:x="31" fg:w="2510"/><text x="1.4600%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (2,413 samples, 94.18%)</title><rect x="4.9961%" y="116" width="94.1842%" height="15" fill="rgb(209,9,3)" fg:x="128" fg:w="2413"/><text x="5.2461%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (29 samples, 1.13%)</title><rect x="98.0484%" y="132" width="1.1319%" height="15" fill="rgb(230,59,30)" fg:x="2512" fg:w="29"/><text x="98.2984%" y="142.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (3 samples, 0.12%)</title><rect x="99.1803%" y="260" width="0.1171%" height="15" fill="rgb(209,121,21)" fg:x="2541" fg:w="3"/><text x="99.4303%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (3 samples, 0.12%)</title><rect x="99.1803%" y="276" width="0.1171%" height="15" fill="rgb(220,109,13)" fg:x="2541" fg:w="3"/><text x="99.4303%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (3 samples, 0.12%)</title><rect x="99.1803%" y="292" width="0.1171%" height="15" fill="rgb(232,18,1)" fg:x="2541" fg:w="3"/><text x="99.4303%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (6 samples, 0.23%)</title><rect x="99.1803%" y="68" width="0.2342%" height="15" fill="rgb(215,41,42)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.23%)</title><rect x="99.1803%" y="84" width="0.2342%" height="15" fill="rgb(224,123,36)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.23%)</title><rect x="99.1803%" y="100" width="0.2342%" height="15" fill="rgb(240,125,3)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.23%)</title><rect x="99.1803%" y="116" width="0.2342%" height="15" fill="rgb(205,98,50)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.23%)</title><rect x="99.1803%" y="132" width="0.2342%" height="15" fill="rgb(205,185,37)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.23%)</title><rect x="99.1803%" y="148" width="0.2342%" height="15" fill="rgb(238,207,15)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (6 samples, 0.23%)</title><rect x="99.1803%" y="164" width="0.2342%" height="15" fill="rgb(213,199,42)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (6 samples, 0.23%)</title><rect x="99.1803%" y="180" width="0.2342%" height="15" fill="rgb(235,201,11)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (6 samples, 0.23%)</title><rect x="99.1803%" y="196" width="0.2342%" height="15" fill="rgb(207,46,11)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (6 samples, 0.23%)</title><rect x="99.1803%" y="212" width="0.2342%" height="15" fill="rgb(241,35,35)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (6 samples, 0.23%)</title><rect x="99.1803%" y="228" width="0.2342%" height="15" fill="rgb(243,32,47)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (6 samples, 0.23%)</title><rect x="99.1803%" y="244" width="0.2342%" height="15" fill="rgb(247,202,23)" fg:x="2541" fg:w="6"/><text x="99.4303%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (3 samples, 0.12%)</title><rect x="99.2974%" y="260" width="0.1171%" height="15" fill="rgb(219,102,11)" fg:x="2544" fg:w="3"/><text x="99.5474%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="99.2974%" y="276" width="0.1171%" height="15" fill="rgb(243,110,44)" fg:x="2544" fg:w="3"/><text x="99.5474%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="99.2974%" y="292" width="0.1171%" height="15" fill="rgb(222,74,54)" fg:x="2544" fg:w="3"/><text x="99.5474%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="99.2974%" y="308" width="0.1171%" height="15" fill="rgb(216,99,12)" fg:x="2544" fg:w="3"/><text x="99.5474%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="99.2974%" y="324" width="0.1171%" height="15" fill="rgb(226,22,26)" fg:x="2544" fg:w="3"/><text x="99.5474%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="99.2974%" y="340" width="0.1171%" height="15" fill="rgb(217,163,10)" fg:x="2544" fg:w="3"/><text x="99.5474%" y="350.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (3 samples, 0.12%)</title><rect x="99.4145%" y="68" width="0.1171%" height="15" fill="rgb(213,25,53)" fg:x="2547" fg:w="3"/><text x="99.6645%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (4 samples, 0.16%)</title><rect x="99.5316%" y="68" width="0.1561%" height="15" fill="rgb(252,105,26)" fg:x="2550" fg:w="4"/><text x="99.7816%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (4 samples, 0.16%)</title><rect x="99.6877%" y="68" width="0.1561%" height="15" fill="rgb(220,39,43)" fg:x="2554" fg:w="4"/><text x="99.9377%" y="78.50"></text></g><g><title>all (2,562 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(229,68,48)" fg:x="0" fg:w="2562"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (4 samples, 0.16%)</title><rect x="99.8439%" y="68" width="0.1561%" height="15" fill="rgb(252,8,32)" fg:x="2558" fg:w="4"/><text x="100.0939%" y="78.50"></text></g></svg></svg>