<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit ded2188</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="8890"><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (24 samples, 0.27%)</title><rect x="0.5287%" y="196" width="0.2700%" height="15" fill="rgb(227,0,7)" fg:x="47" fg:w="24"/><text x="0.7787%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (16 samples, 0.18%)</title><rect x="0.6187%" y="212" width="0.1800%" height="15" fill="rgb(217,0,24)" fg:x="55" fg:w="16"/><text x="0.8687%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:170) (45 samples, 0.51%)</title><rect x="0.3037%" y="180" width="0.5062%" height="15" fill="rgb(221,193,54)" fg:x="27" fg:w="45"/><text x="0.5537%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (17 samples, 0.19%)</title><rect x="0.9449%" y="180" width="0.1912%" height="15" fill="rgb(248,212,6)" fg:x="84" fg:w="17"/><text x="1.1949%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (12 samples, 0.13%)</title><rect x="1.0011%" y="196" width="0.1350%" height="15" fill="rgb(208,68,35)" fg:x="89" fg:w="12"/><text x="1.2511%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (12 samples, 0.13%)</title><rect x="1.1361%" y="180" width="0.1350%" height="15" fill="rgb(232,128,0)" fg:x="101" fg:w="12"/><text x="1.3861%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (17 samples, 0.19%)</title><rect x="1.2711%" y="180" width="0.1912%" height="15" fill="rgb(207,160,47)" fg:x="113" fg:w="17"/><text x="1.5211%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (10 samples, 0.11%)</title><rect x="1.3498%" y="196" width="0.1125%" height="15" fill="rgb(228,23,34)" fg:x="120" fg:w="10"/><text x="1.5998%" y="206.50"></text></g><g><title>update (kappybara/system.py:69) (131 samples, 1.47%)</title><rect x="0.1350%" y="84" width="1.4736%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="131"/><text x="0.3850%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (131 samples, 1.47%)</title><rect x="0.1350%" y="100" width="1.4736%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="131"/><text x="0.3850%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (129 samples, 1.45%)</title><rect x="0.1575%" y="116" width="1.4511%" height="15" fill="rgb(250,228,42)" fg:x="14" fg:w="129"/><text x="0.4075%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (127 samples, 1.43%)</title><rect x="0.1800%" y="132" width="1.4286%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="127"/><text x="0.4300%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (127 samples, 1.43%)</title><rect x="0.1800%" y="148" width="1.4286%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="127"/><text x="0.4300%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (123 samples, 1.38%)</title><rect x="0.2250%" y="164" width="1.3836%" height="15" fill="rgb(206,188,39)" fg:x="20" fg:w="123"/><text x="0.4750%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (9 samples, 0.10%)</title><rect x="1.6985%" y="116" width="0.1012%" height="15" fill="rgb(217,207,13)" fg:x="151" fg:w="9"/><text x="1.9485%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (27 samples, 0.30%)</title><rect x="1.6423%" y="100" width="0.3037%" height="15" fill="rgb(231,73,38)" fg:x="146" fg:w="27"/><text x="1.8923%" y="110.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (12 samples, 0.13%)</title><rect x="2.0585%" y="148" width="0.1350%" height="15" fill="rgb(225,20,46)" fg:x="183" fg:w="12"/><text x="2.3085%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (14 samples, 0.16%)</title><rect x="2.4072%" y="180" width="0.1575%" height="15" fill="rgb(210,31,41)" fg:x="214" fg:w="14"/><text x="2.6572%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (12 samples, 0.13%)</title><rect x="2.4297%" y="196" width="0.1350%" height="15" fill="rgb(221,200,47)" fg:x="216" fg:w="12"/><text x="2.6797%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (61 samples, 0.69%)</title><rect x="1.9685%" y="132" width="0.6862%" height="15" fill="rgb(226,26,5)" fg:x="175" fg:w="61"/><text x="2.2185%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (37 samples, 0.42%)</title><rect x="2.2385%" y="148" width="0.4162%" height="15" fill="rgb(249,33,26)" fg:x="199" fg:w="37"/><text x="2.4885%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (31 samples, 0.35%)</title><rect x="2.3060%" y="164" width="0.3487%" height="15" fill="rgb(235,183,28)" fg:x="205" fg:w="31"/><text x="2.5560%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:189) (10 samples, 0.11%)</title><rect x="2.6547%" y="132" width="0.1125%" height="15" fill="rgb(221,5,38)" fg:x="236" fg:w="10"/><text x="2.9047%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (42 samples, 0.47%)</title><rect x="4.7244%" y="148" width="0.4724%" height="15" fill="rgb(247,18,42)" fg:x="420" fg:w="42"/><text x="4.9744%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (38 samples, 0.43%)</title><rect x="8.3127%" y="164" width="0.4274%" height="15" fill="rgb(241,131,45)" fg:x="739" fg:w="38"/><text x="8.5627%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (601 samples, 6.76%)</title><rect x="2.8009%" y="132" width="6.7604%" height="15" fill="rgb(249,31,29)" fg:x="249" fg:w="601"/><text x="3.0509%" y="142.50">_remove_e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (388 samples, 4.36%)</title><rect x="5.1969%" y="148" width="4.3645%" height="15" fill="rgb(225,111,53)" fg:x="462" fg:w="388"/><text x="5.4469%" y="158.50">__eq_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (73 samples, 0.82%)</title><rect x="8.7402%" y="164" width="0.8211%" height="15" fill="rgb(238,160,17)" fg:x="777" fg:w="73"/><text x="8.9902%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (680 samples, 7.65%)</title><rect x="1.9460%" y="116" width="7.6490%" height="15" fill="rgb(214,148,48)" fg:x="173" fg:w="680"/><text x="2.1960%" y="126.50">apply_upda..</text></g><g><title>apply_update (kappybara/mixture.py:106) (9 samples, 0.10%)</title><rect x="9.5951%" y="116" width="0.1012%" height="15" fill="rgb(232,36,49)" fg:x="853" fg:w="9"/><text x="9.8451%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (46 samples, 0.52%)</title><rect x="10.1575%" y="148" width="0.5174%" height="15" fill="rgb(209,103,24)" fg:x="903" fg:w="46"/><text x="10.4075%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="14.8144%" y="164" width="0.1237%" height="15" fill="rgb(229,88,8)" fg:x="1317" fg:w="11"/><text x="15.0644%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (410 samples, 4.61%)</title><rect x="10.6749%" y="148" width="4.6119%" height="15" fill="rgb(213,181,19)" fg:x="949" fg:w="410"/><text x="10.9249%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.35%)</title><rect x="14.9381%" y="164" width="0.3487%" height="15" fill="rgb(254,191,54)" fg:x="1328" fg:w="31"/><text x="15.1881%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="18.4477%" y="164" width="0.1012%" height="15" fill="rgb(241,83,37)" fg:x="1640" fg:w="9"/><text x="18.6977%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (313 samples, 3.52%)</title><rect x="15.2868%" y="148" width="3.5208%" height="15" fill="rgb(233,36,39)" fg:x="1359" fg:w="313"/><text x="15.5368%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.26%)</title><rect x="18.5489%" y="164" width="0.2587%" height="15" fill="rgb(226,3,54)" fg:x="1649" fg:w="23"/><text x="18.7989%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (61 samples, 0.69%)</title><rect x="18.8189%" y="148" width="0.6862%" height="15" fill="rgb(245,192,40)" fg:x="1673" fg:w="61"/><text x="19.0689%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (58 samples, 0.65%)</title><rect x="19.5051%" y="148" width="0.6524%" height="15" fill="rgb(238,167,29)" fg:x="1734" fg:w="58"/><text x="19.7551%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (21 samples, 0.24%)</title><rect x="22.4184%" y="164" width="0.2362%" height="15" fill="rgb(232,182,51)" fg:x="1993" fg:w="21"/><text x="22.6684%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (260 samples, 2.92%)</title><rect x="20.1575%" y="148" width="2.9246%" height="15" fill="rgb(231,60,39)" fg:x="1792" fg:w="260"/><text x="20.4075%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.43%)</title><rect x="22.6547%" y="164" width="0.4274%" height="15" fill="rgb(208,69,12)" fg:x="2014" fg:w="38"/><text x="22.9047%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (230 samples, 2.59%)</title><rect x="23.0821%" y="148" width="2.5872%" height="15" fill="rgb(235,93,37)" fg:x="2052" fg:w="230"/><text x="23.3321%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (27 samples, 0.30%)</title><rect x="27.7953%" y="164" width="0.3037%" height="15" fill="rgb(213,116,39)" fg:x="2471" fg:w="27"/><text x="28.0453%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (69 samples, 0.78%)</title><rect x="28.0990%" y="164" width="0.7762%" height="15" fill="rgb(222,207,29)" fg:x="2498" fg:w="69"/><text x="28.3490%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (110 samples, 1.24%)</title><rect x="30.9786%" y="180" width="1.2373%" height="15" fill="rgb(206,96,30)" fg:x="2754" fg:w="110"/><text x="31.2286%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (89 samples, 1.00%)</title><rect x="34.3082%" y="196" width="1.0011%" height="15" fill="rgb(218,138,4)" fg:x="3050" fg:w="89"/><text x="34.5582%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (908 samples, 10.21%)</title><rect x="28.9201%" y="164" width="10.2137%" height="15" fill="rgb(250,191,14)" fg:x="2571" fg:w="908"/><text x="29.1701%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (615 samples, 6.92%)</title><rect x="32.2160%" y="180" width="6.9179%" height="15" fill="rgb(239,60,40)" fg:x="2864" fg:w="615"/><text x="32.4660%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (340 samples, 3.82%)</title><rect x="35.3093%" y="196" width="3.8245%" height="15" fill="rgb(206,27,48)" fg:x="3139" fg:w="340"/><text x="35.5593%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (106 samples, 1.19%)</title><rect x="39.1339%" y="164" width="1.1924%" height="15" fill="rgb(225,35,8)" fg:x="3479" fg:w="106"/><text x="39.3839%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (10 samples, 0.11%)</title><rect x="40.3262%" y="164" width="0.1125%" height="15" fill="rgb(250,213,24)" fg:x="3585" fg:w="10"/><text x="40.5762%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (97 samples, 1.09%)</title><rect x="41.5523%" y="180" width="1.0911%" height="15" fill="rgb(247,123,22)" fg:x="3694" fg:w="97"/><text x="41.8023%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (215 samples, 2.42%)</title><rect x="40.4387%" y="164" width="2.4184%" height="15" fill="rgb(231,138,38)" fg:x="3595" fg:w="215"/><text x="40.6887%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.21%)</title><rect x="42.6434%" y="180" width="0.2137%" height="15" fill="rgb(231,145,46)" fg:x="3791" fg:w="19"/><text x="42.8934%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (138 samples, 1.55%)</title><rect x="52.4859%" y="180" width="1.5523%" height="15" fill="rgb(251,118,11)" fg:x="4666" fg:w="138"/><text x="52.7359%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:66) (12 samples, 0.13%)</title><rect x="54.0382%" y="180" width="0.1350%" height="15" fill="rgb(217,147,25)" fg:x="4804" fg:w="12"/><text x="54.2882%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (19 samples, 0.21%)</title><rect x="54.9156%" y="196" width="0.2137%" height="15" fill="rgb(247,81,37)" fg:x="4882" fg:w="19"/><text x="55.1656%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (178 samples, 2.00%)</title><rect x="54.1732%" y="180" width="2.0022%" height="15" fill="rgb(209,12,38)" fg:x="4816" fg:w="178"/><text x="54.4232%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (93 samples, 1.05%)</title><rect x="55.1294%" y="196" width="1.0461%" height="15" fill="rgb(227,1,9)" fg:x="4901" fg:w="93"/><text x="55.3794%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (18 samples, 0.20%)</title><rect x="57.3228%" y="196" width="0.2025%" height="15" fill="rgb(248,47,43)" fg:x="5096" fg:w="18"/><text x="57.5728%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (18 samples, 0.20%)</title><rect x="59.8988%" y="212" width="0.2025%" height="15" fill="rgb(221,10,30)" fg:x="5325" fg:w="18"/><text x="60.1488%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (442 samples, 4.97%)</title><rect x="57.5253%" y="196" width="4.9719%" height="15" fill="rgb(210,229,1)" fg:x="5114" fg:w="442"/><text x="57.7753%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (213 samples, 2.40%)</title><rect x="60.1012%" y="212" width="2.3960%" height="15" fill="rgb(222,148,37)" fg:x="5343" fg:w="213"/><text x="60.3512%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.38%)</title><rect x="62.1147%" y="228" width="0.3825%" height="15" fill="rgb(234,67,33)" fg:x="5522" fg:w="34"/><text x="62.3647%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (247 samples, 2.78%)</title><rect x="62.4972%" y="196" width="2.7784%" height="15" fill="rgb(247,98,35)" fg:x="5556" fg:w="247"/><text x="62.7472%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (111 samples, 1.25%)</title><rect x="65.2756%" y="196" width="1.2486%" height="15" fill="rgb(247,138,52)" fg:x="5803" fg:w="111"/><text x="65.5256%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (13 samples, 0.15%)</title><rect x="66.5242%" y="196" width="0.1462%" height="15" fill="rgb(213,79,30)" fg:x="5914" fg:w="13"/><text x="66.7742%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (965 samples, 10.85%)</title><rect x="56.1755%" y="180" width="10.8549%" height="15" fill="rgb(246,177,23)" fg:x="4994" fg:w="965"/><text x="56.4255%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (32 samples, 0.36%)</title><rect x="66.6704%" y="196" width="0.3600%" height="15" fill="rgb(230,62,27)" fg:x="5927" fg:w="32"/><text x="66.9204%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (29 samples, 0.33%)</title><rect x="67.0529%" y="180" width="0.3262%" height="15" fill="rgb(216,154,8)" fg:x="5961" fg:w="29"/><text x="67.3029%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="68.0990%" y="196" width="0.1125%" height="15" fill="rgb(244,35,45)" fg:x="6054" fg:w="10"/><text x="68.3490%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (176 samples, 1.98%)</title><rect x="67.3791%" y="180" width="1.9798%" height="15" fill="rgb(251,115,12)" fg:x="5990" fg:w="176"/><text x="67.6291%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (102 samples, 1.15%)</title><rect x="68.2115%" y="196" width="1.1474%" height="15" fill="rgb(240,54,50)" fg:x="6064" fg:w="102"/><text x="68.4615%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.16%)</title><rect x="69.2013%" y="212" width="0.1575%" height="15" fill="rgb(233,84,52)" fg:x="6152" fg:w="14"/><text x="69.4513%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.18%)</title><rect x="70.4162%" y="196" width="0.1800%" height="15" fill="rgb(207,117,47)" fg:x="6260" fg:w="16"/><text x="70.6662%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (287 samples, 3.23%)</title><rect x="69.3588%" y="180" width="3.2283%" height="15" fill="rgb(249,43,39)" fg:x="6166" fg:w="287"/><text x="69.6088%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (177 samples, 1.99%)</title><rect x="70.5962%" y="196" width="1.9910%" height="15" fill="rgb(209,38,44)" fg:x="6276" fg:w="177"/><text x="70.8462%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.33%)</title><rect x="72.2610%" y="212" width="0.3262%" height="15" fill="rgb(236,212,23)" fg:x="6424" fg:w="29"/><text x="72.5110%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (67 samples, 0.75%)</title><rect x="72.5872%" y="180" width="0.7537%" height="15" fill="rgb(242,79,21)" fg:x="6453" fg:w="67"/><text x="72.8372%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (107 samples, 1.20%)</title><rect x="73.3408%" y="180" width="1.2036%" height="15" fill="rgb(211,96,35)" fg:x="6520" fg:w="107"/><text x="73.5908%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (53 samples, 0.60%)</title><rect x="74.5444%" y="180" width="0.5962%" height="15" fill="rgb(253,215,40)" fg:x="6627" fg:w="53"/><text x="74.7944%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (12 samples, 0.13%)</title><rect x="75.1406%" y="180" width="0.1350%" height="15" fill="rgb(211,81,21)" fg:x="6680" fg:w="12"/><text x="75.3906%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,116 samples, 35.05%)</title><rect x="42.8571%" y="164" width="35.0506%" height="15" fill="rgb(208,190,38)" fg:x="3810" fg:w="3116"/><text x="43.1071%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (234 samples, 2.63%)</title><rect x="75.2756%" y="180" width="2.6322%" height="15" fill="rgb(235,213,38)" fg:x="6692" fg:w="234"/><text x="75.5256%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,678 samples, 52.62%)</title><rect x="25.6693%" y="148" width="52.6209%" height="15" fill="rgb(237,122,38)" fg:x="2282" fg:w="4678"/><text x="25.9193%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (34 samples, 0.38%)</title><rect x="77.9078%" y="164" width="0.3825%" height="15" fill="rgb(244,218,35)" fg:x="6926" fg:w="34"/><text x="78.1578%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (71 samples, 0.80%)</title><rect x="79.6175%" y="164" width="0.7987%" height="15" fill="rgb(240,68,47)" fg:x="7078" fg:w="71"/><text x="79.8675%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (60 samples, 0.67%)</title><rect x="81.7998%" y="180" width="0.6749%" height="15" fill="rgb(210,16,53)" fg:x="7272" fg:w="60"/><text x="82.0498%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (578 samples, 6.50%)</title><rect x="78.3802%" y="148" width="6.5017%" height="15" fill="rgb(235,124,12)" fg:x="6968" fg:w="578"/><text x="78.6302%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (397 samples, 4.47%)</title><rect x="80.4162%" y="164" width="4.4657%" height="15" fill="rgb(224,169,11)" fg:x="7149" fg:w="397"/><text x="80.6662%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (214 samples, 2.41%)</title><rect x="82.4747%" y="180" width="2.4072%" height="15" fill="rgb(250,166,2)" fg:x="7332" fg:w="214"/><text x="82.7247%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (41 samples, 0.46%)</title><rect x="85.6130%" y="164" width="0.4612%" height="15" fill="rgb(242,216,29)" fg:x="7611" fg:w="41"/><text x="85.8630%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (113 samples, 1.27%)</title><rect x="84.8819%" y="148" width="1.2711%" height="15" fill="rgb(230,116,27)" fg:x="7546" fg:w="113"/><text x="85.1319%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (84 samples, 0.94%)</title><rect x="86.1530%" y="148" width="0.9449%" height="15" fill="rgb(228,99,48)" fg:x="7659" fg:w="84"/><text x="86.4030%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (49 samples, 0.55%)</title><rect x="86.5467%" y="164" width="0.5512%" height="15" fill="rgb(253,11,6)" fg:x="7694" fg:w="49"/><text x="86.7967%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="87.8290%" y="164" width="0.1012%" height="15" fill="rgb(247,143,39)" fg:x="7808" fg:w="9"/><text x="88.0790%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (95 samples, 1.07%)</title><rect x="87.0979%" y="148" width="1.0686%" height="15" fill="rgb(236,97,10)" fg:x="7743" fg:w="95"/><text x="87.3479%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.24%)</title><rect x="87.9303%" y="164" width="0.2362%" height="15" fill="rgb(233,208,19)" fg:x="7817" fg:w="21"/><text x="88.1803%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (48 samples, 0.54%)</title><rect x="88.1665%" y="148" width="0.5399%" height="15" fill="rgb(216,164,2)" fg:x="7838" fg:w="48"/><text x="88.4165%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (48 samples, 0.54%)</title><rect x="88.7064%" y="148" width="0.5399%" height="15" fill="rgb(220,129,5)" fg:x="7886" fg:w="48"/><text x="88.9564%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (79 samples, 0.89%)</title><rect x="90.7199%" y="164" width="0.8886%" height="15" fill="rgb(242,17,10)" fg:x="8065" fg:w="79"/><text x="90.9699%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (218 samples, 2.45%)</title><rect x="89.2463%" y="148" width="2.4522%" height="15" fill="rgb(242,107,0)" fg:x="7934" fg:w="218"/><text x="89.4963%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (28 samples, 0.31%)</title><rect x="91.6985%" y="148" width="0.3150%" height="15" fill="rgb(251,28,31)" fg:x="8152" fg:w="28"/><text x="91.9485%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (29 samples, 0.33%)</title><rect x="92.0585%" y="148" width="0.3262%" height="15" fill="rgb(233,223,10)" fg:x="8184" fg:w="29"/><text x="92.3085%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (21 samples, 0.24%)</title><rect x="92.3847%" y="148" width="0.2362%" height="15" fill="rgb(215,21,27)" fg:x="8213" fg:w="21"/><text x="92.6347%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,372 samples, 82.92%)</title><rect x="9.7975%" y="132" width="82.9246%" height="15" fill="rgb(232,23,21)" fg:x="871" fg:w="7372"/><text x="10.0475%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (9 samples, 0.10%)</title><rect x="92.6209%" y="148" width="0.1012%" height="15" fill="rgb(244,5,23)" fg:x="8234" fg:w="9"/><text x="92.8709%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (72 samples, 0.81%)</title><rect x="92.7222%" y="132" width="0.8099%" height="15" fill="rgb(226,81,46)" fg:x="8243" fg:w="72"/><text x="92.9722%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (9 samples, 0.10%)</title><rect x="93.5321%" y="132" width="0.1012%" height="15" fill="rgb(247,70,30)" fg:x="8315" fg:w="9"/><text x="93.7821%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (17 samples, 0.19%)</title><rect x="93.6333%" y="132" width="0.1912%" height="15" fill="rgb(212,68,19)" fg:x="8324" fg:w="17"/><text x="93.8833%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.20%)</title><rect x="97.4353%" y="148" width="0.2025%" height="15" fill="rgb(240,187,13)" fg:x="8662" fg:w="18"/><text x="97.6853%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (363 samples, 4.08%)</title><rect x="93.8245%" y="132" width="4.0832%" height="15" fill="rgb(223,113,26)" fg:x="8341" fg:w="363"/><text x="94.0745%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.27%)</title><rect x="97.6378%" y="148" width="0.2700%" height="15" fill="rgb(206,192,2)" fg:x="8680" fg:w="24"/><text x="97.8878%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.16%)</title><rect x="99.0214%" y="148" width="0.1575%" height="15" fill="rgb(241,108,4)" fg:x="8803" fg:w="14"/><text x="99.2714%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,817 samples, 99.18%)</title><rect x="0.1237%" y="68" width="99.1789%" height="15" fill="rgb(247,173,49)" fg:x="11" fg:w="8817"/><text x="0.3737%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,685 samples, 97.69%)</title><rect x="1.6085%" y="84" width="97.6940%" height="15" fill="rgb(224,114,35)" fg:x="143" fg:w="8685"/><text x="1.8585%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,655 samples, 97.36%)</title><rect x="1.9460%" y="100" width="97.3566%" height="15" fill="rgb(245,159,27)" fg:x="173" fg:w="8655"/><text x="2.1960%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (7,966 samples, 89.61%)</title><rect x="9.6963%" y="116" width="89.6063%" height="15" fill="rgb(245,172,44)" fg:x="862" fg:w="7966"/><text x="9.9463%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (124 samples, 1.39%)</title><rect x="97.9078%" y="132" width="1.3948%" height="15" fill="rgb(236,23,11)" fg:x="8704" fg:w="124"/><text x="98.1578%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="99.1789%" y="148" width="0.1237%" height="15" fill="rgb(205,117,38)" fg:x="8817" fg:w="11"/><text x="99.4289%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (11 samples, 0.12%)</title><rect x="99.3476%" y="260" width="0.1237%" height="15" fill="rgb(237,72,25)" fg:x="8832" fg:w="11"/><text x="99.5976%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (11 samples, 0.12%)</title><rect x="99.3476%" y="276" width="0.1237%" height="15" fill="rgb(244,70,9)" fg:x="8832" fg:w="11"/><text x="99.5976%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (11 samples, 0.12%)</title><rect x="99.3476%" y="292" width="0.1237%" height="15" fill="rgb(217,125,39)" fg:x="8832" fg:w="11"/><text x="99.5976%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (18 samples, 0.20%)</title><rect x="99.3026%" y="68" width="0.2025%" height="15" fill="rgb(235,36,10)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (18 samples, 0.20%)</title><rect x="99.3026%" y="84" width="0.2025%" height="15" fill="rgb(251,123,47)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (18 samples, 0.20%)</title><rect x="99.3026%" y="100" width="0.2025%" height="15" fill="rgb(221,13,13)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (18 samples, 0.20%)</title><rect x="99.3026%" y="116" width="0.2025%" height="15" fill="rgb(238,131,9)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (18 samples, 0.20%)</title><rect x="99.3026%" y="132" width="0.2025%" height="15" fill="rgb(211,50,8)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (18 samples, 0.20%)</title><rect x="99.3026%" y="148" width="0.2025%" height="15" fill="rgb(245,182,24)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (18 samples, 0.20%)</title><rect x="99.3026%" y="164" width="0.2025%" height="15" fill="rgb(242,14,37)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (18 samples, 0.20%)</title><rect x="99.3026%" y="180" width="0.2025%" height="15" fill="rgb(246,228,12)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (18 samples, 0.20%)</title><rect x="99.3026%" y="196" width="0.2025%" height="15" fill="rgb(213,55,15)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (18 samples, 0.20%)</title><rect x="99.3026%" y="212" width="0.2025%" height="15" fill="rgb(209,9,3)" fg:x="8828" fg:w="18"/><text x="99.5526%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (17 samples, 0.19%)</title><rect x="99.3138%" y="228" width="0.1912%" height="15" fill="rgb(230,59,30)" fg:x="8829" fg:w="17"/><text x="99.5638%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.19%)</title><rect x="99.3138%" y="244" width="0.1912%" height="15" fill="rgb(209,121,21)" fg:x="8829" fg:w="17"/><text x="99.5638%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (13 samples, 0.15%)</title><rect x="99.5051%" y="68" width="0.1462%" height="15" fill="rgb(220,109,13)" fg:x="8846" fg:w="13"/><text x="99.7551%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (10 samples, 0.11%)</title><rect x="99.6513%" y="68" width="0.1125%" height="15" fill="rgb(232,18,1)" fg:x="8859" fg:w="10"/><text x="99.9013%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (13 samples, 0.15%)</title><rect x="99.7638%" y="68" width="0.1462%" height="15" fill="rgb(215,41,42)" fg:x="8869" fg:w="13"/><text x="100.0138%" y="78.50"></text></g><g><title>all (8,890 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="8890"/><text x="0.2500%" y="62.50"></text></g></svg></svg>