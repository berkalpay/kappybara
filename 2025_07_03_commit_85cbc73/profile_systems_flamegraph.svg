<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_systems_flamegraph.svg -- python profile_systems.py # commit 85cbc73</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="4785"><g><title>&lt;module&gt; (kappybara/grammar.py:35) (7 samples, 0.15%)</title><rect x="0.0627%" y="260" width="0.1463%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="7"/><text x="0.3127%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (7 samples, 0.15%)</title><rect x="0.0627%" y="276" width="0.1463%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="7"/><text x="0.3127%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (7 samples, 0.15%)</title><rect x="0.0627%" y="292" width="0.1463%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="7"/><text x="0.3127%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:1) (14 samples, 0.29%)</title><rect x="0.0000%" y="68" width="0.2926%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="14"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.29%)</title><rect x="0.0000%" y="84" width="0.2926%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="14"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.29%)</title><rect x="0.0000%" y="100" width="0.2926%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="14"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.29%)</title><rect x="0.0000%" y="116" width="0.2926%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="14"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.29%)</title><rect x="0.0000%" y="132" width="0.2926%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="14"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.29%)</title><rect x="0.0000%" y="148" width="0.2926%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="14"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (11 samples, 0.23%)</title><rect x="0.0627%" y="164" width="0.2299%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="11"/><text x="0.3127%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (11 samples, 0.23%)</title><rect x="0.0627%" y="180" width="0.2299%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="11"/><text x="0.3127%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (11 samples, 0.23%)</title><rect x="0.0627%" y="196" width="0.2299%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="11"/><text x="0.3127%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (11 samples, 0.23%)</title><rect x="0.0627%" y="212" width="0.2299%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="11"/><text x="0.3127%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (11 samples, 0.23%)</title><rect x="0.0627%" y="228" width="0.2299%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="11"/><text x="0.3127%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (11 samples, 0.23%)</title><rect x="0.0627%" y="244" width="0.2299%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="11"/><text x="0.3127%" y="254.50"></text></g><g><title>act (kappybara/system.py:63) (7 samples, 0.15%)</title><rect x="0.4180%" y="100" width="0.1463%" height="15" fill="rgb(231,73,38)" fg:x="20" fg:w="7"/><text x="0.6680%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (5 samples, 0.10%)</title><rect x="0.4598%" y="116" width="0.1045%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="5"/><text x="0.7098%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (57 samples, 1.19%)</title><rect x="0.6061%" y="132" width="1.1912%" height="15" fill="rgb(210,31,41)" fg:x="29" fg:w="57"/><text x="0.8561%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (12 samples, 0.25%)</title><rect x="2.0899%" y="148" width="0.2508%" height="15" fill="rgb(221,200,47)" fg:x="100" fg:w="12"/><text x="2.3399%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.25%)</title><rect x="6.2696%" y="164" width="0.2508%" height="15" fill="rgb(226,26,5)" fg:x="300" fg:w="12"/><text x="6.5196%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (215 samples, 4.49%)</title><rect x="2.3406%" y="148" width="4.4932%" height="15" fill="rgb(249,33,26)" fg:x="112" fg:w="215"/><text x="2.5906%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.31%)</title><rect x="6.5204%" y="164" width="0.3135%" height="15" fill="rgb(235,183,28)" fg:x="312" fg:w="15"/><text x="6.7704%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.15%)</title><rect x="10.2612%" y="164" width="0.1463%" height="15" fill="rgb(221,5,38)" fg:x="491" fg:w="7"/><text x="10.5112%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (179 samples, 3.74%)</title><rect x="6.8339%" y="148" width="3.7409%" height="15" fill="rgb(247,18,42)" fg:x="327" fg:w="179"/><text x="7.0839%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.17%)</title><rect x="10.4075%" y="164" width="0.1672%" height="15" fill="rgb(241,131,45)" fg:x="498" fg:w="8"/><text x="10.6575%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (25 samples, 0.52%)</title><rect x="10.6165%" y="148" width="0.5225%" height="15" fill="rgb(249,31,29)" fg:x="508" fg:w="25"/><text x="10.8665%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (28 samples, 0.59%)</title><rect x="11.1390%" y="148" width="0.5852%" height="15" fill="rgb(225,111,53)" fg:x="533" fg:w="28"/><text x="11.3890%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.27%)</title><rect x="13.8558%" y="164" width="0.2717%" height="15" fill="rgb(238,160,17)" fg:x="663" fg:w="13"/><text x="14.1058%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (131 samples, 2.74%)</title><rect x="11.7241%" y="148" width="2.7377%" height="15" fill="rgb(214,148,48)" fg:x="561" fg:w="131"/><text x="11.9741%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.33%)</title><rect x="14.1275%" y="164" width="0.3344%" height="15" fill="rgb(232,36,49)" fg:x="676" fg:w="16"/><text x="14.3775%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (148 samples, 3.09%)</title><rect x="14.4619%" y="148" width="3.0930%" height="15" fill="rgb(209,103,24)" fg:x="692" fg:w="148"/><text x="14.7119%" y="158.50">emb..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (12 samples, 0.25%)</title><rect x="19.6656%" y="164" width="0.2508%" height="15" fill="rgb(229,88,8)" fg:x="941" fg:w="12"/><text x="19.9156%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (39 samples, 0.82%)</title><rect x="19.9164%" y="164" width="0.8150%" height="15" fill="rgb(213,181,19)" fg:x="953" fg:w="39"/><text x="20.1664%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (68 samples, 1.42%)</title><rect x="22.5287%" y="180" width="1.4211%" height="15" fill="rgb(254,191,54)" fg:x="1078" fg:w="68"/><text x="22.7787%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (52 samples, 1.09%)</title><rect x="25.6008%" y="196" width="1.0867%" height="15" fill="rgb(241,83,37)" fg:x="1225" fg:w="52"/><text x="25.8508%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (478 samples, 9.99%)</title><rect x="20.7732%" y="164" width="9.9896%" height="15" fill="rgb(233,36,39)" fg:x="994" fg:w="478"/><text x="21.0232%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (326 samples, 6.81%)</title><rect x="23.9498%" y="180" width="6.8130%" height="15" fill="rgb(226,3,54)" fg:x="1146" fg:w="326"/><text x="24.1998%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (195 samples, 4.08%)</title><rect x="26.6876%" y="196" width="4.0752%" height="15" fill="rgb(245,192,40)" fg:x="1277" fg:w="195"/><text x="26.9376%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (69 samples, 1.44%)</title><rect x="30.7628%" y="164" width="1.4420%" height="15" fill="rgb(238,167,29)" fg:x="1472" fg:w="69"/><text x="31.0128%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (44 samples, 0.92%)</title><rect x="33.2706%" y="180" width="0.9195%" height="15" fill="rgb(232,182,51)" fg:x="1592" fg:w="44"/><text x="33.5206%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (119 samples, 2.49%)</title><rect x="32.2884%" y="164" width="2.4869%" height="15" fill="rgb(231,60,39)" fg:x="1545" fg:w="119"/><text x="32.5384%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (28 samples, 0.59%)</title><rect x="34.1902%" y="180" width="0.5852%" height="15" fill="rgb(208,69,12)" fg:x="1636" fg:w="28"/><text x="34.4402%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (98 samples, 2.05%)</title><rect x="43.9916%" y="180" width="2.0481%" height="15" fill="rgb(235,93,37)" fg:x="2105" fg:w="98"/><text x="44.2416%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (6 samples, 0.13%)</title><rect x="46.0397%" y="180" width="0.1254%" height="15" fill="rgb(213,116,39)" fg:x="2203" fg:w="6"/><text x="46.2897%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (9 samples, 0.19%)</title><rect x="46.6249%" y="196" width="0.1881%" height="15" fill="rgb(222,207,29)" fg:x="2231" fg:w="9"/><text x="46.8749%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (76 samples, 1.59%)</title><rect x="46.1651%" y="180" width="1.5883%" height="15" fill="rgb(206,96,30)" fg:x="2209" fg:w="76"/><text x="46.4151%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (45 samples, 0.94%)</title><rect x="46.8130%" y="196" width="0.9404%" height="15" fill="rgb(218,138,4)" fg:x="2240" fg:w="45"/><text x="47.0630%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (5 samples, 0.10%)</title><rect x="49.3417%" y="196" width="0.1045%" height="15" fill="rgb(250,191,14)" fg:x="2361" fg:w="5"/><text x="49.5917%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.21%)</title><rect x="51.4316%" y="212" width="0.2090%" height="15" fill="rgb(239,60,40)" fg:x="2461" fg:w="10"/><text x="51.6816%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.25%)</title><rect x="53.6468%" y="228" width="0.2508%" height="15" fill="rgb(206,27,48)" fg:x="2567" fg:w="12"/><text x="53.8968%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (232 samples, 4.85%)</title><rect x="49.4462%" y="196" width="4.8485%" height="15" fill="rgb(225,35,8)" fg:x="2366" fg:w="232"/><text x="49.6962%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (127 samples, 2.65%)</title><rect x="51.6405%" y="212" width="2.6541%" height="15" fill="rgb(250,213,24)" fg:x="2471" fg:w="127"/><text x="51.8905%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.40%)</title><rect x="53.8976%" y="228" width="0.3971%" height="15" fill="rgb(247,123,22)" fg:x="2579" fg:w="19"/><text x="54.1476%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (118 samples, 2.47%)</title><rect x="54.2947%" y="196" width="2.4660%" height="15" fill="rgb(231,138,38)" fg:x="2598" fg:w="118"/><text x="54.5447%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (52 samples, 1.09%)</title><rect x="56.7607%" y="196" width="1.0867%" height="15" fill="rgb(231,145,46)" fg:x="2716" fg:w="52"/><text x="57.0107%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (7 samples, 0.15%)</title><rect x="57.8474%" y="196" width="0.1463%" height="15" fill="rgb(251,118,11)" fg:x="2768" fg:w="7"/><text x="58.0974%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (523 samples, 10.93%)</title><rect x="47.7534%" y="180" width="10.9300%" height="15" fill="rgb(217,147,25)" fg:x="2285" fg:w="523"/><text x="48.0034%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (33 samples, 0.69%)</title><rect x="57.9937%" y="196" width="0.6897%" height="15" fill="rgb(247,81,37)" fg:x="2775" fg:w="33"/><text x="58.2437%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (13 samples, 0.27%)</title><rect x="58.7043%" y="180" width="0.2717%" height="15" fill="rgb(209,12,38)" fg:x="2809" fg:w="13"/><text x="58.9543%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.21%)</title><rect x="59.5611%" y="196" width="0.2090%" height="15" fill="rgb(227,1,9)" fg:x="2850" fg:w="10"/><text x="59.8111%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (83 samples, 1.73%)</title><rect x="58.9760%" y="180" width="1.7346%" height="15" fill="rgb(248,47,43)" fg:x="2822" fg:w="83"/><text x="59.2260%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (45 samples, 0.94%)</title><rect x="59.7701%" y="196" width="0.9404%" height="15" fill="rgb(221,10,30)" fg:x="2860" fg:w="45"/><text x="60.0201%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.17%)</title><rect x="60.5434%" y="212" width="0.1672%" height="15" fill="rgb(210,229,1)" fg:x="2897" fg:w="8"/><text x="60.7934%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (82 samples, 1.71%)</title><rect x="60.7106%" y="180" width="1.7137%" height="15" fill="rgb(222,148,37)" fg:x="2905" fg:w="82"/><text x="60.9606%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (48 samples, 1.00%)</title><rect x="61.4211%" y="196" width="1.0031%" height="15" fill="rgb(234,67,33)" fg:x="2939" fg:w="48"/><text x="61.6711%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.10%)</title><rect x="62.3197%" y="212" width="0.1045%" height="15" fill="rgb(247,98,35)" fg:x="2982" fg:w="5"/><text x="62.5697%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (22 samples, 0.46%)</title><rect x="62.4242%" y="180" width="0.4598%" height="15" fill="rgb(247,138,52)" fg:x="2987" fg:w="22"/><text x="62.6742%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (47 samples, 0.98%)</title><rect x="62.9049%" y="180" width="0.9822%" height="15" fill="rgb(213,79,30)" fg:x="3010" fg:w="47"/><text x="63.1549%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (24 samples, 0.50%)</title><rect x="63.8871%" y="180" width="0.5016%" height="15" fill="rgb(246,177,23)" fg:x="3057" fg:w="24"/><text x="64.1371%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (12 samples, 0.25%)</title><rect x="64.3887%" y="180" width="0.2508%" height="15" fill="rgb(230,62,27)" fg:x="3081" fg:w="12"/><text x="64.6387%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,589 samples, 33.21%)</title><rect x="34.7753%" y="164" width="33.2079%" height="15" fill="rgb(216,154,8)" fg:x="1664" fg:w="1589"/><text x="35.0253%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (160 samples, 3.34%)</title><rect x="64.6395%" y="180" width="3.3438%" height="15" fill="rgb(244,35,45)" fg:x="3093" fg:w="160"/><text x="64.8895%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,446 samples, 51.12%)</title><rect x="17.5549%" y="148" width="51.1181%" height="15" fill="rgb(251,115,12)" fg:x="840" fg:w="2446"/><text x="17.8049%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (33 samples, 0.69%)</title><rect x="67.9833%" y="164" width="0.6897%" height="15" fill="rgb(240,54,50)" fg:x="3253" fg:w="33"/><text x="68.2333%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (7 samples, 0.15%)</title><rect x="68.6729%" y="148" width="0.1463%" height="15" fill="rgb(233,84,52)" fg:x="3286" fg:w="7"/><text x="68.9229%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (29 samples, 0.61%)</title><rect x="70.1567%" y="164" width="0.6061%" height="15" fill="rgb(207,117,47)" fg:x="3357" fg:w="29"/><text x="70.4067%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (31 samples, 0.65%)</title><rect x="71.9122%" y="180" width="0.6479%" height="15" fill="rgb(249,43,39)" fg:x="3441" fg:w="31"/><text x="72.1622%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (297 samples, 6.21%)</title><rect x="68.8401%" y="148" width="6.2069%" height="15" fill="rgb(209,38,44)" fg:x="3294" fg:w="297"/><text x="69.0901%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (205 samples, 4.28%)</title><rect x="70.7628%" y="164" width="4.2842%" height="15" fill="rgb(236,212,23)" fg:x="3386" fg:w="205"/><text x="71.0128%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (119 samples, 2.49%)</title><rect x="72.5601%" y="180" width="2.4869%" height="15" fill="rgb(242,79,21)" fg:x="3472" fg:w="119"/><text x="72.8101%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (24 samples, 0.50%)</title><rect x="75.8203%" y="164" width="0.5016%" height="15" fill="rgb(211,96,35)" fg:x="3628" fg:w="24"/><text x="76.0703%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (69 samples, 1.44%)</title><rect x="75.0470%" y="148" width="1.4420%" height="15" fill="rgb(253,215,40)" fg:x="3591" fg:w="69"/><text x="75.2970%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (8 samples, 0.17%)</title><rect x="76.3218%" y="164" width="0.1672%" height="15" fill="rgb(211,81,21)" fg:x="3652" fg:w="8"/><text x="76.5718%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (43 samples, 0.90%)</title><rect x="76.4890%" y="148" width="0.8986%" height="15" fill="rgb(208,190,38)" fg:x="3660" fg:w="43"/><text x="76.7390%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (31 samples, 0.65%)</title><rect x="76.7398%" y="164" width="0.6479%" height="15" fill="rgb(235,213,38)" fg:x="3672" fg:w="31"/><text x="76.9898%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (43 samples, 0.90%)</title><rect x="77.3877%" y="148" width="0.8986%" height="15" fill="rgb(237,122,38)" fg:x="3703" fg:w="43"/><text x="77.6377%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.19%)</title><rect x="78.0982%" y="164" width="0.1881%" height="15" fill="rgb(244,218,35)" fg:x="3737" fg:w="9"/><text x="78.3482%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (17 samples, 0.36%)</title><rect x="78.2863%" y="148" width="0.3553%" height="15" fill="rgb(240,68,47)" fg:x="3746" fg:w="17"/><text x="78.5363%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (32 samples, 0.67%)</title><rect x="78.6416%" y="148" width="0.6688%" height="15" fill="rgb(210,16,53)" fg:x="3763" fg:w="32"/><text x="78.8916%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.10%)</title><rect x="81.1494%" y="180" width="0.1045%" height="15" fill="rgb(235,124,12)" fg:x="3883" fg:w="5"/><text x="81.3994%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (38 samples, 0.79%)</title><rect x="80.5643%" y="164" width="0.7941%" height="15" fill="rgb(224,169,11)" fg:x="3855" fg:w="38"/><text x="80.8143%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.10%)</title><rect x="81.2539%" y="180" width="0.1045%" height="15" fill="rgb(250,166,2)" fg:x="3888" fg:w="5"/><text x="81.5039%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (102 samples, 2.13%)</title><rect x="79.3103%" y="148" width="2.1317%" height="15" fill="rgb(242,216,29)" fg:x="3795" fg:w="102"/><text x="79.5603%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (16 samples, 0.33%)</title><rect x="81.5047%" y="148" width="0.3344%" height="15" fill="rgb(230,116,27)" fg:x="3900" fg:w="16"/><text x="81.7547%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (50 samples, 1.04%)</title><rect x="81.8391%" y="148" width="1.0449%" height="15" fill="rgb(228,99,48)" fg:x="3916" fg:w="50"/><text x="82.0891%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,886 samples, 81.21%)</title><rect x="1.7973%" y="132" width="81.2121%" height="15" fill="rgb(253,11,6)" fg:x="86" fg:w="3886"/><text x="2.0473%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (6 samples, 0.13%)</title><rect x="82.8840%" y="148" width="0.1254%" height="15" fill="rgb(247,143,39)" fg:x="3966" fg:w="6"/><text x="83.1340%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (26 samples, 0.54%)</title><rect x="83.0094%" y="132" width="0.5434%" height="15" fill="rgb(236,97,10)" fg:x="3972" fg:w="26"/><text x="83.2594%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (7 samples, 0.15%)</title><rect x="83.5528%" y="132" width="0.1463%" height="15" fill="rgb(233,208,19)" fg:x="3998" fg:w="7"/><text x="83.8028%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (5 samples, 0.10%)</title><rect x="83.6991%" y="132" width="0.1045%" height="15" fill="rgb(216,164,2)" fg:x="4005" fg:w="5"/><text x="83.9491%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (152 samples, 3.18%)</title><rect x="90.8673%" y="148" width="3.1766%" height="15" fill="rgb(220,129,5)" fg:x="4348" fg:w="152"/><text x="91.1173%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.23%)</title><rect x="94.0439%" y="148" width="0.2299%" height="15" fill="rgb(242,17,10)" fg:x="4500" fg:w="11"/><text x="94.2939%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (538 samples, 11.24%)</title><rect x="83.8036%" y="132" width="11.2435%" height="15" fill="rgb(242,107,0)" fg:x="4010" fg:w="538"/><text x="84.0536%" y="142.50">_update_embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.77%)</title><rect x="94.2738%" y="148" width="0.7732%" height="15" fill="rgb(251,28,31)" fg:x="4511" fg:w="37"/><text x="94.5238%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (38 samples, 0.79%)</title><rect x="98.5162%" y="148" width="0.7941%" height="15" fill="rgb(233,223,10)" fg:x="4714" fg:w="38"/><text x="98.7662%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (4,742 samples, 99.10%)</title><rect x="0.5643%" y="100" width="99.1014%" height="15" fill="rgb(215,21,27)" fg:x="27" fg:w="4742"/><text x="0.8143%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,740 samples, 99.06%)</title><rect x="0.6061%" y="116" width="99.0596%" height="15" fill="rgb(232,23,21)" fg:x="29" fg:w="4740"/><text x="0.8561%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (221 samples, 4.62%)</title><rect x="95.0470%" y="132" width="4.6186%" height="15" fill="rgb(244,5,23)" fg:x="4548" fg:w="221"/><text x="95.2970%" y="142.50">_upda..</text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.36%)</title><rect x="99.3103%" y="148" width="0.3553%" height="15" fill="rgb(226,81,46)" fg:x="4752" fg:w="17"/><text x="99.5603%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_systems.py:14) (4,753 samples, 99.33%)</title><rect x="0.3553%" y="68" width="99.3312%" height="15" fill="rgb(247,70,30)" fg:x="17" fg:w="4753"/><text x="0.6053%" y="78.50">&lt;module&gt; (profile_systems.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,751 samples, 99.29%)</title><rect x="0.3971%" y="84" width="99.2894%" height="15" fill="rgb(212,68,19)" fg:x="19" fg:w="4751"/><text x="0.6471%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:97) (6 samples, 0.13%)</title><rect x="99.7283%" y="68" width="0.1254%" height="15" fill="rgb(240,187,13)" fg:x="4772" fg:w="6"/><text x="99.9783%" y="78.50"></text></g><g><title>all (4,785 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="4785"/><text x="0.2500%" y="62.50"></text></g></svg></svg>