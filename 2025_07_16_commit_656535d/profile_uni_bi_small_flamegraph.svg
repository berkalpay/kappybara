<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 656535d</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="11836"><g><title>n_embeddings (kappybara/rule.py:189) (15 samples, 0.13%)</title><rect x="0.1521%" y="180" width="0.1267%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="15"/><text x="0.4021%" y="190.50"></text></g><g><title>update (kappybara/system.py:70) (43 samples, 0.36%)</title><rect x="0.0507%" y="84" width="0.3633%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="43"/><text x="0.3007%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (42 samples, 0.35%)</title><rect x="0.0591%" y="100" width="0.3548%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="42"/><text x="0.3091%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (39 samples, 0.33%)</title><rect x="0.0845%" y="116" width="0.3295%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="39"/><text x="0.3345%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (38 samples, 0.32%)</title><rect x="0.0929%" y="132" width="0.3211%" height="15" fill="rgb(208,68,35)" fg:x="11" fg:w="38"/><text x="0.3429%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (37 samples, 0.31%)</title><rect x="0.1014%" y="148" width="0.3126%" height="15" fill="rgb(232,128,0)" fg:x="12" fg:w="37"/><text x="0.3514%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (35 samples, 0.30%)</title><rect x="0.1183%" y="164" width="0.2957%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="35"/><text x="0.3683%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (14 samples, 0.12%)</title><rect x="0.5069%" y="116" width="0.1183%" height="15" fill="rgb(228,23,34)" fg:x="60" fg:w="14"/><text x="0.7569%" y="126.50"></text></g><g><title>select (kappybara/rule.py:222) (25 samples, 0.21%)</title><rect x="0.7013%" y="116" width="0.2112%" height="15" fill="rgb(218,30,26)" fg:x="83" fg:w="25"/><text x="0.9513%" y="126.50"></text></g><g><title>_produce_update (kappybara/rule.py:163) (13 samples, 0.11%)</title><rect x="0.8026%" y="132" width="0.1098%" height="15" fill="rgb(220,122,19)" fg:x="95" fg:w="13"/><text x="1.0526%" y="142.50"></text></g><g><title>act (kappybara/system.py:64) (53 samples, 0.45%)</title><rect x="0.4900%" y="100" width="0.4478%" height="15" fill="rgb(250,228,42)" fg:x="58" fg:w="53"/><text x="0.7400%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (81 samples, 0.68%)</title><rect x="1.2589%" y="212" width="0.6844%" height="15" fill="rgb(240,193,28)" fg:x="149" fg:w="81"/><text x="1.5089%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.19%)</title><rect x="9.1838%" y="228" width="0.1943%" height="15" fill="rgb(216,20,37)" fg:x="1087" fg:w="23"/><text x="9.4338%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (906 samples, 7.65%)</title><rect x="1.9432%" y="212" width="7.6546%" height="15" fill="rgb(206,188,39)" fg:x="230" fg:w="906"/><text x="2.1932%" y="222.50">embeddings..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.22%)</title><rect x="9.3782%" y="228" width="0.2197%" height="15" fill="rgb(217,207,13)" fg:x="1110" fg:w="26"/><text x="9.6282%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.14%)</title><rect x="12.1071%" y="228" width="0.1352%" height="15" fill="rgb(231,73,38)" fg:x="1433" fg:w="16"/><text x="12.3571%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (340 samples, 2.87%)</title><rect x="9.5978%" y="212" width="2.8726%" height="15" fill="rgb(225,20,46)" fg:x="1136" fg:w="340"/><text x="9.8478%" y="222.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.23%)</title><rect x="12.2423%" y="228" width="0.2281%" height="15" fill="rgb(210,31,41)" fg:x="1449" fg:w="27"/><text x="12.4923%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (91 samples, 0.77%)</title><rect x="12.4789%" y="212" width="0.7688%" height="15" fill="rgb(221,200,47)" fg:x="1477" fg:w="91"/><text x="12.7289%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (82 samples, 0.69%)</title><rect x="13.2477%" y="212" width="0.6928%" height="15" fill="rgb(226,26,5)" fg:x="1568" fg:w="82"/><text x="13.4977%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (32 samples, 0.27%)</title><rect x="16.6272%" y="228" width="0.2704%" height="15" fill="rgb(249,33,26)" fg:x="1968" fg:w="32"/><text x="16.8772%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (383 samples, 3.24%)</title><rect x="13.9405%" y="212" width="3.2359%" height="15" fill="rgb(235,183,28)" fg:x="1650" fg:w="383"/><text x="14.1905%" y="222.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="16.8976%" y="228" width="0.2788%" height="15" fill="rgb(221,5,38)" fg:x="2000" fg:w="33"/><text x="17.1476%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (257 samples, 2.17%)</title><rect x="17.1764%" y="212" width="2.1713%" height="15" fill="rgb(247,18,42)" fg:x="2033" fg:w="257"/><text x="17.4264%" y="222.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (13 samples, 0.11%)</title><rect x="21.1558%" y="228" width="0.1098%" height="15" fill="rgb(241,131,45)" fg:x="2504" fg:w="13"/><text x="21.4058%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (114 samples, 0.96%)</title><rect x="21.2656%" y="228" width="0.9632%" height="15" fill="rgb(249,31,29)" fg:x="2517" fg:w="114"/><text x="21.5156%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (121 samples, 1.02%)</title><rect x="24.0622%" y="244" width="1.0223%" height="15" fill="rgb(225,111,53)" fg:x="2848" fg:w="121"/><text x="24.3122%" y="254.50"></text></g><g><title>sites (kappybara/pattern.py:111) (117 samples, 0.99%)</title><rect x="26.4785%" y="260" width="0.9885%" height="15" fill="rgb(238,160,17)" fg:x="3134" fg:w="117"/><text x="26.7285%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (993 samples, 8.39%)</title><rect x="22.2457%" y="228" width="8.3897%" height="15" fill="rgb(214,148,48)" fg:x="2633" fg:w="993"/><text x="22.4957%" y="238.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (657 samples, 5.55%)</title><rect x="25.0845%" y="244" width="5.5509%" height="15" fill="rgb(232,36,49)" fg:x="2969" fg:w="657"/><text x="25.3345%" y="254.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (375 samples, 3.17%)</title><rect x="27.4670%" y="260" width="3.1683%" height="15" fill="rgb(209,103,24)" fg:x="3251" fg:w="375"/><text x="27.7170%" y="270.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (130 samples, 1.10%)</title><rect x="30.6353%" y="228" width="1.0983%" height="15" fill="rgb(229,88,8)" fg:x="3626" fg:w="130"/><text x="30.8853%" y="238.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (19 samples, 0.16%)</title><rect x="32.7138%" y="244" width="0.1605%" height="15" fill="rgb(213,181,19)" fg:x="3872" fg:w="19"/><text x="32.9638%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (218 samples, 1.84%)</title><rect x="31.7844%" y="228" width="1.8418%" height="15" fill="rgb(254,191,54)" fg:x="3762" fg:w="218"/><text x="32.0344%" y="238.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (89 samples, 0.75%)</title><rect x="32.8743%" y="244" width="0.7519%" height="15" fill="rgb(241,83,37)" fg:x="3891" fg:w="89"/><text x="33.1243%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (200 samples, 1.69%)</title><rect x="41.5343%" y="244" width="1.6898%" height="15" fill="rgb(233,36,39)" fg:x="4916" fg:w="200"/><text x="41.7843%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (16 samples, 0.14%)</title><rect x="43.2241%" y="244" width="0.1352%" height="15" fill="rgb(226,3,54)" fg:x="5116" fg:w="16"/><text x="43.4741%" y="254.50"></text></g><g><title>stated (kappybara/pattern.py:52) (22 samples, 0.19%)</title><rect x="43.6550%" y="260" width="0.1859%" height="15" fill="rgb(245,192,40)" fg:x="5167" fg:w="22"/><text x="43.9050%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (169 samples, 1.43%)</title><rect x="43.3592%" y="244" width="1.4278%" height="15" fill="rgb(238,167,29)" fg:x="5132" fg:w="169"/><text x="43.6092%" y="254.50"></text></g><g><title>stated (kappybara/pattern.py:54) (112 samples, 0.95%)</title><rect x="43.8408%" y="260" width="0.9463%" height="15" fill="rgb(232,182,51)" fg:x="5189" fg:w="112"/><text x="44.0908%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:56) (18 samples, 0.15%)</title><rect x="45.8770%" y="260" width="0.1521%" height="15" fill="rgb(231,60,39)" fg:x="5430" fg:w="18"/><text x="46.1270%" y="270.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (25 samples, 0.21%)</title><rect x="47.7273%" y="276" width="0.2112%" height="15" fill="rgb(208,69,12)" fg:x="5649" fg:w="25"/><text x="47.9773%" y="286.50"></text></g><g><title>bound (kappybara/pattern.py:59) (430 samples, 3.63%)</title><rect x="46.0291%" y="260" width="3.6330%" height="15" fill="rgb(235,93,37)" fg:x="5448" fg:w="430"/><text x="46.2791%" y="270.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (204 samples, 1.72%)</title><rect x="47.9385%" y="276" width="1.7236%" height="15" fill="rgb(213,116,39)" fg:x="5674" fg:w="204"/><text x="48.1885%" y="286.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="49.5353%" y="292" width="0.1267%" height="15" fill="rgb(222,207,29)" fg:x="5863" fg:w="15"/><text x="49.7853%" y="302.50"></text></g><g><title>bound (kappybara/pattern.py:60) (240 samples, 2.03%)</title><rect x="49.6620%" y="260" width="2.0277%" height="15" fill="rgb(206,96,30)" fg:x="5878" fg:w="240"/><text x="49.9120%" y="270.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (93 samples, 0.79%)</title><rect x="51.6898%" y="260" width="0.7857%" height="15" fill="rgb(218,138,4)" fg:x="6118" fg:w="93"/><text x="51.9398%" y="270.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (23 samples, 0.19%)</title><rect x="52.4755%" y="260" width="0.1943%" height="15" fill="rgb(250,191,14)" fg:x="6211" fg:w="23"/><text x="52.7255%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (962 samples, 8.13%)</title><rect x="44.7871%" y="244" width="8.1277%" height="15" fill="rgb(239,60,40)" fg:x="5301" fg:w="962"/><text x="45.0371%" y="254.50">embeds_in (..</text></g><g><title>coupled (kappybara/pattern.py:66) (29 samples, 0.25%)</title><rect x="52.6698%" y="260" width="0.2450%" height="15" fill="rgb(206,27,48)" fg:x="6234" fg:w="29"/><text x="52.9198%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (20 samples, 0.17%)</title><rect x="52.9486%" y="244" width="0.1690%" height="15" fill="rgb(225,35,8)" fg:x="6267" fg:w="20"/><text x="53.1986%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.13%)</title><rect x="53.7935%" y="260" width="0.1267%" height="15" fill="rgb(250,213,24)" fg:x="6367" fg:w="15"/><text x="54.0435%" y="270.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (280 samples, 2.37%)</title><rect x="53.1176%" y="244" width="2.3657%" height="15" fill="rgb(247,123,22)" fg:x="6287" fg:w="280"/><text x="53.3676%" y="254.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (185 samples, 1.56%)</title><rect x="53.9202%" y="260" width="1.5630%" height="15" fill="rgb(231,138,38)" fg:x="6382" fg:w="185"/><text x="54.1702%" y="270.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.25%)</title><rect x="55.2383%" y="276" width="0.2450%" height="15" fill="rgb(231,145,46)" fg:x="6538" fg:w="29"/><text x="55.4883%" y="286.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.13%)</title><rect x="56.6323%" y="260" width="0.1267%" height="15" fill="rgb(251,118,11)" fg:x="6703" fg:w="15"/><text x="56.8823%" y="270.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.15%)</title><rect x="58.4488%" y="276" width="0.1521%" height="15" fill="rgb(217,147,25)" fg:x="6918" fg:w="18"/><text x="58.6988%" y="286.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (410 samples, 3.46%)</title><rect x="55.4833%" y="244" width="3.4640%" height="15" fill="rgb(247,81,37)" fg:x="6567" fg:w="410"/><text x="55.7333%" y="254.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (259 samples, 2.19%)</title><rect x="56.7590%" y="260" width="2.1882%" height="15" fill="rgb(209,12,38)" fg:x="6718" fg:w="259"/><text x="57.0090%" y="270.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.35%)</title><rect x="58.6009%" y="276" width="0.3464%" height="15" fill="rgb(227,1,9)" fg:x="6936" fg:w="41"/><text x="58.8509%" y="286.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (84 samples, 0.71%)</title><rect x="58.9473%" y="244" width="0.7097%" height="15" fill="rgb(248,47,43)" fg:x="6977" fg:w="84"/><text x="59.1973%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (181 samples, 1.53%)</title><rect x="59.6570%" y="244" width="1.5292%" height="15" fill="rgb(221,10,30)" fg:x="7061" fg:w="181"/><text x="59.9070%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (91 samples, 0.77%)</title><rect x="61.1862%" y="244" width="0.7688%" height="15" fill="rgb(210,229,1)" fg:x="7242" fg:w="91"/><text x="61.4362%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (22 samples, 0.19%)</title><rect x="61.9551%" y="244" width="0.1859%" height="15" fill="rgb(222,148,37)" fg:x="7333" fg:w="22"/><text x="62.2051%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,690 samples, 31.18%)</title><rect x="33.6262%" y="228" width="31.1761%" height="15" fill="rgb(234,67,33)" fg:x="3980" fg:w="3690"/><text x="33.8762%" y="238.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (315 samples, 2.66%)</title><rect x="62.1409%" y="244" width="2.6614%" height="15" fill="rgb(247,98,35)" fg:x="7355" fg:w="315"/><text x="62.3909%" y="254.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,432 samples, 45.89%)</title><rect x="19.3478%" y="212" width="45.8939%" height="15" fill="rgb(247,138,52)" fg:x="2290" fg:w="5432"/><text x="19.5978%" y="222.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (52 samples, 0.44%)</title><rect x="64.8023%" y="228" width="0.4393%" height="15" fill="rgb(213,79,30)" fg:x="7670" fg:w="52"/><text x="65.0523%" y="238.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (76 samples, 0.64%)</title><rect x="66.3231%" y="228" width="0.6421%" height="15" fill="rgb(246,177,23)" fg:x="7850" fg:w="76"/><text x="66.5731%" y="238.50"></text></g><g><title>sites (kappybara/pattern.py:111) (61 samples, 0.52%)</title><rect x="68.0044%" y="244" width="0.5154%" height="15" fill="rgb(230,62,27)" fg:x="8049" fg:w="61"/><text x="68.2544%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (617 samples, 5.21%)</title><rect x="65.3092%" y="212" width="5.2129%" height="15" fill="rgb(216,154,8)" fg:x="7730" fg:w="617"/><text x="65.5592%" y="222.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (421 samples, 3.56%)</title><rect x="66.9652%" y="228" width="3.5569%" height="15" fill="rgb(244,35,45)" fg:x="7926" fg:w="421"/><text x="67.2152%" y="238.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (237 samples, 2.00%)</title><rect x="68.5198%" y="244" width="2.0024%" height="15" fill="rgb(251,115,12)" fg:x="8110" fg:w="237"/><text x="68.7698%" y="254.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (127 samples, 1.07%)</title><rect x="70.5221%" y="212" width="1.0730%" height="15" fill="rgb(240,54,50)" fg:x="8347" fg:w="127"/><text x="70.7721%" y="222.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (54 samples, 0.46%)</title><rect x="71.1389%" y="228" width="0.4562%" height="15" fill="rgb(233,84,52)" fg:x="8420" fg:w="54"/><text x="71.3889%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (15 samples, 0.13%)</title><rect x="71.8148%" y="228" width="0.1267%" height="15" fill="rgb(207,117,47)" fg:x="8500" fg:w="15"/><text x="72.0648%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (78 samples, 0.66%)</title><rect x="71.5951%" y="212" width="0.6590%" height="15" fill="rgb(249,43,39)" fg:x="8474" fg:w="78"/><text x="71.8451%" y="222.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (37 samples, 0.31%)</title><rect x="71.9415%" y="228" width="0.3126%" height="15" fill="rgb(209,38,44)" fg:x="8515" fg:w="37"/><text x="72.1915%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.14%)</title><rect x="73.6228%" y="228" width="0.1352%" height="15" fill="rgb(236,212,23)" fg:x="8714" fg:w="16"/><text x="73.8728%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (204 samples, 1.72%)</title><rect x="72.2541%" y="212" width="1.7236%" height="15" fill="rgb(242,79,21)" fg:x="8552" fg:w="204"/><text x="72.5041%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.22%)</title><rect x="73.7580%" y="228" width="0.2197%" height="15" fill="rgb(211,96,35)" fg:x="8730" fg:w="26"/><text x="74.0080%" y="238.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (80 samples, 0.68%)</title><rect x="73.9777%" y="212" width="0.6759%" height="15" fill="rgb(253,215,40)" fg:x="8756" fg:w="80"/><text x="74.2277%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (75 samples, 0.63%)</title><rect x="74.6536%" y="212" width="0.6337%" height="15" fill="rgb(211,81,21)" fg:x="8836" fg:w="75"/><text x="74.9036%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.12%)</title><rect x="77.0531%" y="228" width="0.1183%" height="15" fill="rgb(208,190,38)" fg:x="9120" fg:w="14"/><text x="77.3031%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (127 samples, 1.07%)</title><rect x="77.1713%" y="228" width="1.0730%" height="15" fill="rgb(235,213,38)" fg:x="9134" fg:w="127"/><text x="77.4213%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.14%)</title><rect x="78.1007%" y="244" width="0.1436%" height="15" fill="rgb(237,122,38)" fg:x="9244" fg:w="17"/><text x="78.3507%" y="254.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (358 samples, 3.02%)</title><rect x="75.2873%" y="212" width="3.0247%" height="15" fill="rgb(244,218,35)" fg:x="8911" fg:w="358"/><text x="75.5373%" y="222.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (33 samples, 0.28%)</title><rect x="78.3119%" y="212" width="0.2788%" height="15" fill="rgb(240,68,47)" fg:x="9269" fg:w="33"/><text x="78.5619%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (15 samples, 0.13%)</title><rect x="78.5907%" y="212" width="0.1267%" height="15" fill="rgb(210,16,53)" fg:x="9302" fg:w="15"/><text x="78.8407%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,207 samples, 77.79%)</title><rect x="1.0223%" y="196" width="77.7881%" height="15" fill="rgb(235,124,12)" fg:x="121" fg:w="9207"/><text x="1.2723%" y="206.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (111 samples, 0.94%)</title><rect x="78.8104%" y="196" width="0.9378%" height="15" fill="rgb(224,169,11)" fg:x="9328" fg:w="111"/><text x="79.0604%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (18 samples, 0.15%)</title><rect x="79.5961%" y="212" width="0.1521%" height="15" fill="rgb(250,166,2)" fg:x="9421" fg:w="18"/><text x="79.8461%" y="222.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (134 samples, 1.13%)</title><rect x="79.7651%" y="196" width="1.1321%" height="15" fill="rgb(242,216,29)" fg:x="9441" fg:w="134"/><text x="80.0151%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (9,461 samples, 79.93%)</title><rect x="0.9801%" y="180" width="79.9341%" height="15" fill="rgb(230,116,27)" fg:x="116" fg:w="9461"/><text x="1.2301%" y="190.50">track_component (kappybara/mixture.py:82)</text></g><g><title>track_component (kappybara/mixture.py:163) (9,542 samples, 80.62%)</title><rect x="0.9547%" y="164" width="80.6185%" height="15" fill="rgb(228,99,48)" fg:x="113" fg:w="9542"/><text x="1.2047%" y="174.50">track_component (kappybara/mixture.py:163)</text></g><g><title>track_component (kappybara/mixture.py:84) (78 samples, 0.66%)</title><rect x="80.9142%" y="180" width="0.6590%" height="15" fill="rgb(253,11,6)" fg:x="9577" fg:w="78"/><text x="81.1642%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:194) (26 samples, 0.22%)</title><rect x="81.7083%" y="180" width="0.2197%" height="15" fill="rgb(247,143,39)" fg:x="9671" fg:w="26"/><text x="81.9583%" y="190.50"></text></g><g><title>lookup (kappybara/indexed_set.py:169) (34 samples, 0.29%)</title><rect x="85.9412%" y="228" width="0.2873%" height="15" fill="rgb(236,97,10)" fg:x="10172" fg:w="34"/><text x="86.1912%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (138 samples, 1.17%)</title><rect x="86.2285%" y="228" width="1.1659%" height="15" fill="rgb(233,208,19)" fg:x="10206" fg:w="138"/><text x="86.4785%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.24%)</title><rect x="87.1578%" y="244" width="0.2366%" height="15" fill="rgb(216,164,2)" fg:x="10316" fg:w="28"/><text x="87.4078%" y="254.50"></text></g><g><title>lookup (kappybara/indexed_set.py:172) (12 samples, 0.10%)</title><rect x="87.3944%" y="228" width="0.1014%" height="15" fill="rgb(220,129,5)" fg:x="10344" fg:w="12"/><text x="87.6444%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:173) (31 samples, 0.26%)</title><rect x="87.4958%" y="228" width="0.2619%" height="15" fill="rgb(242,17,10)" fg:x="10356" fg:w="31"/><text x="87.7458%" y="238.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (735 samples, 6.21%)</title><rect x="81.9280%" y="180" width="6.2099%" height="15" fill="rgb(242,107,0)" fg:x="9697" fg:w="735"/><text x="82.1780%" y="190.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:66) (513 samples, 4.33%)</title><rect x="83.8036%" y="196" width="4.3342%" height="15" fill="rgb(251,28,31)" fg:x="9919" fg:w="513"/><text x="84.0536%" y="206.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:167) (463 samples, 3.91%)</title><rect x="84.2261%" y="212" width="3.9118%" height="15" fill="rgb(233,223,10)" fg:x="9969" fg:w="463"/><text x="84.4761%" y="222.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:174) (45 samples, 0.38%)</title><rect x="87.7577%" y="228" width="0.3802%" height="15" fill="rgb(215,21,27)" fg:x="10387" fg:w="45"/><text x="88.0077%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.12%)</title><rect x="89.5488%" y="196" width="0.1183%" height="15" fill="rgb(232,23,21)" fg:x="10599" fg:w="14"/><text x="89.7988%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (18 samples, 0.15%)</title><rect x="89.8445%" y="196" width="0.1521%" height="15" fill="rgb(244,5,23)" fg:x="10634" fg:w="18"/><text x="90.0945%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (138 samples, 1.17%)</title><rect x="89.9966%" y="196" width="1.1659%" height="15" fill="rgb(226,81,46)" fg:x="10652" fg:w="138"/><text x="90.2466%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (26 samples, 0.22%)</title><rect x="90.9429%" y="212" width="0.2197%" height="15" fill="rgb(247,70,30)" fg:x="10764" fg:w="26"/><text x="91.1929%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (139 samples, 1.17%)</title><rect x="91.1626%" y="196" width="1.1744%" height="15" fill="rgb(212,68,19)" fg:x="10790" fg:w="139"/><text x="91.4126%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.12%)</title><rect x="92.2187%" y="212" width="0.1183%" height="15" fill="rgb(240,187,13)" fg:x="10915" fg:w="14"/><text x="92.4687%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:134) (52 samples, 0.44%)</title><rect x="92.3369%" y="196" width="0.4393%" height="15" fill="rgb(223,113,26)" fg:x="10929" fg:w="52"/><text x="92.5869%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (15 samples, 0.13%)</title><rect x="94.0014%" y="212" width="0.1267%" height="15" fill="rgb(206,192,2)" fg:x="11126" fg:w="15"/><text x="94.2514%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (179 samples, 1.51%)</title><rect x="92.7763%" y="196" width="1.5123%" height="15" fill="rgb(241,108,4)" fg:x="10981" fg:w="179"/><text x="93.0263%" y="206.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (19 samples, 0.16%)</title><rect x="94.1281%" y="212" width="0.1605%" height="15" fill="rgb(247,173,49)" fg:x="11141" fg:w="19"/><text x="94.3781%" y="222.50"></text></g><g><title>track_component (kappybara/mixture.py:165) (1,576 samples, 13.32%)</title><rect x="81.5732%" y="164" width="13.3153%" height="15" fill="rgb(224,114,35)" fg:x="9655" fg:w="1576"/><text x="81.8232%" y="174.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:198) (792 samples, 6.69%)</title><rect x="88.1970%" y="180" width="6.6914%" height="15" fill="rgb(245,159,27)" fg:x="10439" fg:w="792"/><text x="88.4470%" y="190.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:138) (71 samples, 0.60%)</title><rect x="94.2886%" y="196" width="0.5999%" height="15" fill="rgb(245,172,44)" fg:x="11160" fg:w="71"/><text x="94.5386%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (11,123 samples, 93.98%)</title><rect x="0.9463%" y="132" width="93.9760%" height="15" fill="rgb(236,23,11)" fg:x="112" fg:w="11123"/><text x="1.1963%" y="142.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:175) (11,122 samples, 93.97%)</title><rect x="0.9547%" y="148" width="93.9676%" height="15" fill="rgb(205,117,38)" fg:x="113" fg:w="11122"/><text x="1.2047%" y="158.50">_update_embeddings (kappybara/mixture.py:175)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (24 samples, 0.20%)</title><rect x="94.9899%" y="180" width="0.2028%" height="15" fill="rgb(237,72,25)" fg:x="11243" fg:w="24"/><text x="95.2399%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (44 samples, 0.37%)</title><rect x="94.9899%" y="164" width="0.3717%" height="15" fill="rgb(244,70,9)" fg:x="11243" fg:w="44"/><text x="95.2399%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (20 samples, 0.17%)</title><rect x="95.1926%" y="180" width="0.1690%" height="15" fill="rgb(217,125,39)" fg:x="11267" fg:w="20"/><text x="95.4426%" y="190.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (44 samples, 0.37%)</title><rect x="95.3954%" y="180" width="0.3717%" height="15" fill="rgb(235,36,10)" fg:x="11291" fg:w="44"/><text x="95.6454%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (26 samples, 0.22%)</title><rect x="96.0460%" y="196" width="0.2197%" height="15" fill="rgb(251,123,47)" fg:x="11368" fg:w="26"/><text x="96.2960%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (24 samples, 0.20%)</title><rect x="96.2656%" y="196" width="0.2028%" height="15" fill="rgb(221,13,13)" fg:x="11394" fg:w="24"/><text x="96.5156%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (27 samples, 0.23%)</title><rect x="96.5360%" y="196" width="0.2281%" height="15" fill="rgb(238,131,9)" fg:x="11426" fg:w="27"/><text x="96.7860%" y="206.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (183 samples, 1.55%)</title><rect x="95.3616%" y="164" width="1.5461%" height="15" fill="rgb(211,50,8)" fg:x="11287" fg:w="183"/><text x="95.6116%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:198) (131 samples, 1.11%)</title><rect x="95.8009%" y="180" width="1.1068%" height="15" fill="rgb(245,182,24)" fg:x="11339" fg:w="131"/><text x="96.0509%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:138) (17 samples, 0.14%)</title><rect x="96.7641%" y="196" width="0.1436%" height="15" fill="rgb(242,14,37)" fg:x="11453" fg:w="17"/><text x="97.0141%" y="206.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (71 samples, 0.60%)</title><rect x="96.9669%" y="164" width="0.5999%" height="15" fill="rgb(246,228,12)" fg:x="11477" fg:w="71"/><text x="97.2169%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (21 samples, 0.18%)</title><rect x="97.5667%" y="164" width="0.1774%" height="15" fill="rgb(213,55,15)" fg:x="11548" fg:w="21"/><text x="97.8167%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (70 samples, 0.59%)</title><rect x="98.4792%" y="196" width="0.5914%" height="15" fill="rgb(209,9,3)" fg:x="11656" fg:w="70"/><text x="98.7292%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:113) (42 samples, 0.35%)</title><rect x="98.7158%" y="212" width="0.3548%" height="15" fill="rgb(230,59,30)" fg:x="11684" fg:w="42"/><text x="98.9658%" y="222.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:220) (518 samples, 4.38%)</title><rect x="94.9561%" y="148" width="4.3765%" height="15" fill="rgb(209,121,21)" fg:x="11239" fg:w="518"/><text x="95.2061%" y="158.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (186 samples, 1.57%)</title><rect x="97.7611%" y="164" width="1.5715%" height="15" fill="rgb(220,109,13)" fg:x="11571" fg:w="186"/><text x="98.0111%" y="174.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (162 samples, 1.37%)</title><rect x="97.9638%" y="180" width="1.3687%" height="15" fill="rgb(232,18,1)" fg:x="11595" fg:w="162"/><text x="98.2138%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (27 samples, 0.23%)</title><rect x="99.1044%" y="196" width="0.2281%" height="15" fill="rgb(215,41,42)" fg:x="11730" fg:w="27"/><text x="99.3544%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:91) (522 samples, 4.41%)</title><rect x="94.9307%" y="132" width="4.4103%" height="15" fill="rgb(224,123,36)" fg:x="11236" fg:w="522"/><text x="95.1807%" y="142.50">apply..</text></g><g><title>act (kappybara/system.py:66) (11,653 samples, 98.45%)</title><rect x="0.9378%" y="100" width="98.4539%" height="15" fill="rgb(240,125,3)" fg:x="111" fg:w="11653"/><text x="1.1878%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>apply_update (kappybara/mixture.py:171) (11,652 samples, 98.45%)</title><rect x="0.9463%" y="116" width="98.4454%" height="15" fill="rgb(205,98,50)" fg:x="112" fg:w="11652"/><text x="1.1963%" y="126.50">apply_update (kappybara/mixture.py:171)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,760 samples, 99.36%)</title><rect x="0.0507%" y="68" width="99.3579%" height="15" fill="rgb(205,185,37)" fg:x="6" fg:w="11760"/><text x="0.3007%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:71) (11,717 samples, 98.99%)</title><rect x="0.4140%" y="84" width="98.9946%" height="15" fill="rgb(238,207,15)" fg:x="49" fg:w="11717"/><text x="0.6640%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>__iter__ (kappybara/pattern.py:98) (16 samples, 0.14%)</title><rect x="99.4846%" y="68" width="0.1352%" height="15" fill="rgb(213,199,42)" fg:x="11775" fg:w="16"/><text x="99.7346%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (13 samples, 0.11%)</title><rect x="99.6198%" y="68" width="0.1098%" height="15" fill="rgb(235,201,11)" fg:x="11791" fg:w="13"/><text x="99.8698%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (24 samples, 0.20%)</title><rect x="99.7296%" y="68" width="0.2028%" height="15" fill="rgb(207,46,11)" fg:x="11804" fg:w="24"/><text x="99.9796%" y="78.50"></text></g><g><title>all (11,836 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,35,35)" fg:x="0" fg:w="11836"/><text x="0.2500%" y="62.50"></text></g></svg></svg>