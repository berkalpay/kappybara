<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 656535d</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="4679"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (6 samples, 0.13%)</title><rect x="0.0000%" y="68" width="0.1282%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="78.50"></text></g><g><title>update (kappybara/system.py:70) (5 samples, 0.11%)</title><rect x="0.1496%" y="84" width="0.1069%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="5"/><text x="0.3996%" y="94.50"></text></g><g><title>select (kappybara/rule.py:104) (5 samples, 0.11%)</title><rect x="0.2565%" y="116" width="0.1069%" height="15" fill="rgb(221,193,54)" fg:x="12" fg:w="5"/><text x="0.5065%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (7 samples, 0.15%)</title><rect x="0.2565%" y="100" width="0.1496%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="7"/><text x="0.5065%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (39 samples, 0.83%)</title><rect x="0.8121%" y="180" width="0.8335%" height="15" fill="rgb(208,68,35)" fg:x="38" fg:w="39"/><text x="1.0621%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.34%)</title><rect x="12.8019%" y="196" width="0.3420%" height="15" fill="rgb(232,128,0)" fg:x="599" fg:w="16"/><text x="13.0519%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (557 samples, 11.90%)</title><rect x="1.6457%" y="180" width="11.9043%" height="15" fill="rgb(207,160,47)" fg:x="77" fg:w="557"/><text x="1.8957%" y="190.50">embeddings (kappyb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.41%)</title><rect x="13.1438%" y="196" width="0.4061%" height="15" fill="rgb(228,23,34)" fg:x="615" fg:w="19"/><text x="13.3938%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="16.9053%" y="196" width="0.1282%" height="15" fill="rgb(218,30,26)" fg:x="791" fg:w="6"/><text x="17.1553%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (178 samples, 3.80%)</title><rect x="13.5499%" y="180" width="3.8042%" height="15" fill="rgb(220,122,19)" fg:x="634" fg:w="178"/><text x="13.7999%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.32%)</title><rect x="17.0336%" y="196" width="0.3206%" height="15" fill="rgb(250,228,42)" fg:x="797" fg:w="15"/><text x="17.2836%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (52 samples, 1.11%)</title><rect x="17.3541%" y="180" width="1.1113%" height="15" fill="rgb(240,193,28)" fg:x="812" fg:w="52"/><text x="17.6041%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (38 samples, 0.81%)</title><rect x="18.4655%" y="180" width="0.8121%" height="15" fill="rgb(216,20,37)" fg:x="864" fg:w="38"/><text x="18.7155%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.32%)</title><rect x="22.6758%" y="196" width="0.3206%" height="15" fill="rgb(206,188,39)" fg:x="1061" fg:w="15"/><text x="22.9258%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (190 samples, 4.06%)</title><rect x="19.2776%" y="180" width="4.0607%" height="15" fill="rgb(217,207,13)" fg:x="902" fg:w="190"/><text x="19.5276%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (16 samples, 0.34%)</title><rect x="22.9964%" y="196" width="0.3420%" height="15" fill="rgb(231,73,38)" fg:x="1076" fg:w="16"/><text x="23.2464%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (128 samples, 2.74%)</title><rect x="23.3383%" y="180" width="2.7356%" height="15" fill="rgb(225,20,46)" fg:x="1092" fg:w="128"/><text x="23.5883%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (13 samples, 0.28%)</title><rect x="28.5317%" y="196" width="0.2778%" height="15" fill="rgb(210,31,41)" fg:x="1335" fg:w="13"/><text x="28.7817%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (49 samples, 1.05%)</title><rect x="28.8096%" y="196" width="1.0472%" height="15" fill="rgb(221,200,47)" fg:x="1348" fg:w="49"/><text x="29.0596%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (54 samples, 1.15%)</title><rect x="32.1864%" y="212" width="1.1541%" height="15" fill="rgb(226,26,5)" fg:x="1506" fg:w="54"/><text x="32.4364%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (46 samples, 0.98%)</title><rect x="35.4349%" y="228" width="0.9831%" height="15" fill="rgb(249,33,26)" fg:x="1658" fg:w="46"/><text x="35.6849%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (530 samples, 11.33%)</title><rect x="29.8996%" y="196" width="11.3272%" height="15" fill="rgb(235,183,28)" fg:x="1399" fg:w="530"/><text x="30.1496%" y="206.50">embeds_in (kappyb..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (369 samples, 7.89%)</title><rect x="33.3405%" y="212" width="7.8863%" height="15" fill="rgb(221,5,38)" fg:x="1560" fg:w="369"/><text x="33.5905%" y="222.50">__iter__ (k..</text></g><g><title>sites (kappybara/pattern.py:113) (225 samples, 4.81%)</title><rect x="36.4180%" y="228" width="4.8087%" height="15" fill="rgb(247,18,42)" fg:x="1704" fg:w="225"/><text x="36.6680%" y="238.50">sites ..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (64 samples, 1.37%)</title><rect x="41.2268%" y="196" width="1.3678%" height="15" fill="rgb(241,131,45)" fg:x="1929" fg:w="64"/><text x="41.4768%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (19 samples, 0.41%)</title><rect x="43.6632%" y="212" width="0.4061%" height="15" fill="rgb(249,31,29)" fg:x="2043" fg:w="19"/><text x="43.9132%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (108 samples, 2.31%)</title><rect x="42.6587%" y="196" width="2.3082%" height="15" fill="rgb(225,111,53)" fg:x="1996" fg:w="108"/><text x="42.9087%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (42 samples, 0.90%)</title><rect x="44.0692%" y="212" width="0.8976%" height="15" fill="rgb(238,160,17)" fg:x="2062" fg:w="42"/><text x="44.3192%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (103 samples, 2.20%)</title><rect x="54.4775%" y="212" width="2.2013%" height="15" fill="rgb(214,148,48)" fg:x="2549" fg:w="103"/><text x="54.7275%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (5 samples, 0.11%)</title><rect x="56.6788%" y="212" width="0.1069%" height="15" fill="rgb(232,36,49)" fg:x="2652" fg:w="5"/><text x="56.9288%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (9 samples, 0.19%)</title><rect x="57.2772%" y="228" width="0.1923%" height="15" fill="rgb(209,103,24)" fg:x="2680" fg:w="9"/><text x="57.5272%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (78 samples, 1.67%)</title><rect x="56.7856%" y="212" width="1.6670%" height="15" fill="rgb(229,88,8)" fg:x="2657" fg:w="78"/><text x="57.0356%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (46 samples, 0.98%)</title><rect x="57.4695%" y="228" width="0.9831%" height="15" fill="rgb(213,181,19)" fg:x="2689" fg:w="46"/><text x="57.7195%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (11 samples, 0.24%)</title><rect x="59.9915%" y="228" width="0.2351%" height="15" fill="rgb(254,191,54)" fg:x="2807" fg:w="11"/><text x="60.2415%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.32%)</title><rect x="62.4065%" y="244" width="0.3206%" height="15" fill="rgb(241,83,37)" fg:x="2920" fg:w="15"/><text x="62.6565%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.11%)</title><rect x="64.6719%" y="260" width="0.1069%" height="15" fill="rgb(233,36,39)" fg:x="3026" fg:w="5"/><text x="64.9219%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (224 samples, 4.79%)</title><rect x="60.2265%" y="228" width="4.7873%" height="15" fill="rgb(226,3,54)" fg:x="2818" fg:w="224"/><text x="60.4765%" y="238.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (107 samples, 2.29%)</title><rect x="62.7271%" y="244" width="2.2868%" height="15" fill="rgb(245,192,40)" fg:x="2935" fg:w="107"/><text x="62.9771%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.24%)</title><rect x="64.7788%" y="260" width="0.2351%" height="15" fill="rgb(238,167,29)" fg:x="3031" fg:w="11"/><text x="65.0288%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (127 samples, 2.71%)</title><rect x="65.0139%" y="228" width="2.7143%" height="15" fill="rgb(232,182,51)" fg:x="3042" fg:w="127"/><text x="65.2639%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (48 samples, 1.03%)</title><rect x="67.7281%" y="228" width="1.0259%" height="15" fill="rgb(231,60,39)" fg:x="3169" fg:w="48"/><text x="67.9781%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (6 samples, 0.13%)</title><rect x="68.7540%" y="228" width="0.1282%" height="15" fill="rgb(208,69,12)" fg:x="3217" fg:w="6"/><text x="69.0040%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (521 samples, 11.13%)</title><rect x="58.4527%" y="212" width="11.1349%" height="15" fill="rgb(235,93,37)" fg:x="2735" fg:w="521"/><text x="58.7027%" y="222.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:66) (33 samples, 0.71%)</title><rect x="68.8822%" y="228" width="0.7053%" height="15" fill="rgb(213,116,39)" fg:x="3223" fg:w="33"/><text x="69.1322%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (7 samples, 0.15%)</title><rect x="69.6730%" y="212" width="0.1496%" height="15" fill="rgb(222,207,29)" fg:x="3260" fg:w="7"/><text x="69.9230%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.11%)</title><rect x="70.3569%" y="228" width="0.1069%" height="15" fill="rgb(206,96,30)" fg:x="3292" fg:w="5"/><text x="70.6069%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (64 samples, 1.37%)</title><rect x="69.8226%" y="212" width="1.3678%" height="15" fill="rgb(218,138,4)" fg:x="3267" fg:w="64"/><text x="70.0726%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (34 samples, 0.73%)</title><rect x="70.4638%" y="228" width="0.7267%" height="15" fill="rgb(250,191,14)" fg:x="3297" fg:w="34"/><text x="70.7138%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="71.0836%" y="244" width="0.1069%" height="15" fill="rgb(239,60,40)" fg:x="3326" fg:w="5"/><text x="71.3336%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (77 samples, 1.65%)</title><rect x="71.1904%" y="212" width="1.6457%" height="15" fill="rgb(206,27,48)" fg:x="3331" fg:w="77"/><text x="71.4404%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (47 samples, 1.00%)</title><rect x="71.8316%" y="228" width="1.0045%" height="15" fill="rgb(225,35,8)" fg:x="3361" fg:w="47"/><text x="72.0816%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="72.7292%" y="244" width="0.1069%" height="15" fill="rgb(250,213,24)" fg:x="3403" fg:w="5"/><text x="72.9792%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (22 samples, 0.47%)</title><rect x="72.8361%" y="212" width="0.4702%" height="15" fill="rgb(247,123,22)" fg:x="3408" fg:w="22"/><text x="73.0861%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (57 samples, 1.22%)</title><rect x="73.3063%" y="212" width="1.2182%" height="15" fill="rgb(231,138,38)" fg:x="3430" fg:w="57"/><text x="73.5563%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (24 samples, 0.51%)</title><rect x="74.5245%" y="212" width="0.5129%" height="15" fill="rgb(231,145,46)" fg:x="3487" fg:w="24"/><text x="74.7745%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,545 samples, 33.02%)</title><rect x="44.9669%" y="196" width="33.0199%" height="15" fill="rgb(251,118,11)" fg:x="2104" fg:w="1545"/><text x="45.2169%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (134 samples, 2.86%)</title><rect x="75.1229%" y="212" width="2.8639%" height="15" fill="rgb(217,147,25)" fg:x="3515" fg:w="134"/><text x="75.3729%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,461 samples, 52.60%)</title><rect x="26.0739%" y="180" width="52.5967%" height="15" fill="rgb(247,81,37)" fg:x="1220" fg:w="2461"/><text x="26.3239%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (32 samples, 0.68%)</title><rect x="77.9867%" y="196" width="0.6839%" height="15" fill="rgb(209,12,38)" fg:x="3649" fg:w="32"/><text x="78.2367%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (39 samples, 0.83%)</title><rect x="80.2736%" y="196" width="0.8335%" height="15" fill="rgb(227,1,9)" fg:x="3756" fg:w="39"/><text x="80.5236%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (35 samples, 0.75%)</title><rect x="82.6245%" y="212" width="0.7480%" height="15" fill="rgb(248,47,43)" fg:x="3866" fg:w="35"/><text x="82.8745%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (347 samples, 7.42%)</title><rect x="78.7989%" y="180" width="7.4161%" height="15" fill="rgb(221,10,30)" fg:x="3687" fg:w="347"/><text x="79.0489%" y="190.50">embeddings..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (239 samples, 5.11%)</title><rect x="81.1071%" y="196" width="5.1079%" height="15" fill="rgb(210,229,1)" fg:x="3795" fg:w="239"/><text x="81.3571%" y="206.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:113) (133 samples, 2.84%)</title><rect x="83.3725%" y="212" width="2.8425%" height="15" fill="rgb(222,148,37)" fg:x="3901" fg:w="133"/><text x="83.6225%" y="222.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:101) (7 samples, 0.15%)</title><rect x="87.0485%" y="196" width="0.1496%" height="15" fill="rgb(234,67,33)" fg:x="4073" fg:w="7"/><text x="87.2985%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (65 samples, 1.39%)</title><rect x="86.2150%" y="180" width="1.3892%" height="15" fill="rgb(247,98,35)" fg:x="4034" fg:w="65"/><text x="86.4650%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (19 samples, 0.41%)</title><rect x="87.1981%" y="196" width="0.4061%" height="15" fill="rgb(247,138,52)" fg:x="4080" fg:w="19"/><text x="87.4481%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (6 samples, 0.13%)</title><rect x="87.8607%" y="196" width="0.1282%" height="15" fill="rgb(213,79,30)" fg:x="4111" fg:w="6"/><text x="88.1107%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (49 samples, 1.05%)</title><rect x="87.6042%" y="180" width="1.0472%" height="15" fill="rgb(246,177,23)" fg:x="4099" fg:w="49"/><text x="87.8542%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (31 samples, 0.66%)</title><rect x="87.9889%" y="196" width="0.6625%" height="15" fill="rgb(230,62,27)" fg:x="4117" fg:w="31"/><text x="88.2389%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="89.7628%" y="196" width="0.1282%" height="15" fill="rgb(216,154,8)" fg:x="4200" fg:w="6"/><text x="90.0128%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (61 samples, 1.30%)</title><rect x="88.6514%" y="180" width="1.3037%" height="15" fill="rgb(244,35,45)" fg:x="4148" fg:w="61"/><text x="88.9014%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (20 samples, 0.43%)</title><rect x="89.9551%" y="180" width="0.4274%" height="15" fill="rgb(251,115,12)" fg:x="4209" fg:w="20"/><text x="90.2051%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (24 samples, 0.51%)</title><rect x="90.3826%" y="180" width="0.5129%" height="15" fill="rgb(240,54,50)" fg:x="4229" fg:w="24"/><text x="90.6326%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.11%)</title><rect x="90.7886%" y="196" width="0.1069%" height="15" fill="rgb(233,84,52)" fg:x="4248" fg:w="5"/><text x="91.0386%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (109 samples, 2.33%)</title><rect x="90.8955%" y="180" width="2.3296%" height="15" fill="rgb(207,117,47)" fg:x="4253" fg:w="109"/><text x="91.1455%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (43 samples, 0.92%)</title><rect x="92.3060%" y="196" width="0.9190%" height="15" fill="rgb(249,43,39)" fg:x="4319" fg:w="43"/><text x="92.5560%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.17%)</title><rect x="93.0541%" y="212" width="0.1710%" height="15" fill="rgb(209,38,44)" fg:x="4354" fg:w="8"/><text x="93.3041%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:287) (21 samples, 0.45%)</title><rect x="93.3319%" y="180" width="0.4488%" height="15" fill="rgb(236,212,23)" fg:x="4367" fg:w="21"/><text x="93.5819%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (10 samples, 0.21%)</title><rect x="93.7807%" y="180" width="0.2137%" height="15" fill="rgb(242,79,21)" fg:x="4388" fg:w="10"/><text x="94.0307%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (4,381 samples, 93.63%)</title><rect x="0.4702%" y="164" width="93.6311%" height="15" fill="rgb(211,96,35)" fg:x="22" fg:w="4381"/><text x="0.7202%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>embeddings (kappybara/pattern.py:290) (5 samples, 0.11%)</title><rect x="93.9944%" y="180" width="0.1069%" height="15" fill="rgb(253,215,40)" fg:x="4398" fg:w="5"/><text x="94.2444%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:187) (7 samples, 0.15%)</title><rect x="95.7470%" y="180" width="0.1496%" height="15" fill="rgb(211,81,21)" fg:x="4480" fg:w="7"/><text x="95.9970%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (94 samples, 2.01%)</title><rect x="94.1013%" y="164" width="2.0090%" height="15" fill="rgb(208,190,38)" fg:x="4403" fg:w="94"/><text x="94.3513%" y="174.50">_..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (10 samples, 0.21%)</title><rect x="95.8966%" y="180" width="0.2137%" height="15" fill="rgb(235,213,38)" fg:x="4487" fg:w="10"/><text x="96.1466%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (4,588 samples, 98.06%)</title><rect x="0.4488%" y="148" width="98.0551%" height="15" fill="rgb(237,122,38)" fg:x="21" fg:w="4588"/><text x="0.6988%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:124) (112 samples, 2.39%)</title><rect x="96.1103%" y="164" width="2.3937%" height="15" fill="rgb(244,218,35)" fg:x="4497" fg:w="112"/><text x="96.3603%" y="174.50">__..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.26%)</title><rect x="98.2475%" y="180" width="0.2565%" height="15" fill="rgb(240,68,47)" fg:x="4597" fg:w="12"/><text x="98.4975%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,656 samples, 99.51%)</title><rect x="0.1282%" y="68" width="99.5084%" height="15" fill="rgb(210,16,53)" fg:x="6" fg:w="4656"/><text x="0.3782%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:71) (4,650 samples, 99.38%)</title><rect x="0.2565%" y="84" width="99.3802%" height="15" fill="rgb(235,124,12)" fg:x="12" fg:w="4650"/><text x="0.5065%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>act (kappybara/system.py:66) (4,643 samples, 99.23%)</title><rect x="0.4061%" y="100" width="99.2306%" height="15" fill="rgb(224,169,11)" fg:x="19" fg:w="4643"/><text x="0.6561%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>apply_update (kappybara/mixture.py:101) (4,642 samples, 99.21%)</title><rect x="0.4274%" y="116" width="99.2092%" height="15" fill="rgb(250,166,2)" fg:x="20" fg:w="4642"/><text x="0.6774%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (4,642 samples, 99.21%)</title><rect x="0.4274%" y="132" width="99.2092%" height="15" fill="rgb(242,216,29)" fg:x="20" fg:w="4642"/><text x="0.6774%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (53 samples, 1.13%)</title><rect x="98.5040%" y="148" width="1.1327%" height="15" fill="rgb(230,116,27)" fg:x="4609" fg:w="53"/><text x="98.7540%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (7 samples, 0.15%)</title><rect x="99.7222%" y="68" width="0.1496%" height="15" fill="rgb(228,99,48)" fg:x="4666" fg:w="7"/><text x="99.9722%" y="78.50"></text></g><g><title>all (4,679 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(253,11,6)" fg:x="0" fg:w="4679"/><text x="0.2500%" y="62.50"></text></g></svg></svg>