<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="330" onload="init(evt)" viewBox="0 0 1200 330" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="330" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 656535d</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="319.00"> </text><svg id="frames" x="10" width="1180" total_samples="9594"><g><title>update (kappybara/system.py:70) (30 samples, 0.31%)</title><rect x="0.1251%" y="84" width="0.3127%" height="15" fill="rgb(227,0,7)" fg:x="12" fg:w="30"/><text x="0.3751%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (30 samples, 0.31%)</title><rect x="0.1251%" y="100" width="0.3127%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="30"/><text x="0.3751%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (27 samples, 0.28%)</title><rect x="0.1563%" y="116" width="0.2814%" height="15" fill="rgb(221,193,54)" fg:x="15" fg:w="27"/><text x="0.4063%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (25 samples, 0.26%)</title><rect x="0.1772%" y="132" width="0.2606%" height="15" fill="rgb(248,212,6)" fg:x="17" fg:w="25"/><text x="0.4272%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (24 samples, 0.25%)</title><rect x="0.1876%" y="148" width="0.2502%" height="15" fill="rgb(208,68,35)" fg:x="18" fg:w="24"/><text x="0.4376%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (20 samples, 0.21%)</title><rect x="0.2293%" y="164" width="0.2085%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="20"/><text x="0.4793%" y="174.50"></text></g><g><title>n_embeddings (kappybara/rule.py:76) (17 samples, 0.18%)</title><rect x="0.2606%" y="180" width="0.1772%" height="15" fill="rgb(207,160,47)" fg:x="25" fg:w="17"/><text x="0.5106%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:77) (10 samples, 0.10%)</title><rect x="0.3335%" y="196" width="0.1042%" height="15" fill="rgb(228,23,34)" fg:x="32" fg:w="10"/><text x="0.5835%" y="206.50"></text></g><g><title>select (kappybara/rule.py:104) (34 samples, 0.35%)</title><rect x="0.5733%" y="116" width="0.3544%" height="15" fill="rgb(218,30,26)" fg:x="55" fg:w="34"/><text x="0.8233%" y="126.50"></text></g><g><title>act (kappybara/system.py:64) (44 samples, 0.46%)</title><rect x="0.5420%" y="100" width="0.4586%" height="15" fill="rgb(220,122,19)" fg:x="52" fg:w="44"/><text x="0.7920%" y="110.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (95 samples, 0.99%)</title><rect x="1.3967%" y="180" width="0.9902%" height="15" fill="rgb(250,228,42)" fg:x="134" fg:w="95"/><text x="1.6467%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (25 samples, 0.26%)</title><rect x="11.8720%" y="196" width="0.2606%" height="15" fill="rgb(240,193,28)" fg:x="1139" fg:w="25"/><text x="12.1220%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (965 samples, 10.06%)</title><rect x="2.3869%" y="180" width="10.0584%" height="15" fill="rgb(216,20,37)" fg:x="229" fg:w="965"/><text x="2.6369%" y="190.50">embeddings (kap..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.31%)</title><rect x="12.1326%" y="196" width="0.3127%" height="15" fill="rgb(206,188,39)" fg:x="1164" fg:w="30"/><text x="12.3826%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.13%)</title><rect x="15.4576%" y="196" width="0.1251%" height="15" fill="rgb(217,207,13)" fg:x="1483" fg:w="12"/><text x="15.7076%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (331 samples, 3.45%)</title><rect x="12.4453%" y="180" width="3.4501%" height="15" fill="rgb(231,73,38)" fg:x="1194" fg:w="331"/><text x="12.6953%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.31%)</title><rect x="15.5827%" y="196" width="0.3127%" height="15" fill="rgb(225,20,46)" fg:x="1495" fg:w="30"/><text x="15.8327%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (98 samples, 1.02%)</title><rect x="15.9475%" y="180" width="1.0215%" height="15" fill="rgb(210,31,41)" fg:x="1530" fg:w="98"/><text x="16.1975%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (65 samples, 0.68%)</title><rect x="16.9689%" y="180" width="0.6775%" height="15" fill="rgb(221,200,47)" fg:x="1628" fg:w="65"/><text x="17.2189%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (28 samples, 0.29%)</title><rect x="20.5858%" y="196" width="0.2918%" height="15" fill="rgb(226,26,5)" fg:x="1975" fg:w="28"/><text x="20.8358%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (343 samples, 3.58%)</title><rect x="17.6464%" y="180" width="3.5752%" height="15" fill="rgb(249,33,26)" fg:x="1693" fg:w="343"/><text x="17.8964%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.34%)</title><rect x="20.8776%" y="196" width="0.3440%" height="15" fill="rgb(235,183,28)" fg:x="2003" fg:w="33"/><text x="21.1276%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (256 samples, 2.67%)</title><rect x="21.2216%" y="180" width="2.6683%" height="15" fill="rgb(221,5,38)" fg:x="2036" fg:w="256"/><text x="21.4716%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (16 samples, 0.17%)</title><rect x="26.0475%" y="196" width="0.1668%" height="15" fill="rgb(247,18,42)" fg:x="2499" fg:w="16"/><text x="26.2975%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (111 samples, 1.16%)</title><rect x="26.2143%" y="196" width="1.1570%" height="15" fill="rgb(241,131,45)" fg:x="2515" fg:w="111"/><text x="26.4643%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (113 samples, 1.18%)</title><rect x="29.5706%" y="212" width="1.1778%" height="15" fill="rgb(249,31,29)" fg:x="2837" fg:w="113"/><text x="29.8206%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (135 samples, 1.41%)</title><rect x="32.6975%" y="228" width="1.4071%" height="15" fill="rgb(225,111,53)" fg:x="3137" fg:w="135"/><text x="32.9475%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,030 samples, 10.74%)</title><rect x="27.4338%" y="196" width="10.7359%" height="15" fill="rgb(238,160,17)" fg:x="2632" fg:w="1030"/><text x="27.6838%" y="206.50">embeds_in (kappy..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (712 samples, 7.42%)</title><rect x="30.7484%" y="212" width="7.4213%" height="15" fill="rgb(214,148,48)" fg:x="2950" fg:w="712"/><text x="30.9984%" y="222.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:113) (390 samples, 4.07%)</title><rect x="34.1046%" y="228" width="4.0650%" height="15" fill="rgb(232,36,49)" fg:x="3272" fg:w="390"/><text x="34.3546%" y="238.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (109 samples, 1.14%)</title><rect x="38.1697%" y="196" width="1.1361%" height="15" fill="rgb(209,103,24)" fg:x="3662" fg:w="109"/><text x="38.4197%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (15 samples, 0.16%)</title><rect x="40.1292%" y="212" width="0.1563%" height="15" fill="rgb(229,88,8)" fg:x="3850" fg:w="15"/><text x="40.3792%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (173 samples, 1.80%)</title><rect x="39.3371%" y="196" width="1.8032%" height="15" fill="rgb(213,181,19)" fg:x="3774" fg:w="173"/><text x="39.5871%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (82 samples, 0.85%)</title><rect x="40.2856%" y="212" width="0.8547%" height="15" fill="rgb(254,191,54)" fg:x="3865" fg:w="82"/><text x="40.5356%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (214 samples, 2.23%)</title><rect x="50.4795%" y="212" width="2.2306%" height="15" fill="rgb(241,83,37)" fg:x="4843" fg:w="214"/><text x="50.7295%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (11 samples, 0.11%)</title><rect x="52.7100%" y="212" width="0.1147%" height="15" fill="rgb(233,36,39)" fg:x="5057" fg:w="11"/><text x="52.9600%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (23 samples, 0.24%)</title><rect x="53.4188%" y="228" width="0.2397%" height="15" fill="rgb(226,3,54)" fg:x="5125" fg:w="23"/><text x="53.6688%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (178 samples, 1.86%)</title><rect x="52.8247%" y="212" width="1.8553%" height="15" fill="rgb(245,192,40)" fg:x="5068" fg:w="178"/><text x="53.0747%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (98 samples, 1.02%)</title><rect x="53.6585%" y="228" width="1.0215%" height="15" fill="rgb(238,167,29)" fg:x="5148" fg:w="98"/><text x="53.9085%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (23 samples, 0.24%)</title><rect x="55.6702%" y="228" width="0.2397%" height="15" fill="rgb(232,182,51)" fg:x="5341" fg:w="23"/><text x="55.9202%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.20%)</title><rect x="57.9216%" y="244" width="0.1980%" height="15" fill="rgb(231,60,39)" fg:x="5557" fg:w="19"/><text x="58.1716%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.20%)</title><rect x="60.1418%" y="260" width="0.1980%" height="15" fill="rgb(208,69,12)" fg:x="5770" fg:w="19"/><text x="60.3918%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (457 samples, 4.76%)</title><rect x="55.9099%" y="228" width="4.7634%" height="15" fill="rgb(235,93,37)" fg:x="5364" fg:w="457"/><text x="56.1599%" y="238.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (245 samples, 2.55%)</title><rect x="58.1197%" y="244" width="2.5537%" height="15" fill="rgb(213,116,39)" fg:x="5576" fg:w="245"/><text x="58.3697%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.33%)</title><rect x="60.3398%" y="260" width="0.3335%" height="15" fill="rgb(222,207,29)" fg:x="5789" fg:w="32"/><text x="60.5898%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (253 samples, 2.64%)</title><rect x="60.6733%" y="228" width="2.6371%" height="15" fill="rgb(206,96,30)" fg:x="5821" fg:w="253"/><text x="60.9233%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (101 samples, 1.05%)</title><rect x="63.3104%" y="228" width="1.0527%" height="15" fill="rgb(218,138,4)" fg:x="6074" fg:w="101"/><text x="63.5604%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.15%)</title><rect x="64.3631%" y="228" width="0.1459%" height="15" fill="rgb(250,191,14)" fg:x="6175" fg:w="14"/><text x="64.6131%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (977 samples, 10.18%)</title><rect x="54.6800%" y="212" width="10.1834%" height="15" fill="rgb(239,60,40)" fg:x="5246" fg:w="977"/><text x="54.9300%" y="222.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:66) (34 samples, 0.35%)</title><rect x="64.5091%" y="228" width="0.3544%" height="15" fill="rgb(206,27,48)" fg:x="6189" fg:w="34"/><text x="64.7591%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (25 samples, 0.26%)</title><rect x="64.9573%" y="212" width="0.2606%" height="15" fill="rgb(225,35,8)" fg:x="6232" fg:w="25"/><text x="65.2073%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (20 samples, 0.21%)</title><rect x="65.9370%" y="228" width="0.2085%" height="15" fill="rgb(250,213,24)" fg:x="6326" fg:w="20"/><text x="66.1870%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.11%)</title><rect x="67.4797%" y="244" width="0.1147%" height="15" fill="rgb(247,123,22)" fg:x="6474" fg:w="11"/><text x="67.7297%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (262 samples, 2.73%)</title><rect x="65.2178%" y="212" width="2.7309%" height="15" fill="rgb(231,138,38)" fg:x="6257" fg:w="262"/><text x="65.4678%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (173 samples, 1.80%)</title><rect x="66.1455%" y="228" width="1.8032%" height="15" fill="rgb(231,145,46)" fg:x="6346" fg:w="173"/><text x="66.3955%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.35%)</title><rect x="67.5943%" y="244" width="0.3544%" height="15" fill="rgb(251,118,11)" fg:x="6485" fg:w="34"/><text x="67.8443%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (19 samples, 0.20%)</title><rect x="69.6373%" y="228" width="0.1980%" height="15" fill="rgb(217,147,25)" fg:x="6681" fg:w="19"/><text x="69.8873%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (432 samples, 4.50%)</title><rect x="67.9487%" y="212" width="4.5028%" height="15" fill="rgb(247,81,37)" fg:x="6519" fg:w="432"/><text x="68.1987%" y="222.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (251 samples, 2.62%)</title><rect x="69.8353%" y="228" width="2.6162%" height="15" fill="rgb(209,12,38)" fg:x="6700" fg:w="251"/><text x="70.0853%" y="238.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.40%)</title><rect x="72.0555%" y="244" width="0.3961%" height="15" fill="rgb(227,1,9)" fg:x="6913" fg:w="38"/><text x="72.3055%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (79 samples, 0.82%)</title><rect x="72.4515%" y="212" width="0.8234%" height="15" fill="rgb(248,47,43)" fg:x="6951" fg:w="79"/><text x="72.7015%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (166 samples, 1.73%)</title><rect x="73.2958%" y="212" width="1.7302%" height="15" fill="rgb(221,10,30)" fg:x="7032" fg:w="166"/><text x="73.5458%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (76 samples, 0.79%)</title><rect x="75.0261%" y="212" width="0.7922%" height="15" fill="rgb(210,229,1)" fg:x="7198" fg:w="76"/><text x="75.2761%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (16 samples, 0.17%)</title><rect x="75.8182%" y="212" width="0.1668%" height="15" fill="rgb(222,148,37)" fg:x="7274" fg:w="16"/><text x="76.0682%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,654 samples, 38.09%)</title><rect x="41.1403%" y="196" width="38.0863%" height="15" fill="rgb(234,67,33)" fg:x="3947" fg:w="3654"/><text x="41.3903%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (311 samples, 3.24%)</title><rect x="75.9850%" y="212" width="3.2416%" height="15" fill="rgb(247,98,35)" fg:x="7290" fg:w="311"/><text x="76.2350%" y="222.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,350 samples, 55.76%)</title><rect x="23.8899%" y="180" width="55.7640%" height="15" fill="rgb(247,138,52)" fg:x="2292" fg:w="5350"/><text x="24.1399%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (41 samples, 0.43%)</title><rect x="79.2266%" y="196" width="0.4274%" height="15" fill="rgb(213,79,30)" fg:x="7601" fg:w="41"/><text x="79.4766%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (11 samples, 0.11%)</title><rect x="79.6540%" y="180" width="0.1147%" height="15" fill="rgb(246,177,23)" fg:x="7642" fg:w="11"/><text x="79.9040%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (51 samples, 0.53%)</title><rect x="81.3529%" y="196" width="0.5316%" height="15" fill="rgb(230,62,27)" fg:x="7805" fg:w="51"/><text x="81.6029%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (57 samples, 0.59%)</title><rect x="83.1249%" y="212" width="0.5941%" height="15" fill="rgb(216,154,8)" fg:x="7975" fg:w="57"/><text x="83.3749%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (600 samples, 6.25%)</title><rect x="79.8103%" y="180" width="6.2539%" height="15" fill="rgb(244,35,45)" fg:x="7657" fg:w="600"/><text x="80.0603%" y="190.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (401 samples, 4.18%)</title><rect x="81.8845%" y="196" width="4.1797%" height="15" fill="rgb(251,115,12)" fg:x="7856" fg:w="401"/><text x="82.1345%" y="206.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (225 samples, 2.35%)</title><rect x="83.7190%" y="212" width="2.3452%" height="15" fill="rgb(240,54,50)" fg:x="8032" fg:w="225"/><text x="83.9690%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (95 samples, 0.99%)</title><rect x="86.0642%" y="180" width="0.9902%" height="15" fill="rgb(233,84,52)" fg:x="8257" fg:w="95"/><text x="86.3142%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (33 samples, 0.34%)</title><rect x="86.7104%" y="196" width="0.3440%" height="15" fill="rgb(207,117,47)" fg:x="8319" fg:w="33"/><text x="86.9604%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (15 samples, 0.16%)</title><rect x="87.3775%" y="196" width="0.1563%" height="15" fill="rgb(249,43,39)" fg:x="8383" fg:w="15"/><text x="87.6275%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (98 samples, 1.02%)</title><rect x="87.0544%" y="180" width="1.0215%" height="15" fill="rgb(209,38,44)" fg:x="8352" fg:w="98"/><text x="87.3044%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (52 samples, 0.54%)</title><rect x="87.5339%" y="196" width="0.5420%" height="15" fill="rgb(236,212,23)" fg:x="8398" fg:w="52"/><text x="87.7839%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.11%)</title><rect x="89.5664%" y="196" width="0.1147%" height="15" fill="rgb(242,79,21)" fg:x="8593" fg:w="11"/><text x="89.8164%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (177 samples, 1.84%)</title><rect x="88.0759%" y="180" width="1.8449%" height="15" fill="rgb(211,96,35)" fg:x="8450" fg:w="177"/><text x="88.3259%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.24%)</title><rect x="89.6811%" y="196" width="0.2397%" height="15" fill="rgb(253,215,40)" fg:x="8604" fg:w="23"/><text x="89.9311%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (64 samples, 0.67%)</title><rect x="89.9208%" y="180" width="0.6671%" height="15" fill="rgb(211,81,21)" fg:x="8627" fg:w="64"/><text x="90.1708%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (78 samples, 0.81%)</title><rect x="90.5879%" y="180" width="0.8130%" height="15" fill="rgb(208,190,38)" fg:x="8691" fg:w="78"/><text x="90.8379%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.10%)</title><rect x="93.8295%" y="196" width="0.1042%" height="15" fill="rgb(235,213,38)" fg:x="9002" fg:w="10"/><text x="94.0795%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.18%)</title><rect x="94.9343%" y="212" width="0.1772%" height="15" fill="rgb(237,122,38)" fg:x="9108" fg:w="17"/><text x="95.1843%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (122 samples, 1.27%)</title><rect x="93.9337%" y="196" width="1.2716%" height="15" fill="rgb(244,218,35)" fg:x="9012" fg:w="122"/><text x="94.1837%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (376 samples, 3.92%)</title><rect x="91.4009%" y="180" width="3.9191%" height="15" fill="rgb(240,68,47)" fg:x="8769" fg:w="376"/><text x="91.6509%" y="190.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:287) (37 samples, 0.39%)</title><rect x="95.3200%" y="180" width="0.3857%" height="15" fill="rgb(210,16,53)" fg:x="9145" fg:w="37"/><text x="95.5700%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (12 samples, 0.13%)</title><rect x="95.7056%" y="180" width="0.1251%" height="15" fill="rgb(235,124,12)" fg:x="9182" fg:w="12"/><text x="95.9556%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,094 samples, 94.79%)</title><rect x="1.1257%" y="164" width="94.7884%" height="15" fill="rgb(224,169,11)" fg:x="108" fg:w="9094"/><text x="1.3757%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>__init__ (kappybara/indexed_set.py:121) (106 samples, 1.10%)</title><rect x="95.9141%" y="164" width="1.1049%" height="15" fill="rgb(250,166,2)" fg:x="9202" fg:w="106"/><text x="96.1641%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (13 samples, 0.14%)</title><rect x="96.8835%" y="180" width="0.1355%" height="15" fill="rgb(242,216,29)" fg:x="9295" fg:w="13"/><text x="97.1335%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (9,343 samples, 97.38%)</title><rect x="1.0632%" y="148" width="97.3838%" height="15" fill="rgb(230,116,27)" fg:x="102" fg:w="9343"/><text x="1.3132%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:124) (135 samples, 1.41%)</title><rect x="97.0398%" y="164" width="1.4071%" height="15" fill="rgb(228,99,48)" fg:x="9310" fg:w="135"/><text x="97.2898%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (13 samples, 0.14%)</title><rect x="98.3114%" y="180" width="0.1355%" height="15" fill="rgb(253,11,6)" fg:x="9432" fg:w="13"/><text x="98.5614%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (9,435 samples, 98.34%)</title><rect x="1.0006%" y="116" width="98.3427%" height="15" fill="rgb(247,143,39)" fg:x="96" fg:w="9435"/><text x="1.2506%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (9,433 samples, 98.32%)</title><rect x="1.0215%" y="132" width="98.3219%" height="15" fill="rgb(236,97,10)" fg:x="98" fg:w="9433"/><text x="1.2715%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (86 samples, 0.90%)</title><rect x="98.4469%" y="148" width="0.8964%" height="15" fill="rgb(233,208,19)" fg:x="9445" fg:w="86"/><text x="98.6969%" y="158.50"></text></g><g><title>act (kappybara/system.py:66) (9,441 samples, 98.41%)</title><rect x="1.0006%" y="100" width="98.4053%" height="15" fill="rgb(216,164,2)" fg:x="96" fg:w="9441"/><text x="1.2506%" y="110.50">act (kappybara/system.py:66)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,526 samples, 99.29%)</title><rect x="0.1251%" y="68" width="99.2912%" height="15" fill="rgb(220,129,5)" fg:x="12" fg:w="9526"/><text x="0.3751%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:71) (9,496 samples, 98.98%)</title><rect x="0.4378%" y="84" width="98.9785%" height="15" fill="rgb(242,17,10)" fg:x="42" fg:w="9496"/><text x="0.6878%" y="94.50">update (kappybara/system.py:71)</text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (11 samples, 0.11%)</title><rect x="99.4267%" y="260" width="0.1147%" height="15" fill="rgb(242,107,0)" fg:x="9539" fg:w="11"/><text x="99.6767%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (11 samples, 0.11%)</title><rect x="99.4267%" y="276" width="0.1147%" height="15" fill="rgb(251,28,31)" fg:x="9539" fg:w="11"/><text x="99.6767%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (11 samples, 0.11%)</title><rect x="99.4267%" y="292" width="0.1147%" height="15" fill="rgb(233,223,10)" fg:x="9539" fg:w="11"/><text x="99.6767%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (17 samples, 0.18%)</title><rect x="99.4163%" y="68" width="0.1772%" height="15" fill="rgb(215,21,27)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (17 samples, 0.18%)</title><rect x="99.4163%" y="84" width="0.1772%" height="15" fill="rgb(232,23,21)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (17 samples, 0.18%)</title><rect x="99.4163%" y="100" width="0.1772%" height="15" fill="rgb(244,5,23)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (17 samples, 0.18%)</title><rect x="99.4163%" y="116" width="0.1772%" height="15" fill="rgb(226,81,46)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (17 samples, 0.18%)</title><rect x="99.4163%" y="132" width="0.1772%" height="15" fill="rgb(247,70,30)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.18%)</title><rect x="99.4163%" y="148" width="0.1772%" height="15" fill="rgb(212,68,19)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (17 samples, 0.18%)</title><rect x="99.4163%" y="164" width="0.1772%" height="15" fill="rgb(240,187,13)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (17 samples, 0.18%)</title><rect x="99.4163%" y="180" width="0.1772%" height="15" fill="rgb(223,113,26)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (17 samples, 0.18%)</title><rect x="99.4163%" y="196" width="0.1772%" height="15" fill="rgb(206,192,2)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (17 samples, 0.18%)</title><rect x="99.4163%" y="212" width="0.1772%" height="15" fill="rgb(241,108,4)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (17 samples, 0.18%)</title><rect x="99.4163%" y="228" width="0.1772%" height="15" fill="rgb(247,173,49)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (17 samples, 0.18%)</title><rect x="99.4163%" y="244" width="0.1772%" height="15" fill="rgb(224,114,35)" fg:x="9538" fg:w="17"/><text x="99.6663%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (15 samples, 0.16%)</title><rect x="99.5935%" y="68" width="0.1563%" height="15" fill="rgb(245,159,27)" fg:x="9555" fg:w="15"/><text x="99.8435%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (12 samples, 0.13%)</title><rect x="99.7498%" y="68" width="0.1251%" height="15" fill="rgb(245,172,44)" fg:x="9570" fg:w="12"/><text x="99.9998%" y="78.50"></text></g><g><title>all (9,594 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(236,23,11)" fg:x="0" fg:w="9594"/><text x="0.2500%" y="62.50"></text></g></svg></svg>