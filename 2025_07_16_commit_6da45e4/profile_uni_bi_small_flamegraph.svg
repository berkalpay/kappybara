<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 6da45e4</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="12254"><g><title>update (kappybara/system.py:69) (62 samples, 0.51%)</title><rect x="0.0490%" y="84" width="0.5060%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="62"/><text x="0.2990%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (61 samples, 0.50%)</title><rect x="0.0571%" y="100" width="0.4978%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="61"/><text x="0.3071%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (57 samples, 0.47%)</title><rect x="0.0898%" y="116" width="0.4652%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="57"/><text x="0.3398%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (55 samples, 0.45%)</title><rect x="0.1061%" y="132" width="0.4488%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="55"/><text x="0.3561%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (55 samples, 0.45%)</title><rect x="0.1061%" y="148" width="0.4488%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="55"/><text x="0.3561%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (55 samples, 0.45%)</title><rect x="0.1061%" y="164" width="0.4488%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="55"/><text x="0.3561%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (20 samples, 0.16%)</title><rect x="0.6447%" y="116" width="0.1632%" height="15" fill="rgb(207,160,47)" fg:x="79" fg:w="20"/><text x="0.8947%" y="126.50"></text></g><g><title>select (kappybara/rule.py:218) (26 samples, 0.21%)</title><rect x="0.8977%" y="116" width="0.2122%" height="15" fill="rgb(228,23,34)" fg:x="110" fg:w="26"/><text x="1.1477%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (63 samples, 0.51%)</title><rect x="0.6365%" y="100" width="0.5141%" height="15" fill="rgb(218,30,26)" fg:x="78" fg:w="63"/><text x="0.8865%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (21 samples, 0.17%)</title><rect x="1.2404%" y="164" width="0.1714%" height="15" fill="rgb(220,122,19)" fg:x="152" fg:w="21"/><text x="1.4904%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (44 samples, 0.36%)</title><rect x="1.2323%" y="148" width="0.3591%" height="15" fill="rgb(250,228,42)" fg:x="151" fg:w="44"/><text x="1.4823%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (21 samples, 0.17%)</title><rect x="1.4199%" y="164" width="0.1714%" height="15" fill="rgb(240,193,28)" fg:x="174" fg:w="21"/><text x="1.6699%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (64 samples, 0.52%)</title><rect x="1.6403%" y="164" width="0.5223%" height="15" fill="rgb(216,20,37)" fg:x="201" fg:w="64"/><text x="1.8903%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (16 samples, 0.13%)</title><rect x="2.0320%" y="180" width="0.1306%" height="15" fill="rgb(206,188,39)" fg:x="249" fg:w="16"/><text x="2.2820%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (27 samples, 0.22%)</title><rect x="2.3911%" y="180" width="0.2203%" height="15" fill="rgb(217,207,13)" fg:x="293" fg:w="27"/><text x="2.6411%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (23 samples, 0.19%)</title><rect x="2.6114%" y="180" width="0.1877%" height="15" fill="rgb(231,73,38)" fg:x="320" fg:w="23"/><text x="2.8614%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (16 samples, 0.13%)</title><rect x="2.7991%" y="180" width="0.1306%" height="15" fill="rgb(225,20,46)" fg:x="343" fg:w="16"/><text x="3.0491%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (41 samples, 0.33%)</title><rect x="2.9297%" y="180" width="0.3346%" height="15" fill="rgb(210,31,41)" fg:x="359" fg:w="41"/><text x="3.1797%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (228 samples, 1.86%)</title><rect x="1.5913%" y="148" width="1.8606%" height="15" fill="rgb(221,200,47)" fg:x="195" fg:w="228"/><text x="1.8413%" y="158.50">_..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (155 samples, 1.26%)</title><rect x="2.1870%" y="164" width="1.2649%" height="15" fill="rgb(226,26,5)" fg:x="268" fg:w="155"/><text x="2.4370%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (23 samples, 0.19%)</title><rect x="3.2642%" y="180" width="0.1877%" height="15" fill="rgb(249,33,26)" fg:x="400" fg:w="23"/><text x="3.5142%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (79 samples, 0.64%)</title><rect x="3.5417%" y="148" width="0.6447%" height="15" fill="rgb(235,183,28)" fg:x="434" fg:w="79"/><text x="3.7917%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (24 samples, 0.20%)</title><rect x="4.1864%" y="148" width="0.1959%" height="15" fill="rgb(221,5,38)" fg:x="513" fg:w="24"/><text x="4.4364%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (75 samples, 0.61%)</title><rect x="5.2799%" y="180" width="0.6120%" height="15" fill="rgb(247,18,42)" fg:x="647" fg:w="75"/><text x="5.5299%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (48 samples, 0.39%)</title><rect x="5.5002%" y="196" width="0.3917%" height="15" fill="rgb(241,131,45)" fg:x="674" fg:w="48"/><text x="5.7502%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (597 samples, 4.87%)</title><rect x="1.1914%" y="132" width="4.8719%" height="15" fill="rgb(249,31,29)" fg:x="146" fg:w="597"/><text x="1.4414%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (200 samples, 1.63%)</title><rect x="4.4312%" y="148" width="1.6321%" height="15" fill="rgb(225,111,53)" fg:x="543" fg:w="200"/><text x="4.6812%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (167 samples, 1.36%)</title><rect x="4.7005%" y="164" width="1.3628%" height="15" fill="rgb(238,160,17)" fg:x="576" fg:w="167"/><text x="4.9505%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (19 samples, 0.16%)</title><rect x="5.9083%" y="180" width="0.1551%" height="15" fill="rgb(214,148,48)" fg:x="724" fg:w="19"/><text x="6.1583%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (601 samples, 4.90%)</title><rect x="1.1670%" y="116" width="4.9045%" height="15" fill="rgb(232,36,49)" fg:x="143" fg:w="601"/><text x="1.4170%" y="126.50">apply_..</text></g><g><title>embeddings (kappybara/pattern.py:261) (67 samples, 0.55%)</title><rect x="6.5856%" y="180" width="0.5468%" height="15" fill="rgb(209,103,24)" fg:x="807" fg:w="67"/><text x="6.8356%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (950 samples, 7.75%)</title><rect x="7.1324%" y="180" width="7.7526%" height="15" fill="rgb(229,88,8)" fg:x="874" fg:w="950"/><text x="7.3824%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (28 samples, 0.23%)</title><rect x="14.6564%" y="196" width="0.2285%" height="15" fill="rgb(213,181,19)" fg:x="1796" fg:w="28"/><text x="14.9064%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.16%)</title><rect x="17.3902%" y="196" width="0.1551%" height="15" fill="rgb(254,191,54)" fg:x="2131" fg:w="19"/><text x="17.6402%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (362 samples, 2.95%)</title><rect x="14.8849%" y="180" width="2.9541%" height="15" fill="rgb(241,83,37)" fg:x="1824" fg:w="362"/><text x="15.1349%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.29%)</title><rect x="17.5453%" y="196" width="0.2938%" height="15" fill="rgb(233,36,39)" fg:x="2150" fg:w="36"/><text x="17.7953%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (88 samples, 0.72%)</title><rect x="17.8554%" y="180" width="0.7181%" height="15" fill="rgb(226,3,54)" fg:x="2188" fg:w="88"/><text x="18.1054%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (83 samples, 0.68%)</title><rect x="18.5735%" y="180" width="0.6773%" height="15" fill="rgb(245,192,40)" fg:x="2276" fg:w="83"/><text x="18.8235%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (30 samples, 0.24%)</title><rect x="21.6501%" y="196" width="0.2448%" height="15" fill="rgb(238,167,29)" fg:x="2653" fg:w="30"/><text x="21.9001%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (361 samples, 2.95%)</title><rect x="19.2509%" y="180" width="2.9460%" height="15" fill="rgb(232,182,51)" fg:x="2359" fg:w="361"/><text x="19.5009%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.30%)</title><rect x="21.8949%" y="196" width="0.3019%" height="15" fill="rgb(231,60,39)" fg:x="2683" fg:w="37"/><text x="22.1449%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (233 samples, 1.90%)</title><rect x="22.1968%" y="180" width="1.9014%" height="15" fill="rgb(208,69,12)" fg:x="2720" fg:w="233"/><text x="22.4468%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (22 samples, 0.18%)</title><rect x="25.9181%" y="196" width="0.1795%" height="15" fill="rgb(235,93,37)" fg:x="3176" fg:w="22"/><text x="26.1681%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (93 samples, 0.76%)</title><rect x="26.0976%" y="196" width="0.7589%" height="15" fill="rgb(213,116,39)" fg:x="3198" fg:w="93"/><text x="26.3476%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (119 samples, 0.97%)</title><rect x="28.6274%" y="212" width="0.9711%" height="15" fill="rgb(222,207,29)" fg:x="3508" fg:w="119"/><text x="28.8774%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (95 samples, 0.78%)</title><rect x="31.2225%" y="228" width="0.7753%" height="15" fill="rgb(206,96,30)" fg:x="3826" fg:w="95"/><text x="31.4725%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,012 samples, 8.26%)</title><rect x="26.8729%" y="196" width="8.2585%" height="15" fill="rgb(218,138,4)" fg:x="3293" fg:w="1012"/><text x="27.1229%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (678 samples, 5.53%)</title><rect x="29.5985%" y="212" width="5.5329%" height="15" fill="rgb(250,191,14)" fg:x="3627" fg:w="678"/><text x="29.8485%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (384 samples, 3.13%)</title><rect x="31.9977%" y="228" width="3.1337%" height="15" fill="rgb(239,60,40)" fg:x="3921" fg:w="384"/><text x="32.2477%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (130 samples, 1.06%)</title><rect x="35.1314%" y="196" width="1.0609%" height="15" fill="rgb(206,27,48)" fg:x="4305" fg:w="130"/><text x="35.3814%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (27 samples, 0.22%)</title><rect x="36.9838%" y="212" width="0.2203%" height="15" fill="rgb(225,35,8)" fg:x="4532" fg:w="27"/><text x="37.2338%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (211 samples, 1.72%)</title><rect x="36.2249%" y="196" width="1.7219%" height="15" fill="rgb(250,213,24)" fg:x="4439" fg:w="211"/><text x="36.4749%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (91 samples, 0.74%)</title><rect x="37.2042%" y="212" width="0.7426%" height="15" fill="rgb(247,123,22)" fg:x="4559" fg:w="91"/><text x="37.4542%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (187 samples, 1.53%)</title><rect x="45.7973%" y="212" width="1.5260%" height="15" fill="rgb(231,138,38)" fg:x="5612" fg:w="187"/><text x="46.0473%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (17 samples, 0.14%)</title><rect x="47.3233%" y="212" width="0.1387%" height="15" fill="rgb(231,145,46)" fg:x="5799" fg:w="17"/><text x="47.5733%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (28 samples, 0.23%)</title><rect x="48.0415%" y="228" width="0.2285%" height="15" fill="rgb(251,118,11)" fg:x="5887" fg:w="28"/><text x="48.2915%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (188 samples, 1.53%)</title><rect x="47.4621%" y="212" width="1.5342%" height="15" fill="rgb(217,147,25)" fg:x="5816" fg:w="188"/><text x="47.7121%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (89 samples, 0.73%)</title><rect x="48.2700%" y="228" width="0.7263%" height="15" fill="rgb(247,81,37)" fg:x="5915" fg:w="89"/><text x="48.5200%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (23 samples, 0.19%)</title><rect x="50.1224%" y="228" width="0.1877%" height="15" fill="rgb(209,12,38)" fg:x="6142" fg:w="23"/><text x="50.3724%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (18 samples, 0.15%)</title><rect x="52.1054%" y="244" width="0.1469%" height="15" fill="rgb(227,1,9)" fg:x="6385" fg:w="18"/><text x="52.3554%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (484 samples, 3.95%)</title><rect x="50.3101%" y="228" width="3.9497%" height="15" fill="rgb(248,47,43)" fg:x="6165" fg:w="484"/><text x="50.5601%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (246 samples, 2.01%)</title><rect x="52.2523%" y="244" width="2.0075%" height="15" fill="rgb(221,10,30)" fg:x="6403" fg:w="246"/><text x="52.5023%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (42 samples, 0.34%)</title><rect x="53.9171%" y="260" width="0.3427%" height="15" fill="rgb(210,229,1)" fg:x="6607" fg:w="42"/><text x="54.1671%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (274 samples, 2.24%)</title><rect x="54.2598%" y="228" width="2.2360%" height="15" fill="rgb(222,148,37)" fg:x="6649" fg:w="274"/><text x="54.5098%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (92 samples, 0.75%)</title><rect x="56.4958%" y="228" width="0.7508%" height="15" fill="rgb(234,67,33)" fg:x="6923" fg:w="92"/><text x="56.7458%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (21 samples, 0.17%)</title><rect x="57.2466%" y="228" width="0.1714%" height="15" fill="rgb(247,98,35)" fg:x="7015" fg:w="21"/><text x="57.4966%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,079 samples, 8.81%)</title><rect x="48.9962%" y="212" width="8.8053%" height="15" fill="rgb(247,138,52)" fg:x="6004" fg:w="1079"/><text x="49.2462%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (47 samples, 0.38%)</title><rect x="57.4180%" y="228" width="0.3835%" height="15" fill="rgb(213,79,30)" fg:x="7036" fg:w="47"/><text x="57.6680%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (14 samples, 0.11%)</title><rect x="57.8015%" y="212" width="0.1142%" height="15" fill="rgb(246,177,23)" fg:x="7083" fg:w="14"/><text x="58.0515%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (20 samples, 0.16%)</title><rect x="57.9158%" y="212" width="0.1632%" height="15" fill="rgb(230,62,27)" fg:x="7097" fg:w="20"/><text x="58.1658%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.13%)</title><rect x="58.8869%" y="228" width="0.1306%" height="15" fill="rgb(216,154,8)" fg:x="7216" fg:w="16"/><text x="59.1369%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.13%)</title><rect x="60.2742%" y="244" width="0.1306%" height="15" fill="rgb(244,35,45)" fg:x="7386" fg:w="16"/><text x="60.5242%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (306 samples, 2.50%)</title><rect x="58.0790%" y="212" width="2.4971%" height="15" fill="rgb(251,115,12)" fg:x="7117" fg:w="306"/><text x="58.3290%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (191 samples, 1.56%)</title><rect x="59.0175%" y="228" width="1.5587%" height="15" fill="rgb(240,54,50)" fg:x="7232" fg:w="191"/><text x="59.2675%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.17%)</title><rect x="60.4048%" y="244" width="0.1714%" height="15" fill="rgb(233,84,52)" fg:x="7402" fg:w="21"/><text x="60.6548%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (427 samples, 3.48%)</title><rect x="60.5761%" y="212" width="3.4846%" height="15" fill="rgb(207,117,47)" fg:x="7423" fg:w="427"/><text x="60.8261%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (276 samples, 2.25%)</title><rect x="61.8084%" y="228" width="2.2523%" height="15" fill="rgb(249,43,39)" fg:x="7574" fg:w="276"/><text x="62.0584%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (52 samples, 0.42%)</title><rect x="63.6364%" y="244" width="0.4244%" height="15" fill="rgb(209,38,44)" fg:x="7798" fg:w="52"/><text x="63.8864%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (81 samples, 0.66%)</title><rect x="64.0607%" y="212" width="0.6610%" height="15" fill="rgb(236,212,23)" fg:x="7850" fg:w="81"/><text x="64.3107%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (178 samples, 1.45%)</title><rect x="64.7380%" y="212" width="1.4526%" height="15" fill="rgb(242,79,21)" fg:x="7933" fg:w="178"/><text x="64.9880%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (76 samples, 0.62%)</title><rect x="66.1906%" y="212" width="0.6202%" height="15" fill="rgb(211,96,35)" fg:x="8111" fg:w="76"/><text x="66.4406%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (25 samples, 0.20%)</title><rect x="66.8108%" y="212" width="0.2040%" height="15" fill="rgb(253,215,40)" fg:x="8187" fg:w="25"/><text x="67.0608%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,842 samples, 31.35%)</title><rect x="37.9468%" y="196" width="31.3530%" height="15" fill="rgb(211,81,21)" fg:x="4650" fg:w="3842"/><text x="38.1968%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (280 samples, 2.28%)</title><rect x="67.0149%" y="212" width="2.2850%" height="15" fill="rgb(208,190,38)" fg:x="8212" fg:w="280"/><text x="67.2649%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,584 samples, 45.57%)</title><rect x="24.0983%" y="180" width="45.5688%" height="15" fill="rgb(235,213,38)" fg:x="2953" fg:w="5584"/><text x="24.3483%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (45 samples, 0.37%)</title><rect x="69.2998%" y="196" width="0.3672%" height="15" fill="rgb(237,122,38)" fg:x="8492" fg:w="45"/><text x="69.5498%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (13 samples, 0.11%)</title><rect x="69.6670%" y="180" width="0.1061%" height="15" fill="rgb(244,218,35)" fg:x="8537" fg:w="13"/><text x="69.9170%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (53 samples, 0.43%)</title><rect x="70.9564%" y="196" width="0.4325%" height="15" fill="rgb(240,68,47)" fg:x="8695" fg:w="53"/><text x="71.2064%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (55 samples, 0.45%)</title><rect x="72.5559%" y="212" width="0.4488%" height="15" fill="rgb(210,16,53)" fg:x="8891" fg:w="55"/><text x="72.8059%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (634 samples, 5.17%)</title><rect x="69.7976%" y="180" width="5.1738%" height="15" fill="rgb(235,124,12)" fg:x="8553" fg:w="634"/><text x="70.0476%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (439 samples, 3.58%)</title><rect x="71.3889%" y="196" width="3.5825%" height="15" fill="rgb(224,169,11)" fg:x="8748" fg:w="439"/><text x="71.6389%" y="206.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (241 samples, 1.97%)</title><rect x="73.0047%" y="212" width="1.9667%" height="15" fill="rgb(250,166,2)" fg:x="8946" fg:w="241"/><text x="73.2547%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (112 samples, 0.91%)</title><rect x="74.9714%" y="180" width="0.9140%" height="15" fill="rgb(242,216,29)" fg:x="9187" fg:w="112"/><text x="75.2214%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (42 samples, 0.34%)</title><rect x="75.5427%" y="196" width="0.3427%" height="15" fill="rgb(230,116,27)" fg:x="9257" fg:w="42"/><text x="75.7927%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (14 samples, 0.11%)</title><rect x="76.2037%" y="196" width="0.1142%" height="15" fill="rgb(228,99,48)" fg:x="9338" fg:w="14"/><text x="76.4537%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (106 samples, 0.87%)</title><rect x="75.8854%" y="180" width="0.8650%" height="15" fill="rgb(253,11,6)" fg:x="9299" fg:w="106"/><text x="76.1354%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (53 samples, 0.43%)</title><rect x="76.3179%" y="196" width="0.4325%" height="15" fill="rgb(247,143,39)" fg:x="9352" fg:w="53"/><text x="76.5679%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (190 samples, 1.55%)</title><rect x="76.7504%" y="180" width="1.5505%" height="15" fill="rgb(236,97,10)" fg:x="9405" fg:w="190"/><text x="77.0004%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.25%)</title><rect x="78.0480%" y="196" width="0.2530%" height="15" fill="rgb(233,208,19)" fg:x="9564" fg:w="31"/><text x="78.2980%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (74 samples, 0.60%)</title><rect x="78.3010%" y="180" width="0.6039%" height="15" fill="rgb(216,164,2)" fg:x="9595" fg:w="74"/><text x="78.5510%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (92 samples, 0.75%)</title><rect x="78.9048%" y="180" width="0.7508%" height="15" fill="rgb(220,129,5)" fg:x="9669" fg:w="92"/><text x="79.1548%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (126 samples, 1.03%)</title><rect x="81.2959%" y="196" width="1.0282%" height="15" fill="rgb(242,17,10)" fg:x="9962" fg:w="126"/><text x="81.5459%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="82.2181%" y="212" width="0.1061%" height="15" fill="rgb(242,107,0)" fg:x="10075" fg:w="13"/><text x="82.4681%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (338 samples, 2.76%)</title><rect x="79.6556%" y="180" width="2.7583%" height="15" fill="rgb(251,28,31)" fg:x="9761" fg:w="338"/><text x="79.9056%" y="190.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:287) (49 samples, 0.40%)</title><rect x="82.4221%" y="180" width="0.3999%" height="15" fill="rgb(233,223,10)" fg:x="10100" fg:w="49"/><text x="82.6721%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,414 samples, 76.82%)</title><rect x="6.1857%" y="164" width="76.8239%" height="15" fill="rgb(215,21,27)" fg:x="758" fg:w="9414"/><text x="6.4357%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>embeddings (kappybara/pattern.py:290) (15 samples, 0.12%)</title><rect x="82.8872%" y="180" width="0.1224%" height="15" fill="rgb(232,23,21)" fg:x="10157" fg:w="15"/><text x="83.1372%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (118 samples, 0.96%)</title><rect x="83.0096%" y="164" width="0.9630%" height="15" fill="rgb(244,5,23)" fg:x="10172" fg:w="118"/><text x="83.2596%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (161 samples, 1.31%)</title><rect x="84.0052%" y="164" width="1.3139%" height="15" fill="rgb(226,81,46)" fg:x="10294" fg:w="161"/><text x="84.2552%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,706 samples, 79.21%)</title><rect x="6.1286%" y="148" width="79.2068%" height="15" fill="rgb(247,70,30)" fg:x="751" fg:w="9706"/><text x="6.3786%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (15 samples, 0.12%)</title><rect x="85.4496%" y="164" width="0.1224%" height="15" fill="rgb(212,68,19)" fg:x="10471" fg:w="15"/><text x="85.6996%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (42 samples, 0.34%)</title><rect x="89.4728%" y="212" width="0.3427%" height="15" fill="rgb(240,187,13)" fg:x="10964" fg:w="42"/><text x="89.7228%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (160 samples, 1.31%)</title><rect x="89.8156%" y="212" width="1.3057%" height="15" fill="rgb(223,113,26)" fg:x="11006" fg:w="160"/><text x="90.0656%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.20%)</title><rect x="90.9254%" y="228" width="0.1959%" height="15" fill="rgb(206,192,2)" fg:x="11142" fg:w="24"/><text x="91.1754%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (45 samples, 0.37%)</title><rect x="91.2110%" y="212" width="0.3672%" height="15" fill="rgb(241,108,4)" fg:x="11177" fg:w="45"/><text x="91.4610%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (778 samples, 6.35%)</title><rect x="85.5721%" y="164" width="6.3489%" height="15" fill="rgb(247,173,49)" fg:x="10486" fg:w="778"/><text x="85.8221%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (585 samples, 4.77%)</title><rect x="87.1471%" y="180" width="4.7740%" height="15" fill="rgb(224,114,35)" fg:x="10679" fg:w="585"/><text x="87.3971%" y="190.50">__call..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (522 samples, 4.26%)</title><rect x="87.6612%" y="196" width="4.2598%" height="15" fill="rgb(245,159,27)" fg:x="10742" fg:w="522"/><text x="87.9112%" y="206.50">&lt;lamb..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (42 samples, 0.34%)</title><rect x="91.5783%" y="212" width="0.3427%" height="15" fill="rgb(245,172,44)" fg:x="11222" fg:w="42"/><text x="91.8283%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:61) (16 samples, 0.13%)</title><rect x="93.7163%" y="180" width="0.1306%" height="15" fill="rgb(236,23,11)" fg:x="11484" fg:w="16"/><text x="93.9663%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (150 samples, 1.22%)</title><rect x="93.8469%" y="180" width="1.2241%" height="15" fill="rgb(205,117,38)" fg:x="11500" fg:w="150"/><text x="94.0969%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (23 samples, 0.19%)</title><rect x="94.8833%" y="196" width="0.1877%" height="15" fill="rgb(237,72,25)" fg:x="11627" fg:w="23"/><text x="95.1333%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (164 samples, 1.34%)</title><rect x="95.0710%" y="180" width="1.3383%" height="15" fill="rgb(244,70,9)" fg:x="11650" fg:w="164"/><text x="95.3210%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.11%)</title><rect x="96.2951%" y="196" width="0.1142%" height="15" fill="rgb(217,125,39)" fg:x="11800" fg:w="14"/><text x="96.5451%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (58 samples, 0.47%)</title><rect x="96.4093%" y="180" width="0.4733%" height="15" fill="rgb(235,36,10)" fg:x="11814" fg:w="58"/><text x="96.6593%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (162 samples, 1.32%)</title><rect x="96.8827%" y="180" width="1.3220%" height="15" fill="rgb(251,123,47)" fg:x="11872" fg:w="162"/><text x="97.1327%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,662 samples, 13.56%)</title><rect x="85.3354%" y="148" width="13.5629%" height="15" fill="rgb(221,13,13)" fg:x="10457" fg:w="1662"/><text x="85.5854%" y="158.50">track_component (kap..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (850 samples, 6.94%)</title><rect x="91.9618%" y="164" width="6.9365%" height="15" fill="rgb(238,131,9)" fg:x="11269" fg:w="850"/><text x="92.2118%" y="174.50">create_in..</text></g><g><title>add (kappybara/indexed_set.py:70) (85 samples, 0.69%)</title><rect x="98.2047%" y="180" width="0.6937%" height="15" fill="rgb(211,50,8)" fg:x="12034" fg:w="85"/><text x="98.4547%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (12,218 samples, 99.71%)</title><rect x="0.0326%" y="68" width="99.7062%" height="15" fill="rgb(245,182,24)" fg:x="4" fg:w="12218"/><text x="0.2826%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (12,154 samples, 99.18%)</title><rect x="0.5549%" y="84" width="99.1839%" height="15" fill="rgb(242,14,37)" fg:x="68" fg:w="12154"/><text x="0.8049%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (12,081 samples, 98.59%)</title><rect x="1.1506%" y="100" width="98.5882%" height="15" fill="rgb(246,228,12)" fg:x="141" fg:w="12081"/><text x="1.4006%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,476 samples, 93.65%)</title><rect x="6.0878%" y="116" width="93.6511%" height="15" fill="rgb(213,55,15)" fg:x="746" fg:w="11476"/><text x="6.3378%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,475 samples, 93.64%)</title><rect x="6.0960%" y="132" width="93.6429%" height="15" fill="rgb(209,9,3)" fg:x="747" fg:w="11475"/><text x="6.3460%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (98 samples, 0.80%)</title><rect x="98.9391%" y="148" width="0.7997%" height="15" fill="rgb(230,59,30)" fg:x="12124" fg:w="98"/><text x="99.1891%" y="158.50"></text></g><g><title>all (12,254 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="12254"/><text x="0.2500%" y="62.50"></text></g></svg></svg>