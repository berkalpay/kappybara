<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 6da45e4</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11757"><g><title>update (kappybara/system.py:69) (23 samples, 0.20%)</title><rect x="0.0510%" y="84" width="0.1956%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="23"/><text x="0.3010%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (23 samples, 0.20%)</title><rect x="0.0510%" y="100" width="0.1956%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="23"/><text x="0.3010%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (19 samples, 0.16%)</title><rect x="0.0851%" y="116" width="0.1616%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="19"/><text x="0.3351%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (13 samples, 0.11%)</title><rect x="0.1361%" y="132" width="0.1106%" height="15" fill="rgb(248,212,6)" fg:x="16" fg:w="13"/><text x="0.3861%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (13 samples, 0.11%)</title><rect x="0.1361%" y="148" width="0.1106%" height="15" fill="rgb(208,68,35)" fg:x="16" fg:w="13"/><text x="0.3861%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (13 samples, 0.11%)</title><rect x="0.1361%" y="164" width="0.1106%" height="15" fill="rgb(232,128,0)" fg:x="16" fg:w="13"/><text x="0.3861%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (25 samples, 0.21%)</title><rect x="0.3232%" y="116" width="0.2126%" height="15" fill="rgb(207,160,47)" fg:x="38" fg:w="25"/><text x="0.5732%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (35 samples, 0.30%)</title><rect x="0.3147%" y="100" width="0.2977%" height="15" fill="rgb(228,23,34)" fg:x="37" fg:w="35"/><text x="0.5647%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (16 samples, 0.14%)</title><rect x="0.7485%" y="164" width="0.1361%" height="15" fill="rgb(218,30,26)" fg:x="88" fg:w="16"/><text x="0.9985%" y="174.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (24 samples, 0.20%)</title><rect x="0.8931%" y="164" width="0.2041%" height="15" fill="rgb(220,122,19)" fg:x="105" fg:w="24"/><text x="1.1431%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (44 samples, 0.37%)</title><rect x="0.7315%" y="148" width="0.3742%" height="15" fill="rgb(250,228,42)" fg:x="86" fg:w="44"/><text x="0.9815%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (49 samples, 0.42%)</title><rect x="1.1483%" y="164" width="0.4168%" height="15" fill="rgb(240,193,28)" fg:x="135" fg:w="49"/><text x="1.3983%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:24) (15 samples, 0.13%)</title><rect x="1.4374%" y="180" width="0.1276%" height="15" fill="rgb(216,20,37)" fg:x="169" fg:w="15"/><text x="1.6874%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (28 samples, 0.24%)</title><rect x="1.8032%" y="180" width="0.2382%" height="15" fill="rgb(206,188,39)" fg:x="212" fg:w="28"/><text x="2.0532%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (27 samples, 0.23%)</title><rect x="2.0413%" y="180" width="0.2297%" height="15" fill="rgb(217,207,13)" fg:x="240" fg:w="27"/><text x="2.2913%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (16 samples, 0.14%)</title><rect x="2.2710%" y="180" width="0.1361%" height="15" fill="rgb(231,73,38)" fg:x="267" fg:w="16"/><text x="2.5210%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (21 samples, 0.18%)</title><rect x="2.4071%" y="180" width="0.1786%" height="15" fill="rgb(225,20,46)" fg:x="283" fg:w="21"/><text x="2.6571%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (186 samples, 1.58%)</title><rect x="1.1057%" y="148" width="1.5820%" height="15" fill="rgb(210,31,41)" fg:x="130" fg:w="186"/><text x="1.3557%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:130) (131 samples, 1.11%)</title><rect x="1.5735%" y="164" width="1.1142%" height="15" fill="rgb(221,200,47)" fg:x="185" fg:w="131"/><text x="1.8235%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:70) (12 samples, 0.10%)</title><rect x="2.5857%" y="180" width="0.1021%" height="15" fill="rgb(226,26,5)" fg:x="304" fg:w="12"/><text x="2.8357%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (86 samples, 0.73%)</title><rect x="2.7558%" y="148" width="0.7315%" height="15" fill="rgb(249,33,26)" fg:x="324" fg:w="86"/><text x="3.0058%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="3.3597%" y="164" width="0.1276%" height="15" fill="rgb(235,183,28)" fg:x="395" fg:w="15"/><text x="3.6097%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (13 samples, 0.11%)</title><rect x="3.4873%" y="148" width="0.1106%" height="15" fill="rgb(221,5,38)" fg:x="410" fg:w="13"/><text x="3.7373%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (75 samples, 0.64%)</title><rect x="4.3974%" y="180" width="0.6379%" height="15" fill="rgb(247,18,42)" fg:x="517" fg:w="75"/><text x="4.6474%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (44 samples, 0.37%)</title><rect x="4.6611%" y="196" width="0.3742%" height="15" fill="rgb(241,131,45)" fg:x="548" fg:w="44"/><text x="4.9111%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:191) (538 samples, 4.58%)</title><rect x="0.7060%" y="132" width="4.5760%" height="15" fill="rgb(249,31,29)" fg:x="83" fg:w="538"/><text x="0.9560%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (194 samples, 1.65%)</title><rect x="3.6319%" y="148" width="1.6501%" height="15" fill="rgb(225,111,53)" fg:x="427" fg:w="194"/><text x="3.8819%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (170 samples, 1.45%)</title><rect x="3.8360%" y="164" width="1.4459%" height="15" fill="rgb(238,160,17)" fg:x="451" fg:w="170"/><text x="4.0860%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (28 samples, 0.24%)</title><rect x="5.0438%" y="180" width="0.2382%" height="15" fill="rgb(214,148,48)" fg:x="593" fg:w="28"/><text x="5.2938%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (549 samples, 4.67%)</title><rect x="0.6294%" y="116" width="4.6696%" height="15" fill="rgb(232,36,49)" fg:x="74" fg:w="549"/><text x="0.8794%" y="126.50">apply..</text></g><g><title>embeddings (kappybara/pattern.py:261) (83 samples, 0.71%)</title><rect x="5.8433%" y="180" width="0.7060%" height="15" fill="rgb(209,103,24)" fg:x="687" fg:w="83"/><text x="6.0933%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.11%)</title><rect x="14.1363%" y="196" width="0.1106%" height="15" fill="rgb(229,88,8)" fg:x="1662" fg:w="13"/><text x="14.3863%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (932 samples, 7.93%)</title><rect x="6.5493%" y="180" width="7.9272%" height="15" fill="rgb(213,181,19)" fg:x="770" fg:w="932"/><text x="6.7993%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.23%)</title><rect x="14.2468%" y="196" width="0.2297%" height="15" fill="rgb(254,191,54)" fg:x="1675" fg:w="27"/><text x="14.4968%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.10%)</title><rect x="17.0537%" y="196" width="0.1021%" height="15" fill="rgb(241,83,37)" fg:x="2005" fg:w="12"/><text x="17.3037%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (340 samples, 2.89%)</title><rect x="14.4765%" y="180" width="2.8919%" height="15" fill="rgb(233,36,39)" fg:x="1702" fg:w="340"/><text x="14.7265%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (25 samples, 0.21%)</title><rect x="17.1557%" y="196" width="0.2126%" height="15" fill="rgb(226,3,54)" fg:x="2017" fg:w="25"/><text x="17.4057%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (90 samples, 0.77%)</title><rect x="17.3769%" y="180" width="0.7655%" height="15" fill="rgb(245,192,40)" fg:x="2043" fg:w="90"/><text x="17.6269%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (66 samples, 0.56%)</title><rect x="18.1424%" y="180" width="0.5614%" height="15" fill="rgb(238,167,29)" fg:x="2133" fg:w="66"/><text x="18.3924%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (25 samples, 0.21%)</title><rect x="21.1363%" y="196" width="0.2126%" height="15" fill="rgb(232,182,51)" fg:x="2485" fg:w="25"/><text x="21.3863%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (346 samples, 2.94%)</title><rect x="18.7038%" y="180" width="2.9429%" height="15" fill="rgb(231,60,39)" fg:x="2199" fg:w="346"/><text x="18.9538%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.30%)</title><rect x="21.3490%" y="196" width="0.2977%" height="15" fill="rgb(208,69,12)" fg:x="2510" fg:w="35"/><text x="21.5990%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (211 samples, 1.79%)</title><rect x="21.6467%" y="180" width="1.7947%" height="15" fill="rgb(235,93,37)" fg:x="2545" fg:w="211"/><text x="21.8967%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (28 samples, 0.24%)</title><rect x="25.0659%" y="196" width="0.2382%" height="15" fill="rgb(213,116,39)" fg:x="2947" fg:w="28"/><text x="25.3159%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (85 samples, 0.72%)</title><rect x="25.3041%" y="196" width="0.7230%" height="15" fill="rgb(222,207,29)" fg:x="2975" fg:w="85"/><text x="25.5541%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (124 samples, 1.05%)</title><rect x="27.6771%" y="212" width="1.0547%" height="15" fill="rgb(206,96,30)" fg:x="3254" fg:w="124"/><text x="27.9271%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (115 samples, 0.98%)</title><rect x="30.2798%" y="228" width="0.9781%" height="15" fill="rgb(218,138,4)" fg:x="3560" fg:w="115"/><text x="30.5298%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (968 samples, 8.23%)</title><rect x="26.0611%" y="196" width="8.2334%" height="15" fill="rgb(250,191,14)" fg:x="3064" fg:w="968"/><text x="26.3111%" y="206.50">embeds_in (..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (654 samples, 5.56%)</title><rect x="28.7318%" y="212" width="5.5626%" height="15" fill="rgb(239,60,40)" fg:x="3378" fg:w="654"/><text x="28.9818%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (357 samples, 3.04%)</title><rect x="31.2580%" y="228" width="3.0365%" height="15" fill="rgb(206,27,48)" fg:x="3675" fg:w="357"/><text x="31.5080%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (125 samples, 1.06%)</title><rect x="34.2945%" y="196" width="1.0632%" height="15" fill="rgb(225,35,8)" fg:x="4032" fg:w="125"/><text x="34.5445%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (27 samples, 0.23%)</title><rect x="36.2848%" y="212" width="0.2297%" height="15" fill="rgb(250,213,24)" fg:x="4266" fg:w="27"/><text x="36.5348%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (208 samples, 1.77%)</title><rect x="35.4427%" y="196" width="1.7692%" height="15" fill="rgb(247,123,22)" fg:x="4167" fg:w="208"/><text x="35.6927%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (82 samples, 0.70%)</title><rect x="36.5144%" y="212" width="0.6975%" height="15" fill="rgb(231,138,38)" fg:x="4293" fg:w="82"/><text x="36.7644%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (217 samples, 1.85%)</title><rect x="45.1476%" y="212" width="1.8457%" height="15" fill="rgb(231,145,46)" fg:x="5308" fg:w="217"/><text x="45.3976%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (16 samples, 0.14%)</title><rect x="46.9933%" y="212" width="0.1361%" height="15" fill="rgb(251,118,11)" fg:x="5525" fg:w="16"/><text x="47.2433%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (19 samples, 0.16%)</title><rect x="47.6652%" y="228" width="0.1616%" height="15" fill="rgb(217,147,25)" fg:x="5604" fg:w="19"/><text x="47.9152%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (189 samples, 1.61%)</title><rect x="47.1294%" y="212" width="1.6076%" height="15" fill="rgb(247,81,37)" fg:x="5541" fg:w="189"/><text x="47.3794%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (107 samples, 0.91%)</title><rect x="47.8268%" y="228" width="0.9101%" height="15" fill="rgb(209,12,38)" fg:x="5623" fg:w="107"/><text x="48.0768%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (18 samples, 0.15%)</title><rect x="49.7746%" y="228" width="0.1531%" height="15" fill="rgb(227,1,9)" fg:x="5852" fg:w="18"/><text x="50.0246%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.12%)</title><rect x="51.5608%" y="244" width="0.1191%" height="15" fill="rgb(248,47,43)" fg:x="6062" fg:w="14"/><text x="51.8108%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (448 samples, 3.81%)</title><rect x="49.9277%" y="228" width="3.8105%" height="15" fill="rgb(221,10,30)" fg:x="5870" fg:w="448"/><text x="50.1777%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (242 samples, 2.06%)</title><rect x="51.6799%" y="244" width="2.0583%" height="15" fill="rgb(210,229,1)" fg:x="6076" fg:w="242"/><text x="51.9299%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (34 samples, 0.29%)</title><rect x="53.4490%" y="260" width="0.2892%" height="15" fill="rgb(222,148,37)" fg:x="6284" fg:w="34"/><text x="53.6990%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (283 samples, 2.41%)</title><rect x="53.7382%" y="228" width="2.4071%" height="15" fill="rgb(234,67,33)" fg:x="6318" fg:w="283"/><text x="53.9882%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (94 samples, 0.80%)</title><rect x="56.1453%" y="228" width="0.7995%" height="15" fill="rgb(247,98,35)" fg:x="6601" fg:w="94"/><text x="56.3953%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (18 samples, 0.15%)</title><rect x="56.9448%" y="228" width="0.1531%" height="15" fill="rgb(247,138,52)" fg:x="6695" fg:w="18"/><text x="57.1948%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (1,018 samples, 8.66%)</title><rect x="48.7369%" y="212" width="8.6587%" height="15" fill="rgb(213,79,30)" fg:x="5730" fg:w="1018"/><text x="48.9869%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (35 samples, 0.30%)</title><rect x="57.0979%" y="228" width="0.2977%" height="15" fill="rgb(246,177,23)" fg:x="6713" fg:w="35"/><text x="57.3479%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (19 samples, 0.16%)</title><rect x="57.4211%" y="212" width="0.1616%" height="15" fill="rgb(230,62,27)" fg:x="6751" fg:w="19"/><text x="57.6711%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (17 samples, 0.14%)</title><rect x="58.3822%" y="228" width="0.1446%" height="15" fill="rgb(216,154,8)" fg:x="6864" fg:w="17"/><text x="58.6322%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (292 samples, 2.48%)</title><rect x="57.5827%" y="212" width="2.4836%" height="15" fill="rgb(244,35,45)" fg:x="6770" fg:w="292"/><text x="57.8327%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (181 samples, 1.54%)</title><rect x="58.5268%" y="228" width="1.5395%" height="15" fill="rgb(251,115,12)" fg:x="6881" fg:w="181"/><text x="58.7768%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.22%)</title><rect x="59.8452%" y="244" width="0.2211%" height="15" fill="rgb(240,54,50)" fg:x="7036" fg:w="26"/><text x="60.0952%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (12 samples, 0.10%)</title><rect x="61.2231%" y="228" width="0.1021%" height="15" fill="rgb(233,84,52)" fg:x="7198" fg:w="12"/><text x="61.4731%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (410 samples, 3.49%)</title><rect x="60.0663%" y="212" width="3.4873%" height="15" fill="rgb(207,117,47)" fg:x="7062" fg:w="410"/><text x="60.3163%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (262 samples, 2.23%)</title><rect x="61.3252%" y="228" width="2.2285%" height="15" fill="rgb(249,43,39)" fg:x="7210" fg:w="262"/><text x="61.5752%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.31%)</title><rect x="63.2389%" y="244" width="0.3147%" height="15" fill="rgb(209,38,44)" fg:x="7435" fg:w="37"/><text x="63.4889%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (78 samples, 0.66%)</title><rect x="63.5536%" y="212" width="0.6634%" height="15" fill="rgb(236,212,23)" fg:x="7472" fg:w="78"/><text x="63.8036%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (153 samples, 1.30%)</title><rect x="64.2256%" y="212" width="1.3014%" height="15" fill="rgb(242,79,21)" fg:x="7551" fg:w="153"/><text x="64.4756%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (100 samples, 0.85%)</title><rect x="65.5269%" y="212" width="0.8506%" height="15" fill="rgb(211,96,35)" fg:x="7704" fg:w="100"/><text x="65.7769%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (17 samples, 0.14%)</title><rect x="66.3775%" y="212" width="0.1446%" height="15" fill="rgb(253,215,40)" fg:x="7804" fg:w="17"/><text x="66.6275%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,740 samples, 31.81%)</title><rect x="37.2119%" y="196" width="31.8108%" height="15" fill="rgb(211,81,21)" fg:x="4375" fg:w="3740"/><text x="37.4619%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (294 samples, 2.50%)</title><rect x="66.5221%" y="212" width="2.5006%" height="15" fill="rgb(208,190,38)" fg:x="7821" fg:w="294"/><text x="66.7721%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,417 samples, 46.07%)</title><rect x="23.4414%" y="180" width="46.0747%" height="15" fill="rgb(235,213,38)" fg:x="2756" fg:w="5417"/><text x="23.6914%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (58 samples, 0.49%)</title><rect x="69.0227%" y="196" width="0.4933%" height="15" fill="rgb(237,122,38)" fg:x="8115" fg:w="58"/><text x="69.2727%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (54 samples, 0.46%)</title><rect x="70.7919%" y="196" width="0.4593%" height="15" fill="rgb(244,218,35)" fg:x="8323" fg:w="54"/><text x="71.0419%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (43 samples, 0.37%)</title><rect x="72.2888%" y="212" width="0.3657%" height="15" fill="rgb(240,68,47)" fg:x="8499" fg:w="43"/><text x="72.5388%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (587 samples, 4.99%)</title><rect x="69.5671%" y="180" width="4.9928%" height="15" fill="rgb(210,16,53)" fg:x="8179" fg:w="587"/><text x="69.8171%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (389 samples, 3.31%)</title><rect x="71.2512%" y="196" width="3.3087%" height="15" fill="rgb(235,124,12)" fg:x="8377" fg:w="389"/><text x="71.5012%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (224 samples, 1.91%)</title><rect x="72.6546%" y="212" width="1.9052%" height="15" fill="rgb(224,169,11)" fg:x="8542" fg:w="224"/><text x="72.9046%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (99 samples, 0.84%)</title><rect x="74.5598%" y="180" width="0.8421%" height="15" fill="rgb(250,166,2)" fg:x="8766" fg:w="99"/><text x="74.8098%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (30 samples, 0.26%)</title><rect x="75.1467%" y="196" width="0.2552%" height="15" fill="rgb(242,216,29)" fg:x="8835" fg:w="30"/><text x="75.3967%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (18 samples, 0.15%)</title><rect x="75.6060%" y="196" width="0.1531%" height="15" fill="rgb(230,116,27)" fg:x="8889" fg:w="18"/><text x="75.8560%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (88 samples, 0.75%)</title><rect x="75.4019%" y="180" width="0.7485%" height="15" fill="rgb(228,99,48)" fg:x="8865" fg:w="88"/><text x="75.6519%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (46 samples, 0.39%)</title><rect x="75.7591%" y="196" width="0.3913%" height="15" fill="rgb(253,11,6)" fg:x="8907" fg:w="46"/><text x="76.0091%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (177 samples, 1.51%)</title><rect x="76.1504%" y="180" width="1.5055%" height="15" fill="rgb(247,143,39)" fg:x="8953" fg:w="177"/><text x="76.4004%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.19%)</title><rect x="77.4687%" y="196" width="0.1871%" height="15" fill="rgb(236,97,10)" fg:x="9108" fg:w="22"/><text x="77.7187%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (75 samples, 0.64%)</title><rect x="77.6559%" y="180" width="0.6379%" height="15" fill="rgb(233,208,19)" fg:x="9130" fg:w="75"/><text x="77.9059%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (96 samples, 0.82%)</title><rect x="78.2938%" y="180" width="0.8165%" height="15" fill="rgb(216,164,2)" fg:x="9205" fg:w="96"/><text x="78.5438%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (142 samples, 1.21%)</title><rect x="81.1006%" y="196" width="1.2078%" height="15" fill="rgb(220,129,5)" fg:x="9535" fg:w="142"/><text x="81.3506%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="82.1808%" y="212" width="0.1276%" height="15" fill="rgb(242,17,10)" fg:x="9662" fg:w="15"/><text x="82.4308%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (388 samples, 3.30%)</title><rect x="79.1103%" y="180" width="3.3002%" height="15" fill="rgb(242,107,0)" fg:x="9301" fg:w="388"/><text x="79.3603%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (30 samples, 0.26%)</title><rect x="82.4275%" y="180" width="0.2552%" height="15" fill="rgb(251,28,31)" fg:x="9691" fg:w="30"/><text x="82.6775%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (13 samples, 0.11%)</title><rect x="82.6827%" y="180" width="0.1106%" height="15" fill="rgb(233,223,10)" fg:x="9721" fg:w="13"/><text x="82.9327%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (9,102 samples, 77.42%)</title><rect x="5.4691%" y="164" width="77.4177%" height="15" fill="rgb(215,21,27)" fg:x="643" fg:w="9102"/><text x="5.7191%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__hash__ (kappybara/pattern.py:187) (13 samples, 0.11%)</title><rect x="83.6778%" y="180" width="0.1106%" height="15" fill="rgb(232,23,21)" fg:x="9838" fg:w="13"/><text x="83.9278%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (118 samples, 1.00%)</title><rect x="82.8868%" y="164" width="1.0037%" height="15" fill="rgb(244,5,23)" fg:x="9745" fg:w="118"/><text x="83.1368%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.10%)</title><rect x="83.7884%" y="180" width="0.1021%" height="15" fill="rgb(226,81,46)" fg:x="9851" fg:w="12"/><text x="84.0384%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:56) (133 samples, 1.13%)</title><rect x="83.9160%" y="164" width="1.1312%" height="15" fill="rgb(247,70,30)" fg:x="9866" fg:w="133"/><text x="84.1660%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,370 samples, 79.70%)</title><rect x="5.3840%" y="148" width="79.6972%" height="15" fill="rgb(212,68,19)" fg:x="633" fg:w="9370"/><text x="5.6340%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:126) (14 samples, 0.12%)</title><rect x="85.1153%" y="164" width="0.1191%" height="15" fill="rgb(240,187,13)" fg:x="10007" fg:w="14"/><text x="85.3653%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:101) (39 samples, 0.33%)</title><rect x="89.2575%" y="212" width="0.3317%" height="15" fill="rgb(223,113,26)" fg:x="10494" fg:w="39"/><text x="89.5075%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:102) (115 samples, 0.98%)</title><rect x="89.5892%" y="212" width="0.9781%" height="15" fill="rgb(206,192,2)" fg:x="10533" fg:w="115"/><text x="89.8392%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.11%)</title><rect x="90.4567%" y="228" width="0.1106%" height="15" fill="rgb(241,108,4)" fg:x="10635" fg:w="13"/><text x="90.7067%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:104) (12 samples, 0.10%)</title><rect x="90.5673%" y="212" width="0.1021%" height="15" fill="rgb(247,173,49)" fg:x="10648" fg:w="12"/><text x="90.8173%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:105) (21 samples, 0.18%)</title><rect x="90.6694%" y="212" width="0.1786%" height="15" fill="rgb(224,114,35)" fg:x="10660" fg:w="21"/><text x="90.9194%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:127) (724 samples, 6.16%)</title><rect x="85.2343%" y="164" width="6.1580%" height="15" fill="rgb(245,159,27)" fg:x="10021" fg:w="724"/><text x="85.4843%" y="174.50">create_i..</text></g><g><title>__call__ (kappybara/indexed_set.py:24) (518 samples, 4.41%)</title><rect x="86.9865%" y="180" width="4.4059%" height="15" fill="rgb(245,172,44)" fg:x="10227" fg:w="518"/><text x="87.2365%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (467 samples, 3.97%)</title><rect x="87.4203%" y="196" width="3.9721%" height="15" fill="rgb(236,23,11)" fg:x="10278" fg:w="467"/><text x="87.6703%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:106) (64 samples, 0.54%)</title><rect x="90.8480%" y="212" width="0.5444%" height="15" fill="rgb(205,117,38)" fg:x="10681" fg:w="64"/><text x="91.0980%" y="222.50"></text></g><g><title>add (kappybara/indexed_set.py:62) (161 samples, 1.37%)</title><rect x="93.2551%" y="180" width="1.3694%" height="15" fill="rgb(237,72,25)" fg:x="10964" fg:w="161"/><text x="93.5051%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (38 samples, 0.32%)</title><rect x="94.3013%" y="196" width="0.3232%" height="15" fill="rgb(244,70,9)" fg:x="11087" fg:w="38"/><text x="94.5513%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:63) (177 samples, 1.51%)</title><rect x="94.6245%" y="180" width="1.5055%" height="15" fill="rgb(217,125,39)" fg:x="11125" fg:w="177"/><text x="94.8745%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:66) (45 samples, 0.38%)</title><rect x="96.1300%" y="180" width="0.3828%" height="15" fill="rgb(235,36,10)" fg:x="11302" fg:w="45"/><text x="96.3800%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:67) (188 samples, 1.60%)</title><rect x="96.5127%" y="180" width="1.5990%" height="15" fill="rgb(251,123,47)" fg:x="11347" fg:w="188"/><text x="96.7627%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.12%)</title><rect x="97.9927%" y="196" width="0.1191%" height="15" fill="rgb(221,13,13)" fg:x="11521" fg:w="14"/><text x="98.2427%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,596 samples, 13.57%)</title><rect x="85.0812%" y="148" width="13.5749%" height="15" fill="rgb(238,131,9)" fg:x="10003" fg:w="1596"/><text x="85.3312%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:130) (847 samples, 7.20%)</title><rect x="91.4519%" y="164" width="7.2042%" height="15" fill="rgb(211,50,8)" fg:x="10752" fg:w="847"/><text x="91.7019%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:70) (64 samples, 0.54%)</title><rect x="98.1118%" y="180" width="0.5444%" height="15" fill="rgb(245,182,24)" fg:x="11535" fg:w="64"/><text x="98.3618%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (11,634 samples, 98.95%)</title><rect x="0.6124%" y="100" width="98.9538%" height="15" fill="rgb(242,14,37)" fg:x="72" fg:w="11634"/><text x="0.8624%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,075 samples, 94.20%)</title><rect x="5.3670%" y="116" width="94.1992%" height="15" fill="rgb(246,228,12)" fg:x="631" fg:w="11075"/><text x="5.6170%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,075 samples, 94.20%)</title><rect x="5.3670%" y="132" width="94.1992%" height="15" fill="rgb(213,55,15)" fg:x="631" fg:w="11075"/><text x="5.6170%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (99 samples, 0.84%)</title><rect x="98.7242%" y="148" width="0.8421%" height="15" fill="rgb(209,9,3)" fg:x="11607" fg:w="99"/><text x="98.9742%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (11,702 samples, 99.53%)</title><rect x="0.0510%" y="68" width="99.5322%" height="15" fill="rgb(230,59,30)" fg:x="6" fg:w="11702"/><text x="0.3010%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,679 samples, 99.34%)</title><rect x="0.2467%" y="84" width="99.3366%" height="15" fill="rgb(209,121,21)" fg:x="29" fg:w="11679"/><text x="0.4967%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:98) (14 samples, 0.12%)</title><rect x="99.6513%" y="68" width="0.1191%" height="15" fill="rgb(220,109,13)" fg:x="11716" fg:w="14"/><text x="99.9013%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (15 samples, 0.13%)</title><rect x="99.7703%" y="68" width="0.1276%" height="15" fill="rgb(232,18,1)" fg:x="11730" fg:w="15"/><text x="100.0203%" y="78.50"></text></g><g><title>all (11,757 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(215,41,42)" fg:x="0" fg:w="11757"/><text x="0.2500%" y="62.50"></text></g></svg></svg>