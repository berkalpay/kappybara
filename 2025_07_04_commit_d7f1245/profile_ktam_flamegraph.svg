<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="474" onload="init(evt)" viewBox="0 0 1200 474" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="474" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit d7f1245</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="463.00"> </text><svg id="frames" x="10" width="1180" total_samples="2503"><g><title>&lt;module&gt; (profile_ktam.py:1) (4 samples, 0.16%)</title><rect x="0.0000%" y="68" width="0.1598%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (4 samples, 0.16%)</title><rect x="0.0000%" y="84" width="0.1598%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="4"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (4 samples, 0.16%)</title><rect x="0.0000%" y="100" width="0.1598%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (4 samples, 0.16%)</title><rect x="0.0000%" y="116" width="0.1598%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="4"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (4 samples, 0.16%)</title><rect x="0.0000%" y="132" width="0.1598%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="4"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (4 samples, 0.16%)</title><rect x="0.0000%" y="148" width="0.1598%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="4"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/mixture.py:5) (3 samples, 0.12%)</title><rect x="0.0400%" y="164" width="0.1199%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="3"/><text x="0.2900%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="0.0400%" y="180" width="0.1199%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="3"/><text x="0.2900%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="0.0400%" y="196" width="0.1199%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="3"/><text x="0.2900%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="0.0400%" y="212" width="0.1199%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="3"/><text x="0.2900%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="0.0400%" y="228" width="0.1199%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="3"/><text x="0.2900%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="0.0400%" y="244" width="0.1199%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="3"/><text x="0.2900%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/pattern.py:5) (3 samples, 0.12%)</title><rect x="0.0400%" y="260" width="0.1199%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="3"/><text x="0.2900%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="0.0400%" y="276" width="0.1199%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="3"/><text x="0.2900%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="0.0400%" y="292" width="0.1199%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="3"/><text x="0.2900%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="0.0400%" y="308" width="0.1199%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="3"/><text x="0.2900%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="0.0400%" y="324" width="0.1199%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="3"/><text x="0.2900%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="0.0400%" y="340" width="0.1199%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="3"/><text x="0.2900%" y="350.50"></text></g><g><title>&lt;module&gt; (kappybara/utils.py:1) (3 samples, 0.12%)</title><rect x="0.0400%" y="356" width="0.1199%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="3"/><text x="0.2900%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="0.0400%" y="372" width="0.1199%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="3"/><text x="0.2900%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="0.0400%" y="388" width="0.1199%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="3"/><text x="0.2900%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="0.0400%" y="404" width="0.1199%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="3"/><text x="0.2900%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="0.0400%" y="420" width="0.1199%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="3"/><text x="0.2900%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="0.0400%" y="436" width="0.1199%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="3"/><text x="0.2900%" y="446.50"></text></g><g><title>update (kappybara/system.py:69) (7 samples, 0.28%)</title><rect x="0.3596%" y="84" width="0.2797%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="7"/><text x="0.6096%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (7 samples, 0.28%)</title><rect x="0.3596%" y="100" width="0.2797%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="7"/><text x="0.6096%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (6 samples, 0.24%)</title><rect x="0.3995%" y="116" width="0.2397%" height="15" fill="rgb(225,111,53)" fg:x="10" fg:w="6"/><text x="0.6495%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (3 samples, 0.12%)</title><rect x="0.5194%" y="132" width="0.1199%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="3"/><text x="0.7694%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (3 samples, 0.12%)</title><rect x="0.5194%" y="148" width="0.1199%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="3"/><text x="0.7694%" y="158.50"></text></g><g><title>act (kappybara/system.py:63) (8 samples, 0.32%)</title><rect x="0.7990%" y="100" width="0.3196%" height="15" fill="rgb(232,36,49)" fg:x="20" fg:w="8"/><text x="1.0490%" y="110.50"></text></g><g><title>select (kappybara/rule.py:90) (5 samples, 0.20%)</title><rect x="0.9189%" y="116" width="0.1998%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="5"/><text x="1.1689%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (13 samples, 0.52%)</title><rect x="1.4383%" y="180" width="0.5194%" height="15" fill="rgb(229,88,8)" fg:x="36" fg:w="13"/><text x="1.6883%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (4 samples, 0.16%)</title><rect x="11.9057%" y="196" width="0.1598%" height="15" fill="rgb(213,181,19)" fg:x="298" fg:w="4"/><text x="12.1557%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (259 samples, 10.35%)</title><rect x="1.9577%" y="180" width="10.3476%" height="15" fill="rgb(254,191,54)" fg:x="49" fg:w="259"/><text x="2.2077%" y="190.50">embeddings (kap..</text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.24%)</title><rect x="12.0655%" y="196" width="0.2397%" height="15" fill="rgb(241,83,37)" fg:x="302" fg:w="6"/><text x="12.3155%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.20%)</title><rect x="15.3815%" y="196" width="0.1998%" height="15" fill="rgb(233,36,39)" fg:x="385" fg:w="5"/><text x="15.6315%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (85 samples, 3.40%)</title><rect x="12.3052%" y="180" width="3.3959%" height="15" fill="rgb(226,3,54)" fg:x="308" fg:w="85"/><text x="12.5552%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (3 samples, 0.12%)</title><rect x="15.5813%" y="196" width="0.1199%" height="15" fill="rgb(245,192,40)" fg:x="390" fg:w="3"/><text x="15.8313%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (21 samples, 0.84%)</title><rect x="15.7811%" y="180" width="0.8390%" height="15" fill="rgb(238,167,29)" fg:x="395" fg:w="21"/><text x="16.0311%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (19 samples, 0.76%)</title><rect x="16.6201%" y="180" width="0.7591%" height="15" fill="rgb(232,182,51)" fg:x="416" fg:w="19"/><text x="16.8701%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (89 samples, 3.56%)</title><rect x="17.3791%" y="180" width="3.5557%" height="15" fill="rgb(231,60,39)" fg:x="435" fg:w="89"/><text x="17.6291%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.20%)</title><rect x="20.7351%" y="196" width="0.1998%" height="15" fill="rgb(208,69,12)" fg:x="519" fg:w="5"/><text x="20.9851%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (67 samples, 2.68%)</title><rect x="20.9349%" y="180" width="2.6768%" height="15" fill="rgb(235,93,37)" fg:x="524" fg:w="67"/><text x="21.1849%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:173) (20 samples, 0.80%)</title><rect x="26.2885%" y="196" width="0.7990%" height="15" fill="rgb(213,116,39)" fg:x="658" fg:w="20"/><text x="26.5385%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (32 samples, 1.28%)</title><rect x="29.4846%" y="212" width="1.2785%" height="15" fill="rgb(222,207,29)" fg:x="738" fg:w="32"/><text x="29.7346%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (18 samples, 0.72%)</title><rect x="33.7994%" y="228" width="0.7191%" height="15" fill="rgb(206,96,30)" fg:x="846" fg:w="18"/><text x="34.0494%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (291 samples, 11.63%)</title><rect x="27.1674%" y="196" width="11.6260%" height="15" fill="rgb(218,138,4)" fg:x="680" fg:w="291"/><text x="27.4174%" y="206.50">embeds_in (kappyb..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (201 samples, 8.03%)</title><rect x="30.7631%" y="212" width="8.0304%" height="15" fill="rgb(250,191,14)" fg:x="770" fg:w="201"/><text x="31.0131%" y="222.50">__iter__ (k..</text></g><g><title>sites (kappybara/pattern.py:113) (107 samples, 4.27%)</title><rect x="34.5186%" y="228" width="4.2749%" height="15" fill="rgb(239,60,40)" fg:x="864" fg:w="107"/><text x="34.7686%" y="238.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (35 samples, 1.40%)</title><rect x="38.7934%" y="196" width="1.3983%" height="15" fill="rgb(206,27,48)" fg:x="971" fg:w="35"/><text x="39.0434%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3 samples, 0.12%)</title><rect x="40.1918%" y="196" width="0.1199%" height="15" fill="rgb(225,35,8)" fg:x="1006" fg:w="3"/><text x="40.4418%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (9 samples, 0.36%)</title><rect x="41.1506%" y="212" width="0.3596%" height="15" fill="rgb(250,213,24)" fg:x="1030" fg:w="9"/><text x="41.4006%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (45 samples, 1.80%)</title><rect x="40.3116%" y="196" width="1.7978%" height="15" fill="rgb(247,123,22)" fg:x="1009" fg:w="45"/><text x="40.5616%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (15 samples, 0.60%)</title><rect x="41.5102%" y="212" width="0.5993%" height="15" fill="rgb(231,138,38)" fg:x="1039" fg:w="15"/><text x="41.7602%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (39 samples, 1.56%)</title><rect x="52.9764%" y="212" width="1.5581%" height="15" fill="rgb(231,145,46)" fg:x="1326" fg:w="39"/><text x="53.2264%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (3 samples, 0.12%)</title><rect x="54.5346%" y="212" width="0.1199%" height="15" fill="rgb(251,118,11)" fg:x="1365" fg:w="3"/><text x="54.7846%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (6 samples, 0.24%)</title><rect x="55.1738%" y="228" width="0.2397%" height="15" fill="rgb(217,147,25)" fg:x="1381" fg:w="6"/><text x="55.4238%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (46 samples, 1.84%)</title><rect x="54.6544%" y="212" width="1.8378%" height="15" fill="rgb(247,81,37)" fg:x="1368" fg:w="46"/><text x="54.9044%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (27 samples, 1.08%)</title><rect x="55.4135%" y="228" width="1.0787%" height="15" fill="rgb(209,12,38)" fg:x="1387" fg:w="27"/><text x="55.6635%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (3 samples, 0.12%)</title><rect x="57.8106%" y="228" width="0.1199%" height="15" fill="rgb(227,1,9)" fg:x="1447" fg:w="3"/><text x="58.0606%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (4 samples, 0.16%)</title><rect x="59.6884%" y="244" width="0.1598%" height="15" fill="rgb(248,47,43)" fg:x="1494" fg:w="4"/><text x="59.9384%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (114 samples, 4.55%)</title><rect x="57.9305%" y="228" width="4.5545%" height="15" fill="rgb(221,10,30)" fg:x="1450" fg:w="114"/><text x="58.1805%" y="238.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (66 samples, 2.64%)</title><rect x="59.8482%" y="244" width="2.6368%" height="15" fill="rgb(210,229,1)" fg:x="1498" fg:w="66"/><text x="60.0982%" y="254.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.24%)</title><rect x="62.2453%" y="260" width="0.2397%" height="15" fill="rgb(222,148,37)" fg:x="1558" fg:w="6"/><text x="62.4953%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (54 samples, 2.16%)</title><rect x="62.4850%" y="228" width="2.1574%" height="15" fill="rgb(234,67,33)" fg:x="1564" fg:w="54"/><text x="62.7350%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (32 samples, 1.28%)</title><rect x="64.6424%" y="228" width="1.2785%" height="15" fill="rgb(247,98,35)" fg:x="1618" fg:w="32"/><text x="64.8924%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (5 samples, 0.20%)</title><rect x="65.9209%" y="228" width="0.1998%" height="15" fill="rgb(247,138,52)" fg:x="1650" fg:w="5"/><text x="66.1709%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (248 samples, 9.91%)</title><rect x="56.4922%" y="212" width="9.9081%" height="15" fill="rgb(213,79,30)" fg:x="1414" fg:w="248"/><text x="56.7422%" y="222.50">embeds_in (kap..</text></g><g><title>coupled (kappybara/pattern.py:66) (7 samples, 0.28%)</title><rect x="66.1207%" y="228" width="0.2797%" height="15" fill="rgb(246,177,23)" fg:x="1655" fg:w="7"/><text x="66.3707%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (3 samples, 0.12%)</title><rect x="66.4003%" y="212" width="0.1199%" height="15" fill="rgb(230,62,27)" fg:x="1662" fg:w="3"/><text x="66.6503%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (6 samples, 0.24%)</title><rect x="66.5202%" y="212" width="0.2397%" height="15" fill="rgb(216,154,8)" fg:x="1665" fg:w="6"/><text x="66.7702%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (4 samples, 0.16%)</title><rect x="67.5989%" y="228" width="0.1598%" height="15" fill="rgb(244,35,45)" fg:x="1692" fg:w="4"/><text x="67.8489%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="69.4766%" y="244" width="0.1199%" height="15" fill="rgb(251,115,12)" fg:x="1739" fg:w="3"/><text x="69.7266%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (78 samples, 3.12%)</title><rect x="66.7599%" y="212" width="3.1163%" height="15" fill="rgb(240,54,50)" fg:x="1671" fg:w="78"/><text x="67.0099%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (53 samples, 2.12%)</title><rect x="67.7587%" y="228" width="2.1175%" height="15" fill="rgb(233,84,52)" fg:x="1696" fg:w="53"/><text x="68.0087%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.28%)</title><rect x="69.5965%" y="244" width="0.2797%" height="15" fill="rgb(207,117,47)" fg:x="1742" fg:w="7"/><text x="69.8465%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (125 samples, 4.99%)</title><rect x="69.8761%" y="212" width="4.9940%" height="15" fill="rgb(249,43,39)" fg:x="1749" fg:w="125"/><text x="70.1261%" y="222.50">embeds..</text></g><g><title>__eq__ (kappybara/utils.py:33) (79 samples, 3.16%)</title><rect x="71.7139%" y="228" width="3.1562%" height="15" fill="rgb(209,38,44)" fg:x="1795" fg:w="79"/><text x="71.9639%" y="238.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.60%)</title><rect x="74.2709%" y="244" width="0.5993%" height="15" fill="rgb(236,212,23)" fg:x="1859" fg:w="15"/><text x="74.5209%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (24 samples, 0.96%)</title><rect x="74.8702%" y="212" width="0.9588%" height="15" fill="rgb(242,79,21)" fg:x="1874" fg:w="24"/><text x="75.1202%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (49 samples, 1.96%)</title><rect x="75.8290%" y="212" width="1.9577%" height="15" fill="rgb(211,96,35)" fg:x="1898" fg:w="49"/><text x="76.0790%" y="222.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:85) (16 samples, 0.64%)</title><rect x="77.7867%" y="212" width="0.6392%" height="15" fill="rgb(253,215,40)" fg:x="1947" fg:w="16"/><text x="78.0367%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (6 samples, 0.24%)</title><rect x="78.4259%" y="212" width="0.2397%" height="15" fill="rgb(211,81,21)" fg:x="1963" fg:w="6"/><text x="78.6759%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (984 samples, 39.31%)</title><rect x="42.1095%" y="196" width="39.3128%" height="15" fill="rgb(208,190,38)" fg:x="1054" fg:w="984"/><text x="42.3595%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (69 samples, 2.76%)</title><rect x="78.6656%" y="212" width="2.7567%" height="15" fill="rgb(235,213,38)" fg:x="1969" fg:w="69"/><text x="78.9156%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (1,452 samples, 58.01%)</title><rect x="23.6117%" y="180" width="58.0104%" height="15" fill="rgb(237,122,38)" fg:x="591" fg:w="1452"/><text x="23.8617%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (5 samples, 0.20%)</title><rect x="81.4223%" y="196" width="0.1998%" height="15" fill="rgb(244,218,35)" fg:x="2038" fg:w="5"/><text x="81.6723%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (15 samples, 0.60%)</title><rect x="83.0204%" y="196" width="0.5993%" height="15" fill="rgb(240,68,47)" fg:x="2078" fg:w="15"/><text x="83.2704%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (11 samples, 0.44%)</title><rect x="84.6185%" y="212" width="0.4395%" height="15" fill="rgb(210,16,53)" fg:x="2118" fg:w="11"/><text x="84.8685%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (128 samples, 5.11%)</title><rect x="81.7819%" y="180" width="5.1139%" height="15" fill="rgb(235,124,12)" fg:x="2047" fg:w="128"/><text x="82.0319%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (82 samples, 3.28%)</title><rect x="83.6197%" y="196" width="3.2761%" height="15" fill="rgb(224,169,11)" fg:x="2093" fg:w="82"/><text x="83.8697%" y="206.50">__i..</text></g><g><title>sites (kappybara/pattern.py:113) (46 samples, 1.84%)</title><rect x="85.0579%" y="212" width="1.8378%" height="15" fill="rgb(250,166,2)" fg:x="2129" fg:w="46"/><text x="85.3079%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (26 samples, 1.04%)</title><rect x="86.8957%" y="180" width="1.0388%" height="15" fill="rgb(242,216,29)" fg:x="2175" fg:w="26"/><text x="87.1457%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (6 samples, 0.24%)</title><rect x="87.6948%" y="196" width="0.2397%" height="15" fill="rgb(230,116,27)" fg:x="2195" fg:w="6"/><text x="87.9448%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (15 samples, 0.60%)</title><rect x="87.9345%" y="180" width="0.5993%" height="15" fill="rgb(228,99,48)" fg:x="2201" fg:w="15"/><text x="88.1845%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (11 samples, 0.44%)</title><rect x="88.0943%" y="196" width="0.4395%" height="15" fill="rgb(253,11,6)" fg:x="2205" fg:w="11"/><text x="88.3443%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (47 samples, 1.88%)</title><rect x="88.5338%" y="180" width="1.8777%" height="15" fill="rgb(247,143,39)" fg:x="2216" fg:w="47"/><text x="88.7838%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.28%)</title><rect x="90.1318%" y="196" width="0.2797%" height="15" fill="rgb(236,97,10)" fg:x="2256" fg:w="7"/><text x="90.3818%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (16 samples, 0.64%)</title><rect x="90.4115%" y="180" width="0.6392%" height="15" fill="rgb(233,208,19)" fg:x="2263" fg:w="16"/><text x="90.6615%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (23 samples, 0.92%)</title><rect x="91.0507%" y="180" width="0.9189%" height="15" fill="rgb(216,164,2)" fg:x="2279" fg:w="23"/><text x="91.3007%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (30 samples, 1.20%)</title><rect x="94.4467%" y="196" width="1.1986%" height="15" fill="rgb(220,129,5)" fg:x="2364" fg:w="30"/><text x="94.6967%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (95 samples, 3.80%)</title><rect x="91.9696%" y="180" width="3.7954%" height="15" fill="rgb(242,17,10)" fg:x="2302" fg:w="95"/><text x="92.2196%" y="190.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:287) (8 samples, 0.32%)</title><rect x="95.7651%" y="180" width="0.3196%" height="15" fill="rgb(242,107,0)" fg:x="2397" fg:w="8"/><text x="96.0151%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (4 samples, 0.16%)</title><rect x="96.0847%" y="180" width="0.1598%" height="15" fill="rgb(251,28,31)" fg:x="2405" fg:w="4"/><text x="96.3347%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (2,385 samples, 95.29%)</title><rect x="1.1187%" y="164" width="95.2857%" height="15" fill="rgb(233,223,10)" fg:x="28" fg:w="2385"/><text x="1.3687%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>embeddings (kappybara/pattern.py:290) (4 samples, 0.16%)</title><rect x="96.2445%" y="180" width="0.1598%" height="15" fill="rgb(215,21,27)" fg:x="2409" fg:w="4"/><text x="96.4945%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (26 samples, 1.04%)</title><rect x="96.4043%" y="164" width="1.0388%" height="15" fill="rgb(232,23,21)" fg:x="2413" fg:w="26"/><text x="96.6543%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (2,433 samples, 97.20%)</title><rect x="1.1187%" y="148" width="97.2034%" height="15" fill="rgb(244,5,23)" fg:x="28" fg:w="2433"/><text x="1.3687%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (21 samples, 0.84%)</title><rect x="97.4830%" y="164" width="0.8390%" height="15" fill="rgb(226,81,46)" fg:x="2440" fg:w="21"/><text x="97.7330%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (6 samples, 0.24%)</title><rect x="98.0823%" y="180" width="0.2397%" height="15" fill="rgb(247,70,30)" fg:x="2455" fg:w="6"/><text x="98.3323%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:101) (2,451 samples, 97.92%)</title><rect x="1.1187%" y="116" width="97.9225%" height="15" fill="rgb(212,68,19)" fg:x="28" fg:w="2451"/><text x="1.3687%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (2,451 samples, 97.92%)</title><rect x="1.1187%" y="132" width="97.9225%" height="15" fill="rgb(240,187,13)" fg:x="28" fg:w="2451"/><text x="1.3687%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (18 samples, 0.72%)</title><rect x="98.3220%" y="148" width="0.7191%" height="15" fill="rgb(223,113,26)" fg:x="2461" fg:w="18"/><text x="98.5720%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (2,452 samples, 97.96%)</title><rect x="1.1187%" y="100" width="97.9624%" height="15" fill="rgb(206,192,2)" fg:x="28" fg:w="2452"/><text x="1.3687%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (2,473 samples, 98.80%)</title><rect x="0.3196%" y="68" width="98.8014%" height="15" fill="rgb(241,108,4)" fg:x="8" fg:w="2473"/><text x="0.5696%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (2,465 samples, 98.48%)</title><rect x="0.6392%" y="84" width="98.4818%" height="15" fill="rgb(247,173,49)" fg:x="16" fg:w="2465"/><text x="0.8892%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (kappybara/grammar.py:1) (4 samples, 0.16%)</title><rect x="99.1211%" y="260" width="0.1598%" height="15" fill="rgb(224,114,35)" fg:x="2481" fg:w="4"/><text x="99.3711%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (4 samples, 0.16%)</title><rect x="99.1211%" y="276" width="0.1598%" height="15" fill="rgb(245,159,27)" fg:x="2481" fg:w="4"/><text x="99.3711%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (4 samples, 0.16%)</title><rect x="99.1211%" y="292" width="0.1598%" height="15" fill="rgb(245,172,44)" fg:x="2481" fg:w="4"/><text x="99.3711%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (4 samples, 0.16%)</title><rect x="99.1211%" y="308" width="0.1598%" height="15" fill="rgb(236,23,11)" fg:x="2481" fg:w="4"/><text x="99.3711%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (4 samples, 0.16%)</title><rect x="99.1211%" y="324" width="0.1598%" height="15" fill="rgb(205,117,38)" fg:x="2481" fg:w="4"/><text x="99.3711%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (4 samples, 0.16%)</title><rect x="99.1211%" y="340" width="0.1598%" height="15" fill="rgb(237,72,25)" fg:x="2481" fg:w="4"/><text x="99.3711%" y="350.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (3 samples, 0.12%)</title><rect x="99.2809%" y="260" width="0.1199%" height="15" fill="rgb(244,70,9)" fg:x="2485" fg:w="3"/><text x="99.5309%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (3 samples, 0.12%)</title><rect x="99.2809%" y="276" width="0.1199%" height="15" fill="rgb(217,125,39)" fg:x="2485" fg:w="3"/><text x="99.5309%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (3 samples, 0.12%)</title><rect x="99.2809%" y="292" width="0.1199%" height="15" fill="rgb(235,36,10)" fg:x="2485" fg:w="3"/><text x="99.5309%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (12 samples, 0.48%)</title><rect x="99.1211%" y="68" width="0.4794%" height="15" fill="rgb(251,123,47)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.48%)</title><rect x="99.1211%" y="84" width="0.4794%" height="15" fill="rgb(221,13,13)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.48%)</title><rect x="99.1211%" y="100" width="0.4794%" height="15" fill="rgb(238,131,9)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.48%)</title><rect x="99.1211%" y="116" width="0.4794%" height="15" fill="rgb(211,50,8)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.48%)</title><rect x="99.1211%" y="132" width="0.4794%" height="15" fill="rgb(245,182,24)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.48%)</title><rect x="99.1211%" y="148" width="0.4794%" height="15" fill="rgb(242,14,37)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (12 samples, 0.48%)</title><rect x="99.1211%" y="164" width="0.4794%" height="15" fill="rgb(246,228,12)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.48%)</title><rect x="99.1211%" y="180" width="0.4794%" height="15" fill="rgb(213,55,15)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.48%)</title><rect x="99.1211%" y="196" width="0.4794%" height="15" fill="rgb(209,9,3)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.48%)</title><rect x="99.1211%" y="212" width="0.4794%" height="15" fill="rgb(230,59,30)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.48%)</title><rect x="99.1211%" y="228" width="0.4794%" height="15" fill="rgb(209,121,21)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.48%)</title><rect x="99.1211%" y="244" width="0.4794%" height="15" fill="rgb(220,109,13)" fg:x="2481" fg:w="12"/><text x="99.3711%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (5 samples, 0.20%)</title><rect x="99.4007%" y="260" width="0.1998%" height="15" fill="rgb(232,18,1)" fg:x="2488" fg:w="5"/><text x="99.6507%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (5 samples, 0.20%)</title><rect x="99.4007%" y="276" width="0.1998%" height="15" fill="rgb(215,41,42)" fg:x="2488" fg:w="5"/><text x="99.6507%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (5 samples, 0.20%)</title><rect x="99.4007%" y="292" width="0.1998%" height="15" fill="rgb(224,123,36)" fg:x="2488" fg:w="5"/><text x="99.6507%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (5 samples, 0.20%)</title><rect x="99.4007%" y="308" width="0.1998%" height="15" fill="rgb(240,125,3)" fg:x="2488" fg:w="5"/><text x="99.6507%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (5 samples, 0.20%)</title><rect x="99.4007%" y="324" width="0.1998%" height="15" fill="rgb(205,98,50)" fg:x="2488" fg:w="5"/><text x="99.6507%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (5 samples, 0.20%)</title><rect x="99.4007%" y="340" width="0.1998%" height="15" fill="rgb(205,185,37)" fg:x="2488" fg:w="5"/><text x="99.6507%" y="350.50"></text></g><g><title>&lt;module&gt; (lark/__init__.py:11) (3 samples, 0.12%)</title><rect x="99.4806%" y="356" width="0.1199%" height="15" fill="rgb(238,207,15)" fg:x="2490" fg:w="3"/><text x="99.7306%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="99.4806%" y="372" width="0.1199%" height="15" fill="rgb(213,199,42)" fg:x="2490" fg:w="3"/><text x="99.7306%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="99.4806%" y="388" width="0.1199%" height="15" fill="rgb(235,201,11)" fg:x="2490" fg:w="3"/><text x="99.7306%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="99.4806%" y="404" width="0.1199%" height="15" fill="rgb(207,46,11)" fg:x="2490" fg:w="3"/><text x="99.7306%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="99.4806%" y="420" width="0.1199%" height="15" fill="rgb(241,35,35)" fg:x="2490" fg:w="3"/><text x="99.7306%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="99.4806%" y="436" width="0.1199%" height="15" fill="rgb(243,32,47)" fg:x="2490" fg:w="3"/><text x="99.7306%" y="446.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (4 samples, 0.16%)</title><rect x="99.6804%" y="68" width="0.1598%" height="15" fill="rgb(247,202,23)" fg:x="2495" fg:w="4"/><text x="99.9304%" y="78.50"></text></g><g><title>all (2,503 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="2503"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:113) (4 samples, 0.16%)</title><rect x="99.8402%" y="68" width="0.1598%" height="15" fill="rgb(243,110,44)" fg:x="2499" fg:w="4"/><text x="100.0902%" y="78.50"></text></g></svg></svg>