<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="474" onload="init(evt)" viewBox="0 0 1200 474" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="474" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 4f6d739</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="463.00"> </text><svg id="frames" x="10" width="1180" total_samples="4565"><g><title>&lt;module&gt; (kappybara/grammar.py:35) (5 samples, 0.11%)</title><rect x="0.0438%" y="260" width="0.1095%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="5"/><text x="0.2938%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (5 samples, 0.11%)</title><rect x="0.0438%" y="276" width="0.1095%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="5"/><text x="0.2938%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (5 samples, 0.11%)</title><rect x="0.0438%" y="292" width="0.1095%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="5"/><text x="0.2938%" y="302.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (16 samples, 0.35%)</title><rect x="0.0000%" y="68" width="0.3505%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="16"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (16 samples, 0.35%)</title><rect x="0.0000%" y="84" width="0.3505%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="16"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (16 samples, 0.35%)</title><rect x="0.0000%" y="100" width="0.3505%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="16"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (16 samples, 0.35%)</title><rect x="0.0000%" y="116" width="0.3505%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="16"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (16 samples, 0.35%)</title><rect x="0.0000%" y="132" width="0.3505%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="16"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (16 samples, 0.35%)</title><rect x="0.0000%" y="148" width="0.3505%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="16"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.31%)</title><rect x="0.0438%" y="164" width="0.3067%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="14"/><text x="0.2938%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.31%)</title><rect x="0.0438%" y="180" width="0.3067%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="14"/><text x="0.2938%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.31%)</title><rect x="0.0438%" y="196" width="0.3067%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="14"/><text x="0.2938%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.31%)</title><rect x="0.0438%" y="212" width="0.3067%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="14"/><text x="0.2938%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.31%)</title><rect x="0.0438%" y="228" width="0.3067%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="14"/><text x="0.2938%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.31%)</title><rect x="0.0438%" y="244" width="0.3067%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="14"/><text x="0.2938%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (9 samples, 0.20%)</title><rect x="0.1533%" y="260" width="0.1972%" height="15" fill="rgb(231,73,38)" fg:x="7" fg:w="9"/><text x="0.4033%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (9 samples, 0.20%)</title><rect x="0.1533%" y="276" width="0.1972%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="9"/><text x="0.4033%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (9 samples, 0.20%)</title><rect x="0.1533%" y="292" width="0.1972%" height="15" fill="rgb(210,31,41)" fg:x="7" fg:w="9"/><text x="0.4033%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (9 samples, 0.20%)</title><rect x="0.1533%" y="308" width="0.1972%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="9"/><text x="0.4033%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (9 samples, 0.20%)</title><rect x="0.1533%" y="324" width="0.1972%" height="15" fill="rgb(226,26,5)" fg:x="7" fg:w="9"/><text x="0.4033%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (9 samples, 0.20%)</title><rect x="0.1533%" y="340" width="0.1972%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="9"/><text x="0.4033%" y="350.50"></text></g><g><title>&lt;module&gt; (lark/__init__.py:11) (8 samples, 0.18%)</title><rect x="0.1752%" y="356" width="0.1752%" height="15" fill="rgb(235,183,28)" fg:x="8" fg:w="8"/><text x="0.4252%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (8 samples, 0.18%)</title><rect x="0.1752%" y="372" width="0.1752%" height="15" fill="rgb(221,5,38)" fg:x="8" fg:w="8"/><text x="0.4252%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (8 samples, 0.18%)</title><rect x="0.1752%" y="388" width="0.1752%" height="15" fill="rgb(247,18,42)" fg:x="8" fg:w="8"/><text x="0.4252%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (8 samples, 0.18%)</title><rect x="0.1752%" y="404" width="0.1752%" height="15" fill="rgb(241,131,45)" fg:x="8" fg:w="8"/><text x="0.4252%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (8 samples, 0.18%)</title><rect x="0.1752%" y="420" width="0.1752%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="8"/><text x="0.4252%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (8 samples, 0.18%)</title><rect x="0.1752%" y="436" width="0.1752%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="8"/><text x="0.4252%" y="446.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (10 samples, 0.22%)</title><rect x="0.3505%" y="68" width="0.2191%" height="15" fill="rgb(238,160,17)" fg:x="16" fg:w="10"/><text x="0.6005%" y="78.50"></text></g><g><title>update (kappybara/system.py:69) (6 samples, 0.13%)</title><rect x="0.5696%" y="84" width="0.1314%" height="15" fill="rgb(214,148,48)" fg:x="26" fg:w="6"/><text x="0.8196%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (6 samples, 0.13%)</title><rect x="0.5696%" y="100" width="0.1314%" height="15" fill="rgb(232,36,49)" fg:x="26" fg:w="6"/><text x="0.8196%" y="110.50"></text></g><g><title>act (kappybara/system.py:63) (6 samples, 0.13%)</title><rect x="0.7229%" y="100" width="0.1314%" height="15" fill="rgb(209,103,24)" fg:x="33" fg:w="6"/><text x="0.9729%" y="110.50"></text></g><g><title>select (kappybara/rule.py:90) (6 samples, 0.13%)</title><rect x="0.7229%" y="116" width="0.1314%" height="15" fill="rgb(229,88,8)" fg:x="33" fg:w="6"/><text x="0.9729%" y="126.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (37 samples, 0.81%)</title><rect x="1.1829%" y="180" width="0.8105%" height="15" fill="rgb(213,181,19)" fg:x="54" fg:w="37"/><text x="1.4329%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (8 samples, 0.18%)</title><rect x="13.0120%" y="196" width="0.1752%" height="15" fill="rgb(254,191,54)" fg:x="594" fg:w="8"/><text x="13.2620%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (543 samples, 11.89%)</title><rect x="1.9934%" y="180" width="11.8949%" height="15" fill="rgb(241,83,37)" fg:x="91" fg:w="543"/><text x="2.2434%" y="190.50">embeddings (kappyb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.70%)</title><rect x="13.1873%" y="196" width="0.7010%" height="15" fill="rgb(233,36,39)" fg:x="602" fg:w="32"/><text x="13.4373%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.15%)</title><rect x="17.2837%" y="196" width="0.1533%" height="15" fill="rgb(226,3,54)" fg:x="789" fg:w="7"/><text x="17.5337%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (181 samples, 3.96%)</title><rect x="13.8883%" y="180" width="3.9650%" height="15" fill="rgb(245,192,40)" fg:x="634" fg:w="181"/><text x="14.1383%" y="190.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.42%)</title><rect x="17.4370%" y="196" width="0.4162%" height="15" fill="rgb(238,167,29)" fg:x="796" fg:w="19"/><text x="17.6870%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (46 samples, 1.01%)</title><rect x="17.8751%" y="180" width="1.0077%" height="15" fill="rgb(232,182,51)" fg:x="816" fg:w="46"/><text x="18.1251%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (40 samples, 0.88%)</title><rect x="18.8828%" y="180" width="0.8762%" height="15" fill="rgb(231,60,39)" fg:x="862" fg:w="40"/><text x="19.1328%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.20%)</title><rect x="22.6944%" y="196" width="0.1972%" height="15" fill="rgb(208,69,12)" fg:x="1036" fg:w="9"/><text x="22.9444%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (155 samples, 3.40%)</title><rect x="19.7590%" y="180" width="3.3954%" height="15" fill="rgb(235,93,37)" fg:x="902" fg:w="155"/><text x="20.0090%" y="190.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.26%)</title><rect x="22.8916%" y="196" width="0.2629%" height="15" fill="rgb(213,116,39)" fg:x="1045" fg:w="12"/><text x="23.1416%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (128 samples, 2.80%)</title><rect x="23.1544%" y="180" width="2.8039%" height="15" fill="rgb(222,207,29)" fg:x="1057" fg:w="128"/><text x="23.4044%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (11 samples, 0.24%)</title><rect x="28.4337%" y="196" width="0.2410%" height="15" fill="rgb(206,96,30)" fg:x="1298" fg:w="11"/><text x="28.6837%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (47 samples, 1.03%)</title><rect x="28.6747%" y="196" width="1.0296%" height="15" fill="rgb(218,138,4)" fg:x="1309" fg:w="47"/><text x="28.9247%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (67 samples, 1.47%)</title><rect x="31.6539%" y="212" width="1.4677%" height="15" fill="rgb(250,191,14)" fg:x="1445" fg:w="67"/><text x="31.9039%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (48 samples, 1.05%)</title><rect x="35.5531%" y="228" width="1.0515%" height="15" fill="rgb(239,60,40)" fg:x="1623" fg:w="48"/><text x="35.8031%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (533 samples, 11.68%)</title><rect x="29.7262%" y="196" width="11.6758%" height="15" fill="rgb(206,27,48)" fg:x="1357" fg:w="533"/><text x="29.9762%" y="206.50">embeds_in (kappyb..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (378 samples, 8.28%)</title><rect x="33.1216%" y="212" width="8.2804%" height="15" fill="rgb(225,35,8)" fg:x="1512" fg:w="378"/><text x="33.3716%" y="222.50">__iter__ (ka..</text></g><g><title>sites (kappybara/pattern.py:113) (219 samples, 4.80%)</title><rect x="36.6046%" y="228" width="4.7974%" height="15" fill="rgb(250,213,24)" fg:x="1671" fg:w="219"/><text x="36.8546%" y="238.50">sites ..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (55 samples, 1.20%)</title><rect x="41.4020%" y="196" width="1.2048%" height="15" fill="rgb(247,123,22)" fg:x="1890" fg:w="55"/><text x="41.6520%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (12 samples, 0.26%)</title><rect x="43.5487%" y="212" width="0.2629%" height="15" fill="rgb(231,138,38)" fg:x="1988" fg:w="12"/><text x="43.7987%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (91 samples, 1.99%)</title><rect x="42.6506%" y="196" width="1.9934%" height="15" fill="rgb(231,145,46)" fg:x="1947" fg:w="91"/><text x="42.9006%" y="206.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:102) (38 samples, 0.83%)</title><rect x="43.8116%" y="212" width="0.8324%" height="15" fill="rgb(251,118,11)" fg:x="2000" fg:w="38"/><text x="44.0616%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (86 samples, 1.88%)</title><rect x="54.9179%" y="212" width="1.8839%" height="15" fill="rgb(217,147,25)" fg:x="2507" fg:w="86"/><text x="55.1679%" y="222.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:68) (7 samples, 0.15%)</title><rect x="56.8018%" y="212" width="0.1533%" height="15" fill="rgb(247,81,37)" fg:x="2593" fg:w="7"/><text x="57.0518%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (13 samples, 0.28%)</title><rect x="57.3494%" y="228" width="0.2848%" height="15" fill="rgb(209,12,38)" fg:x="2618" fg:w="13"/><text x="57.5994%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (82 samples, 1.80%)</title><rect x="56.9551%" y="212" width="1.7963%" height="15" fill="rgb(227,1,9)" fg:x="2600" fg:w="82"/><text x="57.2051%" y="222.50">e..</text></g><g><title>stated (kappybara/pattern.py:54) (51 samples, 1.12%)</title><rect x="57.6342%" y="228" width="1.1172%" height="15" fill="rgb(248,47,43)" fg:x="2631" fg:w="51"/><text x="57.8842%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (10 samples, 0.22%)</title><rect x="59.8686%" y="228" width="0.2191%" height="15" fill="rgb(221,10,30)" fg:x="2733" fg:w="10"/><text x="60.1186%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.24%)</title><rect x="62.2125%" y="244" width="0.2410%" height="15" fill="rgb(210,229,1)" fg:x="2840" fg:w="11"/><text x="62.4625%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.15%)</title><rect x="64.8850%" y="260" width="0.1533%" height="15" fill="rgb(222,148,37)" fg:x="2962" fg:w="7"/><text x="65.1350%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:59) (243 samples, 5.32%)</title><rect x="60.0876%" y="228" width="5.3231%" height="15" fill="rgb(234,67,33)" fg:x="2743" fg:w="243"/><text x="60.3376%" y="238.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (135 samples, 2.96%)</title><rect x="62.4535%" y="244" width="2.9573%" height="15" fill="rgb(247,98,35)" fg:x="2851" fg:w="135"/><text x="62.7035%" y="254.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (17 samples, 0.37%)</title><rect x="65.0383%" y="260" width="0.3724%" height="15" fill="rgb(247,138,52)" fg:x="2969" fg:w="17"/><text x="65.2883%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (132 samples, 2.89%)</title><rect x="65.4107%" y="228" width="2.8916%" height="15" fill="rgb(213,79,30)" fg:x="2986" fg:w="132"/><text x="65.6607%" y="238.50">bo..</text></g><g><title>bound (kappybara/pattern.py:61) (48 samples, 1.05%)</title><rect x="68.3023%" y="228" width="1.0515%" height="15" fill="rgb(246,177,23)" fg:x="3118" fg:w="48"/><text x="68.5523%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (8 samples, 0.18%)</title><rect x="69.3538%" y="228" width="0.1752%" height="15" fill="rgb(230,62,27)" fg:x="3166" fg:w="8"/><text x="69.6038%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (527 samples, 11.54%)</title><rect x="58.7514%" y="212" width="11.5444%" height="15" fill="rgb(216,154,8)" fg:x="2682" fg:w="527"/><text x="59.0014%" y="222.50">embeds_in (kappyb..</text></g><g><title>coupled (kappybara/pattern.py:66) (35 samples, 0.77%)</title><rect x="69.5290%" y="228" width="0.7667%" height="15" fill="rgb(244,35,45)" fg:x="3174" fg:w="35"/><text x="69.7790%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (10 samples, 0.22%)</title><rect x="70.3176%" y="212" width="0.2191%" height="15" fill="rgb(251,115,12)" fg:x="3210" fg:w="10"/><text x="70.5676%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (9 samples, 0.20%)</title><rect x="71.0624%" y="228" width="0.1972%" height="15" fill="rgb(240,54,50)" fg:x="3244" fg:w="9"/><text x="71.3124%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.13%)</title><rect x="71.9387%" y="244" width="0.1314%" height="15" fill="rgb(233,84,52)" fg:x="3284" fg:w="6"/><text x="72.1887%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (77 samples, 1.69%)</title><rect x="70.5367%" y="212" width="1.6867%" height="15" fill="rgb(207,117,47)" fg:x="3220" fg:w="77"/><text x="70.7867%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (44 samples, 0.96%)</title><rect x="71.2596%" y="228" width="0.9639%" height="15" fill="rgb(249,43,39)" fg:x="3253" fg:w="44"/><text x="71.5096%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.15%)</title><rect x="72.0701%" y="244" width="0.1533%" height="15" fill="rgb(209,38,44)" fg:x="3290" fg:w="7"/><text x="72.3201%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (60 samples, 1.31%)</title><rect x="72.2234%" y="212" width="1.3143%" height="15" fill="rgb(236,212,23)" fg:x="3297" fg:w="60"/><text x="72.4734%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (34 samples, 0.74%)</title><rect x="72.7930%" y="228" width="0.7448%" height="15" fill="rgb(242,79,21)" fg:x="3323" fg:w="34"/><text x="73.0430%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (27 samples, 0.59%)</title><rect x="73.5378%" y="212" width="0.5915%" height="15" fill="rgb(211,96,35)" fg:x="3357" fg:w="27"/><text x="73.7878%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (43 samples, 0.94%)</title><rect x="74.1292%" y="212" width="0.9419%" height="15" fill="rgb(253,215,40)" fg:x="3384" fg:w="43"/><text x="74.3792%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (27 samples, 0.59%)</title><rect x="75.0712%" y="212" width="0.5915%" height="15" fill="rgb(211,81,21)" fg:x="3427" fg:w="27"/><text x="75.3212%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (8 samples, 0.18%)</title><rect x="75.6627%" y="212" width="0.1752%" height="15" fill="rgb(208,190,38)" fg:x="3454" fg:w="8"/><text x="75.9127%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (1,553 samples, 34.02%)</title><rect x="44.6440%" y="196" width="34.0197%" height="15" fill="rgb(235,213,38)" fg:x="2038" fg:w="1553"/><text x="44.8940%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (129 samples, 2.83%)</title><rect x="75.8379%" y="212" width="2.8258%" height="15" fill="rgb(237,122,38)" fg:x="3462" fg:w="129"/><text x="76.0879%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (2,423 samples, 53.08%)</title><rect x="25.9584%" y="180" width="53.0778%" height="15" fill="rgb(244,218,35)" fg:x="1185" fg:w="2423"/><text x="26.2084%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (17 samples, 0.37%)</title><rect x="78.6637%" y="196" width="0.3724%" height="15" fill="rgb(240,68,47)" fg:x="3591" fg:w="17"/><text x="78.9137%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (28 samples, 0.61%)</title><rect x="80.8324%" y="196" width="0.6134%" height="15" fill="rgb(210,16,53)" fg:x="3690" fg:w="28"/><text x="81.0824%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (30 samples, 0.66%)</title><rect x="82.5411%" y="212" width="0.6572%" height="15" fill="rgb(235,124,12)" fg:x="3768" fg:w="30"/><text x="82.7911%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (297 samples, 6.51%)</title><rect x="79.1238%" y="180" width="6.5060%" height="15" fill="rgb(224,169,11)" fg:x="3612" fg:w="297"/><text x="79.3738%" y="190.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (191 samples, 4.18%)</title><rect x="81.4458%" y="196" width="4.1840%" height="15" fill="rgb(250,166,2)" fg:x="3718" fg:w="191"/><text x="81.6958%" y="206.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:113) (111 samples, 2.43%)</title><rect x="83.1982%" y="212" width="2.4315%" height="15" fill="rgb(242,216,29)" fg:x="3798" fg:w="111"/><text x="83.4482%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:277) (68 samples, 1.49%)</title><rect x="85.6298%" y="180" width="1.4896%" height="15" fill="rgb(230,116,27)" fg:x="3909" fg:w="68"/><text x="85.8798%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (25 samples, 0.55%)</title><rect x="86.5717%" y="196" width="0.5476%" height="15" fill="rgb(228,99,48)" fg:x="3952" fg:w="25"/><text x="86.8217%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (5 samples, 0.11%)</title><rect x="87.3823%" y="196" width="0.1095%" height="15" fill="rgb(253,11,6)" fg:x="3989" fg:w="5"/><text x="87.6323%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (48 samples, 1.05%)</title><rect x="87.1194%" y="180" width="1.0515%" height="15" fill="rgb(247,143,39)" fg:x="3977" fg:w="48"/><text x="87.3694%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (31 samples, 0.68%)</title><rect x="87.4918%" y="196" width="0.6791%" height="15" fill="rgb(236,97,10)" fg:x="3994" fg:w="31"/><text x="87.7418%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (68 samples, 1.49%)</title><rect x="88.1709%" y="180" width="1.4896%" height="15" fill="rgb(233,208,19)" fg:x="4025" fg:w="68"/><text x="88.4209%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.24%)</title><rect x="89.4195%" y="196" width="0.2410%" height="15" fill="rgb(216,164,2)" fg:x="4082" fg:w="11"/><text x="89.6695%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (14 samples, 0.31%)</title><rect x="89.6605%" y="180" width="0.3067%" height="15" fill="rgb(220,129,5)" fg:x="4093" fg:w="14"/><text x="89.9105%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (26 samples, 0.57%)</title><rect x="89.9671%" y="180" width="0.5696%" height="15" fill="rgb(242,17,10)" fg:x="4107" fg:w="26"/><text x="90.2171%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (29 samples, 0.64%)</title><rect x="91.7634%" y="196" width="0.6353%" height="15" fill="rgb(242,107,0)" fg:x="4189" fg:w="29"/><text x="92.0134%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.15%)</title><rect x="92.2453%" y="212" width="0.1533%" height="15" fill="rgb(251,28,31)" fg:x="4211" fg:w="7"/><text x="92.4953%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (87 samples, 1.91%)</title><rect x="90.5367%" y="180" width="1.9058%" height="15" fill="rgb(233,223,10)" fg:x="4133" fg:w="87"/><text x="90.7867%" y="190.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:287) (23 samples, 0.50%)</title><rect x="92.4863%" y="180" width="0.5038%" height="15" fill="rgb(215,21,27)" fg:x="4222" fg:w="23"/><text x="92.7363%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:289) (19 samples, 0.42%)</title><rect x="92.9901%" y="180" width="0.4162%" height="15" fill="rgb(232,23,21)" fg:x="4245" fg:w="19"/><text x="93.2401%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:51) (4,227 samples, 92.60%)</title><rect x="0.8543%" y="164" width="92.5958%" height="15" fill="rgb(244,5,23)" fg:x="39" fg:w="4227"/><text x="1.1043%" y="174.50">__init__ (kappybara/indexed_set.py:51)</text></g><g><title>__hash__ (kappybara/pattern.py:187) (11 samples, 0.24%)</title><rect x="95.0493%" y="180" width="0.2410%" height="15" fill="rgb(226,81,46)" fg:x="4339" fg:w="11"/><text x="95.2993%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:53) (92 samples, 2.02%)</title><rect x="93.4502%" y="164" width="2.0153%" height="15" fill="rgb(247,70,30)" fg:x="4266" fg:w="92"/><text x="93.7002%" y="174.50">_..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (8 samples, 0.18%)</title><rect x="95.2903%" y="180" width="0.1752%" height="15" fill="rgb(212,68,19)" fg:x="4350" fg:w="8"/><text x="95.5403%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:82) (4,428 samples, 97.00%)</title><rect x="0.8543%" y="148" width="96.9989%" height="15" fill="rgb(240,187,13)" fg:x="39" fg:w="4428"/><text x="1.1043%" y="158.50">track_component (kappybara/mixture.py:82)</text></g><g><title>__init__ (kappybara/indexed_set.py:56) (109 samples, 2.39%)</title><rect x="95.4655%" y="164" width="2.3877%" height="15" fill="rgb(223,113,26)" fg:x="4358" fg:w="109"/><text x="95.7155%" y="174.50">__..</text></g><g><title>__hash__ (kappybara/pattern.py:188) (6 samples, 0.13%)</title><rect x="97.7218%" y="180" width="0.1314%" height="15" fill="rgb(206,192,2)" fg:x="4461" fg:w="6"/><text x="97.9718%" y="190.50"></text></g><g><title>act (kappybara/system.py:65) (4,496 samples, 98.49%)</title><rect x="0.8543%" y="100" width="98.4885%" height="15" fill="rgb(241,108,4)" fg:x="39" fg:w="4496"/><text x="1.1043%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:101) (4,496 samples, 98.49%)</title><rect x="0.8543%" y="116" width="98.4885%" height="15" fill="rgb(247,173,49)" fg:x="39" fg:w="4496"/><text x="1.1043%" y="126.50">apply_update (kappybara/mixture.py:101)</text></g><g><title>_update_embeddings (kappybara/mixture.py:105) (4,496 samples, 98.49%)</title><rect x="0.8543%" y="132" width="98.4885%" height="15" fill="rgb(224,114,35)" fg:x="39" fg:w="4496"/><text x="1.1043%" y="142.50">_update_embeddings (kappybara/mixture.py:105)</text></g><g><title>track_component (kappybara/mixture.py:84) (68 samples, 1.49%)</title><rect x="97.8532%" y="148" width="1.4896%" height="15" fill="rgb(245,159,27)" fg:x="4467" fg:w="68"/><text x="98.1032%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,510 samples, 98.80%)</title><rect x="0.5696%" y="68" width="98.7952%" height="15" fill="rgb(245,172,44)" fg:x="26" fg:w="4510"/><text x="0.8196%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,504 samples, 98.66%)</title><rect x="0.7010%" y="84" width="98.6637%" height="15" fill="rgb(236,23,11)" fg:x="32" fg:w="4504"/><text x="0.9510%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>__iter__ (kappybara/pattern.py:99) (11 samples, 0.24%)</title><rect x="99.4524%" y="68" width="0.2410%" height="15" fill="rgb(205,117,38)" fg:x="4540" fg:w="11"/><text x="99.7024%" y="78.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (6 samples, 0.13%)</title><rect x="99.5619%" y="84" width="0.1314%" height="15" fill="rgb(237,72,25)" fg:x="4545" fg:w="6"/><text x="99.8119%" y="94.50"></text></g><g><title>sites (kappybara/pattern.py:111) (7 samples, 0.15%)</title><rect x="99.6933%" y="68" width="0.1533%" height="15" fill="rgb(244,70,9)" fg:x="4551" fg:w="7"/><text x="99.9433%" y="78.50"></text></g><g><title>all (4,565 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="4565"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:113) (7 samples, 0.15%)</title><rect x="99.8467%" y="68" width="0.1533%" height="15" fill="rgb(235,36,10)" fg:x="4558" fg:w="7"/><text x="100.0967%" y="78.50"></text></g></svg></svg>