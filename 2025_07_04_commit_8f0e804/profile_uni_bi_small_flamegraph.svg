<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="266" onload="init(evt)" viewBox="0 0 1200 266" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="266" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 8f0e804</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="255.00"> </text><svg id="frames" x="10" width="1180" total_samples="8653"><g><title>n_embeddings (kappybara/rule.py:170) (43 samples, 0.50%)</title><rect x="0.1618%" y="180" width="0.4969%" height="15" fill="rgb(227,0,7)" fg:x="14" fg:w="43"/><text x="0.4118%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (26 samples, 0.30%)</title><rect x="0.3583%" y="196" width="0.3005%" height="15" fill="rgb(217,0,24)" fg:x="31" fg:w="26"/><text x="0.6083%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (21 samples, 0.24%)</title><rect x="0.4160%" y="212" width="0.2427%" height="15" fill="rgb(221,193,54)" fg:x="36" fg:w="21"/><text x="0.6660%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (12 samples, 0.14%)</title><rect x="0.7859%" y="180" width="0.1387%" height="15" fill="rgb(248,212,6)" fg:x="68" fg:w="12"/><text x="1.0359%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (16 samples, 0.18%)</title><rect x="0.9245%" y="180" width="0.1849%" height="15" fill="rgb(208,68,35)" fg:x="80" fg:w="16"/><text x="1.1745%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (9 samples, 0.10%)</title><rect x="1.1094%" y="180" width="0.1040%" height="15" fill="rgb(232,128,0)" fg:x="96" fg:w="9"/><text x="1.3594%" y="190.50"></text></g><g><title>update (kappybara/system.py:69) (109 samples, 1.26%)</title><rect x="0.0809%" y="84" width="1.2597%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="109"/><text x="0.3309%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (109 samples, 1.26%)</title><rect x="0.0809%" y="100" width="1.2597%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="109"/><text x="0.3309%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (107 samples, 1.24%)</title><rect x="0.1040%" y="116" width="1.2366%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="107"/><text x="0.3540%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (107 samples, 1.24%)</title><rect x="0.1040%" y="132" width="1.2366%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="107"/><text x="0.3540%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (107 samples, 1.24%)</title><rect x="0.1040%" y="148" width="1.2366%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="107"/><text x="0.3540%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (105 samples, 1.21%)</title><rect x="0.1271%" y="164" width="1.2135%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="105"/><text x="0.3771%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (9 samples, 0.10%)</title><rect x="1.4330%" y="116" width="0.1040%" height="15" fill="rgb(216,20,37)" fg:x="124" fg:w="9"/><text x="1.6830%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (24 samples, 0.28%)</title><rect x="1.3868%" y="100" width="0.2774%" height="15" fill="rgb(206,188,39)" fg:x="120" fg:w="24"/><text x="1.6368%" y="110.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (15 samples, 0.17%)</title><rect x="1.8375%" y="148" width="0.1734%" height="15" fill="rgb(217,207,13)" fg:x="159" fg:w="15"/><text x="2.0875%" y="158.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (57 samples, 0.66%)</title><rect x="1.7219%" y="132" width="0.6587%" height="15" fill="rgb(231,73,38)" fg:x="149" fg:w="57"/><text x="1.9719%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (25 samples, 0.29%)</title><rect x="2.0918%" y="148" width="0.2889%" height="15" fill="rgb(225,20,46)" fg:x="181" fg:w="25"/><text x="2.3418%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (21 samples, 0.24%)</title><rect x="2.1380%" y="164" width="0.2427%" height="15" fill="rgb(210,31,41)" fg:x="185" fg:w="21"/><text x="2.3880%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (27 samples, 0.31%)</title><rect x="4.5996%" y="148" width="0.3120%" height="15" fill="rgb(221,200,47)" fg:x="398" fg:w="27"/><text x="4.8496%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (30 samples, 0.35%)</title><rect x="8.1706%" y="164" width="0.3467%" height="15" fill="rgb(226,26,5)" fg:x="707" fg:w="30"/><text x="8.4206%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (593 samples, 6.85%)</title><rect x="2.4616%" y="132" width="6.8531%" height="15" fill="rgb(249,33,26)" fg:x="213" fg:w="593"/><text x="2.7116%" y="142.50">_remove_e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (381 samples, 4.40%)</title><rect x="4.9116%" y="148" width="4.4031%" height="15" fill="rgb(235,183,28)" fg:x="425" fg:w="381"/><text x="5.1616%" y="158.50">__eq_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (69 samples, 0.80%)</title><rect x="8.5173%" y="164" width="0.7974%" height="15" fill="rgb(221,5,38)" fg:x="737" fg:w="69"/><text x="8.7673%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (662 samples, 7.65%)</title><rect x="1.6757%" y="116" width="7.6505%" height="15" fill="rgb(247,18,42)" fg:x="145" fg:w="662"/><text x="1.9257%" y="126.50">apply_upda..</text></g><g><title>embeddings (kappybara/pattern.py:256) (33 samples, 0.38%)</title><rect x="10.0196%" y="148" width="0.3814%" height="15" fill="rgb(241,131,45)" fg:x="867" fg:w="33"/><text x="10.2696%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.13%)</title><rect x="14.1685%" y="164" width="0.1271%" height="15" fill="rgb(249,31,29)" fg:x="1226" fg:w="11"/><text x="14.4185%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (373 samples, 4.31%)</title><rect x="10.4010%" y="148" width="4.3106%" height="15" fill="rgb(225,111,53)" fg:x="900" fg:w="373"/><text x="10.6510%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.42%)</title><rect x="14.2956%" y="164" width="0.4160%" height="15" fill="rgb(238,160,17)" fg:x="1237" fg:w="36"/><text x="14.5456%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.17%)</title><rect x="17.9706%" y="164" width="0.1734%" height="15" fill="rgb(214,148,48)" fg:x="1555" fg:w="15"/><text x="18.2206%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (329 samples, 3.80%)</title><rect x="14.7117%" y="148" width="3.8021%" height="15" fill="rgb(232,36,49)" fg:x="1273" fg:w="329"/><text x="14.9617%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.37%)</title><rect x="18.1440%" y="164" width="0.3698%" height="15" fill="rgb(209,103,24)" fg:x="1570" fg:w="32"/><text x="18.3940%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (96 samples, 1.11%)</title><rect x="18.5485%" y="148" width="1.1094%" height="15" fill="rgb(229,88,8)" fg:x="1605" fg:w="96"/><text x="18.7985%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (49 samples, 0.57%)</title><rect x="19.6579%" y="148" width="0.5663%" height="15" fill="rgb(213,181,19)" fg:x="1701" fg:w="49"/><text x="19.9079%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (23 samples, 0.27%)</title><rect x="22.3506%" y="164" width="0.2658%" height="15" fill="rgb(254,191,54)" fg:x="1934" fg:w="23"/><text x="22.6006%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (243 samples, 2.81%)</title><rect x="20.2242%" y="148" width="2.8083%" height="15" fill="rgb(241,83,37)" fg:x="1750" fg:w="243"/><text x="20.4742%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.42%)</title><rect x="22.6164%" y="164" width="0.4160%" height="15" fill="rgb(233,36,39)" fg:x="1957" fg:w="36"/><text x="22.8664%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (241 samples, 2.79%)</title><rect x="23.0325%" y="148" width="2.7852%" height="15" fill="rgb(226,3,54)" fg:x="1993" fg:w="241"/><text x="23.2825%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (13 samples, 0.15%)</title><rect x="28.2792%" y="164" width="0.1502%" height="15" fill="rgb(245,192,40)" fg:x="2447" fg:w="13"/><text x="28.5292%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (71 samples, 0.82%)</title><rect x="28.4294%" y="164" width="0.8205%" height="15" fill="rgb(238,167,29)" fg:x="2460" fg:w="71"/><text x="28.6794%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (127 samples, 1.47%)</title><rect x="31.2839%" y="180" width="1.4677%" height="15" fill="rgb(232,182,51)" fg:x="2707" fg:w="127"/><text x="31.5339%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (76 samples, 0.88%)</title><rect x="34.8087%" y="196" width="0.8783%" height="15" fill="rgb(231,60,39)" fg:x="3012" fg:w="76"/><text x="35.0587%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (859 samples, 9.93%)</title><rect x="29.2846%" y="164" width="9.9272%" height="15" fill="rgb(208,69,12)" fg:x="2534" fg:w="859"/><text x="29.5346%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (559 samples, 6.46%)</title><rect x="32.7516%" y="180" width="6.4602%" height="15" fill="rgb(235,93,37)" fg:x="2834" fg:w="559"/><text x="33.0016%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (305 samples, 3.52%)</title><rect x="35.6870%" y="196" width="3.5248%" height="15" fill="rgb(213,116,39)" fg:x="3088" fg:w="305"/><text x="35.9370%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (131 samples, 1.51%)</title><rect x="39.2118%" y="164" width="1.5139%" height="15" fill="rgb(222,207,29)" fg:x="3393" fg:w="131"/><text x="39.4618%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (69 samples, 0.80%)</title><rect x="41.6156%" y="180" width="0.7974%" height="15" fill="rgb(206,96,30)" fg:x="3601" fg:w="69"/><text x="41.8656%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (177 samples, 2.05%)</title><rect x="40.7720%" y="164" width="2.0455%" height="15" fill="rgb(218,138,4)" fg:x="3528" fg:w="177"/><text x="41.0220%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (35 samples, 0.40%)</title><rect x="42.4130%" y="180" width="0.4045%" height="15" fill="rgb(250,191,14)" fg:x="3670" fg:w="35"/><text x="42.6630%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (183 samples, 2.11%)</title><rect x="51.5890%" y="180" width="2.1149%" height="15" fill="rgb(239,60,40)" fg:x="4464" fg:w="183"/><text x="51.8390%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (15 samples, 0.17%)</title><rect x="53.7039%" y="180" width="0.1734%" height="15" fill="rgb(206,27,48)" fg:x="4647" fg:w="15"/><text x="53.9539%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (18 samples, 0.21%)</title><rect x="54.5822%" y="196" width="0.2080%" height="15" fill="rgb(225,35,8)" fg:x="4723" fg:w="18"/><text x="54.8322%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (158 samples, 1.83%)</title><rect x="53.8773%" y="180" width="1.8260%" height="15" fill="rgb(250,213,24)" fg:x="4662" fg:w="158"/><text x="54.1273%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (79 samples, 0.91%)</title><rect x="54.7902%" y="196" width="0.9130%" height="15" fill="rgb(247,123,22)" fg:x="4741" fg:w="79"/><text x="55.0402%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (12 samples, 0.14%)</title><rect x="56.9976%" y="196" width="0.1387%" height="15" fill="rgb(231,138,38)" fg:x="4932" fg:w="12"/><text x="57.2476%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (24 samples, 0.28%)</title><rect x="59.3667%" y="212" width="0.2774%" height="15" fill="rgb(231,145,46)" fg:x="5137" fg:w="24"/><text x="59.6167%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (9 samples, 0.10%)</title><rect x="61.2851%" y="228" width="0.1040%" height="15" fill="rgb(251,118,11)" fg:x="5303" fg:w="9"/><text x="61.5351%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (400 samples, 4.62%)</title><rect x="57.1363%" y="196" width="4.6227%" height="15" fill="rgb(217,147,25)" fg:x="4944" fg:w="400"/><text x="57.3863%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (183 samples, 2.11%)</title><rect x="59.6441%" y="212" width="2.1149%" height="15" fill="rgb(247,81,37)" fg:x="5161" fg:w="183"/><text x="59.8941%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.37%)</title><rect x="61.3891%" y="228" width="0.3698%" height="15" fill="rgb(209,12,38)" fg:x="5312" fg:w="32"/><text x="61.6391%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (214 samples, 2.47%)</title><rect x="61.7589%" y="196" width="2.4731%" height="15" fill="rgb(227,1,9)" fg:x="5344" fg:w="214"/><text x="62.0089%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (90 samples, 1.04%)</title><rect x="64.2321%" y="196" width="1.0401%" height="15" fill="rgb(248,47,43)" fg:x="5558" fg:w="90"/><text x="64.4821%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (12 samples, 0.14%)</title><rect x="65.2722%" y="196" width="0.1387%" height="15" fill="rgb(221,10,30)" fg:x="5648" fg:w="12"/><text x="65.5222%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (884 samples, 10.22%)</title><rect x="55.7032%" y="180" width="10.2161%" height="15" fill="rgb(210,229,1)" fg:x="4820" fg:w="884"/><text x="55.9532%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (44 samples, 0.51%)</title><rect x="65.4108%" y="196" width="0.5085%" height="15" fill="rgb(222,148,37)" fg:x="5660" fg:w="44"/><text x="65.6608%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (9 samples, 0.10%)</title><rect x="65.9193%" y="180" width="0.1040%" height="15" fill="rgb(234,67,33)" fg:x="5704" fg:w="9"/><text x="66.1693%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (22 samples, 0.25%)</title><rect x="66.0233%" y="180" width="0.2542%" height="15" fill="rgb(247,98,35)" fg:x="5713" fg:w="22"/><text x="66.2733%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (200 samples, 2.31%)</title><rect x="66.2776%" y="180" width="2.3113%" height="15" fill="rgb(247,138,52)" fg:x="5735" fg:w="200"/><text x="66.5276%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (125 samples, 1.44%)</title><rect x="67.1443%" y="196" width="1.4446%" height="15" fill="rgb(213,79,30)" fg:x="5810" fg:w="125"/><text x="67.3943%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.23%)</title><rect x="68.3578%" y="212" width="0.2311%" height="15" fill="rgb(246,177,23)" fg:x="5915" fg:w="20"/><text x="68.6078%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (258 samples, 2.98%)</title><rect x="68.5889%" y="180" width="2.9816%" height="15" fill="rgb(230,62,27)" fg:x="5935" fg:w="258"/><text x="68.8389%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (173 samples, 2.00%)</title><rect x="69.5712%" y="196" width="1.9993%" height="15" fill="rgb(216,154,8)" fg:x="6020" fg:w="173"/><text x="69.8212%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.44%)</title><rect x="71.1314%" y="212" width="0.4392%" height="15" fill="rgb(244,35,45)" fg:x="6155" fg:w="38"/><text x="71.3814%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (70 samples, 0.81%)</title><rect x="71.5706%" y="180" width="0.8090%" height="15" fill="rgb(251,115,12)" fg:x="6193" fg:w="70"/><text x="71.8206%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (111 samples, 1.28%)</title><rect x="72.3911%" y="180" width="1.2828%" height="15" fill="rgb(240,54,50)" fg:x="6264" fg:w="111"/><text x="72.6411%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (70 samples, 0.81%)</title><rect x="73.6739%" y="180" width="0.8090%" height="15" fill="rgb(233,84,52)" fg:x="6375" fg:w="70"/><text x="73.9239%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (22 samples, 0.25%)</title><rect x="74.4828%" y="180" width="0.2542%" height="15" fill="rgb(207,117,47)" fg:x="6445" fg:w="22"/><text x="74.7328%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,022 samples, 34.92%)</title><rect x="42.8175%" y="164" width="34.9243%" height="15" fill="rgb(249,43,39)" fg:x="3705" fg:w="3022"/><text x="43.0675%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (260 samples, 3.00%)</title><rect x="74.7371%" y="180" width="3.0047%" height="15" fill="rgb(209,38,44)" fg:x="6467" fg:w="260"/><text x="74.9871%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,552 samples, 52.61%)</title><rect x="25.8176%" y="148" width="52.6060%" height="15" fill="rgb(236,212,23)" fg:x="2234" fg:w="4552"/><text x="26.0676%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (59 samples, 0.68%)</title><rect x="77.7418%" y="164" width="0.6818%" height="15" fill="rgb(242,79,21)" fg:x="6727" fg:w="59"/><text x="77.9918%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (46 samples, 0.53%)</title><rect x="79.7758%" y="164" width="0.5316%" height="15" fill="rgb(211,96,35)" fg:x="6903" fg:w="46"/><text x="80.0258%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (68 samples, 0.79%)</title><rect x="81.6249%" y="180" width="0.7859%" height="15" fill="rgb(253,215,40)" fg:x="7063" fg:w="68"/><text x="81.8749%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (556 samples, 6.43%)</title><rect x="78.5392%" y="148" width="6.4255%" height="15" fill="rgb(211,81,21)" fg:x="6796" fg:w="556"/><text x="78.7892%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (403 samples, 4.66%)</title><rect x="80.3074%" y="164" width="4.6573%" height="15" fill="rgb(208,190,38)" fg:x="6949" fg:w="403"/><text x="80.5574%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (221 samples, 2.55%)</title><rect x="82.4107%" y="180" width="2.5540%" height="15" fill="rgb(235,213,38)" fg:x="7131" fg:w="221"/><text x="82.6607%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (29 samples, 0.34%)</title><rect x="85.5888%" y="164" width="0.3351%" height="15" fill="rgb(237,122,38)" fg:x="7406" fg:w="29"/><text x="85.8388%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (103 samples, 1.19%)</title><rect x="84.9648%" y="148" width="1.1903%" height="15" fill="rgb(244,218,35)" fg:x="7352" fg:w="103"/><text x="85.2148%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (20 samples, 0.23%)</title><rect x="85.9240%" y="164" width="0.2311%" height="15" fill="rgb(240,68,47)" fg:x="7435" fg:w="20"/><text x="86.1740%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (10 samples, 0.12%)</title><rect x="86.4671%" y="164" width="0.1156%" height="15" fill="rgb(210,16,53)" fg:x="7482" fg:w="10"/><text x="86.7171%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (77 samples, 0.89%)</title><rect x="86.1551%" y="148" width="0.8899%" height="15" fill="rgb(235,124,12)" fg:x="7455" fg:w="77"/><text x="86.4051%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (40 samples, 0.46%)</title><rect x="86.5827%" y="164" width="0.4623%" height="15" fill="rgb(224,169,11)" fg:x="7492" fg:w="40"/><text x="86.8327%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (105 samples, 1.21%)</title><rect x="87.0450%" y="148" width="1.2135%" height="15" fill="rgb(250,166,2)" fg:x="7532" fg:w="105"/><text x="87.2950%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.24%)</title><rect x="88.0157%" y="164" width="0.2427%" height="15" fill="rgb(242,216,29)" fg:x="7616" fg:w="21"/><text x="88.2657%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (45 samples, 0.52%)</title><rect x="88.2584%" y="148" width="0.5201%" height="15" fill="rgb(230,116,27)" fg:x="7637" fg:w="45"/><text x="88.5084%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (55 samples, 0.64%)</title><rect x="88.7785%" y="148" width="0.6356%" height="15" fill="rgb(228,99,48)" fg:x="7682" fg:w="55"/><text x="89.0285%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (84 samples, 0.97%)</title><rect x="91.0436%" y="164" width="0.9708%" height="15" fill="rgb(253,11,6)" fg:x="7878" fg:w="84"/><text x="91.2936%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (237 samples, 2.74%)</title><rect x="89.4141%" y="148" width="2.7389%" height="15" fill="rgb(247,143,39)" fg:x="7737" fg:w="237"/><text x="89.6641%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (18 samples, 0.21%)</title><rect x="92.1530%" y="148" width="0.2080%" height="15" fill="rgb(236,97,10)" fg:x="7974" fg:w="18"/><text x="92.4030%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (25 samples, 0.29%)</title><rect x="92.3726%" y="148" width="0.2889%" height="15" fill="rgb(233,208,19)" fg:x="7993" fg:w="25"/><text x="92.6226%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (19 samples, 0.22%)</title><rect x="92.6615%" y="148" width="0.2196%" height="15" fill="rgb(216,164,2)" fg:x="8018" fg:w="19"/><text x="92.9115%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,225 samples, 83.50%)</title><rect x="9.5112%" y="132" width="83.4971%" height="15" fill="rgb(220,129,5)" fg:x="823" fg:w="7225"/><text x="9.7612%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (11 samples, 0.13%)</title><rect x="92.8811%" y="148" width="0.1271%" height="15" fill="rgb(242,17,10)" fg:x="8037" fg:w="11"/><text x="93.1311%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (58 samples, 0.67%)</title><rect x="93.0082%" y="132" width="0.6703%" height="15" fill="rgb(242,107,0)" fg:x="8048" fg:w="58"/><text x="93.2582%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (21 samples, 0.24%)</title><rect x="93.7594%" y="132" width="0.2427%" height="15" fill="rgb(251,28,31)" fg:x="8113" fg:w="21"/><text x="94.0094%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.12%)</title><rect x="97.5153%" y="148" width="0.1156%" height="15" fill="rgb(233,223,10)" fg:x="8438" fg:w="10"/><text x="97.7653%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (346 samples, 4.00%)</title><rect x="94.0021%" y="132" width="3.9986%" height="15" fill="rgb(215,21,27)" fg:x="8134" fg:w="346"/><text x="94.2521%" y="142.50">_upd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.37%)</title><rect x="97.6309%" y="148" width="0.3698%" height="15" fill="rgb(232,23,21)" fg:x="8448" fg:w="32"/><text x="97.8809%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.13%)</title><rect x="98.9830%" y="148" width="0.1271%" height="15" fill="rgb(244,5,23)" fg:x="8565" fg:w="11"/><text x="99.2330%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,581 samples, 99.17%)</title><rect x="0.0809%" y="68" width="99.1679%" height="15" fill="rgb(226,81,46)" fg:x="7" fg:w="8581"/><text x="0.3309%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,472 samples, 97.91%)</title><rect x="1.3406%" y="84" width="97.9082%" height="15" fill="rgb(247,70,30)" fg:x="116" fg:w="8472"/><text x="1.5906%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,444 samples, 97.58%)</title><rect x="1.6642%" y="100" width="97.5847%" height="15" fill="rgb(212,68,19)" fg:x="144" fg:w="8444"/><text x="1.9142%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (7,773 samples, 89.83%)</title><rect x="9.4187%" y="116" width="89.8301%" height="15" fill="rgb(240,187,13)" fg:x="815" fg:w="7773"/><text x="9.6687%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (108 samples, 1.25%)</title><rect x="98.0007%" y="132" width="1.2481%" height="15" fill="rgb(223,113,26)" fg:x="8480" fg:w="108"/><text x="98.2507%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.14%)</title><rect x="99.1101%" y="148" width="0.1387%" height="15" fill="rgb(206,192,2)" fg:x="8576" fg:w="12"/><text x="99.3601%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (10 samples, 0.12%)</title><rect x="99.3413%" y="68" width="0.1156%" height="15" fill="rgb(241,108,4)" fg:x="8596" fg:w="10"/><text x="99.5913%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (15 samples, 0.17%)</title><rect x="99.4568%" y="68" width="0.1734%" height="15" fill="rgb(247,173,49)" fg:x="8606" fg:w="15"/><text x="99.7068%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (21 samples, 0.24%)</title><rect x="99.6302%" y="68" width="0.2427%" height="15" fill="rgb(224,114,35)" fg:x="8621" fg:w="21"/><text x="99.8802%" y="78.50"></text></g><g><title>all (8,653 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(245,159,27)" fg:x="0" fg:w="8653"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (11 samples, 0.13%)</title><rect x="99.8729%" y="68" width="0.1271%" height="15" fill="rgb(245,172,44)" fg:x="8642" fg:w="11"/><text x="100.1229%" y="78.50"></text></g></svg></svg>