<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="570" onload="init(evt)" viewBox="0 0 1200 570" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="570" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 8f0e804</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="559.00"> </text><svg id="frames" x="10" width="1180" total_samples="2491"><g><title>update (kappybara/system.py:69) (6 samples, 0.24%)</title><rect x="0.0401%" y="84" width="0.2409%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="6"/><text x="0.2901%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (6 samples, 0.24%)</title><rect x="0.0401%" y="100" width="0.2409%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="6"/><text x="0.2901%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (5 samples, 0.20%)</title><rect x="0.0803%" y="116" width="0.2007%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="5"/><text x="0.3303%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (4 samples, 0.16%)</title><rect x="0.1204%" y="132" width="0.1606%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="4"/><text x="0.3704%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (4 samples, 0.16%)</title><rect x="0.1204%" y="148" width="0.1606%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="4"/><text x="0.3704%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (4 samples, 0.16%)</title><rect x="0.1204%" y="164" width="0.1606%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="4"/><text x="0.3704%" y="174.50"></text></g><g><title>n_embeddings (kappybara/rule.py:62) (3 samples, 0.12%)</title><rect x="0.1606%" y="180" width="0.1204%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="3"/><text x="0.4106%" y="190.50"></text></g><g><title>act (kappybara/system.py:63) (13 samples, 0.52%)</title><rect x="0.4014%" y="100" width="0.5219%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="13"/><text x="0.6514%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (11 samples, 0.44%)</title><rect x="0.4817%" y="116" width="0.4416%" height="15" fill="rgb(218,30,26)" fg:x="12" fg:w="11"/><text x="0.7317%" y="126.50"></text></g><g><title>_produce_update (kappybara/rule.py:148) (4 samples, 0.16%)</title><rect x="0.7627%" y="132" width="0.1606%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="4"/><text x="1.0127%" y="142.50"></text></g><g><title>connect_sites (kappybara/mixture.py:229) (3 samples, 0.12%)</title><rect x="0.8029%" y="148" width="0.1204%" height="15" fill="rgb(250,228,42)" fg:x="20" fg:w="3"/><text x="1.0529%" y="158.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (3 samples, 0.12%)</title><rect x="1.0438%" y="148" width="0.1204%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="3"/><text x="1.2938%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (25 samples, 1.00%)</title><rect x="1.2043%" y="148" width="1.0036%" height="15" fill="rgb(216,20,37)" fg:x="30" fg:w="25"/><text x="1.4543%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (6 samples, 0.24%)</title><rect x="2.2079%" y="148" width="0.2409%" height="15" fill="rgb(206,188,39)" fg:x="55" fg:w="6"/><text x="2.4579%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:109) (3 samples, 0.12%)</title><rect x="3.4524%" y="196" width="0.1204%" height="15" fill="rgb(217,207,13)" fg:x="86" fg:w="3"/><text x="3.7024%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (25 samples, 1.00%)</title><rect x="3.1714%" y="180" width="1.0036%" height="15" fill="rgb(231,73,38)" fg:x="79" fg:w="25"/><text x="3.4214%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (15 samples, 0.60%)</title><rect x="3.5729%" y="196" width="0.6022%" height="15" fill="rgb(225,20,46)" fg:x="89" fg:w="15"/><text x="3.8229%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (88 samples, 3.53%)</title><rect x="0.9635%" y="132" width="3.5327%" height="15" fill="rgb(210,31,41)" fg:x="24" fg:w="88"/><text x="1.2135%" y="142.50">_re..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (50 samples, 2.01%)</title><rect x="2.4890%" y="148" width="2.0072%" height="15" fill="rgb(221,200,47)" fg:x="62" fg:w="50"/><text x="2.7390%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (45 samples, 1.81%)</title><rect x="2.6897%" y="164" width="1.8065%" height="15" fill="rgb(226,26,5)" fg:x="67" fg:w="45"/><text x="2.9397%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (6 samples, 0.24%)</title><rect x="4.2553%" y="180" width="0.2409%" height="15" fill="rgb(249,33,26)" fg:x="106" fg:w="6"/><text x="4.5053%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (92 samples, 3.69%)</title><rect x="0.9233%" y="116" width="3.6933%" height="15" fill="rgb(235,183,28)" fg:x="23" fg:w="92"/><text x="1.1733%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (3 samples, 0.12%)</title><rect x="4.4962%" y="132" width="0.1204%" height="15" fill="rgb(221,5,38)" fg:x="112" fg:w="3"/><text x="4.7462%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (21 samples, 0.84%)</title><rect x="5.1786%" y="148" width="0.8430%" height="15" fill="rgb(247,18,42)" fg:x="129" fg:w="21"/><text x="5.4286%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.24%)</title><rect x="9.8354%" y="164" width="0.2409%" height="15" fill="rgb(241,131,45)" fg:x="245" fg:w="6"/><text x="10.0854%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (111 samples, 4.46%)</title><rect x="6.0217%" y="148" width="4.4560%" height="15" fill="rgb(249,31,29)" fg:x="150" fg:w="111"/><text x="6.2717%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.40%)</title><rect x="10.0763%" y="164" width="0.4014%" height="15" fill="rgb(225,111,53)" fg:x="251" fg:w="10"/><text x="10.3263%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.24%)</title><rect x="13.2075%" y="164" width="0.2409%" height="15" fill="rgb(238,160,17)" fg:x="329" fg:w="6"/><text x="13.4575%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (79 samples, 3.17%)</title><rect x="10.4777%" y="148" width="3.1714%" height="15" fill="rgb(214,148,48)" fg:x="261" fg:w="79"/><text x="10.7277%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.20%)</title><rect x="13.4484%" y="164" width="0.2007%" height="15" fill="rgb(232,36,49)" fg:x="335" fg:w="5"/><text x="13.6984%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (22 samples, 0.88%)</title><rect x="13.6893%" y="148" width="0.8832%" height="15" fill="rgb(209,103,24)" fg:x="341" fg:w="22"/><text x="13.9393%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (18 samples, 0.72%)</title><rect x="14.5725%" y="148" width="0.7226%" height="15" fill="rgb(229,88,8)" fg:x="363" fg:w="18"/><text x="14.8225%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.24%)</title><rect x="17.1016%" y="164" width="0.2409%" height="15" fill="rgb(213,181,19)" fg:x="426" fg:w="6"/><text x="17.3516%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (63 samples, 2.53%)</title><rect x="15.2951%" y="148" width="2.5291%" height="15" fill="rgb(254,191,54)" fg:x="381" fg:w="63"/><text x="15.5451%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.48%)</title><rect x="17.3424%" y="164" width="0.4817%" height="15" fill="rgb(241,83,37)" fg:x="432" fg:w="12"/><text x="17.5924%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (60 samples, 2.41%)</title><rect x="17.8242%" y="148" width="2.4087%" height="15" fill="rgb(233,36,39)" fg:x="444" fg:w="60"/><text x="18.0742%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (7 samples, 0.28%)</title><rect x="22.7619%" y="164" width="0.2810%" height="15" fill="rgb(226,3,54)" fg:x="567" fg:w="7"/><text x="23.0119%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (29 samples, 1.16%)</title><rect x="23.0430%" y="164" width="1.1642%" height="15" fill="rgb(245,192,40)" fg:x="574" fg:w="29"/><text x="23.2930%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:172) (3 samples, 0.12%)</title><rect x="24.2071%" y="164" width="0.1204%" height="15" fill="rgb(238,167,29)" fg:x="603" fg:w="3"/><text x="24.4571%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (30 samples, 1.20%)</title><rect x="26.5355%" y="180" width="1.2043%" height="15" fill="rgb(232,182,51)" fg:x="661" fg:w="30"/><text x="26.7855%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (22 samples, 0.88%)</title><rect x="29.9880%" y="196" width="0.8832%" height="15" fill="rgb(231,60,39)" fg:x="747" fg:w="22"/><text x="30.2380%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (241 samples, 9.67%)</title><rect x="24.3276%" y="164" width="9.6748%" height="15" fill="rgb(208,69,12)" fg:x="606" fg:w="241"/><text x="24.5776%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (156 samples, 6.26%)</title><rect x="27.7399%" y="180" width="6.2625%" height="15" fill="rgb(235,93,37)" fg:x="691" fg:w="156"/><text x="27.9899%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (78 samples, 3.13%)</title><rect x="30.8711%" y="196" width="3.1313%" height="15" fill="rgb(213,116,39)" fg:x="769" fg:w="78"/><text x="31.1211%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (35 samples, 1.41%)</title><rect x="34.0024%" y="164" width="1.4051%" height="15" fill="rgb(222,207,29)" fg:x="847" fg:w="35"/><text x="34.2524%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (17 samples, 0.68%)</title><rect x="36.5315%" y="180" width="0.6825%" height="15" fill="rgb(206,96,30)" fg:x="910" fg:w="17"/><text x="36.7815%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (48 samples, 1.93%)</title><rect x="35.4476%" y="164" width="1.9269%" height="15" fill="rgb(218,138,4)" fg:x="883" fg:w="48"/><text x="35.6976%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (4 samples, 0.16%)</title><rect x="37.2140%" y="180" width="0.1606%" height="15" fill="rgb(250,191,14)" fg:x="927" fg:w="4"/><text x="37.4640%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (59 samples, 2.37%)</title><rect x="47.6515%" y="180" width="2.3685%" height="15" fill="rgb(239,60,40)" fg:x="1187" fg:w="59"/><text x="47.9015%" y="190.50">__..</text></g><g><title>stated (kappybara/pattern.py:50) (7 samples, 0.28%)</title><rect x="50.4215%" y="196" width="0.2810%" height="15" fill="rgb(206,27,48)" fg:x="1256" fg:w="7"/><text x="50.6715%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (34 samples, 1.36%)</title><rect x="50.1004%" y="180" width="1.3649%" height="15" fill="rgb(225,35,8)" fg:x="1248" fg:w="34"/><text x="50.3504%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (19 samples, 0.76%)</title><rect x="50.7025%" y="196" width="0.7627%" height="15" fill="rgb(250,213,24)" fg:x="1263" fg:w="19"/><text x="50.9525%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (5 samples, 0.20%)</title><rect x="52.5492%" y="196" width="0.2007%" height="15" fill="rgb(247,123,22)" fg:x="1309" fg:w="5"/><text x="52.7992%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (7 samples, 0.28%)</title><rect x="54.9578%" y="212" width="0.2810%" height="15" fill="rgb(231,138,38)" fg:x="1369" fg:w="7"/><text x="55.2078%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="57.2862%" y="228" width="0.1204%" height="15" fill="rgb(231,145,46)" fg:x="1427" fg:w="3"/><text x="57.5362%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (127 samples, 5.10%)</title><rect x="52.7499%" y="196" width="5.0984%" height="15" fill="rgb(251,118,11)" fg:x="1314" fg:w="127"/><text x="52.9999%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (65 samples, 2.61%)</title><rect x="55.2389%" y="212" width="2.6094%" height="15" fill="rgb(217,147,25)" fg:x="1376" fg:w="65"/><text x="55.4889%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.44%)</title><rect x="57.4067%" y="228" width="0.4416%" height="15" fill="rgb(247,81,37)" fg:x="1430" fg:w="11"/><text x="57.6567%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (73 samples, 2.93%)</title><rect x="57.8483%" y="196" width="2.9305%" height="15" fill="rgb(209,12,38)" fg:x="1441" fg:w="73"/><text x="58.0983%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (31 samples, 1.24%)</title><rect x="60.7788%" y="196" width="1.2445%" height="15" fill="rgb(227,1,9)" fg:x="1514" fg:w="31"/><text x="61.0288%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (5 samples, 0.20%)</title><rect x="62.0233%" y="196" width="0.2007%" height="15" fill="rgb(248,47,43)" fg:x="1545" fg:w="5"/><text x="62.2733%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (283 samples, 11.36%)</title><rect x="51.4653%" y="180" width="11.3609%" height="15" fill="rgb(221,10,30)" fg:x="1282" fg:w="283"/><text x="51.7153%" y="190.50">embeds_in (kappyb..</text></g><g><title>coupled (kappybara/pattern.py:64) (15 samples, 0.60%)</title><rect x="62.2240%" y="196" width="0.6022%" height="15" fill="rgb(210,229,1)" fg:x="1550" fg:w="15"/><text x="62.4740%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (9 samples, 0.36%)</title><rect x="62.8262%" y="180" width="0.3613%" height="15" fill="rgb(222,148,37)" fg:x="1565" fg:w="9"/><text x="63.0762%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.20%)</title><rect x="64.1509%" y="196" width="0.2007%" height="15" fill="rgb(234,67,33)" fg:x="1598" fg:w="5"/><text x="64.4009%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (81 samples, 3.25%)</title><rect x="63.1875%" y="180" width="3.2517%" height="15" fill="rgb(247,98,35)" fg:x="1574" fg:w="81"/><text x="63.4375%" y="190.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (52 samples, 2.09%)</title><rect x="64.3517%" y="196" width="2.0875%" height="15" fill="rgb(247,138,52)" fg:x="1603" fg:w="52"/><text x="64.6017%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.32%)</title><rect x="66.1180%" y="212" width="0.3212%" height="15" fill="rgb(213,79,30)" fg:x="1647" fg:w="8"/><text x="66.3680%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (4 samples, 0.16%)</title><rect x="67.8442%" y="196" width="0.1606%" height="15" fill="rgb(246,177,23)" fg:x="1690" fg:w="4"/><text x="68.0942%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="70.0522%" y="212" width="0.1204%" height="15" fill="rgb(230,62,27)" fg:x="1745" fg:w="3"/><text x="70.3022%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (101 samples, 4.05%)</title><rect x="66.4392%" y="180" width="4.0546%" height="15" fill="rgb(216,154,8)" fg:x="1655" fg:w="101"/><text x="66.6892%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (62 samples, 2.49%)</title><rect x="68.0048%" y="196" width="2.4890%" height="15" fill="rgb(244,35,45)" fg:x="1694" fg:w="62"/><text x="68.2548%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.32%)</title><rect x="70.1726%" y="212" width="0.3212%" height="15" fill="rgb(251,115,12)" fg:x="1748" fg:w="8"/><text x="70.4226%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (27 samples, 1.08%)</title><rect x="70.4938%" y="180" width="1.0839%" height="15" fill="rgb(240,54,50)" fg:x="1756" fg:w="27"/><text x="70.7438%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (41 samples, 1.65%)</title><rect x="71.5777%" y="180" width="1.6459%" height="15" fill="rgb(233,84,52)" fg:x="1783" fg:w="41"/><text x="71.8277%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (30 samples, 1.20%)</title><rect x="73.2236%" y="180" width="1.2043%" height="15" fill="rgb(207,117,47)" fg:x="1824" fg:w="30"/><text x="73.4736%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (6 samples, 0.24%)</title><rect x="74.4279%" y="180" width="0.2409%" height="15" fill="rgb(249,43,39)" fg:x="1854" fg:w="6"/><text x="74.6779%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (993 samples, 39.86%)</title><rect x="37.3745%" y="164" width="39.8635%" height="15" fill="rgb(209,38,44)" fg:x="931" fg:w="993"/><text x="37.6245%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (64 samples, 2.57%)</title><rect x="74.6688%" y="180" width="2.5692%" height="15" fill="rgb(236,212,23)" fg:x="1860" fg:w="64"/><text x="74.9188%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (1,436 samples, 57.65%)</title><rect x="20.2328%" y="148" width="57.6475%" height="15" fill="rgb(242,79,21)" fg:x="504" fg:w="1436"/><text x="20.4828%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (16 samples, 0.64%)</title><rect x="77.2381%" y="164" width="0.6423%" height="15" fill="rgb(211,96,35)" fg:x="1924" fg:w="16"/><text x="77.4881%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (13 samples, 0.52%)</title><rect x="79.5664%" y="164" width="0.5219%" height="15" fill="rgb(253,215,40)" fg:x="1982" fg:w="13"/><text x="79.8164%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (13 samples, 0.52%)</title><rect x="81.0518%" y="180" width="0.5219%" height="15" fill="rgb(211,81,21)" fg:x="2019" fg:w="13"/><text x="81.3018%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (156 samples, 6.26%)</title><rect x="78.0008%" y="148" width="6.2625%" height="15" fill="rgb(208,190,38)" fg:x="1943" fg:w="156"/><text x="78.2508%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (104 samples, 4.18%)</title><rect x="80.0883%" y="164" width="4.1750%" height="15" fill="rgb(235,213,38)" fg:x="1995" fg:w="104"/><text x="80.3383%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (67 samples, 2.69%)</title><rect x="81.5737%" y="180" width="2.6897%" height="15" fill="rgb(237,122,38)" fg:x="2032" fg:w="67"/><text x="81.8237%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (14 samples, 0.56%)</title><rect x="85.0662%" y="164" width="0.5620%" height="15" fill="rgb(244,218,35)" fg:x="2119" fg:w="14"/><text x="85.3162%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (37 samples, 1.49%)</title><rect x="84.2633%" y="148" width="1.4853%" height="15" fill="rgb(240,68,47)" fg:x="2099" fg:w="37"/><text x="84.5133%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (3 samples, 0.12%)</title><rect x="85.6283%" y="164" width="0.1204%" height="15" fill="rgb(210,16,53)" fg:x="2133" fg:w="3"/><text x="85.8783%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (5 samples, 0.20%)</title><rect x="86.1903%" y="164" width="0.2007%" height="15" fill="rgb(235,124,12)" fg:x="2147" fg:w="5"/><text x="86.4403%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (33 samples, 1.32%)</title><rect x="85.7487%" y="148" width="1.3248%" height="15" fill="rgb(224,169,11)" fg:x="2136" fg:w="33"/><text x="85.9987%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (17 samples, 0.68%)</title><rect x="86.3910%" y="164" width="0.6825%" height="15" fill="rgb(250,166,2)" fg:x="2152" fg:w="17"/><text x="86.6410%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.20%)</title><rect x="88.3581%" y="164" width="0.2007%" height="15" fill="rgb(242,216,29)" fg:x="2201" fg:w="5"/><text x="88.6081%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (47 samples, 1.89%)</title><rect x="87.0735%" y="148" width="1.8868%" height="15" fill="rgb(230,116,27)" fg:x="2169" fg:w="47"/><text x="87.3235%" y="158.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.40%)</title><rect x="88.5588%" y="164" width="0.4014%" height="15" fill="rgb(228,99,48)" fg:x="2206" fg:w="10"/><text x="88.8088%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (8 samples, 0.32%)</title><rect x="88.9603%" y="148" width="0.3212%" height="15" fill="rgb(253,11,6)" fg:x="2216" fg:w="8"/><text x="89.2103%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (25 samples, 1.00%)</title><rect x="89.2814%" y="148" width="1.0036%" height="15" fill="rgb(247,143,39)" fg:x="2224" fg:w="25"/><text x="89.5314%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (4 samples, 0.16%)</title><rect x="90.1244%" y="164" width="0.1606%" height="15" fill="rgb(236,97,10)" fg:x="2245" fg:w="4"/><text x="90.3744%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (3 samples, 0.12%)</title><rect x="92.5331%" y="164" width="0.1204%" height="15" fill="rgb(233,208,19)" fg:x="2305" fg:w="3"/><text x="92.7831%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (35 samples, 1.41%)</title><rect x="92.6536%" y="164" width="1.4051%" height="15" fill="rgb(216,164,2)" fg:x="2308" fg:w="35"/><text x="92.9036%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.28%)</title><rect x="93.7776%" y="180" width="0.2810%" height="15" fill="rgb(220,129,5)" fg:x="2336" fg:w="7"/><text x="94.0276%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (96 samples, 3.85%)</title><rect x="90.2850%" y="148" width="3.8539%" height="15" fill="rgb(242,17,10)" fg:x="2249" fg:w="96"/><text x="90.5350%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (11 samples, 0.44%)</title><rect x="94.1389%" y="148" width="0.4416%" height="15" fill="rgb(242,107,0)" fg:x="2345" fg:w="11"/><text x="94.3889%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (4 samples, 0.16%)</title><rect x="94.5805%" y="148" width="0.1606%" height="15" fill="rgb(251,28,31)" fg:x="2356" fg:w="4"/><text x="94.8305%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (2,249 samples, 90.29%)</title><rect x="4.6166%" y="132" width="90.2850%" height="15" fill="rgb(233,223,10)" fg:x="115" fg:w="2249"/><text x="4.8666%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (4 samples, 0.16%)</title><rect x="94.7411%" y="148" width="0.1606%" height="15" fill="rgb(215,21,27)" fg:x="2360" fg:w="4"/><text x="94.9911%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (4 samples, 0.16%)</title><rect x="94.9016%" y="132" width="0.1606%" height="15" fill="rgb(232,23,21)" fg:x="2364" fg:w="4"/><text x="95.1516%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (7 samples, 0.28%)</title><rect x="95.0622%" y="132" width="0.2810%" height="15" fill="rgb(244,5,23)" fg:x="2368" fg:w="7"/><text x="95.3122%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (4 samples, 0.16%)</title><rect x="97.5110%" y="148" width="0.1606%" height="15" fill="rgb(226,81,46)" fg:x="2429" fg:w="4"/><text x="97.7610%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.20%)</title><rect x="97.6716%" y="148" width="0.2007%" height="15" fill="rgb(247,70,30)" fg:x="2433" fg:w="5"/><text x="97.9216%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (68 samples, 2.73%)</title><rect x="95.3432%" y="132" width="2.7298%" height="15" fill="rgb(212,68,19)" fg:x="2375" fg:w="68"/><text x="95.5932%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.20%)</title><rect x="97.8723%" y="148" width="0.2007%" height="15" fill="rgb(240,187,13)" fg:x="2438" fg:w="5"/><text x="98.1223%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (2,462 samples, 98.84%)</title><rect x="0.0401%" y="68" width="98.8358%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="2462"/><text x="0.2901%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (2,456 samples, 98.59%)</title><rect x="0.2810%" y="84" width="98.5949%" height="15" fill="rgb(206,192,2)" fg:x="7" fg:w="2456"/><text x="0.5310%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (2,440 samples, 97.95%)</title><rect x="0.9233%" y="100" width="97.9526%" height="15" fill="rgb(241,108,4)" fg:x="23" fg:w="2440"/><text x="1.1733%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (2,348 samples, 94.26%)</title><rect x="4.6166%" y="116" width="94.2593%" height="15" fill="rgb(247,173,49)" fg:x="115" fg:w="2348"/><text x="4.8666%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (20 samples, 0.80%)</title><rect x="98.0731%" y="132" width="0.8029%" height="15" fill="rgb(224,114,35)" fg:x="2443" fg:w="20"/><text x="98.3231%" y="142.50"></text></g><g><title>__init__ (lark/lark.py:407) (4 samples, 0.16%)</title><rect x="98.9964%" y="308" width="0.1606%" height="15" fill="rgb(245,159,27)" fg:x="2466" fg:w="4"/><text x="99.2464%" y="318.50"></text></g><g><title>compile (lark/load_grammar.py:738) (3 samples, 0.12%)</title><rect x="99.0365%" y="324" width="0.1204%" height="15" fill="rgb(245,172,44)" fg:x="2467" fg:w="3"/><text x="99.2865%" y="334.50"></text></g><g><title>transform (lark/visitors.py:264) (3 samples, 0.12%)</title><rect x="99.0365%" y="340" width="0.1204%" height="15" fill="rgb(236,23,11)" fg:x="2467" fg:w="3"/><text x="99.2865%" y="350.50"></text></g><g><title>transform (lark/visitors.py:284) (3 samples, 0.12%)</title><rect x="99.0365%" y="356" width="0.1204%" height="15" fill="rgb(205,117,38)" fg:x="2467" fg:w="3"/><text x="99.2865%" y="366.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (10 samples, 0.40%)</title><rect x="98.9161%" y="260" width="0.4014%" height="15" fill="rgb(237,72,25)" fg:x="2464" fg:w="10"/><text x="99.1661%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (10 samples, 0.40%)</title><rect x="98.9161%" y="276" width="0.4014%" height="15" fill="rgb(244,70,9)" fg:x="2464" fg:w="10"/><text x="99.1661%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (10 samples, 0.40%)</title><rect x="98.9161%" y="292" width="0.4014%" height="15" fill="rgb(217,125,39)" fg:x="2464" fg:w="10"/><text x="99.1661%" y="302.50"></text></g><g><title>__init__ (lark/lark.py:439) (4 samples, 0.16%)</title><rect x="99.1570%" y="308" width="0.1606%" height="15" fill="rgb(235,36,10)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="318.50"></text></g><g><title>_build_parser (lark/lark.py:485) (4 samples, 0.16%)</title><rect x="99.1570%" y="324" width="0.1606%" height="15" fill="rgb(251,123,47)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="334.50"></text></g><g><title>_construct_parsing_frontend (lark/parser_frontends.py:257) (4 samples, 0.16%)</title><rect x="99.1570%" y="340" width="0.1606%" height="15" fill="rgb(221,13,13)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="350.50"></text></g><g><title>__init__ (lark/parser_frontends.py:61) (4 samples, 0.16%)</title><rect x="99.1570%" y="356" width="0.1606%" height="15" fill="rgb(238,131,9)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="366.50"></text></g><g><title>create_earley_parser (lark/parser_frontends.py:215) (4 samples, 0.16%)</title><rect x="99.1570%" y="372" width="0.1606%" height="15" fill="rgb(211,50,8)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="382.50"></text></g><g><title>create_earley_parser__dynamic (lark/parser_frontends.py:193) (4 samples, 0.16%)</title><rect x="99.1570%" y="388" width="0.1606%" height="15" fill="rgb(245,182,24)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="398.50"></text></g><g><title>__init__ (lark/parsers/xearley.py:34) (4 samples, 0.16%)</title><rect x="99.1570%" y="404" width="0.1606%" height="15" fill="rgb(242,14,37)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="414.50"></text></g><g><title>__init__ (lark/parsers/earley.py:35) (4 samples, 0.16%)</title><rect x="99.1570%" y="420" width="0.1606%" height="15" fill="rgb(246,228,12)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="430.50"></text></g><g><title>__init__ (lark/parsers/grammar_analysis.py:178) (4 samples, 0.16%)</title><rect x="99.1570%" y="436" width="0.1606%" height="15" fill="rgb(213,55,15)" fg:x="2470" fg:w="4"/><text x="99.4070%" y="446.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (14 samples, 0.56%)</title><rect x="98.8760%" y="68" width="0.5620%" height="15" fill="rgb(209,9,3)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.56%)</title><rect x="98.8760%" y="84" width="0.5620%" height="15" fill="rgb(230,59,30)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.56%)</title><rect x="98.8760%" y="100" width="0.5620%" height="15" fill="rgb(209,121,21)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.56%)</title><rect x="98.8760%" y="116" width="0.5620%" height="15" fill="rgb(220,109,13)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.56%)</title><rect x="98.8760%" y="132" width="0.5620%" height="15" fill="rgb(232,18,1)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.56%)</title><rect x="98.8760%" y="148" width="0.5620%" height="15" fill="rgb(215,41,42)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.56%)</title><rect x="98.8760%" y="164" width="0.5620%" height="15" fill="rgb(224,123,36)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.56%)</title><rect x="98.8760%" y="180" width="0.5620%" height="15" fill="rgb(240,125,3)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.56%)</title><rect x="98.8760%" y="196" width="0.5620%" height="15" fill="rgb(205,98,50)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.56%)</title><rect x="98.8760%" y="212" width="0.5620%" height="15" fill="rgb(205,185,37)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.56%)</title><rect x="98.8760%" y="228" width="0.5620%" height="15" fill="rgb(238,207,15)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.56%)</title><rect x="98.8760%" y="244" width="0.5620%" height="15" fill="rgb(213,199,42)" fg:x="2463" fg:w="14"/><text x="99.1260%" y="254.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:4) (3 samples, 0.12%)</title><rect x="99.3175%" y="260" width="0.1204%" height="15" fill="rgb(235,201,11)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="99.3175%" y="276" width="0.1204%" height="15" fill="rgb(207,46,11)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="99.3175%" y="292" width="0.1204%" height="15" fill="rgb(241,35,35)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="99.3175%" y="308" width="0.1204%" height="15" fill="rgb(243,32,47)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="99.3175%" y="324" width="0.1204%" height="15" fill="rgb(247,202,23)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="99.3175%" y="340" width="0.1204%" height="15" fill="rgb(219,102,11)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="350.50"></text></g><g><title>&lt;module&gt; (lark/__init__.py:11) (3 samples, 0.12%)</title><rect x="99.3175%" y="356" width="0.1204%" height="15" fill="rgb(243,110,44)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="99.3175%" y="372" width="0.1204%" height="15" fill="rgb(222,74,54)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="99.3175%" y="388" width="0.1204%" height="15" fill="rgb(216,99,12)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="99.3175%" y="404" width="0.1204%" height="15" fill="rgb(226,22,26)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="99.3175%" y="420" width="0.1204%" height="15" fill="rgb(217,163,10)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="99.3175%" y="436" width="0.1204%" height="15" fill="rgb(213,25,53)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="446.50"></text></g><g><title>&lt;module&gt; (lark/lark.py:20) (3 samples, 0.12%)</title><rect x="99.3175%" y="452" width="0.1204%" height="15" fill="rgb(252,105,26)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (3 samples, 0.12%)</title><rect x="99.3175%" y="468" width="0.1204%" height="15" fill="rgb(220,39,43)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (3 samples, 0.12%)</title><rect x="99.3175%" y="484" width="0.1204%" height="15" fill="rgb(229,68,48)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (3 samples, 0.12%)</title><rect x="99.3175%" y="500" width="0.1204%" height="15" fill="rgb(252,8,32)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (3 samples, 0.12%)</title><rect x="99.3175%" y="516" width="0.1204%" height="15" fill="rgb(223,20,43)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (3 samples, 0.12%)</title><rect x="99.3175%" y="532" width="0.1204%" height="15" fill="rgb(229,81,49)" fg:x="2474" fg:w="3"/><text x="99.5675%" y="542.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (4 samples, 0.16%)</title><rect x="99.5183%" y="68" width="0.1606%" height="15" fill="rgb(236,28,36)" fg:x="2479" fg:w="4"/><text x="99.7683%" y="78.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (3 samples, 0.12%)</title><rect x="99.5584%" y="84" width="0.1204%" height="15" fill="rgb(249,185,26)" fg:x="2480" fg:w="3"/><text x="99.8084%" y="94.50"></text></g><g><title>sites (kappybara/pattern.py:109) (5 samples, 0.20%)</title><rect x="99.6788%" y="68" width="0.2007%" height="15" fill="rgb(249,174,33)" fg:x="2483" fg:w="5"/><text x="99.9288%" y="78.50"></text></g><g><title>all (2,491 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="2491"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (3 samples, 0.12%)</title><rect x="99.8796%" y="68" width="0.1204%" height="15" fill="rgb(221,78,26)" fg:x="2488" fg:w="3"/><text x="100.1296%" y="78.50"></text></g></svg></svg>