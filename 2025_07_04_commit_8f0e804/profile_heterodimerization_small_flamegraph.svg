<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 8f0e804</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="5119"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (12 samples, 0.23%)</title><rect x="0.0000%" y="68" width="0.2344%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="12"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.23%)</title><rect x="0.0000%" y="84" width="0.2344%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="12"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.23%)</title><rect x="0.0000%" y="100" width="0.2344%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="12"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.23%)</title><rect x="0.0000%" y="116" width="0.2344%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="12"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.23%)</title><rect x="0.0000%" y="132" width="0.2344%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="12"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.23%)</title><rect x="0.0000%" y="148" width="0.2344%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="12"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (8 samples, 0.16%)</title><rect x="0.0781%" y="164" width="0.1563%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="8"/><text x="0.3281%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (8 samples, 0.16%)</title><rect x="0.0781%" y="180" width="0.1563%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="8"/><text x="0.3281%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (8 samples, 0.16%)</title><rect x="0.0781%" y="196" width="0.1563%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="8"/><text x="0.3281%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (8 samples, 0.16%)</title><rect x="0.0781%" y="212" width="0.1563%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="8"/><text x="0.3281%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (8 samples, 0.16%)</title><rect x="0.0781%" y="228" width="0.1563%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="8"/><text x="0.3281%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (8 samples, 0.16%)</title><rect x="0.0781%" y="244" width="0.1563%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="8"/><text x="0.3281%" y="254.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (9 samples, 0.18%)</title><rect x="0.2344%" y="68" width="0.1758%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="9"/><text x="0.4844%" y="78.50"></text></g><g><title>update (kappybara/system.py:69) (6 samples, 0.12%)</title><rect x="0.4298%" y="84" width="0.1172%" height="15" fill="rgb(206,188,39)" fg:x="22" fg:w="6"/><text x="0.6798%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (6 samples, 0.12%)</title><rect x="0.4298%" y="100" width="0.1172%" height="15" fill="rgb(217,207,13)" fg:x="22" fg:w="6"/><text x="0.6798%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (6 samples, 0.12%)</title><rect x="0.4298%" y="116" width="0.1172%" height="15" fill="rgb(231,73,38)" fg:x="22" fg:w="6"/><text x="0.6798%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (13 samples, 0.25%)</title><rect x="0.6056%" y="100" width="0.2540%" height="15" fill="rgb(225,20,46)" fg:x="31" fg:w="13"/><text x="0.8556%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (11 samples, 0.21%)</title><rect x="0.6447%" y="116" width="0.2149%" height="15" fill="rgb(210,31,41)" fg:x="33" fg:w="11"/><text x="0.8947%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (73 samples, 1.43%)</title><rect x="0.9377%" y="132" width="1.4261%" height="15" fill="rgb(221,200,47)" fg:x="48" fg:w="73"/><text x="1.1877%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (24 samples, 0.47%)</title><rect x="2.6763%" y="148" width="0.4688%" height="15" fill="rgb(226,26,5)" fg:x="137" fg:w="24"/><text x="2.9263%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.33%)</title><rect x="6.9349%" y="164" width="0.3321%" height="15" fill="rgb(249,33,26)" fg:x="355" fg:w="17"/><text x="7.1849%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (237 samples, 4.63%)</title><rect x="3.1451%" y="148" width="4.6298%" height="15" fill="rgb(235,183,28)" fg:x="161" fg:w="237"/><text x="3.3951%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.51%)</title><rect x="7.2670%" y="164" width="0.5079%" height="15" fill="rgb(221,5,38)" fg:x="372" fg:w="26"/><text x="7.5170%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (12 samples, 0.23%)</title><rect x="11.4866%" y="164" width="0.2344%" height="15" fill="rgb(247,18,42)" fg:x="588" fg:w="12"/><text x="11.7366%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (217 samples, 4.24%)</title><rect x="7.7750%" y="148" width="4.2391%" height="15" fill="rgb(241,131,45)" fg:x="398" fg:w="217"/><text x="8.0250%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.29%)</title><rect x="11.7210%" y="164" width="0.2930%" height="15" fill="rgb(249,31,29)" fg:x="600" fg:w="15"/><text x="11.9710%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (42 samples, 0.82%)</title><rect x="12.0922%" y="148" width="0.8205%" height="15" fill="rgb(225,111,53)" fg:x="619" fg:w="42"/><text x="12.3422%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (25 samples, 0.49%)</title><rect x="12.9127%" y="148" width="0.4884%" height="15" fill="rgb(238,160,17)" fg:x="661" fg:w="25"/><text x="13.1627%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.27%)</title><rect x="15.4913%" y="164" width="0.2735%" height="15" fill="rgb(214,148,48)" fg:x="793" fg:w="14"/><text x="15.7413%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (144 samples, 2.81%)</title><rect x="13.4011%" y="148" width="2.8130%" height="15" fill="rgb(232,36,49)" fg:x="686" fg:w="144"/><text x="13.6511%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.45%)</title><rect x="15.7648%" y="164" width="0.4493%" height="15" fill="rgb(209,103,24)" fg:x="807" fg:w="23"/><text x="16.0148%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (116 samples, 2.27%)</title><rect x="16.2141%" y="148" width="2.2661%" height="15" fill="rgb(229,88,8)" fg:x="830" fg:w="116"/><text x="16.4641%" y="158.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (9 samples, 0.18%)</title><rect x="20.6290%" y="164" width="0.1758%" height="15" fill="rgb(213,181,19)" fg:x="1056" fg:w="9"/><text x="20.8790%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (48 samples, 0.94%)</title><rect x="20.8048%" y="164" width="0.9377%" height="15" fill="rgb(254,191,54)" fg:x="1065" fg:w="48"/><text x="21.0548%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (72 samples, 1.41%)</title><rect x="23.5984%" y="180" width="1.4065%" height="15" fill="rgb(241,83,37)" fg:x="1208" fg:w="72"/><text x="23.8484%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (49 samples, 0.96%)</title><rect x="26.9779%" y="196" width="0.9572%" height="15" fill="rgb(233,36,39)" fg:x="1381" fg:w="49"/><text x="27.2279%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (525 samples, 10.26%)</title><rect x="21.7816%" y="164" width="10.2559%" height="15" fill="rgb(226,3,54)" fg:x="1115" fg:w="525"/><text x="22.0316%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (360 samples, 7.03%)</title><rect x="25.0049%" y="180" width="7.0326%" height="15" fill="rgb(245,192,40)" fg:x="1280" fg:w="360"/><text x="25.2549%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (210 samples, 4.10%)</title><rect x="27.9351%" y="196" width="4.1024%" height="15" fill="rgb(238,167,29)" fg:x="1430" fg:w="210"/><text x="28.1851%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (66 samples, 1.29%)</title><rect x="32.0375%" y="164" width="1.2893%" height="15" fill="rgb(232,182,51)" fg:x="1640" fg:w="66"/><text x="32.2875%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (28 samples, 0.55%)</title><rect x="34.5575%" y="180" width="0.5470%" height="15" fill="rgb(231,60,39)" fg:x="1769" fg:w="28"/><text x="34.8075%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (110 samples, 2.15%)</title><rect x="33.4050%" y="164" width="2.1489%" height="15" fill="rgb(208,69,12)" fg:x="1710" fg:w="110"/><text x="33.6550%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (23 samples, 0.45%)</title><rect x="35.1045%" y="180" width="0.4493%" height="15" fill="rgb(235,93,37)" fg:x="1797" fg:w="23"/><text x="35.3545%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (101 samples, 1.97%)</title><rect x="44.2274%" y="180" width="1.9730%" height="15" fill="rgb(213,116,39)" fg:x="2264" fg:w="101"/><text x="44.4774%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (7 samples, 0.14%)</title><rect x="46.2004%" y="180" width="0.1367%" height="15" fill="rgb(222,207,29)" fg:x="2365" fg:w="7"/><text x="46.4504%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (18 samples, 0.35%)</title><rect x="46.8060%" y="196" width="0.3516%" height="15" fill="rgb(206,96,30)" fg:x="2396" fg:w="18"/><text x="47.0560%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (107 samples, 2.09%)</title><rect x="46.3372%" y="180" width="2.0903%" height="15" fill="rgb(218,138,4)" fg:x="2372" fg:w="107"/><text x="46.5872%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (65 samples, 1.27%)</title><rect x="47.1576%" y="196" width="1.2698%" height="15" fill="rgb(250,191,14)" fg:x="2414" fg:w="65"/><text x="47.4076%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (16 samples, 0.31%)</title><rect x="49.5019%" y="196" width="0.3126%" height="15" fill="rgb(239,60,40)" fg:x="2534" fg:w="16"/><text x="49.7519%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (14 samples, 0.27%)</title><rect x="52.1391%" y="212" width="0.2735%" height="15" fill="rgb(206,27,48)" fg:x="2669" fg:w="14"/><text x="52.3891%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (249 samples, 4.86%)</title><rect x="49.8144%" y="196" width="4.8642%" height="15" fill="rgb(225,35,8)" fg:x="2550" fg:w="249"/><text x="50.0644%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (116 samples, 2.27%)</title><rect x="52.4126%" y="212" width="2.2661%" height="15" fill="rgb(250,213,24)" fg:x="2683" fg:w="116"/><text x="52.6626%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.39%)</title><rect x="54.2879%" y="228" width="0.3907%" height="15" fill="rgb(247,123,22)" fg:x="2779" fg:w="20"/><text x="54.5379%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (120 samples, 2.34%)</title><rect x="54.6786%" y="196" width="2.3442%" height="15" fill="rgb(231,138,38)" fg:x="2799" fg:w="120"/><text x="54.9286%" y="206.50">b..</text></g><g><title>bound (kappybara/pattern.py:59) (37 samples, 0.72%)</title><rect x="57.0229%" y="196" width="0.7228%" height="15" fill="rgb(231,145,46)" fg:x="2919" fg:w="37"/><text x="57.2729%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (14 samples, 0.27%)</title><rect x="57.7457%" y="196" width="0.2735%" height="15" fill="rgb(251,118,11)" fg:x="2956" fg:w="14"/><text x="57.9957%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (519 samples, 10.14%)</title><rect x="48.4274%" y="180" width="10.1387%" height="15" fill="rgb(217,147,25)" fg:x="2479" fg:w="519"/><text x="48.6774%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (28 samples, 0.55%)</title><rect x="58.0191%" y="196" width="0.5470%" height="15" fill="rgb(247,81,37)" fg:x="2970" fg:w="28"/><text x="58.2691%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (9 samples, 0.18%)</title><rect x="58.6443%" y="180" width="0.1758%" height="15" fill="rgb(209,12,38)" fg:x="3002" fg:w="9"/><text x="58.8943%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (7 samples, 0.14%)</title><rect x="59.2694%" y="196" width="0.1367%" height="15" fill="rgb(227,1,9)" fg:x="3034" fg:w="7"/><text x="59.5194%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (65 samples, 1.27%)</title><rect x="58.8201%" y="180" width="1.2698%" height="15" fill="rgb(248,47,43)" fg:x="3011" fg:w="65"/><text x="59.0701%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (35 samples, 0.68%)</title><rect x="59.4061%" y="196" width="0.6837%" height="15" fill="rgb(221,10,30)" fg:x="3041" fg:w="35"/><text x="59.6561%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (6 samples, 0.12%)</title><rect x="59.9727%" y="212" width="0.1172%" height="15" fill="rgb(210,229,1)" fg:x="3070" fg:w="6"/><text x="60.2227%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (73 samples, 1.43%)</title><rect x="60.0899%" y="180" width="1.4261%" height="15" fill="rgb(222,148,37)" fg:x="3076" fg:w="73"/><text x="60.3399%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (43 samples, 0.84%)</title><rect x="60.6759%" y="196" width="0.8400%" height="15" fill="rgb(234,67,33)" fg:x="3106" fg:w="43"/><text x="60.9259%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.18%)</title><rect x="61.3401%" y="212" width="0.1758%" height="15" fill="rgb(247,98,35)" fg:x="3140" fg:w="9"/><text x="61.5901%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (26 samples, 0.51%)</title><rect x="61.5159%" y="180" width="0.5079%" height="15" fill="rgb(247,138,52)" fg:x="3149" fg:w="26"/><text x="61.7659%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (52 samples, 1.02%)</title><rect x="62.0238%" y="180" width="1.0158%" height="15" fill="rgb(213,79,30)" fg:x="3175" fg:w="52"/><text x="62.2738%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (28 samples, 0.55%)</title><rect x="63.0397%" y="180" width="0.5470%" height="15" fill="rgb(246,177,23)" fg:x="3227" fg:w="28"/><text x="63.2897%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (10 samples, 0.20%)</title><rect x="63.5866%" y="180" width="0.1954%" height="15" fill="rgb(230,62,27)" fg:x="3255" fg:w="10"/><text x="63.8366%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,577 samples, 30.81%)</title><rect x="35.5538%" y="164" width="30.8068%" height="15" fill="rgb(216,154,8)" fg:x="1820" fg:w="1577"/><text x="35.8038%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (132 samples, 2.58%)</title><rect x="63.7820%" y="180" width="2.5786%" height="15" fill="rgb(244,35,45)" fg:x="3265" fg:w="132"/><text x="64.0320%" y="190.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,479 samples, 48.43%)</title><rect x="18.4802%" y="148" width="48.4274%" height="15" fill="rgb(251,115,12)" fg:x="946" fg:w="2479"/><text x="18.7302%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (28 samples, 0.55%)</title><rect x="66.3606%" y="164" width="0.5470%" height="15" fill="rgb(240,54,50)" fg:x="3397" fg:w="28"/><text x="66.6106%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (28 samples, 0.55%)</title><rect x="68.6267%" y="164" width="0.5470%" height="15" fill="rgb(233,84,52)" fg:x="3513" fg:w="28"/><text x="68.8767%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (32 samples, 0.63%)</title><rect x="70.5997%" y="180" width="0.6251%" height="15" fill="rgb(207,117,47)" fg:x="3614" fg:w="32"/><text x="70.8497%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (350 samples, 6.84%)</title><rect x="67.0053%" y="148" width="6.8373%" height="15" fill="rgb(249,43,39)" fg:x="3430" fg:w="350"/><text x="67.2553%" y="158.50">embedding..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (239 samples, 4.67%)</title><rect x="69.1737%" y="164" width="4.6689%" height="15" fill="rgb(209,38,44)" fg:x="3541" fg:w="239"/><text x="69.4237%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (134 samples, 2.62%)</title><rect x="71.2248%" y="180" width="2.6177%" height="15" fill="rgb(236,212,23)" fg:x="3646" fg:w="134"/><text x="71.4748%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (15 samples, 0.29%)</title><rect x="74.8388%" y="164" width="0.2930%" height="15" fill="rgb(242,79,21)" fg:x="3831" fg:w="15"/><text x="75.0888%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (75 samples, 1.47%)</title><rect x="73.8425%" y="148" width="1.4651%" height="15" fill="rgb(211,96,35)" fg:x="3780" fg:w="75"/><text x="74.0925%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (9 samples, 0.18%)</title><rect x="75.1319%" y="164" width="0.1758%" height="15" fill="rgb(253,215,40)" fg:x="3846" fg:w="9"/><text x="75.3819%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (61 samples, 1.19%)</title><rect x="75.3077%" y="148" width="1.1916%" height="15" fill="rgb(211,81,21)" fg:x="3855" fg:w="61"/><text x="75.5577%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (33 samples, 0.64%)</title><rect x="75.8547%" y="164" width="0.6447%" height="15" fill="rgb(208,190,38)" fg:x="3883" fg:w="33"/><text x="76.1047%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (46 samples, 0.90%)</title><rect x="76.4993%" y="148" width="0.8986%" height="15" fill="rgb(235,213,38)" fg:x="3916" fg:w="46"/><text x="76.7493%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.16%)</title><rect x="77.2416%" y="164" width="0.1563%" height="15" fill="rgb(237,122,38)" fg:x="3954" fg:w="8"/><text x="77.4916%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (19 samples, 0.37%)</title><rect x="77.3979%" y="148" width="0.3712%" height="15" fill="rgb(244,218,35)" fg:x="3962" fg:w="19"/><text x="77.6479%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (18 samples, 0.35%)</title><rect x="77.7691%" y="148" width="0.3516%" height="15" fill="rgb(240,68,47)" fg:x="3981" fg:w="18"/><text x="78.0191%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (44 samples, 0.86%)</title><rect x="79.4100%" y="164" width="0.8595%" height="15" fill="rgb(210,16,53)" fg:x="4065" fg:w="44"/><text x="79.6600%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (113 samples, 2.21%)</title><rect x="78.1207%" y="148" width="2.2075%" height="15" fill="rgb(235,124,12)" fg:x="3999" fg:w="113"/><text x="78.3707%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (20 samples, 0.39%)</title><rect x="80.3673%" y="148" width="0.3907%" height="15" fill="rgb(224,169,11)" fg:x="4114" fg:w="20"/><text x="80.6173%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (52 samples, 1.02%)</title><rect x="80.7580%" y="148" width="1.0158%" height="15" fill="rgb(250,166,2)" fg:x="4134" fg:w="52"/><text x="81.0080%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (4,069 samples, 79.49%)</title><rect x="2.3637%" y="132" width="79.4882%" height="15" fill="rgb(242,216,29)" fg:x="121" fg:w="4069"/><text x="2.6137%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (45 samples, 0.88%)</title><rect x="81.8519%" y="132" width="0.8791%" height="15" fill="rgb(230,116,27)" fg:x="4190" fg:w="45"/><text x="82.1019%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (16 samples, 0.31%)</title><rect x="82.7310%" y="132" width="0.3126%" height="15" fill="rgb(228,99,48)" fg:x="4235" fg:w="16"/><text x="82.9810%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (13 samples, 0.25%)</title><rect x="83.0436%" y="132" width="0.2540%" height="15" fill="rgb(253,11,6)" fg:x="4251" fg:w="13"/><text x="83.2936%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (153 samples, 2.99%)</title><rect x="90.7599%" y="148" width="2.9889%" height="15" fill="rgb(247,143,39)" fg:x="4646" fg:w="153"/><text x="91.0099%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.25%)</title><rect x="93.7488%" y="148" width="0.2540%" height="15" fill="rgb(236,97,10)" fg:x="4799" fg:w="13"/><text x="93.9988%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (584 samples, 11.41%)</title><rect x="83.2975%" y="132" width="11.4085%" height="15" fill="rgb(233,208,19)" fg:x="4264" fg:w="584"/><text x="83.5475%" y="142.50">_update_embedding..</text></g><g><title>__hash__ (kappybara/utils.py:30) (36 samples, 0.70%)</title><rect x="94.0027%" y="148" width="0.7033%" height="15" fill="rgb(216,164,2)" fg:x="4812" fg:w="36"/><text x="94.2527%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (51 samples, 1.00%)</title><rect x="98.2223%" y="148" width="0.9963%" height="15" fill="rgb(220,129,5)" fg:x="5028" fg:w="51"/><text x="98.4723%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (5,073 samples, 99.10%)</title><rect x="0.4102%" y="68" width="99.1014%" height="15" fill="rgb(242,17,10)" fg:x="21" fg:w="5073"/><text x="0.6602%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (5,066 samples, 98.96%)</title><rect x="0.5470%" y="84" width="98.9646%" height="15" fill="rgb(242,107,0)" fg:x="28" fg:w="5066"/><text x="0.7970%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (5,050 samples, 98.65%)</title><rect x="0.8595%" y="100" width="98.6521%" height="15" fill="rgb(251,28,31)" fg:x="44" fg:w="5050"/><text x="1.1095%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (5,046 samples, 98.57%)</title><rect x="0.9377%" y="116" width="98.5739%" height="15" fill="rgb(233,223,10)" fg:x="48" fg:w="5046"/><text x="1.1877%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (246 samples, 4.81%)</title><rect x="94.7060%" y="132" width="4.8056%" height="15" fill="rgb(215,21,27)" fg:x="4848" fg:w="246"/><text x="94.9560%" y="142.50">_updat..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.29%)</title><rect x="99.2186%" y="148" width="0.2930%" height="15" fill="rgb(232,23,21)" fg:x="5079" fg:w="15"/><text x="99.4686%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (7 samples, 0.14%)</title><rect x="99.5116%" y="68" width="0.1367%" height="15" fill="rgb(244,5,23)" fg:x="5094" fg:w="7"/><text x="99.7616%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (8 samples, 0.16%)</title><rect x="99.7265%" y="68" width="0.1563%" height="15" fill="rgb(226,81,46)" fg:x="5105" fg:w="8"/><text x="99.9765%" y="78.50"></text></g><g><title>all (5,119 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="5119"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (6 samples, 0.12%)</title><rect x="99.8828%" y="68" width="0.1172%" height="15" fill="rgb(212,68,19)" fg:x="5113" fg:w="6"/><text x="100.1328%" y="78.50"></text></g></svg></svg>