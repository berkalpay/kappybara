<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit 0b33cb2</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11959"><g><title>update (kappybara/system.py:69) (53 samples, 0.44%)</title><rect x="0.0585%" y="84" width="0.4432%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="53"/><text x="0.3085%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (53 samples, 0.44%)</title><rect x="0.0585%" y="100" width="0.4432%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="53"/><text x="0.3085%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (53 samples, 0.44%)</title><rect x="0.0585%" y="116" width="0.4432%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="53"/><text x="0.3085%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (50 samples, 0.42%)</title><rect x="0.0836%" y="132" width="0.4181%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="50"/><text x="0.3336%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (50 samples, 0.42%)</title><rect x="0.0836%" y="148" width="0.4181%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="50"/><text x="0.3336%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:32) (50 samples, 0.42%)</title><rect x="0.0836%" y="164" width="0.4181%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="50"/><text x="0.3336%" y="174.50"></text></g><g><title>select (kappybara/rule.py:104) (18 samples, 0.15%)</title><rect x="0.6021%" y="116" width="0.1505%" height="15" fill="rgb(207,160,47)" fg:x="72" fg:w="18"/><text x="0.8521%" y="126.50"></text></g><g><title>select (kappybara/rule.py:218) (17 samples, 0.14%)</title><rect x="0.8362%" y="116" width="0.1422%" height="15" fill="rgb(228,23,34)" fg:x="100" fg:w="17"/><text x="1.0862%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (53 samples, 0.44%)</title><rect x="0.5937%" y="100" width="0.4432%" height="15" fill="rgb(218,30,26)" fg:x="71" fg:w="53"/><text x="0.8437%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (21 samples, 0.18%)</title><rect x="1.1205%" y="164" width="0.1756%" height="15" fill="rgb(220,122,19)" fg:x="134" fg:w="21"/><text x="1.3705%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (43 samples, 0.36%)</title><rect x="1.1038%" y="148" width="0.3596%" height="15" fill="rgb(250,228,42)" fg:x="132" fg:w="43"/><text x="1.3538%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (18 samples, 0.15%)</title><rect x="1.3128%" y="164" width="0.1505%" height="15" fill="rgb(240,193,28)" fg:x="157" fg:w="18"/><text x="1.5628%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (53 samples, 0.44%)</title><rect x="1.5219%" y="164" width="0.4432%" height="15" fill="rgb(216,20,37)" fg:x="182" fg:w="53"/><text x="1.7719%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:66) (14 samples, 0.12%)</title><rect x="1.8480%" y="180" width="0.1171%" height="15" fill="rgb(206,188,39)" fg:x="221" fg:w="14"/><text x="2.0980%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (26 samples, 0.22%)</title><rect x="2.2075%" y="180" width="0.2174%" height="15" fill="rgb(217,207,13)" fg:x="264" fg:w="26"/><text x="2.4575%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (26 samples, 0.22%)</title><rect x="2.4250%" y="180" width="0.2174%" height="15" fill="rgb(231,73,38)" fg:x="290" fg:w="26"/><text x="2.6750%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (31 samples, 0.26%)</title><rect x="2.6674%" y="180" width="0.2592%" height="15" fill="rgb(225,20,46)" fg:x="319" fg:w="31"/><text x="2.9174%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (193 samples, 1.61%)</title><rect x="1.4633%" y="148" width="1.6138%" height="15" fill="rgb(210,31,41)" fg:x="175" fg:w="193"/><text x="1.7133%" y="158.50"></text></g><g><title>create_index (kappybara/indexed_set.py:198) (133 samples, 1.11%)</title><rect x="1.9650%" y="164" width="1.1121%" height="15" fill="rgb(221,200,47)" fg:x="235" fg:w="133"/><text x="2.2150%" y="174.50"></text></g><g><title>add (kappybara/indexed_set.py:138) (18 samples, 0.15%)</title><rect x="2.9267%" y="180" width="0.1505%" height="15" fill="rgb(226,26,5)" fg:x="350" fg:w="18"/><text x="3.1767%" y="190.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (72 samples, 0.60%)</title><rect x="3.1274%" y="148" width="0.6021%" height="15" fill="rgb(249,33,26)" fg:x="374" fg:w="72"/><text x="3.3774%" y="158.50"></text></g><g><title>sites (kappybara/pattern.py:111) (12 samples, 0.10%)</title><rect x="4.6492%" y="196" width="0.1003%" height="15" fill="rgb(235,183,28)" fg:x="556" fg:w="12"/><text x="4.8992%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (68 samples, 0.57%)</title><rect x="4.5572%" y="180" width="0.5686%" height="15" fill="rgb(221,5,38)" fg:x="545" fg:w="68"/><text x="4.8072%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (45 samples, 0.38%)</title><rect x="4.7496%" y="196" width="0.3763%" height="15" fill="rgb(247,18,42)" fg:x="568" fg:w="45"/><text x="4.9996%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (514 samples, 4.30%)</title><rect x="1.0369%" y="116" width="4.2980%" height="15" fill="rgb(241,131,45)" fg:x="124" fg:w="514"/><text x="1.2869%" y="126.50">apply..</text></g><g><title>_remove_edge (kappybara/mixture.py:191) (507 samples, 4.24%)</title><rect x="1.0954%" y="132" width="4.2395%" height="15" fill="rgb(249,31,29)" fg:x="131" fg:w="507"/><text x="1.3454%" y="142.50">_remo..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (174 samples, 1.45%)</title><rect x="3.8799%" y="148" width="1.4550%" height="15" fill="rgb(225,111,53)" fg:x="464" fg:w="174"/><text x="4.1299%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (156 samples, 1.30%)</title><rect x="4.0304%" y="164" width="1.3045%" height="15" fill="rgb(238,160,17)" fg:x="482" fg:w="156"/><text x="4.2804%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (20 samples, 0.17%)</title><rect x="5.1677%" y="180" width="0.1672%" height="15" fill="rgb(214,148,48)" fg:x="618" fg:w="20"/><text x="5.4177%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (72 samples, 0.60%)</title><rect x="5.8868%" y="180" width="0.6021%" height="15" fill="rgb(232,36,49)" fg:x="704" fg:w="72"/><text x="6.1368%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (949 samples, 7.94%)</title><rect x="6.4888%" y="180" width="7.9354%" height="15" fill="rgb(209,103,24)" fg:x="776" fg:w="949"/><text x="6.7388%" y="190.50">embeddings ..</text></g><g><title>__hash__ (kappybara/utils.py:30) (32 samples, 0.27%)</title><rect x="14.1567%" y="196" width="0.2676%" height="15" fill="rgb(229,88,8)" fg:x="1693" fg:w="32"/><text x="14.4067%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.14%)</title><rect x="16.9914%" y="196" width="0.1422%" height="15" fill="rgb(213,181,19)" fg:x="2032" fg:w="17"/><text x="17.2414%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (345 samples, 2.88%)</title><rect x="14.4243%" y="180" width="2.8849%" height="15" fill="rgb(254,191,54)" fg:x="1725" fg:w="345"/><text x="14.6743%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.18%)</title><rect x="17.1335%" y="196" width="0.1756%" height="15" fill="rgb(241,83,37)" fg:x="2049" fg:w="21"/><text x="17.3835%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (101 samples, 0.84%)</title><rect x="17.3593%" y="180" width="0.8446%" height="15" fill="rgb(233,36,39)" fg:x="2076" fg:w="101"/><text x="17.6093%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (77 samples, 0.64%)</title><rect x="18.2039%" y="180" width="0.6439%" height="15" fill="rgb(226,3,54)" fg:x="2177" fg:w="77"/><text x="18.4539%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (32 samples, 0.27%)</title><rect x="21.2560%" y="196" width="0.2676%" height="15" fill="rgb(245,192,40)" fg:x="2542" fg:w="32"/><text x="21.5060%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (347 samples, 2.90%)</title><rect x="18.8477%" y="180" width="2.9016%" height="15" fill="rgb(238,167,29)" fg:x="2254" fg:w="347"/><text x="19.0977%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (27 samples, 0.23%)</title><rect x="21.5235%" y="196" width="0.2258%" height="15" fill="rgb(232,182,51)" fg:x="2574" fg:w="27"/><text x="21.7735%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (308 samples, 2.58%)</title><rect x="21.7493%" y="180" width="2.5755%" height="15" fill="rgb(231,60,39)" fg:x="2601" fg:w="308"/><text x="21.9993%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (20 samples, 0.17%)</title><rect x="26.0891%" y="196" width="0.1672%" height="15" fill="rgb(208,69,12)" fg:x="3120" fg:w="20"/><text x="26.3391%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (119 samples, 1.00%)</title><rect x="26.2564%" y="196" width="0.9951%" height="15" fill="rgb(235,93,37)" fg:x="3140" fg:w="119"/><text x="26.5064%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (159 samples, 1.33%)</title><rect x="29.0325%" y="212" width="1.3295%" height="15" fill="rgb(213,116,39)" fg:x="3472" fg:w="159"/><text x="29.2825%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (100 samples, 0.84%)</title><rect x="31.9592%" y="228" width="0.8362%" height="15" fill="rgb(222,207,29)" fg:x="3822" fg:w="100"/><text x="32.2092%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,046 samples, 8.75%)</title><rect x="27.3016%" y="196" width="8.7466%" height="15" fill="rgb(206,96,30)" fg:x="3265" fg:w="1046"/><text x="27.5516%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (680 samples, 5.69%)</title><rect x="30.3621%" y="212" width="5.6861%" height="15" fill="rgb(218,138,4)" fg:x="3631" fg:w="680"/><text x="30.6121%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (389 samples, 3.25%)</title><rect x="32.7954%" y="228" width="3.2528%" height="15" fill="rgb(250,191,14)" fg:x="3922" fg:w="389"/><text x="33.0454%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (110 samples, 0.92%)</title><rect x="36.0482%" y="196" width="0.9198%" height="15" fill="rgb(239,60,40)" fg:x="4311" fg:w="110"/><text x="36.2982%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (22 samples, 0.18%)</title><rect x="37.7874%" y="212" width="0.1840%" height="15" fill="rgb(206,27,48)" fg:x="4519" fg:w="22"/><text x="38.0374%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (181 samples, 1.51%)</title><rect x="37.0265%" y="196" width="1.5135%" height="15" fill="rgb(225,35,8)" fg:x="4428" fg:w="181"/><text x="37.2765%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (68 samples, 0.57%)</title><rect x="37.9714%" y="212" width="0.5686%" height="15" fill="rgb(250,213,24)" fg:x="4541" fg:w="68"/><text x="38.2214%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (204 samples, 1.71%)</title><rect x="45.9570%" y="212" width="1.7058%" height="15" fill="rgb(247,123,22)" fg:x="5496" fg:w="204"/><text x="46.2070%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (15 samples, 0.13%)</title><rect x="47.6628%" y="212" width="0.1254%" height="15" fill="rgb(231,138,38)" fg:x="5700" fg:w="15"/><text x="47.9128%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (17 samples, 0.14%)</title><rect x="48.2565%" y="228" width="0.1422%" height="15" fill="rgb(231,145,46)" fg:x="5771" fg:w="17"/><text x="48.5065%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (170 samples, 1.42%)</title><rect x="47.7883%" y="212" width="1.4215%" height="15" fill="rgb(251,118,11)" fg:x="5715" fg:w="170"/><text x="48.0383%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (97 samples, 0.81%)</title><rect x="48.3987%" y="228" width="0.8111%" height="15" fill="rgb(217,147,25)" fg:x="5788" fg:w="97"/><text x="48.6487%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (22 samples, 0.18%)</title><rect x="51.9358%" y="244" width="0.1840%" height="15" fill="rgb(247,81,37)" fg:x="6211" fg:w="22"/><text x="52.1858%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (464 samples, 3.88%)</title><rect x="50.2885%" y="228" width="3.8799%" height="15" fill="rgb(209,12,38)" fg:x="6014" fg:w="464"/><text x="50.5385%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (245 samples, 2.05%)</title><rect x="52.1197%" y="244" width="2.0487%" height="15" fill="rgb(227,1,9)" fg:x="6233" fg:w="245"/><text x="52.3697%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.29%)</title><rect x="53.8757%" y="260" width="0.2927%" height="15" fill="rgb(248,47,43)" fg:x="6443" fg:w="35"/><text x="54.1257%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (224 samples, 1.87%)</title><rect x="54.1684%" y="228" width="1.8731%" height="15" fill="rgb(221,10,30)" fg:x="6478" fg:w="224"/><text x="54.4184%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (91 samples, 0.76%)</title><rect x="56.0415%" y="228" width="0.7609%" height="15" fill="rgb(210,229,1)" fg:x="6702" fg:w="91"/><text x="56.2915%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (16 samples, 0.13%)</title><rect x="56.8024%" y="228" width="0.1338%" height="15" fill="rgb(222,148,37)" fg:x="6793" fg:w="16"/><text x="57.0524%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (957 samples, 8.00%)</title><rect x="49.2098%" y="212" width="8.0023%" height="15" fill="rgb(234,67,33)" fg:x="5885" fg:w="957"/><text x="49.4598%" y="222.50">embeds_in (..</text></g><g><title>coupled (kappybara/pattern.py:66) (33 samples, 0.28%)</title><rect x="56.9362%" y="228" width="0.2759%" height="15" fill="rgb(247,98,35)" fg:x="6809" fg:w="33"/><text x="57.1862%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (12 samples, 0.10%)</title><rect x="57.2121%" y="212" width="0.1003%" height="15" fill="rgb(247,138,52)" fg:x="6842" fg:w="12"/><text x="57.4621%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (20 samples, 0.17%)</title><rect x="57.3125%" y="212" width="0.1672%" height="15" fill="rgb(213,79,30)" fg:x="6854" fg:w="20"/><text x="57.5625%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (24 samples, 0.20%)</title><rect x="58.1905%" y="228" width="0.2007%" height="15" fill="rgb(246,177,23)" fg:x="6959" fg:w="24"/><text x="58.4405%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.12%)</title><rect x="59.5618%" y="244" width="0.1171%" height="15" fill="rgb(230,62,27)" fg:x="7123" fg:w="14"/><text x="59.8118%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (286 samples, 2.39%)</title><rect x="57.4797%" y="212" width="2.3915%" height="15" fill="rgb(216,154,8)" fg:x="6874" fg:w="286"/><text x="57.7297%" y="222.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (177 samples, 1.48%)</title><rect x="58.3912%" y="228" width="1.4801%" height="15" fill="rgb(244,35,45)" fg:x="6983" fg:w="177"/><text x="58.6412%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.19%)</title><rect x="59.6789%" y="244" width="0.1923%" height="15" fill="rgb(251,115,12)" fg:x="7137" fg:w="23"/><text x="59.9289%" y="254.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (22 samples, 0.18%)</title><rect x="62.5470%" y="244" width="0.1840%" height="15" fill="rgb(240,54,50)" fg:x="7480" fg:w="22"/><text x="62.7970%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (386 samples, 3.23%)</title><rect x="59.8712%" y="212" width="3.2277%" height="15" fill="rgb(233,84,52)" fg:x="7160" fg:w="386"/><text x="60.1212%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (257 samples, 2.15%)</title><rect x="60.9499%" y="228" width="2.1490%" height="15" fill="rgb(207,117,47)" fg:x="7289" fg:w="257"/><text x="61.1999%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (44 samples, 0.37%)</title><rect x="62.7310%" y="244" width="0.3679%" height="15" fill="rgb(249,43,39)" fg:x="7502" fg:w="44"/><text x="62.9810%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (75 samples, 0.63%)</title><rect x="63.0989%" y="212" width="0.6271%" height="15" fill="rgb(209,38,44)" fg:x="7546" fg:w="75"/><text x="63.3489%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (179 samples, 1.50%)</title><rect x="63.7344%" y="212" width="1.4968%" height="15" fill="rgb(236,212,23)" fg:x="7622" fg:w="179"/><text x="63.9844%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (72 samples, 0.60%)</title><rect x="65.2312%" y="212" width="0.6021%" height="15" fill="rgb(242,79,21)" fg:x="7801" fg:w="72"/><text x="65.4812%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (14 samples, 0.12%)</title><rect x="65.8333%" y="212" width="0.1171%" height="15" fill="rgb(211,96,35)" fg:x="7873" fg:w="14"/><text x="66.0833%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,537 samples, 29.58%)</title><rect x="38.5400%" y="196" width="29.5761%" height="15" fill="rgb(253,215,40)" fg:x="4609" fg:w="3537"/><text x="38.7900%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (259 samples, 2.17%)</title><rect x="65.9503%" y="212" width="2.1657%" height="15" fill="rgb(211,81,21)" fg:x="7887" fg:w="259"/><text x="66.2003%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,309 samples, 44.39%)</title><rect x="24.3248%" y="180" width="44.3933%" height="15" fill="rgb(208,190,38)" fg:x="2909" fg:w="5309"/><text x="24.5748%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (72 samples, 0.60%)</title><rect x="68.1161%" y="196" width="0.6021%" height="15" fill="rgb(235,213,38)" fg:x="8146" fg:w="72"/><text x="68.3661%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (41 samples, 0.34%)</title><rect x="70.0560%" y="196" width="0.3428%" height="15" fill="rgb(237,122,38)" fg:x="8378" fg:w="41"/><text x="70.3060%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (50 samples, 0.42%)</title><rect x="71.3772%" y="212" width="0.4181%" height="15" fill="rgb(244,218,35)" fg:x="8536" fg:w="50"/><text x="71.6272%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (626 samples, 5.23%)</title><rect x="68.8352%" y="180" width="5.2346%" height="15" fill="rgb(240,68,47)" fg:x="8232" fg:w="626"/><text x="69.0852%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (439 samples, 3.67%)</title><rect x="70.3989%" y="196" width="3.6709%" height="15" fill="rgb(210,16,53)" fg:x="8419" fg:w="439"/><text x="70.6489%" y="206.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (272 samples, 2.27%)</title><rect x="71.7953%" y="212" width="2.2744%" height="15" fill="rgb(235,124,12)" fg:x="8586" fg:w="272"/><text x="72.0453%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (105 samples, 0.88%)</title><rect x="74.0697%" y="180" width="0.8780%" height="15" fill="rgb(224,169,11)" fg:x="8858" fg:w="105"/><text x="74.3197%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (34 samples, 0.28%)</title><rect x="74.6634%" y="196" width="0.2843%" height="15" fill="rgb(250,166,2)" fg:x="8929" fg:w="34"/><text x="74.9134%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (19 samples, 0.16%)</title><rect x="75.1902%" y="196" width="0.1589%" height="15" fill="rgb(242,216,29)" fg:x="8992" fg:w="19"/><text x="75.4402%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (110 samples, 0.92%)</title><rect x="74.9477%" y="180" width="0.9198%" height="15" fill="rgb(230,116,27)" fg:x="8963" fg:w="110"/><text x="75.1977%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (62 samples, 0.52%)</title><rect x="75.3491%" y="196" width="0.5184%" height="15" fill="rgb(228,99,48)" fg:x="9011" fg:w="62"/><text x="75.5991%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (209 samples, 1.75%)</title><rect x="75.8675%" y="180" width="1.7476%" height="15" fill="rgb(253,11,6)" fg:x="9073" fg:w="209"/><text x="76.1175%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.22%)</title><rect x="77.3978%" y="196" width="0.2174%" height="15" fill="rgb(247,143,39)" fg:x="9256" fg:w="26"/><text x="77.6478%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (70 samples, 0.59%)</title><rect x="77.6152%" y="180" width="0.5853%" height="15" fill="rgb(236,97,10)" fg:x="9282" fg:w="70"/><text x="77.8652%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (93 samples, 0.78%)</title><rect x="78.2005%" y="180" width="0.7777%" height="15" fill="rgb(233,208,19)" fg:x="9352" fg:w="93"/><text x="78.4505%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (139 samples, 1.16%)</title><rect x="80.7258%" y="196" width="1.1623%" height="15" fill="rgb(216,164,2)" fg:x="9654" fg:w="139"/><text x="80.9758%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.20%)</title><rect x="81.6874%" y="212" width="0.2007%" height="15" fill="rgb(220,129,5)" fg:x="9769" fg:w="24"/><text x="81.9374%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (354 samples, 2.96%)</title><rect x="78.9782%" y="180" width="2.9601%" height="15" fill="rgb(242,17,10)" fg:x="9445" fg:w="354"/><text x="79.2282%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (31 samples, 0.26%)</title><rect x="81.9383%" y="180" width="0.2592%" height="15" fill="rgb(242,107,0)" fg:x="9799" fg:w="31"/><text x="82.1883%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,213 samples, 77.04%)</title><rect x="5.4520%" y="164" width="77.0382%" height="15" fill="rgb(251,28,31)" fg:x="652" fg:w="9213"/><text x="5.7020%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>embeddings (kappybara/pattern.py:290) (25 samples, 0.21%)</title><rect x="82.2811%" y="180" width="0.2090%" height="15" fill="rgb(233,223,10)" fg:x="9840" fg:w="25"/><text x="82.5311%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (105 samples, 0.88%)</title><rect x="82.4902%" y="164" width="0.8780%" height="15" fill="rgb(215,21,27)" fg:x="9865" fg:w="105"/><text x="82.7402%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.10%)</title><rect x="83.2678%" y="180" width="0.1003%" height="15" fill="rgb(232,23,21)" fg:x="9958" fg:w="12"/><text x="83.5178%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (125 samples, 1.05%)</title><rect x="83.3933%" y="164" width="1.0452%" height="15" fill="rgb(244,5,23)" fg:x="9973" fg:w="125"/><text x="83.6433%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,451 samples, 79.03%)</title><rect x="5.4185%" y="148" width="79.0283%" height="15" fill="rgb(226,81,46)" fg:x="648" fg:w="9451"/><text x="5.6685%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:194) (21 samples, 0.18%)</title><rect x="84.5472%" y="164" width="0.1756%" height="15" fill="rgb(247,70,30)" fg:x="10111" fg:w="21"/><text x="84.7972%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:169) (47 samples, 0.39%)</title><rect x="88.8619%" y="212" width="0.3930%" height="15" fill="rgb(212,68,19)" fg:x="10627" fg:w="47"/><text x="89.1119%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (139 samples, 1.16%)</title><rect x="89.2550%" y="212" width="1.1623%" height="15" fill="rgb(240,187,13)" fg:x="10674" fg:w="139"/><text x="89.5050%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="90.2500%" y="228" width="0.1672%" height="15" fill="rgb(223,113,26)" fg:x="10793" fg:w="20"/><text x="90.5000%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:172) (13 samples, 0.11%)</title><rect x="90.4173%" y="212" width="0.1087%" height="15" fill="rgb(206,192,2)" fg:x="10813" fg:w="13"/><text x="90.6673%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:173) (35 samples, 0.29%)</title><rect x="90.5260%" y="212" width="0.2927%" height="15" fill="rgb(241,108,4)" fg:x="10826" fg:w="35"/><text x="90.7760%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (781 samples, 6.53%)</title><rect x="84.7228%" y="164" width="6.5306%" height="15" fill="rgb(247,173,49)" fg:x="10132" fg:w="781"/><text x="84.9728%" y="174.50">create_in..</text></g><g><title>__call__ (kappybara/indexed_set.py:66) (568 samples, 4.75%)</title><rect x="86.5039%" y="180" width="4.7496%" height="15" fill="rgb(224,114,35)" fg:x="10345" fg:w="568"/><text x="86.7539%" y="190.50">__call..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (493 samples, 4.12%)</title><rect x="87.1310%" y="196" width="4.1224%" height="15" fill="rgb(245,159,27)" fg:x="10420" fg:w="493"/><text x="87.3810%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:174) (52 samples, 0.43%)</title><rect x="90.8186%" y="212" width="0.4348%" height="15" fill="rgb(245,172,44)" fg:x="10861" fg:w="52"/><text x="91.0686%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.16%)</title><rect x="92.6499%" y="180" width="0.1589%" height="15" fill="rgb(236,23,11)" fg:x="11080" fg:w="19"/><text x="92.8999%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (151 samples, 1.26%)</title><rect x="93.0763%" y="180" width="1.2626%" height="15" fill="rgb(205,117,38)" fg:x="11131" fg:w="151"/><text x="93.3263%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (32 samples, 0.27%)</title><rect x="94.0714%" y="196" width="0.2676%" height="15" fill="rgb(237,72,25)" fg:x="11250" fg:w="32"/><text x="94.3214%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (168 samples, 1.40%)</title><rect x="94.3390%" y="180" width="1.4048%" height="15" fill="rgb(244,70,9)" fg:x="11282" fg:w="168"/><text x="94.5890%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (14 samples, 0.12%)</title><rect x="95.6267%" y="196" width="0.1171%" height="15" fill="rgb(217,125,39)" fg:x="11436" fg:w="14"/><text x="95.8767%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:134) (66 samples, 0.55%)</title><rect x="95.7438%" y="180" width="0.5519%" height="15" fill="rgb(235,36,10)" fg:x="11450" fg:w="66"/><text x="95.9938%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (204 samples, 1.71%)</title><rect x="96.2957%" y="180" width="1.7058%" height="15" fill="rgb(251,123,47)" fg:x="11516" fg:w="204"/><text x="96.5457%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (19 samples, 0.16%)</title><rect x="97.8426%" y="196" width="0.1589%" height="15" fill="rgb(221,13,13)" fg:x="11701" fg:w="19"/><text x="98.0926%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,693 samples, 14.16%)</title><rect x="84.4469%" y="148" width="14.1567%" height="15" fill="rgb(238,131,9)" fg:x="10099" fg:w="1693"/><text x="84.6969%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:198) (871 samples, 7.28%)</title><rect x="91.3203%" y="164" width="7.2832%" height="15" fill="rgb(211,50,8)" fg:x="10921" fg:w="871"/><text x="91.5703%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:138) (72 samples, 0.60%)</title><rect x="98.0015%" y="180" width="0.6021%" height="15" fill="rgb(245,182,24)" fg:x="11720" fg:w="72"/><text x="98.2515%" y="190.50"></text></g><g><title>track_component (kappybara/mixture.py:96) (13 samples, 0.11%)</title><rect x="98.6036%" y="148" width="0.1087%" height="15" fill="rgb(242,14,37)" fg:x="11792" fg:w="13"/><text x="98.8536%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:23) (11,886 samples, 99.39%)</title><rect x="0.0502%" y="68" width="99.3896%" height="15" fill="rgb(246,228,12)" fg:x="6" fg:w="11886"/><text x="0.3002%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,832 samples, 98.94%)</title><rect x="0.5017%" y="84" width="98.9380%" height="15" fill="rgb(213,55,15)" fg:x="60" fg:w="11832"/><text x="0.7517%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (11,768 samples, 98.40%)</title><rect x="1.0369%" y="100" width="98.4029%" height="15" fill="rgb(209,9,3)" fg:x="124" fg:w="11768"/><text x="1.2869%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,249 samples, 94.06%)</title><rect x="5.3767%" y="116" width="94.0630%" height="15" fill="rgb(230,59,30)" fg:x="643" fg:w="11249"/><text x="5.6267%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,247 samples, 94.05%)</title><rect x="5.3934%" y="132" width="94.0463%" height="15" fill="rgb(209,121,21)" fg:x="645" fg:w="11247"/><text x="5.6434%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (87 samples, 0.73%)</title><rect x="98.7123%" y="148" width="0.7275%" height="15" fill="rgb(220,109,13)" fg:x="11805" fg:w="87"/><text x="98.9623%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (16 samples, 0.13%)</title><rect x="99.4398%" y="68" width="0.1338%" height="15" fill="rgb(232,18,1)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (16 samples, 0.13%)</title><rect x="99.4398%" y="84" width="0.1338%" height="15" fill="rgb(215,41,42)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (16 samples, 0.13%)</title><rect x="99.4398%" y="100" width="0.1338%" height="15" fill="rgb(224,123,36)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (16 samples, 0.13%)</title><rect x="99.4398%" y="116" width="0.1338%" height="15" fill="rgb(240,125,3)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (16 samples, 0.13%)</title><rect x="99.4398%" y="132" width="0.1338%" height="15" fill="rgb(205,98,50)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (16 samples, 0.13%)</title><rect x="99.4398%" y="148" width="0.1338%" height="15" fill="rgb(205,185,37)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (16 samples, 0.13%)</title><rect x="99.4398%" y="164" width="0.1338%" height="15" fill="rgb(238,207,15)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (16 samples, 0.13%)</title><rect x="99.4398%" y="180" width="0.1338%" height="15" fill="rgb(213,199,42)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (16 samples, 0.13%)</title><rect x="99.4398%" y="196" width="0.1338%" height="15" fill="rgb(235,201,11)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (16 samples, 0.13%)</title><rect x="99.4398%" y="212" width="0.1338%" height="15" fill="rgb(207,46,11)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (16 samples, 0.13%)</title><rect x="99.4398%" y="228" width="0.1338%" height="15" fill="rgb(241,35,35)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (16 samples, 0.13%)</title><rect x="99.4398%" y="244" width="0.1338%" height="15" fill="rgb(243,32,47)" fg:x="11892" fg:w="16"/><text x="99.6898%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (18 samples, 0.15%)</title><rect x="99.5735%" y="68" width="0.1505%" height="15" fill="rgb(247,202,23)" fg:x="11908" fg:w="18"/><text x="99.8235%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (13 samples, 0.11%)</title><rect x="99.7241%" y="68" width="0.1087%" height="15" fill="rgb(219,102,11)" fg:x="11926" fg:w="13"/><text x="99.9741%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:111) (12 samples, 0.10%)</title><rect x="99.8328%" y="68" width="0.1003%" height="15" fill="rgb(243,110,44)" fg:x="11939" fg:w="12"/><text x="100.0828%" y="78.50"></text></g><g><title>all (11,959 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(222,74,54)" fg:x="0" fg:w="11959"/><text x="0.2500%" y="62.50"></text></g></svg></svg>