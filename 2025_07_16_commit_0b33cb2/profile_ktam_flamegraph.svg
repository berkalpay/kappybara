<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="298" onload="init(evt)" viewBox="0 0 1200 298" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="298" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 0b33cb2</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="287.00"> </text><svg id="frames" x="10" width="1180" total_samples="11825"><g><title>update (kappybara/system.py:69) (16 samples, 0.14%)</title><rect x="0.0423%" y="84" width="0.1353%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="16"/><text x="0.2923%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (16 samples, 0.14%)</title><rect x="0.0423%" y="100" width="0.1353%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="16"/><text x="0.2923%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (14 samples, 0.12%)</title><rect x="0.0592%" y="116" width="0.1184%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="14"/><text x="0.3092%" y="126.50"></text></g><g><title>select (kappybara/rule.py:104) (15 samples, 0.13%)</title><rect x="0.2199%" y="116" width="0.1268%" height="15" fill="rgb(248,212,6)" fg:x="26" fg:w="15"/><text x="0.4699%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (21 samples, 0.18%)</title><rect x="0.2199%" y="100" width="0.1776%" height="15" fill="rgb(208,68,35)" fg:x="26" fg:w="21"/><text x="0.4699%" y="110.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (13 samples, 0.11%)</title><rect x="0.5328%" y="164" width="0.1099%" height="15" fill="rgb(232,128,0)" fg:x="63" fg:w="13"/><text x="0.7828%" y="174.50"></text></g><g><title>__init__ (kappybara/pattern.py:216) (42 samples, 0.36%)</title><rect x="0.5159%" y="148" width="0.3552%" height="15" fill="rgb(207,160,47)" fg:x="61" fg:w="42"/><text x="0.7659%" y="158.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (27 samples, 0.23%)</title><rect x="0.6427%" y="164" width="0.2283%" height="15" fill="rgb(228,23,34)" fg:x="76" fg:w="27"/><text x="0.8927%" y="174.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (65 samples, 0.55%)</title><rect x="0.9049%" y="164" width="0.5497%" height="15" fill="rgb(218,30,26)" fg:x="107" fg:w="65"/><text x="1.1549%" y="174.50"></text></g><g><title>__call__ (kappybara/indexed_set.py:66) (12 samples, 0.10%)</title><rect x="1.3531%" y="180" width="0.1015%" height="15" fill="rgb(220,122,19)" fg:x="160" fg:w="12"/><text x="1.6031%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (32 samples, 0.27%)</title><rect x="1.7167%" y="180" width="0.2706%" height="15" fill="rgb(250,228,42)" fg:x="203" fg:w="32"/><text x="1.9667%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (32 samples, 0.27%)</title><rect x="1.9873%" y="180" width="0.2706%" height="15" fill="rgb(240,193,28)" fg:x="235" fg:w="32"/><text x="2.2373%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (37 samples, 0.31%)</title><rect x="2.3256%" y="180" width="0.3129%" height="15" fill="rgb(216,20,37)" fg:x="275" fg:w="37"/><text x="2.5756%" y="190.50"></text></g><g><title>__init__ (kappybara/pattern.py:218) (217 samples, 1.84%)</title><rect x="0.8710%" y="148" width="1.8351%" height="15" fill="rgb(206,188,39)" fg:x="103" fg:w="217"/><text x="1.1210%" y="158.50">_..</text></g><g><title>create_index (kappybara/indexed_set.py:198) (147 samples, 1.24%)</title><rect x="1.4630%" y="164" width="1.2431%" height="15" fill="rgb(217,207,13)" fg:x="173" fg:w="147"/><text x="1.7130%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (87 samples, 0.74%)</title><rect x="2.7569%" y="148" width="0.7357%" height="15" fill="rgb(231,73,38)" fg:x="326" fg:w="87"/><text x="3.0069%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.10%)</title><rect x="3.3911%" y="164" width="0.1015%" height="15" fill="rgb(225,20,46)" fg:x="401" fg:w="12"/><text x="3.6411%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (22 samples, 0.19%)</title><rect x="3.4926%" y="148" width="0.1860%" height="15" fill="rgb(210,31,41)" fg:x="413" fg:w="22"/><text x="3.7426%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (74 samples, 0.63%)</title><rect x="4.4736%" y="180" width="0.6258%" height="15" fill="rgb(221,200,47)" fg:x="529" fg:w="74"/><text x="4.7236%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:113) (46 samples, 0.39%)</title><rect x="4.7104%" y="196" width="0.3890%" height="15" fill="rgb(226,26,5)" fg:x="557" fg:w="46"/><text x="4.9604%" y="206.50"></text></g><g><title>apply_update (kappybara/mixture.py:107) (575 samples, 4.86%)</title><rect x="0.3975%" y="116" width="4.8626%" height="15" fill="rgb(249,33,26)" fg:x="47" fg:w="575"/><text x="0.6475%" y="126.50">apply_..</text></g><g><title>_remove_edge (kappybara/mixture.py:191) (565 samples, 4.78%)</title><rect x="0.4820%" y="132" width="4.7780%" height="15" fill="rgb(235,183,28)" fg:x="57" fg:w="565"/><text x="0.7320%" y="142.50">_remov..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:134) (183 samples, 1.55%)</title><rect x="3.7125%" y="148" width="1.5476%" height="15" fill="rgb(221,5,38)" fg:x="439" fg:w="183"/><text x="3.9625%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:122) (158 samples, 1.34%)</title><rect x="3.9239%" y="164" width="1.3362%" height="15" fill="rgb(247,18,42)" fg:x="464" fg:w="158"/><text x="4.1739%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (18 samples, 0.15%)</title><rect x="5.1078%" y="180" width="0.1522%" height="15" fill="rgb(241,131,45)" fg:x="604" fg:w="18"/><text x="5.3578%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:261) (80 samples, 0.68%)</title><rect x="5.9027%" y="180" width="0.6765%" height="15" fill="rgb(249,31,29)" fg:x="698" fg:w="80"/><text x="6.1527%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.15%)</title><rect x="14.5116%" y="196" width="0.1522%" height="15" fill="rgb(225,111,53)" fg:x="1716" fg:w="18"/><text x="14.7616%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (986 samples, 8.34%)</title><rect x="6.5793%" y="180" width="8.3383%" height="15" fill="rgb(238,160,17)" fg:x="778" fg:w="986"/><text x="6.8293%" y="190.50">embeddings (..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.25%)</title><rect x="14.6638%" y="196" width="0.2537%" height="15" fill="rgb(214,148,48)" fg:x="1734" fg:w="30"/><text x="14.9138%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.13%)</title><rect x="17.1839%" y="196" width="0.1268%" height="15" fill="rgb(232,36,49)" fg:x="2032" fg:w="15"/><text x="17.4339%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (306 samples, 2.59%)</title><rect x="14.9175%" y="180" width="2.5877%" height="15" fill="rgb(209,103,24)" fg:x="1764" fg:w="306"/><text x="15.1675%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.19%)</title><rect x="17.3108%" y="196" width="0.1945%" height="15" fill="rgb(229,88,8)" fg:x="2047" fg:w="23"/><text x="17.5608%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:267) (98 samples, 0.83%)</title><rect x="17.5307%" y="180" width="0.8288%" height="15" fill="rgb(213,181,19)" fg:x="2073" fg:w="98"/><text x="17.7807%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (96 samples, 0.81%)</title><rect x="18.3594%" y="180" width="0.8118%" height="15" fill="rgb(254,191,54)" fg:x="2171" fg:w="96"/><text x="18.6094%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (20 samples, 0.17%)</title><rect x="21.4461%" y="196" width="0.1691%" height="15" fill="rgb(241,83,37)" fg:x="2536" fg:w="20"/><text x="21.6961%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:269) (322 samples, 2.72%)</title><rect x="19.1712%" y="180" width="2.7230%" height="15" fill="rgb(233,36,39)" fg:x="2267" fg:w="322"/><text x="19.4212%" y="190.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (33 samples, 0.28%)</title><rect x="21.6152%" y="196" width="0.2791%" height="15" fill="rgb(226,3,54)" fg:x="2556" fg:w="33"/><text x="21.8652%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (259 samples, 2.19%)</title><rect x="21.8943%" y="180" width="2.1903%" height="15" fill="rgb(245,192,40)" fg:x="2589" fg:w="259"/><text x="22.1443%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:171) (21 samples, 0.18%)</title><rect x="26.0127%" y="196" width="0.1776%" height="15" fill="rgb(238,167,29)" fg:x="3076" fg:w="21"/><text x="26.2627%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:173) (104 samples, 0.88%)</title><rect x="26.1903%" y="196" width="0.8795%" height="15" fill="rgb(232,182,51)" fg:x="3097" fg:w="104"/><text x="26.4403%" y="206.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (151 samples, 1.28%)</title><rect x="28.7273%" y="212" width="1.2770%" height="15" fill="rgb(231,60,39)" fg:x="3397" fg:w="151"/><text x="28.9773%" y="222.50"></text></g><g><title>sites (kappybara/pattern.py:111) (89 samples, 0.75%)</title><rect x="31.7125%" y="228" width="0.7526%" height="15" fill="rgb(208,69,12)" fg:x="3750" fg:w="89"/><text x="31.9625%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:176) (1,028 samples, 8.69%)</title><rect x="27.0698%" y="196" width="8.6934%" height="15" fill="rgb(235,93,37)" fg:x="3201" fg:w="1028"/><text x="27.3198%" y="206.50">embeds_in (k..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (681 samples, 5.76%)</title><rect x="30.0042%" y="212" width="5.7590%" height="15" fill="rgb(213,116,39)" fg:x="3548" fg:w="681"/><text x="30.2542%" y="222.50">__iter_..</text></g><g><title>sites (kappybara/pattern.py:113) (390 samples, 3.30%)</title><rect x="32.4651%" y="228" width="3.2981%" height="15" fill="rgb(222,207,29)" fg:x="3839" fg:w="390"/><text x="32.7151%" y="238.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:177) (118 samples, 1.00%)</title><rect x="35.7632%" y="196" width="0.9979%" height="15" fill="rgb(206,96,30)" fg:x="4229" fg:w="118"/><text x="36.0132%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:101) (14 samples, 0.12%)</title><rect x="37.5053%" y="212" width="0.1184%" height="15" fill="rgb(218,138,4)" fg:x="4435" fg:w="14"/><text x="37.7553%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:179) (178 samples, 1.51%)</title><rect x="36.7949%" y="196" width="1.5053%" height="15" fill="rgb(250,191,14)" fg:x="4351" fg:w="178"/><text x="37.0449%" y="206.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (80 samples, 0.68%)</title><rect x="37.6237%" y="212" width="0.6765%" height="15" fill="rgb(239,60,40)" fg:x="4449" fg:w="80"/><text x="37.8737%" y="222.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (204 samples, 1.73%)</title><rect x="46.5793%" y="212" width="1.7252%" height="15" fill="rgb(206,27,48)" fg:x="5508" fg:w="204"/><text x="46.8293%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (13 samples, 0.11%)</title><rect x="48.3044%" y="212" width="0.1099%" height="15" fill="rgb(225,35,8)" fg:x="5712" fg:w="13"/><text x="48.5544%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:52) (30 samples, 0.25%)</title><rect x="48.8879%" y="228" width="0.2537%" height="15" fill="rgb(250,213,24)" fg:x="5781" fg:w="30"/><text x="49.1379%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:70) (165 samples, 1.40%)</title><rect x="48.4144%" y="212" width="1.3953%" height="15" fill="rgb(247,123,22)" fg:x="5725" fg:w="165"/><text x="48.6644%" y="222.50"></text></g><g><title>stated (kappybara/pattern.py:54) (79 samples, 0.67%)</title><rect x="49.1416%" y="228" width="0.6681%" height="15" fill="rgb(231,138,38)" fg:x="5811" fg:w="79"/><text x="49.3916%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:56) (20 samples, 0.17%)</title><rect x="50.9345%" y="228" width="0.1691%" height="15" fill="rgb(231,145,46)" fg:x="6023" fg:w="20"/><text x="51.1845%" y="238.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.14%)</title><rect x="52.7696%" y="244" width="0.1353%" height="15" fill="rgb(251,118,11)" fg:x="6240" fg:w="16"/><text x="53.0196%" y="254.50"></text></g><g><title>bound (kappybara/pattern.py:59) (465 samples, 3.93%)</title><rect x="51.1036%" y="228" width="3.9323%" height="15" fill="rgb(217,147,25)" fg:x="6043" fg:w="465"/><text x="51.3536%" y="238.50">boun..</text></g><g><title>__eq__ (kappybara/utils.py:33) (252 samples, 2.13%)</title><rect x="52.9049%" y="244" width="2.1311%" height="15" fill="rgb(247,81,37)" fg:x="6256" fg:w="252"/><text x="53.1549%" y="254.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.20%)</title><rect x="54.8330%" y="260" width="0.2030%" height="15" fill="rgb(209,12,38)" fg:x="6484" fg:w="24"/><text x="55.0830%" y="270.50"></text></g><g><title>bound (kappybara/pattern.py:60) (226 samples, 1.91%)</title><rect x="55.0359%" y="228" width="1.9112%" height="15" fill="rgb(227,1,9)" fg:x="6508" fg:w="226"/><text x="55.2859%" y="238.50">b..</text></g><g><title>bound (kappybara/pattern.py:61) (98 samples, 0.83%)</title><rect x="56.9471%" y="228" width="0.8288%" height="15" fill="rgb(248,47,43)" fg:x="6734" fg:w="98"/><text x="57.1971%" y="238.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (13 samples, 0.11%)</title><rect x="57.7759%" y="228" width="0.1099%" height="15" fill="rgb(221,10,30)" fg:x="6832" fg:w="13"/><text x="58.0259%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:71) (993 samples, 8.40%)</title><rect x="49.8097%" y="212" width="8.3975%" height="15" fill="rgb(210,229,1)" fg:x="5890" fg:w="993"/><text x="50.0597%" y="222.50">embeds_in (k..</text></g><g><title>coupled (kappybara/pattern.py:66) (38 samples, 0.32%)</title><rect x="57.8858%" y="228" width="0.3214%" height="15" fill="rgb(222,148,37)" fg:x="6845" fg:w="38"/><text x="58.1358%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (24 samples, 0.20%)</title><rect x="58.2748%" y="212" width="0.2030%" height="15" fill="rgb(234,67,33)" fg:x="6891" fg:w="24"/><text x="58.5248%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.13%)</title><rect x="59.1121%" y="228" width="0.1268%" height="15" fill="rgb(247,98,35)" fg:x="6990" fg:w="15"/><text x="59.3621%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (246 samples, 2.08%)</title><rect x="58.4778%" y="212" width="2.0803%" height="15" fill="rgb(247,138,52)" fg:x="6915" fg:w="246"/><text x="58.7278%" y="222.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (156 samples, 1.32%)</title><rect x="59.2389%" y="228" width="1.3192%" height="15" fill="rgb(213,79,30)" fg:x="7005" fg:w="156"/><text x="59.4889%" y="238.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.19%)</title><rect x="60.3721%" y="244" width="0.1860%" height="15" fill="rgb(246,177,23)" fg:x="7139" fg:w="22"/><text x="60.6221%" y="254.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.11%)</title><rect x="61.5729%" y="228" width="0.1099%" height="15" fill="rgb(230,62,27)" fg:x="7281" fg:w="13"/><text x="61.8229%" y="238.50"></text></g><g><title>embeds_in (kappybara/pattern.py:77) (367 samples, 3.10%)</title><rect x="60.5581%" y="212" width="3.1036%" height="15" fill="rgb(216,154,8)" fg:x="7161" fg:w="367"/><text x="60.8081%" y="222.50">emb..</text></g><g><title>__eq__ (kappybara/utils.py:33) (234 samples, 1.98%)</title><rect x="61.6829%" y="228" width="1.9789%" height="15" fill="rgb(244,35,45)" fg:x="7294" fg:w="234"/><text x="61.9329%" y="238.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.35%)</title><rect x="63.3150%" y="244" width="0.3467%" height="15" fill="rgb(251,115,12)" fg:x="7487" fg:w="41"/><text x="63.5650%" y="254.50"></text></g><g><title>embeds_in (kappybara/pattern.py:78) (79 samples, 0.67%)</title><rect x="63.6617%" y="212" width="0.6681%" height="15" fill="rgb(240,54,50)" fg:x="7528" fg:w="79"/><text x="63.9117%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (162 samples, 1.37%)</title><rect x="64.3467%" y="212" width="1.3700%" height="15" fill="rgb(233,84,52)" fg:x="7609" fg:w="162"/><text x="64.5967%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:85) (83 samples, 0.70%)</title><rect x="65.7167%" y="212" width="0.7019%" height="15" fill="rgb(207,117,47)" fg:x="7771" fg:w="83"/><text x="65.9667%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:86) (15 samples, 0.13%)</title><rect x="66.4186%" y="212" width="0.1268%" height="15" fill="rgb(249,43,39)" fg:x="7854" fg:w="15"/><text x="66.6686%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:180) (3,627 samples, 30.67%)</title><rect x="38.3002%" y="196" width="30.6723%" height="15" fill="rgb(209,38,44)" fg:x="4529" fg:w="3627"/><text x="38.5502%" y="206.50">embeds_in (kappybara/pattern.py:180)</text></g><g><title>sites (kappybara/pattern.py:113) (287 samples, 2.43%)</title><rect x="66.5455%" y="212" width="2.4271%" height="15" fill="rgb(236,212,23)" fg:x="7869" fg:w="287"/><text x="66.7955%" y="222.50">si..</text></g><g><title>embeddings (kappybara/pattern.py:272) (5,355 samples, 45.29%)</title><rect x="24.0846%" y="180" width="45.2854%" height="15" fill="rgb(242,79,21)" fg:x="2848" fg:w="5355"/><text x="24.3346%" y="190.50">embeddings (kappybara/pattern.py:272)</text></g><g><title>embeds_in (kappybara/pattern.py:181) (47 samples, 0.40%)</title><rect x="68.9725%" y="196" width="0.3975%" height="15" fill="rgb(211,96,35)" fg:x="8156" fg:w="47"/><text x="69.2225%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (15 samples, 0.13%)</title><rect x="69.3700%" y="180" width="0.1268%" height="15" fill="rgb(253,215,40)" fg:x="8203" fg:w="15"/><text x="69.6200%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:98) (66 samples, 0.56%)</title><rect x="70.5708%" y="196" width="0.5581%" height="15" fill="rgb(211,81,21)" fg:x="8345" fg:w="66"/><text x="70.8208%" y="206.50"></text></g><g><title>sites (kappybara/pattern.py:111) (43 samples, 0.36%)</title><rect x="72.1353%" y="212" width="0.3636%" height="15" fill="rgb(208,190,38)" fg:x="8530" fg:w="43"/><text x="72.3853%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (623 samples, 5.27%)</title><rect x="69.5137%" y="180" width="5.2685%" height="15" fill="rgb(235,213,38)" fg:x="8220" fg:w="623"/><text x="69.7637%" y="190.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:99) (432 samples, 3.65%)</title><rect x="71.1290%" y="196" width="3.6533%" height="15" fill="rgb(237,122,38)" fg:x="8411" fg:w="432"/><text x="71.3790%" y="206.50">__it..</text></g><g><title>sites (kappybara/pattern.py:113) (270 samples, 2.28%)</title><rect x="72.4989%" y="212" width="2.2833%" height="15" fill="rgb(244,218,35)" fg:x="8573" fg:w="270"/><text x="72.7489%" y="222.50">s..</text></g><g><title>embeddings (kappybara/pattern.py:277) (126 samples, 1.07%)</title><rect x="74.7822%" y="180" width="1.0655%" height="15" fill="rgb(240,68,47)" fg:x="8843" fg:w="126"/><text x="75.0322%" y="190.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:102) (46 samples, 0.39%)</title><rect x="75.4588%" y="196" width="0.3890%" height="15" fill="rgb(210,16,53)" fg:x="8923" fg:w="46"/><text x="75.7088%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:278) (97 samples, 0.82%)</title><rect x="75.8478%" y="180" width="0.8203%" height="15" fill="rgb(235,124,12)" fg:x="8969" fg:w="97"/><text x="76.0978%" y="190.50"></text></g><g><title>coupled (kappybara/pattern.py:66) (55 samples, 0.47%)</title><rect x="76.2030%" y="196" width="0.4651%" height="15" fill="rgb(224,169,11)" fg:x="9011" fg:w="55"/><text x="76.4530%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.12%)</title><rect x="78.2156%" y="196" width="0.1184%" height="15" fill="rgb(250,166,2)" fg:x="9249" fg:w="14"/><text x="78.4656%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:279) (216 samples, 1.83%)</title><rect x="76.6681%" y="180" width="1.8266%" height="15" fill="rgb(242,216,29)" fg:x="9066" fg:w="216"/><text x="76.9181%" y="190.50">e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.16%)</title><rect x="78.3340%" y="196" width="0.1607%" height="15" fill="rgb(230,116,27)" fg:x="9263" fg:w="19"/><text x="78.5840%" y="206.50"></text></g><g><title>embeddings (kappybara/pattern.py:280) (68 samples, 0.58%)</title><rect x="78.4947%" y="180" width="0.5751%" height="15" fill="rgb(228,99,48)" fg:x="9282" fg:w="68"/><text x="78.7447%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:281) (76 samples, 0.64%)</title><rect x="79.0698%" y="180" width="0.6427%" height="15" fill="rgb(253,11,6)" fg:x="9350" fg:w="76"/><text x="79.3198%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (112 samples, 0.95%)</title><rect x="81.7505%" y="196" width="0.9471%" height="15" fill="rgb(247,143,39)" fg:x="9667" fg:w="112"/><text x="82.0005%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.17%)</title><rect x="82.5285%" y="212" width="0.1691%" height="15" fill="rgb(236,97,10)" fg:x="9759" fg:w="20"/><text x="82.7785%" y="222.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (363 samples, 3.07%)</title><rect x="79.7125%" y="180" width="3.0698%" height="15" fill="rgb(233,208,19)" fg:x="9426" fg:w="363"/><text x="79.9625%" y="190.50">emb..</text></g><g><title>embeddings (kappybara/pattern.py:287) (38 samples, 0.32%)</title><rect x="82.7992%" y="180" width="0.3214%" height="15" fill="rgb(216,164,2)" fg:x="9791" fg:w="38"/><text x="83.0492%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:119) (9,209 samples, 77.88%)</title><rect x="5.4376%" y="164" width="77.8774%" height="15" fill="rgb(220,129,5)" fg:x="643" fg:w="9209"/><text x="5.6876%" y="174.50">__init__ (kappybara/indexed_set.py:119)</text></g><g><title>embeddings (kappybara/pattern.py:290) (13 samples, 0.11%)</title><rect x="83.2051%" y="180" width="0.1099%" height="15" fill="rgb(242,17,10)" fg:x="9839" fg:w="13"/><text x="83.4551%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (94 samples, 0.79%)</title><rect x="83.3150%" y="164" width="0.7949%" height="15" fill="rgb(242,107,0)" fg:x="9852" fg:w="94"/><text x="83.5650%" y="174.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (16 samples, 0.14%)</title><rect x="83.9746%" y="180" width="0.1353%" height="15" fill="rgb(251,28,31)" fg:x="9930" fg:w="16"/><text x="84.2246%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:124) (122 samples, 1.03%)</title><rect x="84.1607%" y="164" width="1.0317%" height="15" fill="rgb(233,223,10)" fg:x="9952" fg:w="122"/><text x="84.4107%" y="174.50"></text></g><g><title>track_component (kappybara/mixture.py:93) (9,444 samples, 79.86%)</title><rect x="5.3784%" y="148" width="79.8647%" height="15" fill="rgb(215,21,27)" fg:x="636" fg:w="9444"/><text x="5.6284%" y="158.50">track_component (kappybara/mixture.py:93)</text></g><g><title>create_index (kappybara/indexed_set.py:194) (20 samples, 0.17%)</title><rect x="85.3277%" y="164" width="0.1691%" height="15" fill="rgb(232,23,21)" fg:x="10090" fg:w="20"/><text x="85.5777%" y="174.50"></text></g><g><title>lookup (kappybara/indexed_set.py:169) (26 samples, 0.22%)</title><rect x="89.1586%" y="212" width="0.2199%" height="15" fill="rgb(244,5,23)" fg:x="10543" fg:w="26"/><text x="89.4086%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:170) (151 samples, 1.28%)</title><rect x="89.3784%" y="212" width="1.2770%" height="15" fill="rgb(226,81,46)" fg:x="10569" fg:w="151"/><text x="89.6284%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.22%)</title><rect x="90.4355%" y="228" width="0.2199%" height="15" fill="rgb(247,70,30)" fg:x="10694" fg:w="26"/><text x="90.6855%" y="238.50"></text></g><g><title>lookup (kappybara/indexed_set.py:172) (15 samples, 0.13%)</title><rect x="90.6554%" y="212" width="0.1268%" height="15" fill="rgb(212,68,19)" fg:x="10720" fg:w="15"/><text x="90.9054%" y="222.50"></text></g><g><title>lookup (kappybara/indexed_set.py:173) (16 samples, 0.14%)</title><rect x="90.7822%" y="212" width="0.1353%" height="15" fill="rgb(240,187,13)" fg:x="10735" fg:w="16"/><text x="91.0322%" y="222.50"></text></g><g><title>create_index (kappybara/indexed_set.py:195) (694 samples, 5.87%)</title><rect x="85.4968%" y="164" width="5.8689%" height="15" fill="rgb(223,113,26)" fg:x="10110" fg:w="694"/><text x="85.7468%" y="174.50">create_..</text></g><g><title>__call__ (kappybara/indexed_set.py:66) (506 samples, 4.28%)</title><rect x="87.0867%" y="180" width="4.2791%" height="15" fill="rgb(206,192,2)" fg:x="10298" fg:w="506"/><text x="87.3367%" y="190.50">__cal..</text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:96) (453 samples, 3.83%)</title><rect x="87.5349%" y="196" width="3.8309%" height="15" fill="rgb(241,108,4)" fg:x="10351" fg:w="453"/><text x="87.7849%" y="206.50">&lt;lam..</text></g><g><title>lookup (kappybara/indexed_set.py:174) (53 samples, 0.45%)</title><rect x="90.9175%" y="212" width="0.4482%" height="15" fill="rgb(247,173,49)" fg:x="10751" fg:w="53"/><text x="91.1675%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.13%)</title><rect x="93.0317%" y="180" width="0.1268%" height="15" fill="rgb(224,114,35)" fg:x="11001" fg:w="15"/><text x="93.2817%" y="190.50"></text></g><g><title>__init__ (kappybara/indexed_set.py:121) (13 samples, 0.11%)</title><rect x="93.1839%" y="180" width="0.1099%" height="15" fill="rgb(245,159,27)" fg:x="11019" fg:w="13"/><text x="93.4339%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:129) (22 samples, 0.19%)</title><rect x="93.3869%" y="180" width="0.1860%" height="15" fill="rgb(245,172,44)" fg:x="11043" fg:w="22"/><text x="93.6369%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:130) (164 samples, 1.39%)</title><rect x="93.5729%" y="180" width="1.3869%" height="15" fill="rgb(236,23,11)" fg:x="11065" fg:w="164"/><text x="93.8229%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (25 samples, 0.21%)</title><rect x="94.7484%" y="196" width="0.2114%" height="15" fill="rgb(205,117,38)" fg:x="11204" fg:w="25"/><text x="94.9984%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:131) (156 samples, 1.32%)</title><rect x="94.9598%" y="180" width="1.3192%" height="15" fill="rgb(237,72,25)" fg:x="11229" fg:w="156"/><text x="95.2098%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (22 samples, 0.19%)</title><rect x="96.0930%" y="196" width="0.1860%" height="15" fill="rgb(244,70,9)" fg:x="11363" fg:w="22"/><text x="96.3430%" y="206.50"></text></g><g><title>add (kappybara/indexed_set.py:134) (53 samples, 0.45%)</title><rect x="96.2791%" y="180" width="0.4482%" height="15" fill="rgb(217,125,39)" fg:x="11385" fg:w="53"/><text x="96.5291%" y="190.50"></text></g><g><title>add (kappybara/indexed_set.py:135) (181 samples, 1.53%)</title><rect x="96.7273%" y="180" width="1.5307%" height="15" fill="rgb(235,36,10)" fg:x="11438" fg:w="181"/><text x="96.9773%" y="190.50"></text></g><g><title>__hash__ (kappybara/pattern.py:188) (12 samples, 0.10%)</title><rect x="98.1564%" y="196" width="0.1015%" height="15" fill="rgb(251,123,47)" fg:x="11607" fg:w="12"/><text x="98.4064%" y="206.50"></text></g><g><title>track_component (kappybara/mixture.py:94) (1,607 samples, 13.59%)</title><rect x="85.2431%" y="148" width="13.5899%" height="15" fill="rgb(221,13,13)" fg:x="10080" fg:w="1607"/><text x="85.4931%" y="158.50">track_component (kapp..</text></g><g><title>create_index (kappybara/indexed_set.py:198) (879 samples, 7.43%)</title><rect x="91.3996%" y="164" width="7.4334%" height="15" fill="rgb(238,131,9)" fg:x="10808" fg:w="879"/><text x="91.6496%" y="174.50">create_ind..</text></g><g><title>add (kappybara/indexed_set.py:138) (68 samples, 0.58%)</title><rect x="98.2579%" y="180" width="0.5751%" height="15" fill="rgb(211,50,8)" fg:x="11619" fg:w="68"/><text x="98.5079%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (11,765 samples, 99.49%)</title><rect x="0.0423%" y="68" width="99.4926%" height="15" fill="rgb(245,182,24)" fg:x="5" fg:w="11765"/><text x="0.2923%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (11,749 samples, 99.36%)</title><rect x="0.1776%" y="84" width="99.3573%" height="15" fill="rgb(242,14,37)" fg:x="21" fg:w="11749"/><text x="0.4276%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (11,723 samples, 99.14%)</title><rect x="0.3975%" y="100" width="99.1374%" height="15" fill="rgb(246,228,12)" fg:x="47" fg:w="11723"/><text x="0.6475%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:117) (11,140 samples, 94.21%)</title><rect x="5.3277%" y="116" width="94.2072%" height="15" fill="rgb(213,55,15)" fg:x="630" fg:w="11140"/><text x="5.5777%" y="126.50">apply_update (kappybara/mixture.py:117)</text></g><g><title>_update_embeddings (kappybara/mixture.py:121) (11,138 samples, 94.19%)</title><rect x="5.3446%" y="132" width="94.1903%" height="15" fill="rgb(209,9,3)" fg:x="632" fg:w="11138"/><text x="5.5946%" y="142.50">_update_embeddings (kappybara/mixture.py:121)</text></g><g><title>track_component (kappybara/mixture.py:99) (76 samples, 0.64%)</title><rect x="98.8922%" y="148" width="0.6427%" height="15" fill="rgb(230,59,30)" fg:x="11694" fg:w="76"/><text x="99.1422%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:99) (17 samples, 0.14%)</title><rect x="99.7125%" y="68" width="0.1438%" height="15" fill="rgb(209,121,21)" fg:x="11791" fg:w="17"/><text x="99.9625%" y="78.50"></text></g><g><title>all (11,825 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(220,109,13)" fg:x="0" fg:w="11825"/><text x="0.2500%" y="62.50"></text></g></svg></svg>