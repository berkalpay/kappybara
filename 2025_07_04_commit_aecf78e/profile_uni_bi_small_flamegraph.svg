<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_uni_bi_small_flamegraph.svg -- python profile_uni_bi_small.py # commit aecf78e</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="8477"><g><title>n_embeddings (kappybara/rule.py:170) (44 samples, 0.52%)</title><rect x="0.2241%" y="180" width="0.5191%" height="15" fill="rgb(227,0,7)" fg:x="19" fg:w="44"/><text x="0.4741%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:171) (24 samples, 0.28%)</title><rect x="0.4601%" y="196" width="0.2831%" height="15" fill="rgb(217,0,24)" fg:x="39" fg:w="24"/><text x="0.7101%" y="206.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (18 samples, 0.21%)</title><rect x="0.5308%" y="212" width="0.2123%" height="15" fill="rgb(221,193,54)" fg:x="45" fg:w="18"/><text x="0.7808%" y="222.50"></text></g><g><title>n_embeddings (kappybara/rule.py:221) (15 samples, 0.18%)</title><rect x="0.9909%" y="180" width="0.1769%" height="15" fill="rgb(248,212,6)" fg:x="84" fg:w="15"/><text x="1.2409%" y="190.50"></text></g><g><title>embeddings (kappybara/mixture.py:76) (10 samples, 0.12%)</title><rect x="1.2386%" y="196" width="0.1180%" height="15" fill="rgb(208,68,35)" fg:x="105" fg:w="10"/><text x="1.4886%" y="206.50"></text></g><g><title>n_embeddings (kappybara/rule.py:223) (17 samples, 0.20%)</title><rect x="1.1679%" y="180" width="0.2005%" height="15" fill="rgb(232,128,0)" fg:x="99" fg:w="17"/><text x="1.4179%" y="190.50"></text></g><g><title>n_embeddings (kappybara/rule.py:224) (13 samples, 0.15%)</title><rect x="1.3684%" y="180" width="0.1534%" height="15" fill="rgb(207,160,47)" fg:x="116" fg:w="13"/><text x="1.6184%" y="190.50"></text></g><g><title>embeddings_in_component (kappybara/mixture.py:83) (10 samples, 0.12%)</title><rect x="1.4038%" y="196" width="0.1180%" height="15" fill="rgb(228,23,34)" fg:x="119" fg:w="10"/><text x="1.6538%" y="206.50"></text></g><g><title>update (kappybara/system.py:69) (129 samples, 1.52%)</title><rect x="0.1180%" y="84" width="1.5218%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="129"/><text x="0.3680%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (129 samples, 1.52%)</title><rect x="0.1180%" y="100" width="1.5218%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="129"/><text x="0.3680%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (127 samples, 1.50%)</title><rect x="0.1416%" y="116" width="1.4982%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="127"/><text x="0.3916%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (127 samples, 1.50%)</title><rect x="0.1416%" y="132" width="1.4982%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="127"/><text x="0.3916%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (127 samples, 1.50%)</title><rect x="0.1416%" y="148" width="1.4982%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="127"/><text x="0.3916%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (126 samples, 1.49%)</title><rect x="0.1534%" y="164" width="1.4864%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="126"/><text x="0.4034%" y="174.50"></text></g><g><title>select (kappybara/rule.py:203) (10 samples, 0.12%)</title><rect x="1.7223%" y="116" width="0.1180%" height="15" fill="rgb(217,207,13)" fg:x="146" fg:w="10"/><text x="1.9723%" y="126.50"></text></g><g><title>act (kappybara/system.py:63) (30 samples, 0.35%)</title><rect x="1.6987%" y="100" width="0.3539%" height="15" fill="rgb(231,73,38)" fg:x="144" fg:w="30"/><text x="1.9487%" y="110.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (15 samples, 0.18%)</title><rect x="2.5363%" y="180" width="0.1769%" height="15" fill="rgb(225,20,46)" fg:x="215" fg:w="15"/><text x="2.7863%" y="190.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (58 samples, 0.68%)</title><rect x="2.0762%" y="132" width="0.6842%" height="15" fill="rgb(210,31,41)" fg:x="176" fg:w="58"/><text x="2.3262%" y="142.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (37 samples, 0.44%)</title><rect x="2.3239%" y="148" width="0.4365%" height="15" fill="rgb(221,200,47)" fg:x="197" fg:w="37"/><text x="2.5739%" y="158.50"></text></g><g><title>neighbors (kappybara/pattern.py:120) (32 samples, 0.38%)</title><rect x="2.3829%" y="164" width="0.3775%" height="15" fill="rgb(226,26,5)" fg:x="202" fg:w="32"/><text x="2.6329%" y="174.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (13 samples, 0.15%)</title><rect x="4.5535%" y="148" width="0.1534%" height="15" fill="rgb(249,33,26)" fg:x="386" fg:w="13"/><text x="4.8035%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (32 samples, 0.38%)</title><rect x="8.8003%" y="164" width="0.3775%" height="15" fill="rgb(235,183,28)" fg:x="746" fg:w="32"/><text x="9.0503%" y="174.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:192) (605 samples, 7.14%)</title><rect x="2.8548%" y="132" width="7.1370%" height="15" fill="rgb(221,5,38)" fg:x="242" fg:w="605"/><text x="3.1048%" y="142.50">_remove_ed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (448 samples, 5.28%)</title><rect x="4.7069%" y="148" width="5.2849%" height="15" fill="rgb(247,18,42)" fg:x="399" fg:w="448"/><text x="4.9569%" y="158.50">__eq__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (69 samples, 0.81%)</title><rect x="9.1778%" y="164" width="0.8140%" height="15" fill="rgb(241,131,45)" fg:x="778" fg:w="69"/><text x="9.4278%" y="174.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (678 samples, 8.00%)</title><rect x="2.0526%" y="116" width="7.9981%" height="15" fill="rgb(249,31,29)" fg:x="174" fg:w="678"/><text x="2.3026%" y="126.50">apply_updat..</text></g><g><title>apply_update (kappybara/mixture.py:106) (9 samples, 0.11%)</title><rect x="10.0625%" y="116" width="0.1062%" height="15" fill="rgb(225,111,53)" fg:x="853" fg:w="9"/><text x="10.3125%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (10 samples, 0.12%)</title><rect x="10.1805%" y="132" width="0.1180%" height="15" fill="rgb(238,160,17)" fg:x="863" fg:w="10"/><text x="10.4305%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (44 samples, 0.52%)</title><rect x="10.7231%" y="148" width="0.5191%" height="15" fill="rgb(214,148,48)" fg:x="909" fg:w="44"/><text x="10.9731%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.17%)</title><rect x="14.9345%" y="164" width="0.1652%" height="15" fill="rgb(232,36,49)" fg:x="1266" fg:w="14"/><text x="15.1845%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (358 samples, 4.22%)</title><rect x="11.2422%" y="148" width="4.2232%" height="15" fill="rgb(209,103,24)" fg:x="953" fg:w="358"/><text x="11.4922%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (31 samples, 0.37%)</title><rect x="15.0997%" y="164" width="0.3657%" height="15" fill="rgb(229,88,8)" fg:x="1280" fg:w="31"/><text x="15.3497%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (18 samples, 0.21%)</title><rect x="18.9926%" y="164" width="0.2123%" height="15" fill="rgb(213,181,19)" fg:x="1610" fg:w="18"/><text x="19.2426%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (337 samples, 3.98%)</title><rect x="15.4654%" y="148" width="3.9755%" height="15" fill="rgb(254,191,54)" fg:x="1311" fg:w="337"/><text x="15.7154%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (20 samples, 0.24%)</title><rect x="19.2049%" y="164" width="0.2359%" height="15" fill="rgb(241,83,37)" fg:x="1628" fg:w="20"/><text x="19.4549%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (67 samples, 0.79%)</title><rect x="19.4408%" y="148" width="0.7904%" height="15" fill="rgb(233,36,39)" fg:x="1648" fg:w="67"/><text x="19.6908%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (71 samples, 0.84%)</title><rect x="20.2312%" y="148" width="0.8376%" height="15" fill="rgb(226,3,54)" fg:x="1715" fg:w="71"/><text x="20.4812%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (16 samples, 0.19%)</title><rect x="23.2040%" y="164" width="0.1887%" height="15" fill="rgb(245,192,40)" fg:x="1967" fg:w="16"/><text x="23.4540%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (220 samples, 2.60%)</title><rect x="21.0688%" y="148" width="2.5953%" height="15" fill="rgb(238,167,29)" fg:x="1786" fg:w="220"/><text x="21.3188%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.27%)</title><rect x="23.3927%" y="164" width="0.2713%" height="15" fill="rgb(232,182,51)" fg:x="1983" fg:w="23"/><text x="23.6427%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (246 samples, 2.90%)</title><rect x="23.6640%" y="148" width="2.9020%" height="15" fill="rgb(231,60,39)" fg:x="2006" fg:w="246"/><text x="23.9140%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (18 samples, 0.21%)</title><rect x="28.3709%" y="164" width="0.2123%" height="15" fill="rgb(208,69,12)" fg:x="2405" fg:w="18"/><text x="28.6209%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (84 samples, 0.99%)</title><rect x="28.5832%" y="164" width="0.9909%" height="15" fill="rgb(235,93,37)" fg:x="2423" fg:w="84"/><text x="28.8332%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (107 samples, 1.26%)</title><rect x="31.6150%" y="180" width="1.2622%" height="15" fill="rgb(213,116,39)" fg:x="2680" fg:w="107"/><text x="31.8650%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (66 samples, 0.78%)</title><rect x="35.0714%" y="196" width="0.7786%" height="15" fill="rgb(222,207,29)" fg:x="2973" fg:w="66"/><text x="35.3214%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (841 samples, 9.92%)</title><rect x="29.6567%" y="164" width="9.9210%" height="15" fill="rgb(206,96,30)" fg:x="2514" fg:w="841"/><text x="29.9067%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (568 samples, 6.70%)</title><rect x="32.8772%" y="180" width="6.7005%" height="15" fill="rgb(218,138,4)" fg:x="2787" fg:w="568"/><text x="33.1272%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (316 samples, 3.73%)</title><rect x="35.8499%" y="196" width="3.7277%" height="15" fill="rgb(250,191,14)" fg:x="3039" fg:w="316"/><text x="36.0999%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (108 samples, 1.27%)</title><rect x="39.5777%" y="164" width="1.2740%" height="15" fill="rgb(239,60,40)" fg:x="3355" fg:w="108"/><text x="39.8277%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (71 samples, 0.84%)</title><rect x="41.9488%" y="180" width="0.8376%" height="15" fill="rgb(206,27,48)" fg:x="3556" fg:w="71"/><text x="42.1988%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (184 samples, 2.17%)</title><rect x="40.9107%" y="164" width="2.1706%" height="15" fill="rgb(225,35,8)" fg:x="3468" fg:w="184"/><text x="41.1607%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (25 samples, 0.29%)</title><rect x="42.7864%" y="180" width="0.2949%" height="15" fill="rgb(250,213,24)" fg:x="3627" fg:w="25"/><text x="43.0364%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (174 samples, 2.05%)</title><rect x="52.5186%" y="180" width="2.0526%" height="15" fill="rgb(247,123,22)" fg:x="4452" fg:w="174"/><text x="52.7686%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (16 samples, 0.19%)</title><rect x="54.5712%" y="180" width="0.1887%" height="15" fill="rgb(231,138,38)" fg:x="4626" fg:w="16"/><text x="54.8212%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (13 samples, 0.15%)</title><rect x="55.2318%" y="196" width="0.1534%" height="15" fill="rgb(231,145,46)" fg:x="4682" fg:w="13"/><text x="55.4818%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (162 samples, 1.91%)</title><rect x="54.7599%" y="180" width="1.9111%" height="15" fill="rgb(251,118,11)" fg:x="4642" fg:w="162"/><text x="55.0099%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (109 samples, 1.29%)</title><rect x="55.3852%" y="196" width="1.2858%" height="15" fill="rgb(217,147,25)" fg:x="4695" fg:w="109"/><text x="55.6352%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (21 samples, 0.25%)</title><rect x="57.5086%" y="196" width="0.2477%" height="15" fill="rgb(247,81,37)" fg:x="4875" fg:w="21"/><text x="57.7586%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.19%)</title><rect x="60.1982%" y="212" width="0.1887%" height="15" fill="rgb(209,12,38)" fg:x="5103" fg:w="16"/><text x="60.4482%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (416 samples, 4.91%)</title><rect x="57.7563%" y="196" width="4.9074%" height="15" fill="rgb(227,1,9)" fg:x="4896" fg:w="416"/><text x="58.0063%" y="206.50">bound ..</text></g><g><title>__eq__ (kappybara/utils.py:33) (193 samples, 2.28%)</title><rect x="60.3869%" y="212" width="2.2767%" height="15" fill="rgb(248,47,43)" fg:x="5119" fg:w="193"/><text x="60.6369%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (38 samples, 0.45%)</title><rect x="62.2154%" y="228" width="0.4483%" height="15" fill="rgb(221,10,30)" fg:x="5274" fg:w="38"/><text x="62.4654%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (216 samples, 2.55%)</title><rect x="62.6637%" y="196" width="2.5481%" height="15" fill="rgb(210,229,1)" fg:x="5312" fg:w="216"/><text x="62.9137%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (91 samples, 1.07%)</title><rect x="65.2117%" y="196" width="1.0735%" height="15" fill="rgb(222,148,37)" fg:x="5528" fg:w="91"/><text x="65.4617%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (853 samples, 10.06%)</title><rect x="56.6710%" y="180" width="10.0625%" height="15" fill="rgb(234,67,33)" fg:x="4804" fg:w="853"/><text x="56.9210%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (34 samples, 0.40%)</title><rect x="66.3324%" y="196" width="0.4011%" height="15" fill="rgb(247,98,35)" fg:x="5623" fg:w="34"/><text x="66.5824%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (27 samples, 0.32%)</title><rect x="66.8043%" y="180" width="0.3185%" height="15" fill="rgb(247,138,52)" fg:x="5663" fg:w="27"/><text x="67.0543%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (9 samples, 0.11%)</title><rect x="67.7598%" y="196" width="0.1062%" height="15" fill="rgb(213,79,30)" fg:x="5744" fg:w="9"/><text x="68.0098%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (204 samples, 2.41%)</title><rect x="67.1228%" y="180" width="2.4065%" height="15" fill="rgb(246,177,23)" fg:x="5690" fg:w="204"/><text x="67.3728%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (141 samples, 1.66%)</title><rect x="67.8660%" y="196" width="1.6633%" height="15" fill="rgb(230,62,27)" fg:x="5753" fg:w="141"/><text x="68.1160%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (23 samples, 0.27%)</title><rect x="69.2580%" y="212" width="0.2713%" height="15" fill="rgb(216,154,8)" fg:x="5871" fg:w="23"/><text x="69.5080%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (235 samples, 2.77%)</title><rect x="69.5293%" y="180" width="2.7722%" height="15" fill="rgb(244,35,45)" fg:x="5894" fg:w="235"/><text x="69.7793%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (157 samples, 1.85%)</title><rect x="70.4495%" y="196" width="1.8521%" height="15" fill="rgb(251,115,12)" fg:x="5972" fg:w="157"/><text x="70.6995%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.41%)</title><rect x="71.8886%" y="212" width="0.4129%" height="15" fill="rgb(240,54,50)" fg:x="6094" fg:w="35"/><text x="72.1386%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (63 samples, 0.74%)</title><rect x="72.3015%" y="180" width="0.7432%" height="15" fill="rgb(233,84,52)" fg:x="6129" fg:w="63"/><text x="72.5515%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (139 samples, 1.64%)</title><rect x="73.0683%" y="180" width="1.6397%" height="15" fill="rgb(207,117,47)" fg:x="6194" fg:w="139"/><text x="73.3183%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (45 samples, 0.53%)</title><rect x="74.7080%" y="180" width="0.5308%" height="15" fill="rgb(249,43,39)" fg:x="6333" fg:w="45"/><text x="74.9580%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (19 samples, 0.22%)</title><rect x="75.2389%" y="180" width="0.2241%" height="15" fill="rgb(209,38,44)" fg:x="6378" fg:w="19"/><text x="75.4889%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,018 samples, 35.60%)</title><rect x="43.0813%" y="164" width="35.6022%" height="15" fill="rgb(236,212,23)" fg:x="3652" fg:w="3018"/><text x="43.3313%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (273 samples, 3.22%)</title><rect x="75.4630%" y="180" width="3.2205%" height="15" fill="rgb(242,79,21)" fg:x="6397" fg:w="273"/><text x="75.7130%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (4,475 samples, 52.79%)</title><rect x="26.5660%" y="148" width="52.7899%" height="15" fill="rgb(211,96,35)" fg:x="2252" fg:w="4475"/><text x="26.8160%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (57 samples, 0.67%)</title><rect x="78.6835%" y="164" width="0.6724%" height="15" fill="rgb(253,215,40)" fg:x="6670" fg:w="57"/><text x="78.9335%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (65 samples, 0.77%)</title><rect x="80.5474%" y="164" width="0.7668%" height="15" fill="rgb(211,81,21)" fg:x="6828" fg:w="65"/><text x="80.7974%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (55 samples, 0.65%)</title><rect x="82.5410%" y="180" width="0.6488%" height="15" fill="rgb(208,190,38)" fg:x="6997" fg:w="55"/><text x="82.7910%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (524 samples, 6.18%)</title><rect x="79.4503%" y="148" width="6.1814%" height="15" fill="rgb(235,213,38)" fg:x="6735" fg:w="524"/><text x="79.7003%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (366 samples, 4.32%)</title><rect x="81.3141%" y="164" width="4.3176%" height="15" fill="rgb(237,122,38)" fg:x="6893" fg:w="366"/><text x="81.5641%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (207 samples, 2.44%)</title><rect x="83.1898%" y="180" width="2.4419%" height="15" fill="rgb(244,218,35)" fg:x="7052" fg:w="207"/><text x="83.4398%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (40 samples, 0.47%)</title><rect x="86.1154%" y="164" width="0.4719%" height="15" fill="rgb(240,68,47)" fg:x="7300" fg:w="40"/><text x="86.3654%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (87 samples, 1.03%)</title><rect x="85.6317%" y="148" width="1.0263%" height="15" fill="rgb(210,16,53)" fg:x="7259" fg:w="87"/><text x="85.8817%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (11 samples, 0.13%)</title><rect x="86.9647%" y="164" width="0.1298%" height="15" fill="rgb(235,124,12)" fg:x="7372" fg:w="11"/><text x="87.2147%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (82 samples, 0.97%)</title><rect x="86.6580%" y="148" width="0.9673%" height="15" fill="rgb(224,169,11)" fg:x="7346" fg:w="82"/><text x="86.9080%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (45 samples, 0.53%)</title><rect x="87.0945%" y="164" width="0.5308%" height="15" fill="rgb(250,166,2)" fg:x="7383" fg:w="45"/><text x="87.3445%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (102 samples, 1.20%)</title><rect x="87.6253%" y="148" width="1.2033%" height="15" fill="rgb(242,216,29)" fg:x="7428" fg:w="102"/><text x="87.8753%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (22 samples, 0.26%)</title><rect x="88.5691%" y="164" width="0.2595%" height="15" fill="rgb(230,116,27)" fg:x="7508" fg:w="22"/><text x="88.8191%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (37 samples, 0.44%)</title><rect x="88.8286%" y="148" width="0.4365%" height="15" fill="rgb(228,99,48)" fg:x="7530" fg:w="37"/><text x="89.0786%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (49 samples, 0.58%)</title><rect x="89.2651%" y="148" width="0.5780%" height="15" fill="rgb(253,11,6)" fg:x="7567" fg:w="49"/><text x="89.5151%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (98 samples, 1.16%)</title><rect x="91.3413%" y="164" width="1.1561%" height="15" fill="rgb(247,143,39)" fg:x="7743" fg:w="98"/><text x="91.5913%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (10 samples, 0.12%)</title><rect x="92.3794%" y="180" width="0.1180%" height="15" fill="rgb(236,97,10)" fg:x="7831" fg:w="10"/><text x="92.6294%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (238 samples, 2.81%)</title><rect x="89.8431%" y="148" width="2.8076%" height="15" fill="rgb(233,208,19)" fg:x="7616" fg:w="238"/><text x="90.0931%" y="158.50">em..</text></g><g><title>embeddings (kappybara/pattern.py:278) (18 samples, 0.21%)</title><rect x="92.6507%" y="148" width="0.2123%" height="15" fill="rgb(216,164,2)" fg:x="7854" fg:w="18"/><text x="92.9007%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:282) (45 samples, 0.53%)</title><rect x="92.8866%" y="148" width="0.5308%" height="15" fill="rgb(220,129,5)" fg:x="7874" fg:w="45"/><text x="93.1366%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (10 samples, 0.12%)</title><rect x="93.4175%" y="148" width="0.1180%" height="15" fill="rgb(242,17,10)" fg:x="7919" fg:w="10"/><text x="93.6675%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (7,063 samples, 83.32%)</title><rect x="10.2985%" y="132" width="83.3196%" height="15" fill="rgb(242,107,0)" fg:x="873" fg:w="7063"/><text x="10.5485%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (65 samples, 0.77%)</title><rect x="93.6180%" y="132" width="0.7668%" height="15" fill="rgb(251,28,31)" fg:x="7936" fg:w="65"/><text x="93.8680%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (17 samples, 0.20%)</title><rect x="94.3848%" y="132" width="0.2005%" height="15" fill="rgb(233,223,10)" fg:x="8001" fg:w="17"/><text x="94.6348%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (13 samples, 0.15%)</title><rect x="94.5853%" y="132" width="0.1534%" height="15" fill="rgb(215,21,27)" fg:x="8018" fg:w="13"/><text x="94.8353%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (19 samples, 0.22%)</title><rect x="97.3576%" y="148" width="0.2241%" height="15" fill="rgb(232,23,21)" fg:x="8253" fg:w="19"/><text x="97.6076%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (289 samples, 3.41%)</title><rect x="94.7387%" y="132" width="3.4092%" height="15" fill="rgb(244,5,23)" fg:x="8031" fg:w="289"/><text x="94.9887%" y="142.50">_up..</text></g><g><title>__hash__ (kappybara/utils.py:30) (48 samples, 0.57%)</title><rect x="97.5817%" y="148" width="0.5662%" height="15" fill="rgb(226,81,46)" fg:x="8272" fg:w="48"/><text x="97.8317%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (7,576 samples, 89.37%)</title><rect x="10.1687%" y="116" width="89.3712%" height="15" fill="rgb(247,70,30)" fg:x="862" fg:w="7576"/><text x="10.4187%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (118 samples, 1.39%)</title><rect x="98.1479%" y="132" width="1.3920%" height="15" fill="rgb(212,68,19)" fg:x="8320" fg:w="118"/><text x="98.3979%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.15%)</title><rect x="99.3866%" y="148" width="0.1534%" height="15" fill="rgb(240,187,13)" fg:x="8425" fg:w="13"/><text x="99.6366%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:24) (8,429 samples, 99.43%)</title><rect x="0.1180%" y="68" width="99.4338%" height="15" fill="rgb(223,113,26)" fg:x="10" fg:w="8429"/><text x="0.3680%" y="78.50">&lt;module&gt; (profile_uni_bi_small.py:24)</text></g><g><title>update (kappybara/system.py:70) (8,300 samples, 97.91%)</title><rect x="1.6397%" y="84" width="97.9120%" height="15" fill="rgb(206,192,2)" fg:x="139" fg:w="8300"/><text x="1.8897%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (8,265 samples, 97.50%)</title><rect x="2.0526%" y="100" width="97.4991%" height="15" fill="rgb(241,108,4)" fg:x="174" fg:w="8265"/><text x="2.3026%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>&lt;module&gt; (profile_uni_bi_small.py:3) (14 samples, 0.17%)</title><rect x="99.5517%" y="68" width="0.1652%" height="15" fill="rgb(247,173,49)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.17%)</title><rect x="99.5517%" y="84" width="0.1652%" height="15" fill="rgb(224,114,35)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.17%)</title><rect x="99.5517%" y="100" width="0.1652%" height="15" fill="rgb(245,159,27)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.17%)</title><rect x="99.5517%" y="116" width="0.1652%" height="15" fill="rgb(245,172,44)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.17%)</title><rect x="99.5517%" y="132" width="0.1652%" height="15" fill="rgb(236,23,11)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.17%)</title><rect x="99.5517%" y="148" width="0.1652%" height="15" fill="rgb(205,117,38)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (14 samples, 0.17%)</title><rect x="99.5517%" y="164" width="0.1652%" height="15" fill="rgb(237,72,25)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (14 samples, 0.17%)</title><rect x="99.5517%" y="180" width="0.1652%" height="15" fill="rgb(244,70,9)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (14 samples, 0.17%)</title><rect x="99.5517%" y="196" width="0.1652%" height="15" fill="rgb(217,125,39)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (14 samples, 0.17%)</title><rect x="99.5517%" y="212" width="0.1652%" height="15" fill="rgb(235,36,10)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (14 samples, 0.17%)</title><rect x="99.5517%" y="228" width="0.1652%" height="15" fill="rgb(251,123,47)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (14 samples, 0.17%)</title><rect x="99.5517%" y="244" width="0.1652%" height="15" fill="rgb(221,13,13)" fg:x="8439" fg:w="14"/><text x="99.8017%" y="254.50"></text></g><g><title>all (8,477 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="8477"/><text x="0.2500%" y="62.50"></text></g></svg></svg>