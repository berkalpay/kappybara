<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="394" onload="init(evt)" viewBox="0 0 1200 394" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="394" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit aecf78e</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="383.00"> </text><svg id="frames" x="10" width="1180" total_samples="2506"><g><title>update (kappybara/system.py:69) (9 samples, 0.36%)</title><rect x="0.1995%" y="84" width="0.3591%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="9"/><text x="0.4495%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (9 samples, 0.36%)</title><rect x="0.1995%" y="100" width="0.3591%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="9"/><text x="0.4495%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (6 samples, 0.24%)</title><rect x="0.3192%" y="116" width="0.2394%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="6"/><text x="0.5692%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (6 samples, 0.24%)</title><rect x="0.3192%" y="132" width="0.2394%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="6"/><text x="0.5692%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (6 samples, 0.24%)</title><rect x="0.3192%" y="148" width="0.2394%" height="15" fill="rgb(208,68,35)" fg:x="8" fg:w="6"/><text x="0.5692%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (4 samples, 0.16%)</title><rect x="0.3990%" y="164" width="0.1596%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="4"/><text x="0.6490%" y="174.50"></text></g><g><title>n_embeddings (kappybara/rule.py:62) (4 samples, 0.16%)</title><rect x="0.3990%" y="180" width="0.1596%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="4"/><text x="0.6490%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (kappybara/rule.py:63) (4 samples, 0.16%)</title><rect x="0.3990%" y="196" width="0.1596%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="4"/><text x="0.6490%" y="206.50"></text></g><g><title>act (kappybara/system.py:63) (4 samples, 0.16%)</title><rect x="0.5986%" y="100" width="0.1596%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="4"/><text x="0.8486%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (3 samples, 0.12%)</title><rect x="0.6385%" y="116" width="0.1197%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="3"/><text x="0.8885%" y="126.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (3 samples, 0.12%)</title><rect x="0.8380%" y="148" width="0.1197%" height="15" fill="rgb(250,228,42)" fg:x="21" fg:w="3"/><text x="1.0880%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (20 samples, 0.80%)</title><rect x="1.0375%" y="148" width="0.7981%" height="15" fill="rgb(240,193,28)" fg:x="26" fg:w="20"/><text x="1.2875%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (4 samples, 0.16%)</title><rect x="1.6760%" y="164" width="0.1596%" height="15" fill="rgb(216,20,37)" fg:x="42" fg:w="4"/><text x="1.9260%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:131) (3 samples, 0.12%)</title><rect x="1.9154%" y="148" width="0.1197%" height="15" fill="rgb(206,188,39)" fg:x="48" fg:w="3"/><text x="2.1654%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (3 samples, 0.12%)</title><rect x="3.1923%" y="180" width="0.1197%" height="15" fill="rgb(217,207,13)" fg:x="80" fg:w="3"/><text x="3.4423%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (20 samples, 0.80%)</title><rect x="3.3121%" y="180" width="0.7981%" height="15" fill="rgb(231,73,38)" fg:x="83" fg:w="20"/><text x="3.5621%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (12 samples, 0.48%)</title><rect x="3.6313%" y="196" width="0.4789%" height="15" fill="rgb(225,20,46)" fg:x="91" fg:w="12"/><text x="3.8813%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (88 samples, 3.51%)</title><rect x="0.7582%" y="132" width="3.5116%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="88"/><text x="1.0082%" y="142.50">_re..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (56 samples, 2.23%)</title><rect x="2.0351%" y="148" width="2.2346%" height="15" fill="rgb(221,200,47)" fg:x="51" fg:w="56"/><text x="2.2851%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (49 samples, 1.96%)</title><rect x="2.3144%" y="164" width="1.9553%" height="15" fill="rgb(226,26,5)" fg:x="58" fg:w="49"/><text x="2.5644%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (4 samples, 0.16%)</title><rect x="4.1101%" y="180" width="0.1596%" height="15" fill="rgb(249,33,26)" fg:x="103" fg:w="4"/><text x="4.3601%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (91 samples, 3.63%)</title><rect x="0.7582%" y="116" width="3.6313%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="91"/><text x="1.0082%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (3 samples, 0.12%)</title><rect x="4.2698%" y="132" width="0.1197%" height="15" fill="rgb(221,5,38)" fg:x="107" fg:w="3"/><text x="4.5198%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (7 samples, 0.28%)</title><rect x="4.8683%" y="148" width="0.2793%" height="15" fill="rgb(247,18,42)" fg:x="122" fg:w="7"/><text x="5.1183%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="9.2578%" y="164" width="0.1197%" height="15" fill="rgb(241,131,45)" fg:x="232" fg:w="3"/><text x="9.5078%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (119 samples, 4.75%)</title><rect x="5.1476%" y="148" width="4.7486%" height="15" fill="rgb(249,31,29)" fg:x="129" fg:w="119"/><text x="5.3976%" y="158.50">embedd..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.52%)</title><rect x="9.3775%" y="164" width="0.5188%" height="15" fill="rgb(225,111,53)" fg:x="235" fg:w="13"/><text x="9.6275%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.24%)</title><rect x="12.4900%" y="164" width="0.2394%" height="15" fill="rgb(238,160,17)" fg:x="313" fg:w="6"/><text x="12.7400%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (78 samples, 3.11%)</title><rect x="9.8962%" y="148" width="3.1125%" height="15" fill="rgb(214,148,48)" fg:x="248" fg:w="78"/><text x="10.1462%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (7 samples, 0.28%)</title><rect x="12.7294%" y="164" width="0.2793%" height="15" fill="rgb(232,36,49)" fg:x="319" fg:w="7"/><text x="12.9794%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (19 samples, 0.76%)</title><rect x="13.0487%" y="148" width="0.7582%" height="15" fill="rgb(209,103,24)" fg:x="327" fg:w="19"/><text x="13.2987%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (20 samples, 0.80%)</title><rect x="13.8069%" y="148" width="0.7981%" height="15" fill="rgb(229,88,8)" fg:x="346" fg:w="20"/><text x="14.0569%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (78 samples, 3.11%)</title><rect x="14.6049%" y="148" width="3.1125%" height="15" fill="rgb(213,181,19)" fg:x="366" fg:w="78"/><text x="14.8549%" y="158.50">emb..</text></g><g><title>__hash__ (kappybara/utils.py:30) (19 samples, 0.76%)</title><rect x="16.9593%" y="164" width="0.7582%" height="15" fill="rgb(254,191,54)" fg:x="425" fg:w="19"/><text x="17.2093%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (82 samples, 3.27%)</title><rect x="17.7175%" y="148" width="3.2721%" height="15" fill="rgb(241,83,37)" fg:x="444" fg:w="82"/><text x="17.9675%" y="158.50">emb..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (7 samples, 0.28%)</title><rect x="23.3041%" y="164" width="0.2793%" height="15" fill="rgb(233,36,39)" fg:x="584" fg:w="7"/><text x="23.5541%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (18 samples, 0.72%)</title><rect x="23.5834%" y="164" width="0.7183%" height="15" fill="rgb(226,3,54)" fg:x="591" fg:w="18"/><text x="23.8334%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (35 samples, 1.40%)</title><rect x="26.2570%" y="180" width="1.3966%" height="15" fill="rgb(245,192,40)" fg:x="658" fg:w="35"/><text x="26.5070%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (33 samples, 1.32%)</title><rect x="28.9705%" y="196" width="1.3168%" height="15" fill="rgb(238,167,29)" fg:x="726" fg:w="33"/><text x="29.2205%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (234 samples, 9.34%)</title><rect x="24.3017%" y="164" width="9.3376%" height="15" fill="rgb(232,182,51)" fg:x="609" fg:w="234"/><text x="24.5517%" y="174.50">embeds_in (ka..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (150 samples, 5.99%)</title><rect x="27.6536%" y="180" width="5.9856%" height="15" fill="rgb(231,60,39)" fg:x="693" fg:w="150"/><text x="27.9036%" y="190.50">__iter__..</text></g><g><title>sites (kappybara/pattern.py:111) (84 samples, 3.35%)</title><rect x="30.2873%" y="196" width="3.3520%" height="15" fill="rgb(208,69,12)" fg:x="759" fg:w="84"/><text x="30.5373%" y="206.50">sit..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (32 samples, 1.28%)</title><rect x="33.6393%" y="164" width="1.2769%" height="15" fill="rgb(235,93,37)" fg:x="843" fg:w="32"/><text x="33.8893%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (20 samples, 0.80%)</title><rect x="36.1931%" y="180" width="0.7981%" height="15" fill="rgb(213,116,39)" fg:x="907" fg:w="20"/><text x="36.4431%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (55 samples, 2.19%)</title><rect x="34.9960%" y="164" width="2.1947%" height="15" fill="rgb(222,207,29)" fg:x="877" fg:w="55"/><text x="35.2460%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (5 samples, 0.20%)</title><rect x="36.9912%" y="180" width="0.1995%" height="15" fill="rgb(206,96,30)" fg:x="927" fg:w="5"/><text x="37.2412%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (66 samples, 2.63%)</title><rect x="47.4860%" y="180" width="2.6337%" height="15" fill="rgb(218,138,4)" fg:x="1190" fg:w="66"/><text x="47.7360%" y="190.50">__..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (4 samples, 0.16%)</title><rect x="50.1197%" y="180" width="0.1596%" height="15" fill="rgb(250,191,14)" fg:x="1256" fg:w="4"/><text x="50.3697%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (4 samples, 0.16%)</title><rect x="50.8779%" y="196" width="0.1596%" height="15" fill="rgb(239,60,40)" fg:x="1275" fg:w="4"/><text x="51.1279%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (57 samples, 2.27%)</title><rect x="50.2793%" y="180" width="2.2745%" height="15" fill="rgb(206,27,48)" fg:x="1260" fg:w="57"/><text x="50.5293%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (38 samples, 1.52%)</title><rect x="51.0375%" y="196" width="1.5164%" height="15" fill="rgb(225,35,8)" fg:x="1279" fg:w="38"/><text x="51.2875%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (7 samples, 0.28%)</title><rect x="53.6313%" y="196" width="0.2793%" height="15" fill="rgb(250,213,24)" fg:x="1344" fg:w="7"/><text x="53.8813%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (5 samples, 0.20%)</title><rect x="55.7063%" y="212" width="0.1995%" height="15" fill="rgb(247,123,22)" fg:x="1396" fg:w="5"/><text x="55.9563%" y="222.50"></text></g><g><title>bound (kappybara/pattern.py:57) (115 samples, 4.59%)</title><rect x="53.9106%" y="196" width="4.5890%" height="15" fill="rgb(231,138,38)" fg:x="1351" fg:w="115"/><text x="54.1606%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (65 samples, 2.59%)</title><rect x="55.9058%" y="212" width="2.5938%" height="15" fill="rgb(231,145,46)" fg:x="1401" fg:w="65"/><text x="56.1558%" y="222.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.48%)</title><rect x="58.0208%" y="228" width="0.4789%" height="15" fill="rgb(251,118,11)" fg:x="1454" fg:w="12"/><text x="58.2708%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (68 samples, 2.71%)</title><rect x="58.4996%" y="196" width="2.7135%" height="15" fill="rgb(217,147,25)" fg:x="1466" fg:w="68"/><text x="58.7496%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (25 samples, 1.00%)</title><rect x="61.2131%" y="196" width="0.9976%" height="15" fill="rgb(247,81,37)" fg:x="1534" fg:w="25"/><text x="61.4631%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (3 samples, 0.12%)</title><rect x="62.2107%" y="196" width="0.1197%" height="15" fill="rgb(209,12,38)" fg:x="1559" fg:w="3"/><text x="62.4607%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (256 samples, 10.22%)</title><rect x="52.5539%" y="180" width="10.2155%" height="15" fill="rgb(227,1,9)" fg:x="1317" fg:w="256"/><text x="52.8039%" y="190.50">embeds_in (kapp..</text></g><g><title>coupled (kappybara/pattern.py:64) (11 samples, 0.44%)</title><rect x="62.3304%" y="196" width="0.4389%" height="15" fill="rgb(248,47,43)" fg:x="1562" fg:w="11"/><text x="62.5804%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (9 samples, 0.36%)</title><rect x="62.8492%" y="180" width="0.3591%" height="15" fill="rgb(221,10,30)" fg:x="1575" fg:w="9"/><text x="63.0992%" y="190.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="66.5204%" y="212" width="0.1197%" height="15" fill="rgb(210,229,1)" fg:x="1667" fg:w="3"/><text x="66.7704%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (91 samples, 3.63%)</title><rect x="63.2083%" y="180" width="3.6313%" height="15" fill="rgb(222,148,37)" fg:x="1584" fg:w="91"/><text x="63.4583%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (63 samples, 2.51%)</title><rect x="64.3256%" y="196" width="2.5140%" height="15" fill="rgb(234,67,33)" fg:x="1612" fg:w="63"/><text x="64.5756%" y="206.50">__..</text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.20%)</title><rect x="66.6401%" y="212" width="0.1995%" height="15" fill="rgb(247,98,35)" fg:x="1670" fg:w="5"/><text x="66.8901%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (3 samples, 0.12%)</title><rect x="68.1564%" y="196" width="0.1197%" height="15" fill="rgb(247,138,52)" fg:x="1708" fg:w="3"/><text x="68.4064%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (110 samples, 4.39%)</title><rect x="66.8396%" y="180" width="4.3895%" height="15" fill="rgb(213,79,30)" fg:x="1675" fg:w="110"/><text x="67.0896%" y="190.50">embed..</text></g><g><title>__eq__ (kappybara/utils.py:33) (74 samples, 2.95%)</title><rect x="68.2761%" y="196" width="2.9529%" height="15" fill="rgb(246,177,23)" fg:x="1711" fg:w="74"/><text x="68.5261%" y="206.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.52%)</title><rect x="70.7103%" y="212" width="0.5188%" height="15" fill="rgb(230,62,27)" fg:x="1772" fg:w="13"/><text x="70.9603%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (26 samples, 1.04%)</title><rect x="71.2291%" y="180" width="1.0375%" height="15" fill="rgb(216,154,8)" fg:x="1785" fg:w="26"/><text x="71.4791%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (60 samples, 2.39%)</title><rect x="72.2666%" y="180" width="2.3943%" height="15" fill="rgb(244,35,45)" fg:x="1811" fg:w="60"/><text x="72.5166%" y="190.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (23 samples, 0.92%)</title><rect x="74.6608%" y="180" width="0.9178%" height="15" fill="rgb(251,115,12)" fg:x="1871" fg:w="23"/><text x="74.9108%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (6 samples, 0.24%)</title><rect x="75.5786%" y="180" width="0.2394%" height="15" fill="rgb(240,54,50)" fg:x="1894" fg:w="6"/><text x="75.8286%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,042 samples, 41.58%)</title><rect x="37.1907%" y="164" width="41.5802%" height="15" fill="rgb(233,84,52)" fg:x="932" fg:w="1042"/><text x="37.4407%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (74 samples, 2.95%)</title><rect x="75.8180%" y="180" width="2.9529%" height="15" fill="rgb(207,117,47)" fg:x="1900" fg:w="74"/><text x="76.0680%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (1,464 samples, 58.42%)</title><rect x="20.9896%" y="148" width="58.4198%" height="15" fill="rgb(249,43,39)" fg:x="526" fg:w="1464"/><text x="21.2396%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (16 samples, 0.64%)</title><rect x="78.7709%" y="164" width="0.6385%" height="15" fill="rgb(209,38,44)" fg:x="1974" fg:w="16"/><text x="79.0209%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (17 samples, 0.68%)</title><rect x="80.3671%" y="164" width="0.6784%" height="15" fill="rgb(236,212,23)" fg:x="2014" fg:w="17"/><text x="80.6171%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (16 samples, 0.64%)</title><rect x="82.0830%" y="180" width="0.6385%" height="15" fill="rgb(242,79,21)" fg:x="2057" fg:w="16"/><text x="82.3330%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (132 samples, 5.27%)</title><rect x="79.4892%" y="148" width="5.2674%" height="15" fill="rgb(211,96,35)" fg:x="1992" fg:w="132"/><text x="79.7392%" y="158.50">embedd..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (93 samples, 3.71%)</title><rect x="81.0455%" y="164" width="3.7111%" height="15" fill="rgb(253,215,40)" fg:x="2031" fg:w="93"/><text x="81.2955%" y="174.50">__it..</text></g><g><title>sites (kappybara/pattern.py:111) (51 samples, 2.04%)</title><rect x="82.7215%" y="180" width="2.0351%" height="15" fill="rgb(211,81,21)" fg:x="2073" fg:w="51"/><text x="82.9715%" y="190.50">s..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (10 samples, 0.40%)</title><rect x="85.0758%" y="164" width="0.3990%" height="15" fill="rgb(208,190,38)" fg:x="2132" fg:w="10"/><text x="85.3258%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (21 samples, 0.84%)</title><rect x="84.7566%" y="148" width="0.8380%" height="15" fill="rgb(235,213,38)" fg:x="2124" fg:w="21"/><text x="85.0066%" y="158.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:99) (3 samples, 0.12%)</title><rect x="85.4749%" y="164" width="0.1197%" height="15" fill="rgb(237,122,38)" fg:x="2142" fg:w="3"/><text x="85.7249%" y="174.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (6 samples, 0.24%)</title><rect x="86.0335%" y="164" width="0.2394%" height="15" fill="rgb(244,218,35)" fg:x="2156" fg:w="6"/><text x="86.2835%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (28 samples, 1.12%)</title><rect x="85.5946%" y="148" width="1.1173%" height="15" fill="rgb(240,68,47)" fg:x="2145" fg:w="28"/><text x="85.8446%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (11 samples, 0.44%)</title><rect x="86.2729%" y="164" width="0.4389%" height="15" fill="rgb(210,16,53)" fg:x="2162" fg:w="11"/><text x="86.5229%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="88.1484%" y="164" width="0.1197%" height="15" fill="rgb(235,124,12)" fg:x="2209" fg:w="3"/><text x="88.3984%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (44 samples, 1.76%)</title><rect x="86.7119%" y="148" width="1.7558%" height="15" fill="rgb(224,169,11)" fg:x="2173" fg:w="44"/><text x="86.9619%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (5 samples, 0.20%)</title><rect x="88.2682%" y="164" width="0.1995%" height="15" fill="rgb(250,166,2)" fg:x="2212" fg:w="5"/><text x="88.5182%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (20 samples, 0.80%)</title><rect x="88.4677%" y="148" width="0.7981%" height="15" fill="rgb(242,216,29)" fg:x="2217" fg:w="20"/><text x="88.7177%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (3 samples, 0.12%)</title><rect x="89.1460%" y="164" width="0.1197%" height="15" fill="rgb(230,116,27)" fg:x="2234" fg:w="3"/><text x="89.3960%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (25 samples, 1.00%)</title><rect x="89.2658%" y="148" width="0.9976%" height="15" fill="rgb(228,99,48)" fg:x="2237" fg:w="25"/><text x="89.5158%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="93.6552%" y="180" width="0.1197%" height="15" fill="rgb(253,11,6)" fg:x="2347" fg:w="3"/><text x="93.9052%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (33 samples, 1.32%)</title><rect x="92.5778%" y="164" width="1.3168%" height="15" fill="rgb(247,143,39)" fg:x="2320" fg:w="33"/><text x="92.8278%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (3 samples, 0.12%)</title><rect x="93.7749%" y="180" width="0.1197%" height="15" fill="rgb(236,97,10)" fg:x="2350" fg:w="3"/><text x="94.0249%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (92 samples, 3.67%)</title><rect x="90.2634%" y="148" width="3.6712%" height="15" fill="rgb(233,208,19)" fg:x="2262" fg:w="92"/><text x="90.5134%" y="158.50">embe..</text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (2,253 samples, 89.90%)</title><rect x="4.5092%" y="132" width="89.9042%" height="15" fill="rgb(216,164,2)" fg:x="113" fg:w="2253"/><text x="4.7592%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:282) (11 samples, 0.44%)</title><rect x="93.9745%" y="148" width="0.4389%" height="15" fill="rgb(220,129,5)" fg:x="2355" fg:w="11"/><text x="94.2245%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (13 samples, 0.52%)</title><rect x="94.4134%" y="132" width="0.5188%" height="15" fill="rgb(242,17,10)" fg:x="2366" fg:w="13"/><text x="94.6634%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (3 samples, 0.12%)</title><rect x="94.9322%" y="132" width="0.1197%" height="15" fill="rgb(242,107,0)" fg:x="2379" fg:w="3"/><text x="95.1822%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (3 samples, 0.12%)</title><rect x="95.0519%" y="132" width="0.1197%" height="15" fill="rgb(251,28,31)" fg:x="2382" fg:w="3"/><text x="95.3019%" y="142.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (3 samples, 0.12%)</title><rect x="97.6057%" y="148" width="0.1197%" height="15" fill="rgb(233,223,10)" fg:x="2446" fg:w="3"/><text x="97.8557%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (73 samples, 2.91%)</title><rect x="95.1716%" y="132" width="2.9130%" height="15" fill="rgb(215,21,27)" fg:x="2385" fg:w="73"/><text x="95.4216%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (9 samples, 0.36%)</title><rect x="97.7255%" y="148" width="0.3591%" height="15" fill="rgb(232,23,21)" fg:x="2449" fg:w="9"/><text x="97.9755%" y="158.50"></text></g><g><title>apply_update (kappybara/mixture.py:110) (2,373 samples, 94.69%)</title><rect x="4.4693%" y="116" width="94.6927%" height="15" fill="rgb(244,5,23)" fg:x="112" fg:w="2373"/><text x="4.7193%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (27 samples, 1.08%)</title><rect x="98.0846%" y="132" width="1.0774%" height="15" fill="rgb(226,81,46)" fg:x="2458" fg:w="27"/><text x="98.3346%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (2,481 samples, 99.00%)</title><rect x="0.1995%" y="68" width="99.0024%" height="15" fill="rgb(247,70,30)" fg:x="5" fg:w="2481"/><text x="0.4495%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (2,472 samples, 98.64%)</title><rect x="0.5587%" y="84" width="98.6433%" height="15" fill="rgb(212,68,19)" fg:x="14" fg:w="2472"/><text x="0.8087%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (2,467 samples, 98.44%)</title><rect x="0.7582%" y="100" width="98.4437%" height="15" fill="rgb(240,187,13)" fg:x="19" fg:w="2467"/><text x="1.0082%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>_parse_grammar (lark/load_grammar.py:966) (4 samples, 0.16%)</title><rect x="99.2019%" y="356" width="0.1596%" height="15" fill="rgb(223,113,26)" fg:x="2486" fg:w="4"/><text x="99.4519%" y="366.50"></text></g><g><title>__init__ (lark/lark.py:357) (6 samples, 0.24%)</title><rect x="99.2019%" y="308" width="0.2394%" height="15" fill="rgb(206,192,2)" fg:x="2486" fg:w="6"/><text x="99.4519%" y="318.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1415) (6 samples, 0.24%)</title><rect x="99.2019%" y="324" width="0.2394%" height="15" fill="rgb(241,108,4)" fg:x="2486" fg:w="6"/><text x="99.4519%" y="334.50"></text></g><g><title>load_grammar (lark/load_grammar.py:1240) (6 samples, 0.24%)</title><rect x="99.2019%" y="340" width="0.2394%" height="15" fill="rgb(247,173,49)" fg:x="2486" fg:w="6"/><text x="99.4519%" y="350.50"></text></g><g><title>&lt;module&gt; (kappybara/grammar.py:35) (11 samples, 0.44%)</title><rect x="99.2019%" y="260" width="0.4389%" height="15" fill="rgb(224,114,35)" fg:x="2486" fg:w="11"/><text x="99.4519%" y="270.50"></text></g><g><title>__init__ (kappybara/grammar.py:15) (11 samples, 0.44%)</title><rect x="99.2019%" y="276" width="0.4389%" height="15" fill="rgb(245,159,27)" fg:x="2486" fg:w="11"/><text x="99.4519%" y="286.50"></text></g><g><title>open (lark/lark.py:577) (11 samples, 0.44%)</title><rect x="99.2019%" y="292" width="0.4389%" height="15" fill="rgb(245,172,44)" fg:x="2486" fg:w="11"/><text x="99.4519%" y="302.50"></text></g><g><title>__init__ (lark/lark.py:407) (5 samples, 0.20%)</title><rect x="99.4413%" y="308" width="0.1995%" height="15" fill="rgb(236,23,11)" fg:x="2492" fg:w="5"/><text x="99.6913%" y="318.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (12 samples, 0.48%)</title><rect x="99.2019%" y="68" width="0.4789%" height="15" fill="rgb(205,117,38)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.48%)</title><rect x="99.2019%" y="84" width="0.4789%" height="15" fill="rgb(237,72,25)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.48%)</title><rect x="99.2019%" y="100" width="0.4789%" height="15" fill="rgb(244,70,9)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.48%)</title><rect x="99.2019%" y="116" width="0.4789%" height="15" fill="rgb(217,125,39)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.48%)</title><rect x="99.2019%" y="132" width="0.4789%" height="15" fill="rgb(235,36,10)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.48%)</title><rect x="99.2019%" y="148" width="0.4789%" height="15" fill="rgb(251,123,47)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (12 samples, 0.48%)</title><rect x="99.2019%" y="164" width="0.4789%" height="15" fill="rgb(221,13,13)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (12 samples, 0.48%)</title><rect x="99.2019%" y="180" width="0.4789%" height="15" fill="rgb(238,131,9)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (12 samples, 0.48%)</title><rect x="99.2019%" y="196" width="0.4789%" height="15" fill="rgb(211,50,8)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (12 samples, 0.48%)</title><rect x="99.2019%" y="212" width="0.4789%" height="15" fill="rgb(245,182,24)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (12 samples, 0.48%)</title><rect x="99.2019%" y="228" width="0.4789%" height="15" fill="rgb(242,14,37)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (12 samples, 0.48%)</title><rect x="99.2019%" y="244" width="0.4789%" height="15" fill="rgb(246,228,12)" fg:x="2486" fg:w="12"/><text x="99.4519%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (4 samples, 0.16%)</title><rect x="99.7207%" y="68" width="0.1596%" height="15" fill="rgb(213,55,15)" fg:x="2499" fg:w="4"/><text x="99.9707%" y="78.50"></text></g><g><title>all (2,506 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="2506"/><text x="0.2500%" y="62.50"></text></g></svg></svg>