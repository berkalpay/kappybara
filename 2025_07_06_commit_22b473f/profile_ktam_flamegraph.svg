<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_ktam_flamegraph.svg -- python profile_ktam.py # commit 22b473f</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="9437"><g><title>update (kappybara/system.py:69) (20 samples, 0.21%)</title><rect x="0.0530%" y="84" width="0.2119%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="20"/><text x="0.3030%" y="94.50"></text></g><g><title>wait (kappybara/system.py:58) (20 samples, 0.21%)</title><rect x="0.0530%" y="100" width="0.2119%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="20"/><text x="0.3030%" y="110.50"></text></g><g><title>reactivity (kappybara/system.py:55) (15 samples, 0.16%)</title><rect x="0.1060%" y="116" width="0.1589%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="15"/><text x="0.3560%" y="126.50"></text></g><g><title>__get__ (functools.py:998) (12 samples, 0.13%)</title><rect x="0.1378%" y="132" width="0.1272%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="12"/><text x="0.3878%" y="142.50"></text></g><g><title>rule_reactivities (kappybara/system.py:51) (12 samples, 0.13%)</title><rect x="0.1378%" y="148" width="0.1272%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="12"/><text x="0.3878%" y="158.50"></text></g><g><title>reactivity (kappybara/rule.py:18) (11 samples, 0.12%)</title><rect x="0.1484%" y="164" width="0.1166%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="11"/><text x="0.3984%" y="174.50"></text></g><g><title>act (kappybara/system.py:63) (45 samples, 0.48%)</title><rect x="0.3815%" y="100" width="0.4768%" height="15" fill="rgb(207,160,47)" fg:x="36" fg:w="45"/><text x="0.6315%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (38 samples, 0.40%)</title><rect x="0.4557%" y="116" width="0.4027%" height="15" fill="rgb(228,23,34)" fg:x="43" fg:w="38"/><text x="0.7057%" y="126.50"></text></g><g><title>_produce_update (kappybara/rule.py:150) (10 samples, 0.11%)</title><rect x="0.7524%" y="132" width="0.1060%" height="15" fill="rgb(218,30,26)" fg:x="71" fg:w="10"/><text x="1.0024%" y="142.50"></text></g><g><title>__init__ (kappybara/pattern.py:212) (18 samples, 0.19%)</title><rect x="0.9643%" y="148" width="0.1907%" height="15" fill="rgb(220,122,19)" fg:x="91" fg:w="18"/><text x="1.2143%" y="158.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:129) (82 samples, 0.87%)</title><rect x="1.1762%" y="148" width="0.8689%" height="15" fill="rgb(250,228,42)" fg:x="111" fg:w="82"/><text x="1.4262%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (11 samples, 0.12%)</title><rect x="1.9286%" y="164" width="0.1166%" height="15" fill="rgb(240,193,28)" fg:x="182" fg:w="11"/><text x="2.1786%" y="174.50"></text></g><g><title>depth_first_traversal (kappybara/pattern.py:130) (23 samples, 0.24%)</title><rect x="2.0451%" y="148" width="0.2437%" height="15" fill="rgb(216,20,37)" fg:x="193" fg:w="23"/><text x="2.2951%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (64 samples, 0.68%)</title><rect x="3.5287%" y="180" width="0.6782%" height="15" fill="rgb(206,188,39)" fg:x="333" fg:w="64"/><text x="3.7787%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:111) (36 samples, 0.38%)</title><rect x="3.8254%" y="196" width="0.3815%" height="15" fill="rgb(217,207,13)" fg:x="361" fg:w="36"/><text x="4.0754%" y="206.50"></text></g><g><title>_remove_edge (kappybara/mixture.py:188) (343 samples, 3.63%)</title><rect x="0.9007%" y="132" width="3.6346%" height="15" fill="rgb(231,73,38)" fg:x="85" fg:w="343"/><text x="1.1507%" y="142.50">_rem..</text></g><g><title>depth_first_traversal (kappybara/pattern.py:132) (208 samples, 2.20%)</title><rect x="2.3312%" y="148" width="2.2041%" height="15" fill="rgb(225,20,46)" fg:x="220" fg:w="208"/><text x="2.5812%" y="158.50">d..</text></g><g><title>neighbors (kappybara/pattern.py:120) (180 samples, 1.91%)</title><rect x="2.6280%" y="164" width="1.9074%" height="15" fill="rgb(210,31,41)" fg:x="248" fg:w="180"/><text x="2.8780%" y="174.50">n..</text></g><g><title>coupled (kappybara/pattern.py:64) (28 samples, 0.30%)</title><rect x="4.2386%" y="180" width="0.2967%" height="15" fill="rgb(221,200,47)" fg:x="400" fg:w="28"/><text x="4.4886%" y="190.50"></text></g><g><title>apply_update (kappybara/mixture.py:100) (370 samples, 3.92%)</title><rect x="0.8583%" y="116" width="3.9207%" height="15" fill="rgb(226,26,5)" fg:x="81" fg:w="370"/><text x="1.1083%" y="126.50">appl..</text></g><g><title>_remove_edge (kappybara/mixture.py:189) (23 samples, 0.24%)</title><rect x="4.5353%" y="132" width="0.2437%" height="15" fill="rgb(249,33,26)" fg:x="428" fg:w="23"/><text x="4.7853%" y="142.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (15 samples, 0.16%)</title><rect x="4.6201%" y="148" width="0.1589%" height="15" fill="rgb(235,183,28)" fg:x="436" fg:w="15"/><text x="4.8701%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (45 samples, 0.48%)</title><rect x="5.4890%" y="148" width="0.4768%" height="15" fill="rgb(221,5,38)" fg:x="518" fg:w="45"/><text x="5.7390%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="9.9290%" y="164" width="0.1484%" height="15" fill="rgb(247,18,42)" fg:x="937" fg:w="14"/><text x="10.1790%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (423 samples, 4.48%)</title><rect x="5.9659%" y="148" width="4.4824%" height="15" fill="rgb(241,131,45)" fg:x="563" fg:w="423"/><text x="6.2159%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (35 samples, 0.37%)</title><rect x="10.0774%" y="164" width="0.3709%" height="15" fill="rgb(249,31,29)" fg:x="951" fg:w="35"/><text x="10.3274%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="13.7438%" y="164" width="0.1166%" height="15" fill="rgb(225,111,53)" fg:x="1297" fg:w="11"/><text x="13.9938%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (352 samples, 3.73%)</title><rect x="10.4482%" y="148" width="3.7300%" height="15" fill="rgb(238,160,17)" fg:x="986" fg:w="352"/><text x="10.6982%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (30 samples, 0.32%)</title><rect x="13.8603%" y="164" width="0.3179%" height="15" fill="rgb(214,148,48)" fg:x="1308" fg:w="30"/><text x="14.1103%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (87 samples, 0.92%)</title><rect x="14.2312%" y="148" width="0.9219%" height="15" fill="rgb(232,36,49)" fg:x="1343" fg:w="87"/><text x="14.4812%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (64 samples, 0.68%)</title><rect x="15.1531%" y="148" width="0.6782%" height="15" fill="rgb(209,103,24)" fg:x="1430" fg:w="64"/><text x="15.4031%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (26 samples, 0.28%)</title><rect x="18.0884%" y="164" width="0.2755%" height="15" fill="rgb(229,88,8)" fg:x="1707" fg:w="26"/><text x="18.3384%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (263 samples, 2.79%)</title><rect x="15.8313%" y="148" width="2.7869%" height="15" fill="rgb(213,181,19)" fg:x="1494" fg:w="263"/><text x="16.0813%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (24 samples, 0.25%)</title><rect x="18.3639%" y="164" width="0.2543%" height="15" fill="rgb(254,191,54)" fg:x="1733" fg:w="24"/><text x="18.6139%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (252 samples, 2.67%)</title><rect x="18.6182%" y="148" width="2.6703%" height="15" fill="rgb(241,83,37)" fg:x="1757" fg:w="252"/><text x="18.8682%" y="158.50">em..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (23 samples, 0.24%)</title><rect x="23.4397%" y="164" width="0.2437%" height="15" fill="rgb(233,36,39)" fg:x="2212" fg:w="23"/><text x="23.6897%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (102 samples, 1.08%)</title><rect x="23.6834%" y="164" width="1.0809%" height="15" fill="rgb(226,3,54)" fg:x="2235" fg:w="102"/><text x="23.9334%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (115 samples, 1.22%)</title><rect x="26.8306%" y="180" width="1.2186%" height="15" fill="rgb(245,192,40)" fg:x="2532" fg:w="115"/><text x="27.0806%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (91 samples, 0.96%)</title><rect x="30.1685%" y="196" width="0.9643%" height="15" fill="rgb(238,167,29)" fg:x="2847" fg:w="91"/><text x="30.4185%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (938 samples, 9.94%)</title><rect x="24.7642%" y="164" width="9.9396%" height="15" fill="rgb(232,182,51)" fg:x="2337" fg:w="938"/><text x="25.0142%" y="174.50">embeds_in (kap..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (628 samples, 6.65%)</title><rect x="28.0492%" y="180" width="6.6547%" height="15" fill="rgb(231,60,39)" fg:x="2647" fg:w="628"/><text x="28.2992%" y="190.50">__iter__ ..</text></g><g><title>sites (kappybara/pattern.py:111) (337 samples, 3.57%)</title><rect x="31.1328%" y="196" width="3.5711%" height="15" fill="rgb(208,69,12)" fg:x="2938" fg:w="337"/><text x="31.3828%" y="206.50">site..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (126 samples, 1.34%)</title><rect x="34.7038%" y="164" width="1.3352%" height="15" fill="rgb(235,93,37)" fg:x="3275" fg:w="126"/><text x="34.9538%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (105 samples, 1.11%)</title><rect x="37.3424%" y="180" width="1.1126%" height="15" fill="rgb(213,116,39)" fg:x="3524" fg:w="105"/><text x="37.5924%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (240 samples, 2.54%)</title><rect x="36.1132%" y="164" width="2.5432%" height="15" fill="rgb(222,207,29)" fg:x="3408" fg:w="240"/><text x="36.3632%" y="174.50">em..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (19 samples, 0.20%)</title><rect x="38.4550%" y="180" width="0.2013%" height="15" fill="rgb(206,96,30)" fg:x="3629" fg:w="19"/><text x="38.7050%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (214 samples, 2.27%)</title><rect x="48.6807%" y="180" width="2.2677%" height="15" fill="rgb(218,138,4)" fg:x="4594" fg:w="214"/><text x="48.9307%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (15 samples, 0.16%)</title><rect x="50.9484%" y="180" width="0.1589%" height="15" fill="rgb(250,191,14)" fg:x="4808" fg:w="15"/><text x="51.1984%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (29 samples, 0.31%)</title><rect x="51.7219%" y="196" width="0.3073%" height="15" fill="rgb(239,60,40)" fg:x="4881" fg:w="29"/><text x="51.9719%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (209 samples, 2.21%)</title><rect x="51.1073%" y="180" width="2.2147%" height="15" fill="rgb(206,27,48)" fg:x="4823" fg:w="209"/><text x="51.3573%" y="190.50">e..</text></g><g><title>stated (kappybara/pattern.py:52) (122 samples, 1.29%)</title><rect x="52.0292%" y="196" width="1.2928%" height="15" fill="rgb(225,35,8)" fg:x="4910" fg:w="122"/><text x="52.2792%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (21 samples, 0.22%)</title><rect x="54.4135%" y="196" width="0.2225%" height="15" fill="rgb(250,213,24)" fg:x="5135" fg:w="21"/><text x="54.6635%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (16 samples, 0.17%)</title><rect x="56.9567%" y="212" width="0.1695%" height="15" fill="rgb(247,123,22)" fg:x="5375" fg:w="16"/><text x="57.2067%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (11 samples, 0.12%)</title><rect x="59.5740%" y="228" width="0.1166%" height="15" fill="rgb(231,138,38)" fg:x="5622" fg:w="11"/><text x="59.8240%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (518 samples, 5.49%)</title><rect x="54.6360%" y="196" width="5.4890%" height="15" fill="rgb(231,145,46)" fg:x="5156" fg:w="518"/><text x="54.8860%" y="206.50">bound (..</text></g><g><title>__eq__ (kappybara/utils.py:33) (283 samples, 3.00%)</title><rect x="57.1262%" y="212" width="2.9988%" height="15" fill="rgb(251,118,11)" fg:x="5391" fg:w="283"/><text x="57.3762%" y="222.50">__e..</text></g><g><title>__hash__ (kappybara/utils.py:30) (41 samples, 0.43%)</title><rect x="59.6906%" y="228" width="0.4345%" height="15" fill="rgb(217,147,25)" fg:x="5633" fg:w="41"/><text x="59.9406%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (241 samples, 2.55%)</title><rect x="60.1250%" y="196" width="2.5538%" height="15" fill="rgb(247,81,37)" fg:x="5674" fg:w="241"/><text x="60.3750%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (93 samples, 0.99%)</title><rect x="62.6788%" y="196" width="0.9855%" height="15" fill="rgb(209,12,38)" fg:x="5915" fg:w="93"/><text x="62.9288%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (17 samples, 0.18%)</title><rect x="63.6643%" y="196" width="0.1801%" height="15" fill="rgb(227,1,9)" fg:x="6008" fg:w="17"/><text x="63.9143%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (1,019 samples, 10.80%)</title><rect x="53.3220%" y="180" width="10.7979%" height="15" fill="rgb(248,47,43)" fg:x="5032" fg:w="1019"/><text x="53.5720%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (26 samples, 0.28%)</title><rect x="63.8444%" y="196" width="0.2755%" height="15" fill="rgb(221,10,30)" fg:x="6025" fg:w="26"/><text x="64.0944%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (28 samples, 0.30%)</title><rect x="64.1729%" y="180" width="0.2967%" height="15" fill="rgb(210,229,1)" fg:x="6056" fg:w="28"/><text x="64.4229%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (10 samples, 0.11%)</title><rect x="65.5293%" y="196" width="0.1060%" height="15" fill="rgb(222,148,37)" fg:x="6184" fg:w="10"/><text x="65.7793%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (274 samples, 2.90%)</title><rect x="64.4696%" y="180" width="2.9035%" height="15" fill="rgb(234,67,33)" fg:x="6084" fg:w="274"/><text x="64.7196%" y="190.50">em..</text></g><g><title>__eq__ (kappybara/utils.py:33) (164 samples, 1.74%)</title><rect x="65.6353%" y="196" width="1.7378%" height="15" fill="rgb(247,98,35)" fg:x="6194" fg:w="164"/><text x="65.8853%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (29 samples, 0.31%)</title><rect x="67.0658%" y="212" width="0.3073%" height="15" fill="rgb(247,138,52)" fg:x="6329" fg:w="29"/><text x="67.3158%" y="222.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (11 samples, 0.12%)</title><rect x="68.7401%" y="196" width="0.1166%" height="15" fill="rgb(213,79,30)" fg:x="6487" fg:w="11"/><text x="68.9901%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.15%)</title><rect x="70.5521%" y="212" width="0.1484%" height="15" fill="rgb(246,177,23)" fg:x="6658" fg:w="14"/><text x="70.8021%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (360 samples, 3.81%)</title><rect x="67.3731%" y="180" width="3.8148%" height="15" fill="rgb(230,62,27)" fg:x="6358" fg:w="360"/><text x="67.6231%" y="190.50">embe..</text></g><g><title>__eq__ (kappybara/utils.py:33) (220 samples, 2.33%)</title><rect x="68.8566%" y="196" width="2.3312%" height="15" fill="rgb(216,154,8)" fg:x="6498" fg:w="220"/><text x="69.1066%" y="206.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (46 samples, 0.49%)</title><rect x="70.7004%" y="212" width="0.4874%" height="15" fill="rgb(244,35,45)" fg:x="6672" fg:w="46"/><text x="70.9504%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (79 samples, 0.84%)</title><rect x="71.1879%" y="180" width="0.8371%" height="15" fill="rgb(251,115,12)" fg:x="6718" fg:w="79"/><text x="71.4379%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (194 samples, 2.06%)</title><rect x="72.0250%" y="180" width="2.0557%" height="15" fill="rgb(240,54,50)" fg:x="6797" fg:w="194"/><text x="72.2750%" y="190.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:83) (98 samples, 1.04%)</title><rect x="74.0807%" y="180" width="1.0385%" height="15" fill="rgb(233,84,52)" fg:x="6991" fg:w="98"/><text x="74.3307%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (25 samples, 0.26%)</title><rect x="75.1192%" y="180" width="0.2649%" height="15" fill="rgb(207,117,47)" fg:x="7089" fg:w="25"/><text x="75.3692%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (3,778 samples, 40.03%)</title><rect x="38.6564%" y="164" width="40.0339%" height="15" fill="rgb(249,43,39)" fg:x="3648" fg:w="3778"/><text x="38.9064%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (312 samples, 3.31%)</title><rect x="75.3841%" y="180" width="3.3061%" height="15" fill="rgb(209,38,44)" fg:x="7114" fg:w="312"/><text x="75.6341%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (5,475 samples, 58.02%)</title><rect x="21.2885%" y="148" width="58.0163%" height="15" fill="rgb(236,212,23)" fg:x="2009" fg:w="5475"/><text x="21.5385%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (58 samples, 0.61%)</title><rect x="78.6903%" y="164" width="0.6146%" height="15" fill="rgb(242,79,21)" fg:x="7426" fg:w="58"/><text x="78.9403%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (14 samples, 0.15%)</title><rect x="79.3049%" y="148" width="0.1484%" height="15" fill="rgb(211,96,35)" fg:x="7484" fg:w="14"/><text x="79.5549%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (57 samples, 0.60%)</title><rect x="80.6718%" y="164" width="0.6040%" height="15" fill="rgb(253,215,40)" fg:x="7613" fg:w="57"/><text x="80.9218%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (60 samples, 0.64%)</title><rect x="82.3991%" y="180" width="0.6358%" height="15" fill="rgb(211,81,21)" fg:x="7776" fg:w="60"/><text x="82.6491%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (575 samples, 6.09%)</title><rect x="79.4850%" y="148" width="6.0930%" height="15" fill="rgb(208,190,38)" fg:x="7501" fg:w="575"/><text x="79.7350%" y="158.50">embeddin..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (406 samples, 4.30%)</title><rect x="81.2758%" y="164" width="4.3022%" height="15" fill="rgb(235,213,38)" fg:x="7670" fg:w="406"/><text x="81.5258%" y="174.50">__ite..</text></g><g><title>sites (kappybara/pattern.py:111) (240 samples, 2.54%)</title><rect x="83.0349%" y="180" width="2.5432%" height="15" fill="rgb(237,122,38)" fg:x="7836" fg:w="240"/><text x="83.2849%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (48 samples, 0.51%)</title><rect x="86.1397%" y="164" width="0.5086%" height="15" fill="rgb(244,218,35)" fg:x="8129" fg:w="48"/><text x="86.3897%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (107 samples, 1.13%)</title><rect x="85.5780%" y="148" width="1.1338%" height="15" fill="rgb(240,68,47)" fg:x="8076" fg:w="107"/><text x="85.8280%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (15 samples, 0.16%)</title><rect x="87.0616%" y="164" width="0.1589%" height="15" fill="rgb(210,16,53)" fg:x="8216" fg:w="15"/><text x="87.3116%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (108 samples, 1.14%)</title><rect x="86.7119%" y="148" width="1.1444%" height="15" fill="rgb(235,124,12)" fg:x="8183" fg:w="108"/><text x="86.9619%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (60 samples, 0.64%)</title><rect x="87.2205%" y="164" width="0.6358%" height="15" fill="rgb(224,169,11)" fg:x="8231" fg:w="60"/><text x="87.4705%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (10 samples, 0.11%)</title><rect x="88.9584%" y="164" width="0.1060%" height="15" fill="rgb(250,166,2)" fg:x="8395" fg:w="10"/><text x="89.2084%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (140 samples, 1.48%)</title><rect x="87.8563%" y="148" width="1.4835%" height="15" fill="rgb(242,216,29)" fg:x="8291" fg:w="140"/><text x="88.1063%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (26 samples, 0.28%)</title><rect x="89.0643%" y="164" width="0.2755%" height="15" fill="rgb(230,116,27)" fg:x="8405" fg:w="26"/><text x="89.3143%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (54 samples, 0.57%)</title><rect x="89.3398%" y="148" width="0.5722%" height="15" fill="rgb(228,99,48)" fg:x="8431" fg:w="54"/><text x="89.5898%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (84 samples, 0.89%)</title><rect x="89.9120%" y="148" width="0.8901%" height="15" fill="rgb(253,11,6)" fg:x="8485" fg:w="84"/><text x="90.1620%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (126 samples, 1.34%)</title><rect x="93.0168%" y="164" width="1.3352%" height="15" fill="rgb(247,143,39)" fg:x="8778" fg:w="126"/><text x="93.2668%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (342 samples, 3.62%)</title><rect x="90.8022%" y="148" width="3.6240%" height="15" fill="rgb(236,97,10)" fg:x="8569" fg:w="342"/><text x="91.0522%" y="158.50">embe..</text></g><g><title>embeddings (kappybara/pattern.py:282) (49 samples, 0.52%)</title><rect x="94.4368%" y="148" width="0.5192%" height="15" fill="rgb(233,208,19)" fg:x="8912" fg:w="49"/><text x="94.6868%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (14 samples, 0.15%)</title><rect x="94.9560%" y="148" width="0.1484%" height="15" fill="rgb(216,164,2)" fg:x="8961" fg:w="14"/><text x="95.2060%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (8,529 samples, 90.38%)</title><rect x="4.8850%" y="132" width="90.3783%" height="15" fill="rgb(220,129,5)" fg:x="461" fg:w="8529"/><text x="5.1350%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (15 samples, 0.16%)</title><rect x="95.1044%" y="148" width="0.1589%" height="15" fill="rgb(242,17,10)" fg:x="8975" fg:w="15"/><text x="95.3544%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (27 samples, 0.29%)</title><rect x="95.2633%" y="132" width="0.2861%" height="15" fill="rgb(242,107,0)" fg:x="8990" fg:w="27"/><text x="95.5133%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (13 samples, 0.14%)</title><rect x="95.6448%" y="132" width="0.1378%" height="15" fill="rgb(251,28,31)" fg:x="9026" fg:w="13"/><text x="95.8948%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (238 samples, 2.52%)</title><rect x="95.7826%" y="132" width="2.5220%" height="15" fill="rgb(233,223,10)" fg:x="9039" fg:w="238"/><text x="96.0326%" y="142.50">_u..</text></g><g><title>__hash__ (kappybara/utils.py:30) (21 samples, 0.22%)</title><rect x="98.0820%" y="148" width="0.2225%" height="15" fill="rgb(215,21,27)" fg:x="9256" fg:w="21"/><text x="98.3320%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (15 samples, 0.16%)</title><rect x="99.0781%" y="148" width="0.1589%" height="15" fill="rgb(232,23,21)" fg:x="9350" fg:w="15"/><text x="99.3281%" y="158.50"></text></g><g><title>act (kappybara/system.py:65) (9,293 samples, 98.47%)</title><rect x="0.8583%" y="100" width="98.4741%" height="15" fill="rgb(244,5,23)" fg:x="81" fg:w="9293"/><text x="1.1083%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (8,919 samples, 94.51%)</title><rect x="4.8214%" y="116" width="94.5110%" height="15" fill="rgb(226,81,46)" fg:x="455" fg:w="8919"/><text x="5.0714%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (97 samples, 1.03%)</title><rect x="98.3045%" y="132" width="1.0279%" height="15" fill="rgb(247,70,30)" fg:x="9277" fg:w="97"/><text x="98.5545%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_ktam.py:23) (9,370 samples, 99.29%)</title><rect x="0.0530%" y="68" width="99.2900%" height="15" fill="rgb(212,68,19)" fg:x="5" fg:w="9370"/><text x="0.3030%" y="78.50">&lt;module&gt; (profile_ktam.py:23)</text></g><g><title>update (kappybara/system.py:70) (9,350 samples, 99.08%)</title><rect x="0.2649%" y="84" width="99.0781%" height="15" fill="rgb(240,187,13)" fg:x="25" fg:w="9350"/><text x="0.5149%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>&lt;module&gt; (profile_ktam.py:3) (10 samples, 0.11%)</title><rect x="99.3430%" y="68" width="0.1060%" height="15" fill="rgb(223,113,26)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.3430%" y="84" width="0.1060%" height="15" fill="rgb(206,192,2)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.3430%" y="100" width="0.1060%" height="15" fill="rgb(241,108,4)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.3430%" y="116" width="0.1060%" height="15" fill="rgb(247,173,49)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.3430%" y="132" width="0.1060%" height="15" fill="rgb(224,114,35)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.3430%" y="148" width="0.1060%" height="15" fill="rgb(245,159,27)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (10 samples, 0.11%)</title><rect x="99.3430%" y="164" width="0.1060%" height="15" fill="rgb(245,172,44)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (10 samples, 0.11%)</title><rect x="99.3430%" y="180" width="0.1060%" height="15" fill="rgb(236,23,11)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (10 samples, 0.11%)</title><rect x="99.3430%" y="196" width="0.1060%" height="15" fill="rgb(205,117,38)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (10 samples, 0.11%)</title><rect x="99.3430%" y="212" width="0.1060%" height="15" fill="rgb(237,72,25)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (10 samples, 0.11%)</title><rect x="99.3430%" y="228" width="0.1060%" height="15" fill="rgb(244,70,9)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (10 samples, 0.11%)</title><rect x="99.3430%" y="244" width="0.1060%" height="15" fill="rgb(217,125,39)" fg:x="9375" fg:w="10"/><text x="99.5930%" y="254.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (13 samples, 0.14%)</title><rect x="99.4490%" y="68" width="0.1378%" height="15" fill="rgb(235,36,10)" fg:x="9385" fg:w="13"/><text x="99.6990%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (17 samples, 0.18%)</title><rect x="99.5867%" y="68" width="0.1801%" height="15" fill="rgb(251,123,47)" fg:x="9398" fg:w="17"/><text x="99.8367%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (14 samples, 0.15%)</title><rect x="99.7669%" y="68" width="0.1484%" height="15" fill="rgb(221,13,13)" fg:x="9415" fg:w="14"/><text x="100.0169%" y="78.50"></text></g><g><title>all (9,437 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="9437"/><text x="0.2500%" y="62.50"></text></g></svg></svg>