<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="282" onload="init(evt)" viewBox="0 0 1200 282" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="282" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">py-spy record -o results/profile_heterodimerization_small_flamegraph.svg -- python profile_heterodimerization_small.py # commit 2b123c3</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="271.00"> </text><svg id="frames" x="10" width="1180" total_samples="4866"><g><title>&lt;module&gt; (profile_heterodimerization_small.py:1) (11 samples, 0.23%)</title><rect x="0.0000%" y="68" width="0.2261%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="11"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (11 samples, 0.23%)</title><rect x="0.0000%" y="84" width="0.2261%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="11"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (11 samples, 0.23%)</title><rect x="0.0000%" y="100" width="0.2261%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="11"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (11 samples, 0.23%)</title><rect x="0.0000%" y="116" width="0.2261%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="11"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (11 samples, 0.23%)</title><rect x="0.0000%" y="132" width="0.2261%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="11"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (11 samples, 0.23%)</title><rect x="0.0000%" y="148" width="0.2261%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="11"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (kappybara/kappa.py:6) (8 samples, 0.16%)</title><rect x="0.0617%" y="164" width="0.1644%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="8"/><text x="0.3117%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1360) (8 samples, 0.16%)</title><rect x="0.0617%" y="180" width="0.1644%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="8"/><text x="0.3117%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1331) (8 samples, 0.16%)</title><rect x="0.0617%" y="196" width="0.1644%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="8"/><text x="0.3117%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:935) (8 samples, 0.16%)</title><rect x="0.0617%" y="212" width="0.1644%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="8"/><text x="0.3117%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:999) (8 samples, 0.16%)</title><rect x="0.0617%" y="228" width="0.1644%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="8"/><text x="0.3117%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:488) (8 samples, 0.16%)</title><rect x="0.0617%" y="244" width="0.1644%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="8"/><text x="0.3117%" y="254.50"></text></g><g><title>heterodimerization_system (kappybara/examples.py:15) (5 samples, 0.10%)</title><rect x="0.2466%" y="84" width="0.1028%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="5"/><text x="0.4966%" y="94.50"></text></g><g><title>__init__ (kappybara/mixture.py:45) (5 samples, 0.10%)</title><rect x="0.2466%" y="100" width="0.1028%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="5"/><text x="0.4966%" y="110.50"></text></g><g><title>instantiate (kappybara/mixture.py:53) (5 samples, 0.10%)</title><rect x="0.2466%" y="116" width="0.1028%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="5"/><text x="0.4966%" y="126.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:12) (8 samples, 0.16%)</title><rect x="0.2261%" y="68" width="0.1644%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="8"/><text x="0.4761%" y="78.50"></text></g><g><title>act (kappybara/system.py:63) (8 samples, 0.16%)</title><rect x="0.4932%" y="100" width="0.1644%" height="15" fill="rgb(225,20,46)" fg:x="24" fg:w="8"/><text x="0.7432%" y="110.50"></text></g><g><title>select (kappybara/rule.py:89) (7 samples, 0.14%)</title><rect x="0.5138%" y="116" width="0.1439%" height="15" fill="rgb(210,31,41)" fg:x="25" fg:w="7"/><text x="0.7638%" y="126.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:113) (59 samples, 1.21%)</title><rect x="0.7193%" y="132" width="1.2125%" height="15" fill="rgb(221,200,47)" fg:x="35" fg:w="59"/><text x="0.9693%" y="142.50"></text></g><g><title>embeddings (kappybara/pattern.py:256) (31 samples, 0.64%)</title><rect x="2.3839%" y="148" width="0.6371%" height="15" fill="rgb(226,26,5)" fg:x="116" fg:w="31"/><text x="2.6339%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (14 samples, 0.29%)</title><rect x="6.9051%" y="164" width="0.2877%" height="15" fill="rgb(249,33,26)" fg:x="336" fg:w="14"/><text x="7.1551%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:258) (216 samples, 4.44%)</title><rect x="3.0210%" y="148" width="4.4390%" height="15" fill="rgb(235,183,28)" fg:x="147" fg:w="216"/><text x="3.2710%" y="158.50">embed..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.27%)</title><rect x="7.1928%" y="164" width="0.2672%" height="15" fill="rgb(221,5,38)" fg:x="350" fg:w="13"/><text x="7.4428%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (7 samples, 0.14%)</title><rect x="11.1180%" y="164" width="0.1439%" height="15" fill="rgb(247,18,42)" fg:x="541" fg:w="7"/><text x="11.3680%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:259) (198 samples, 4.07%)</title><rect x="7.4599%" y="148" width="4.0691%" height="15" fill="rgb(241,131,45)" fg:x="363" fg:w="198"/><text x="7.7099%" y="158.50">embe..</text></g><g><title>__hash__ (kappybara/utils.py:30) (13 samples, 0.27%)</title><rect x="11.2618%" y="164" width="0.2672%" height="15" fill="rgb(249,31,29)" fg:x="548" fg:w="13"/><text x="11.5118%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:262) (42 samples, 0.86%)</title><rect x="11.5701%" y="148" width="0.8631%" height="15" fill="rgb(225,111,53)" fg:x="563" fg:w="42"/><text x="11.8201%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:263) (34 samples, 0.70%)</title><rect x="12.4332%" y="148" width="0.6987%" height="15" fill="rgb(238,160,17)" fg:x="605" fg:w="34"/><text x="12.6832%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (13 samples, 0.27%)</title><rect x="15.3720%" y="164" width="0.2672%" height="15" fill="rgb(214,148,48)" fg:x="748" fg:w="13"/><text x="15.6220%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:264) (134 samples, 2.75%)</title><rect x="13.1319%" y="148" width="2.7538%" height="15" fill="rgb(232,36,49)" fg:x="639" fg:w="134"/><text x="13.3819%" y="158.50">em..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.25%)</title><rect x="15.6391%" y="164" width="0.2466%" height="15" fill="rgb(209,103,24)" fg:x="761" fg:w="12"/><text x="15.8891%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:266) (100 samples, 2.06%)</title><rect x="15.8857%" y="148" width="2.0551%" height="15" fill="rgb(229,88,8)" fg:x="773" fg:w="100"/><text x="16.1357%" y="158.50">e..</text></g><g><title>embeds_in (kappybara/pattern.py:169) (17 samples, 0.35%)</title><rect x="19.7904%" y="164" width="0.3494%" height="15" fill="rgb(213,181,19)" fg:x="963" fg:w="17"/><text x="20.0404%" y="174.50"></text></g><g><title>embeds_in (kappybara/pattern.py:171) (51 samples, 1.05%)</title><rect x="20.1397%" y="164" width="1.0481%" height="15" fill="rgb(254,191,54)" fg:x="980" fg:w="51"/><text x="20.3897%" y="174.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (54 samples, 1.11%)</title><rect x="22.9552%" y="180" width="1.1097%" height="15" fill="rgb(241,83,37)" fg:x="1117" fg:w="54"/><text x="23.2052%" y="190.50"></text></g><g><title>sites (kappybara/pattern.py:109) (39 samples, 0.80%)</title><rect x="26.2433%" y="196" width="0.8015%" height="15" fill="rgb(233,36,39)" fg:x="1277" fg:w="39"/><text x="26.4933%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:174) (503 samples, 10.34%)</title><rect x="21.2084%" y="164" width="10.3370%" height="15" fill="rgb(226,3,54)" fg:x="1032" fg:w="503"/><text x="21.4584%" y="174.50">embeds_in (kapp..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (364 samples, 7.48%)</title><rect x="24.0649%" y="180" width="7.4805%" height="15" fill="rgb(245,192,40)" fg:x="1171" fg:w="364"/><text x="24.3149%" y="190.50">__iter__ (..</text></g><g><title>sites (kappybara/pattern.py:111) (219 samples, 4.50%)</title><rect x="27.0448%" y="196" width="4.5006%" height="15" fill="rgb(238,167,29)" fg:x="1316" fg:w="219"/><text x="27.2948%" y="206.50">sites..</text></g><g><title>embeds_in (kappybara/pattern.py:175) (73 samples, 1.50%)</title><rect x="31.5454%" y="164" width="1.5002%" height="15" fill="rgb(232,182,51)" fg:x="1535" fg:w="73"/><text x="31.7954%" y="174.50"></text></g><g><title>__getitem__ (kappybara/pattern.py:100) (34 samples, 0.70%)</title><rect x="33.9088%" y="180" width="0.6987%" height="15" fill="rgb(231,60,39)" fg:x="1650" fg:w="34"/><text x="34.1588%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:177) (97 samples, 1.99%)</title><rect x="33.0662%" y="164" width="1.9934%" height="15" fill="rgb(208,69,12)" fg:x="1609" fg:w="97"/><text x="33.3162%" y="174.50">e..</text></g><g><title>__getitem__ (kappybara/pattern.py:99) (22 samples, 0.45%)</title><rect x="34.6075%" y="180" width="0.4521%" height="15" fill="rgb(235,93,37)" fg:x="1684" fg:w="22"/><text x="34.8575%" y="190.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (96 samples, 1.97%)</title><rect x="44.0608%" y="180" width="1.9729%" height="15" fill="rgb(213,116,39)" fg:x="2144" fg:w="96"/><text x="44.3108%" y="190.50">_..</text></g><g><title>embeds_in (kappybara/pattern.py:66) (9 samples, 0.18%)</title><rect x="46.0337%" y="180" width="0.1850%" height="15" fill="rgb(222,207,29)" fg:x="2240" fg:w="9"/><text x="46.2837%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:50) (8 samples, 0.16%)</title><rect x="46.6502%" y="196" width="0.1644%" height="15" fill="rgb(206,96,30)" fg:x="2270" fg:w="8"/><text x="46.9002%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:68) (74 samples, 1.52%)</title><rect x="46.2187%" y="180" width="1.5208%" height="15" fill="rgb(218,138,4)" fg:x="2249" fg:w="74"/><text x="46.4687%" y="190.50"></text></g><g><title>stated (kappybara/pattern.py:52) (45 samples, 0.92%)</title><rect x="46.8146%" y="196" width="0.9248%" height="15" fill="rgb(250,191,14)" fg:x="2278" fg:w="45"/><text x="47.0646%" y="206.50"></text></g><g><title>bound (kappybara/pattern.py:54) (12 samples, 0.25%)</title><rect x="49.4246%" y="196" width="0.2466%" height="15" fill="rgb(239,60,40)" fg:x="2405" fg:w="12"/><text x="49.6746%" y="206.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (15 samples, 0.31%)</title><rect x="51.6852%" y="212" width="0.3083%" height="15" fill="rgb(206,27,48)" fg:x="2515" fg:w="15"/><text x="51.9352%" y="222.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (6 samples, 0.12%)</title><rect x="53.8841%" y="228" width="0.1233%" height="15" fill="rgb(225,35,8)" fg:x="2622" fg:w="6"/><text x="54.1341%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:57) (226 samples, 4.64%)</title><rect x="49.6712%" y="196" width="4.6445%" height="15" fill="rgb(250,213,24)" fg:x="2417" fg:w="226"/><text x="49.9212%" y="206.50">bound..</text></g><g><title>__eq__ (kappybara/utils.py:33) (113 samples, 2.32%)</title><rect x="51.9934%" y="212" width="2.3222%" height="15" fill="rgb(247,123,22)" fg:x="2530" fg:w="113"/><text x="52.2434%" y="222.50">_..</text></g><g><title>__hash__ (kappybara/utils.py:30) (15 samples, 0.31%)</title><rect x="54.0074%" y="228" width="0.3083%" height="15" fill="rgb(231,138,38)" fg:x="2628" fg:w="15"/><text x="54.2574%" y="238.50"></text></g><g><title>bound (kappybara/pattern.py:58) (115 samples, 2.36%)</title><rect x="54.3157%" y="196" width="2.3633%" height="15" fill="rgb(231,145,46)" fg:x="2643" fg:w="115"/><text x="54.5657%" y="206.50">bo..</text></g><g><title>bound (kappybara/pattern.py:59) (47 samples, 0.97%)</title><rect x="56.6790%" y="196" width="0.9659%" height="15" fill="rgb(251,118,11)" fg:x="2758" fg:w="47"/><text x="56.9290%" y="206.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (9 samples, 0.18%)</title><rect x="57.6449%" y="196" width="0.1850%" height="15" fill="rgb(217,147,25)" fg:x="2805" fg:w="9"/><text x="57.8949%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:69) (522 samples, 10.73%)</title><rect x="47.7394%" y="180" width="10.7275%" height="15" fill="rgb(247,81,37)" fg:x="2323" fg:w="522"/><text x="47.9894%" y="190.50">embeds_in (kappy..</text></g><g><title>coupled (kappybara/pattern.py:64) (31 samples, 0.64%)</title><rect x="57.8298%" y="196" width="0.6371%" height="15" fill="rgb(209,12,38)" fg:x="2814" fg:w="31"/><text x="58.0798%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:73) (8 samples, 0.16%)</title><rect x="58.4875%" y="180" width="0.1644%" height="15" fill="rgb(227,1,9)" fg:x="2846" fg:w="8"/><text x="58.7375%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:32) (8 samples, 0.16%)</title><rect x="59.1862%" y="196" width="0.1644%" height="15" fill="rgb(248,47,43)" fg:x="2880" fg:w="8"/><text x="59.4362%" y="206.50"></text></g><g><title>embeds_in (kappybara/pattern.py:74) (88 samples, 1.81%)</title><rect x="58.6519%" y="180" width="1.8085%" height="15" fill="rgb(221,10,30)" fg:x="2854" fg:w="88"/><text x="58.9019%" y="190.50">e..</text></g><g><title>__eq__ (kappybara/utils.py:33) (54 samples, 1.11%)</title><rect x="59.3506%" y="196" width="1.1097%" height="15" fill="rgb(210,229,1)" fg:x="2888" fg:w="54"/><text x="59.6006%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (8 samples, 0.16%)</title><rect x="60.2959%" y="212" width="0.1644%" height="15" fill="rgb(222,148,37)" fg:x="2934" fg:w="8"/><text x="60.5459%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:75) (81 samples, 1.66%)</title><rect x="60.4603%" y="180" width="1.6646%" height="15" fill="rgb(234,67,33)" fg:x="2942" fg:w="81"/><text x="60.7103%" y="190.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (44 samples, 0.90%)</title><rect x="61.2207%" y="196" width="0.9042%" height="15" fill="rgb(247,98,35)" fg:x="2979" fg:w="44"/><text x="61.4707%" y="206.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.25%)</title><rect x="61.8783%" y="212" width="0.2466%" height="15" fill="rgb(247,138,52)" fg:x="3011" fg:w="12"/><text x="62.1283%" y="222.50"></text></g><g><title>embeds_in (kappybara/pattern.py:76) (30 samples, 0.62%)</title><rect x="62.1249%" y="180" width="0.6165%" height="15" fill="rgb(213,79,30)" fg:x="3023" fg:w="30"/><text x="62.3749%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:81) (55 samples, 1.13%)</title><rect x="62.7620%" y="180" width="1.1303%" height="15" fill="rgb(246,177,23)" fg:x="3054" fg:w="55"/><text x="63.0120%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:83) (24 samples, 0.49%)</title><rect x="63.8923%" y="180" width="0.4932%" height="15" fill="rgb(230,62,27)" fg:x="3109" fg:w="24"/><text x="64.1423%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:84) (5 samples, 0.10%)</title><rect x="64.3855%" y="180" width="0.1028%" height="15" fill="rgb(216,154,8)" fg:x="3133" fg:w="5"/><text x="64.6355%" y="190.50"></text></g><g><title>embeds_in (kappybara/pattern.py:178) (1,603 samples, 32.94%)</title><rect x="35.0596%" y="164" width="32.9429%" height="15" fill="rgb(244,35,45)" fg:x="1706" fg:w="1603"/><text x="35.3096%" y="174.50">embeds_in (kappybara/pattern.py:178)</text></g><g><title>sites (kappybara/pattern.py:111) (171 samples, 3.51%)</title><rect x="64.4883%" y="180" width="3.5142%" height="15" fill="rgb(251,115,12)" fg:x="3138" fg:w="171"/><text x="64.7383%" y="190.50">sit..</text></g><g><title>embeddings (kappybara/pattern.py:267) (2,464 samples, 50.64%)</title><rect x="17.9408%" y="148" width="50.6371%" height="15" fill="rgb(240,54,50)" fg:x="873" fg:w="2464"/><text x="18.1908%" y="158.50">embeddings (kappybara/pattern.py:267)</text></g><g><title>embeds_in (kappybara/pattern.py:179) (28 samples, 0.58%)</title><rect x="68.0025%" y="164" width="0.5754%" height="15" fill="rgb(233,84,52)" fg:x="3309" fg:w="28"/><text x="68.2525%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:268) (6 samples, 0.12%)</title><rect x="68.5779%" y="148" width="0.1233%" height="15" fill="rgb(207,117,47)" fg:x="3337" fg:w="6"/><text x="68.8279%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (24 samples, 0.49%)</title><rect x="70.3864%" y="164" width="0.4932%" height="15" fill="rgb(249,43,39)" fg:x="3425" fg:w="24"/><text x="70.6364%" y="174.50"></text></g><g><title>sites (kappybara/pattern.py:109) (36 samples, 0.74%)</title><rect x="72.5853%" y="180" width="0.7398%" height="15" fill="rgb(209,38,44)" fg:x="3532" fg:w="36"/><text x="72.8353%" y="190.50"></text></g><g><title>embeddings (kappybara/pattern.py:271) (350 samples, 7.19%)</title><rect x="68.7423%" y="148" width="7.1928%" height="15" fill="rgb(236,212,23)" fg:x="3345" fg:w="350"/><text x="68.9923%" y="158.50">embeddings..</text></g><g><title>__iter__ (kappybara/pattern.py:97) (246 samples, 5.06%)</title><rect x="70.8796%" y="164" width="5.0555%" height="15" fill="rgb(242,79,21)" fg:x="3449" fg:w="246"/><text x="71.1296%" y="174.50">__iter..</text></g><g><title>sites (kappybara/pattern.py:111) (127 samples, 2.61%)</title><rect x="73.3251%" y="180" width="2.6099%" height="15" fill="rgb(211,96,35)" fg:x="3568" fg:w="127"/><text x="73.5751%" y="190.50">si..</text></g><g><title>__getitem__ (kappybara/pattern.py:100) (18 samples, 0.37%)</title><rect x="76.5927%" y="164" width="0.3699%" height="15" fill="rgb(253,215,40)" fg:x="3727" fg:w="18"/><text x="76.8427%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:272) (51 samples, 1.05%)</title><rect x="75.9351%" y="148" width="1.0481%" height="15" fill="rgb(211,81,21)" fg:x="3695" fg:w="51"/><text x="76.1851%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:62) (6 samples, 0.12%)</title><rect x="77.1887%" y="164" width="0.1233%" height="15" fill="rgb(208,190,38)" fg:x="3756" fg:w="6"/><text x="77.4387%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:273) (47 samples, 0.97%)</title><rect x="76.9831%" y="148" width="0.9659%" height="15" fill="rgb(235,213,38)" fg:x="3746" fg:w="47"/><text x="77.2331%" y="158.50"></text></g><g><title>coupled (kappybara/pattern.py:64) (31 samples, 0.64%)</title><rect x="77.3120%" y="164" width="0.6371%" height="15" fill="rgb(237,122,38)" fg:x="3762" fg:w="31"/><text x="77.5620%" y="174.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (5 samples, 0.10%)</title><rect x="78.6272%" y="164" width="0.1028%" height="15" fill="rgb(244,218,35)" fg:x="3826" fg:w="5"/><text x="78.8772%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:274) (52 samples, 1.07%)</title><rect x="77.9490%" y="148" width="1.0686%" height="15" fill="rgb(240,68,47)" fg:x="3793" fg:w="52"/><text x="78.1990%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:30) (14 samples, 0.29%)</title><rect x="78.7300%" y="164" width="0.2877%" height="15" fill="rgb(210,16,53)" fg:x="3831" fg:w="14"/><text x="78.9800%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:275) (17 samples, 0.35%)</title><rect x="79.0177%" y="148" width="0.3494%" height="15" fill="rgb(235,124,12)" fg:x="3845" fg:w="17"/><text x="79.2677%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:276) (25 samples, 0.51%)</title><rect x="79.3670%" y="148" width="0.5138%" height="15" fill="rgb(224,169,11)" fg:x="3862" fg:w="25"/><text x="79.6170%" y="158.50"></text></g><g><title>__eq__ (kappybara/utils.py:33) (36 samples, 0.74%)</title><rect x="81.1961%" y="164" width="0.7398%" height="15" fill="rgb(250,166,2)" fg:x="3951" fg:w="36"/><text x="81.4461%" y="174.50"></text></g><g><title>embeddings (kappybara/pattern.py:277) (103 samples, 2.12%)</title><rect x="79.8808%" y="148" width="2.1167%" height="15" fill="rgb(242,216,29)" fg:x="3887" fg:w="103"/><text x="80.1308%" y="158.50">e..</text></g><g><title>embeddings (kappybara/pattern.py:282) (20 samples, 0.41%)</title><rect x="82.0592%" y="148" width="0.4110%" height="15" fill="rgb(230,116,27)" fg:x="3993" fg:w="20"/><text x="82.3092%" y="158.50"></text></g><g><title>embeddings (kappybara/pattern.py:284) (42 samples, 0.86%)</title><rect x="82.4702%" y="148" width="0.8631%" height="15" fill="rgb(228,99,48)" fg:x="4013" fg:w="42"/><text x="82.7202%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:115) (3,966 samples, 81.50%)</title><rect x="1.9318%" y="132" width="81.5043%" height="15" fill="rgb(253,11,6)" fg:x="94" fg:w="3966"/><text x="2.1818%" y="142.50">_update_embeddings (kappybara/mixture.py:115)</text></g><g><title>embeddings (kappybara/pattern.py:285) (5 samples, 0.10%)</title><rect x="83.3333%" y="148" width="0.1028%" height="15" fill="rgb(247,143,39)" fg:x="4055" fg:w="5"/><text x="83.5833%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:116) (23 samples, 0.47%)</title><rect x="83.4361%" y="132" width="0.4727%" height="15" fill="rgb(236,97,10)" fg:x="4060" fg:w="23"/><text x="83.6861%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:117) (11 samples, 0.23%)</title><rect x="83.9088%" y="132" width="0.2261%" height="15" fill="rgb(233,208,19)" fg:x="4083" fg:w="11"/><text x="84.1588%" y="142.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:118) (8 samples, 0.16%)</title><rect x="84.1348%" y="132" width="0.1644%" height="15" fill="rgb(216,164,2)" fg:x="4094" fg:w="8"/><text x="84.3848%" y="142.50"></text></g><g><title>&lt;lambda&gt; (kappybara/mixture.py:113) (147 samples, 3.02%)</title><rect x="90.7727%" y="148" width="3.0210%" height="15" fill="rgb(220,129,5)" fg:x="4417" fg:w="147"/><text x="91.0227%" y="158.50">&lt;la..</text></g><g><title>__hash__ (kappybara/utils.py:29) (17 samples, 0.35%)</title><rect x="93.7937%" y="148" width="0.3494%" height="15" fill="rgb(242,17,10)" fg:x="4564" fg:w="17"/><text x="94.0437%" y="158.50"></text></g><g><title>_update_embeddings (kappybara/mixture.py:119) (516 samples, 10.60%)</title><rect x="84.2992%" y="132" width="10.6042%" height="15" fill="rgb(242,107,0)" fg:x="4102" fg:w="516"/><text x="84.5492%" y="142.50">_update_embeddi..</text></g><g><title>__hash__ (kappybara/utils.py:30) (37 samples, 0.76%)</title><rect x="94.1430%" y="148" width="0.7604%" height="15" fill="rgb(251,28,31)" fg:x="4581" fg:w="37"/><text x="94.3930%" y="158.50"></text></g><g><title>__hash__ (kappybara/utils.py:29) (37 samples, 0.76%)</title><rect x="98.3354%" y="148" width="0.7604%" height="15" fill="rgb(233,223,10)" fg:x="4785" fg:w="37"/><text x="98.5854%" y="158.50"></text></g><g><title>&lt;module&gt; (profile_heterodimerization_small.py:14) (4,815 samples, 98.95%)</title><rect x="0.3905%" y="68" width="98.9519%" height="15" fill="rgb(215,21,27)" fg:x="19" fg:w="4815"/><text x="0.6405%" y="78.50">&lt;module&gt; (profile_heterodimerization_small.py:14)</text></g><g><title>update (kappybara/system.py:70) (4,813 samples, 98.91%)</title><rect x="0.4316%" y="84" width="98.9108%" height="15" fill="rgb(232,23,21)" fg:x="21" fg:w="4813"/><text x="0.6816%" y="94.50">update (kappybara/system.py:70)</text></g><g><title>act (kappybara/system.py:65) (4,802 samples, 98.68%)</title><rect x="0.6576%" y="100" width="98.6848%" height="15" fill="rgb(244,5,23)" fg:x="32" fg:w="4802"/><text x="0.9076%" y="110.50">act (kappybara/system.py:65)</text></g><g><title>apply_update (kappybara/mixture.py:110) (4,799 samples, 98.62%)</title><rect x="0.7193%" y="116" width="98.6231%" height="15" fill="rgb(226,81,46)" fg:x="35" fg:w="4799"/><text x="0.9693%" y="126.50">apply_update (kappybara/mixture.py:110)</text></g><g><title>_update_embeddings (kappybara/mixture.py:120) (216 samples, 4.44%)</title><rect x="94.9034%" y="132" width="4.4390%" height="15" fill="rgb(247,70,30)" fg:x="4618" fg:w="216"/><text x="95.1534%" y="142.50">_upda..</text></g><g><title>__hash__ (kappybara/utils.py:30) (12 samples, 0.25%)</title><rect x="99.0958%" y="148" width="0.2466%" height="15" fill="rgb(212,68,19)" fg:x="4822" fg:w="12"/><text x="99.3458%" y="158.50"></text></g><g><title>__iter__ (kappybara/pattern.py:96) (6 samples, 0.12%)</title><rect x="99.3424%" y="68" width="0.1233%" height="15" fill="rgb(240,187,13)" fg:x="4834" fg:w="6"/><text x="99.5924%" y="78.50"></text></g><g><title>__iter__ (kappybara/pattern.py:97) (6 samples, 0.12%)</title><rect x="99.4657%" y="68" width="0.1233%" height="15" fill="rgb(223,113,26)" fg:x="4840" fg:w="6"/><text x="99.7157%" y="78.50"></text></g><g><title>sites (kappybara/pattern.py:109) (10 samples, 0.21%)</title><rect x="99.5890%" y="68" width="0.2055%" height="15" fill="rgb(206,192,2)" fg:x="4846" fg:w="10"/><text x="99.8390%" y="78.50"></text></g><g><title>all (4,866 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="4866"/><text x="0.2500%" y="62.50"></text></g><g><title>sites (kappybara/pattern.py:111) (10 samples, 0.21%)</title><rect x="99.7945%" y="68" width="0.2055%" height="15" fill="rgb(247,173,49)" fg:x="4856" fg:w="10"/><text x="100.0445%" y="78.50"></text></g></svg></svg>